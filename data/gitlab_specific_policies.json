{
  "documents": [
    {
      "id": "anti-harassment-policy",
      "title": "Anti-Harassment Policy",
      "url": "https://handbook.gitlab.com/handbook/people-group/anti-harassment/",
      "section": "People Group Policies",
      "content": "Anti-Harassment Policy Everyone at GitLab has a responsibility to prevent and stop harassment. Learn more about our Anti-harassment policy. This is a Secure Document Per the stated Roles  Responsibilities, changes to this page must be approved or merged by a code owner. All contributions are welcome and encouraged. Introduction Everyone at GitLab has a responsibility to prevent and stop harassment. Working remotely means that the majority of our interactions are by video call or written communication, such as email or shared documents. The exceptions to this are team summits, attending conferences together, and local team meetups. No matter the method of communication, it is expected that everyone will contribute to an inclusive and collaborative working environment and respect each other at all times. Team member behavior is not limited to internal interactions with each other. Our Anti-harassment policy applies to GitLab team members interaction with customers, vendors and community members. Should you become aware of or witness any form of harassment or behavior that violates this policy or our company values, please report the incident directly to the Chief People Officer, Team Member Relations, or a People Business Partner immediately for thorough investigation. Perspective GitLab is a global organization and our team is distributed all over the world, so we strive to ensure our team is fully aligned with GitLabs no tolerance harassment policy despite their location. We want everyone to feel confident and comfortable communicating concerns. GitLab respects, appreciates, understands and supports every aspect of diversity. We aim to continuously foster a globally aware team. Scope This policy applies to all team members of GitLab, whether contractor or employee, in all locations. There are local labor laws in every country and in the case of the United States, state laws, that must be followed when handling, reporting and investigating incidents of harassment. The People Business Partner team and legal counsel, if required, in each of those countries will be called upon to ensure compliance and the appropriate legal processes and procedures are followed. Specific country requirements for employees (subject to changes in employment law) are listed in the Country  US State-Specific Requirements section and will be updated regularly. All individual contributors, managers, and leaders will be subject to disciplinary action, up to and including termination, for any act of harassment they commit. Roles and Responsibilities Role Responsibility GitLab Team Members Responsible for following the requirements in these policies People Ops Responsible for implementing and executing these policies Legal  People Ops Management (Code Owners) Responsible for approving significant changes and exceptions to these policies Ethics  Compliance, Legal Ops Responsible for administrating related training Types of Harassment The following are considered forms of harassment and will not be tolerated by GitLab: Sexual Harassment Sexual harassment is considered unwelcome conduct of a sexual nature that is sufficiently persistent or offensive enough to interfere with the receivers job performance or create an intimidating, hostile or offensive working environment. Sexual harassment encompasses a wide range of conduct. Examples of misconduct include, but may not be limited to, the following actions: Physical assaults or the attempt to commit an assault of a sexual nature. This physical conduct can include touching, pinching, patting, grabbing, brushing against or poking another team members body. Unwelcome sexual advances, propositions or other sexual comments, such as sexually oriented gestures, noises, remarks, jokes, or comments about a persons sexuality or sexual experience. Preferential treatment or promises of preferential treatment to a team member for submitting to sexual conduct, including soliciting or attempting to solicit any team member to engage in sexual activity for compensation or reward. Subjecting, or threats of subjecting a team member to unwelcome sexual attention or conduct or intentionally making performance of the team members role more difficult because of that team members sex. Creating displays, communications, or publications that include content of a sexually offensive nature. Purposely misgendering people, such as consistently referring to someone as he after repeated requests to use she or vice versa. Sexual harassment is unlawful and is considered a form of team member misconduct. Sanctions will be enforced against individuals engaging in sexual harassment and against supervisory and managerial personnel who knowingly allow such behavior to continue. Any retaliation against an individual who complains of sexual harassment or who testifies or assists in any proceeding under the law is unlawful. Discrimination Having a diverse workforce, made up of team members who bring a wide variety of skills, abilities, experiences and perspectives, is essential to our success. We are committed to the principles of equal opportunity, inclusion, and respect. All employment-related decisions must be based on company needs, job requirements, and individual qualifications. Always take full advantage of what our team members have to offer; listen and be inclusive. We do not tolerate discrimination against anyone, including team members, customers, business partners, or other stakeholders. Any form of discrimination towards an individual is strictly prohibited, including: On the basis of race (includes national origin or ancestry, ethnicity, national origin or ethnic characteristics; interracial marriage or association; traits historically associated with race, including hair texture, protective hairstyles, and any other national origin or ancestry as specified by a complainant in a complaint), color, religion (including all aspects of religious observance and practice, as well as belief or lack of religious belief), sex (including pregnancy, childbirth and related medical conditions; breastfeeding; sex assigned at birth; gender identity or gender expression; affectional or sexual orientation, including heterosexuality, homosexuality, bisexuality, and asexuality; and differences of sex development, variations of sex characteristics, or other intersex characteristics), age, disability, HIV status, marital status, past or present military service, life expectancy, or any other status protected by the laws or regulations in the locations where we operate. We comply with laws regarding employment of immigrants and non-citizens and provide equal employment opportunity to everyone who is legally authorized to work in the applicable country. We provide reasonable accommodations to individuals with disabilities and remove any artificial barriers to success. Report suspected discrimination right away and never retaliate against anyone who raises a good faith belief that unlawful discrimination has occurred. If you believe you have been discriminated against or witnessed discriminatory practices, please contact the Chief People Officer, a People Business Partner, or the Team Member Relations Specialist to initiate an investigation into the behavior. GitLab has also engaged Lighthouse Services to provide anonymous reporting methods, as described in the How to Report Violations section. Bullying / Workplace Violence GitLab does not tolerate violent acts or threats of violence. The company will not tolerate fighting, bullying, coercion, or use of abusive or threatening words directed to, about, or against a co-worker, lead, manager, executive, candidate, client/customer, vendor, contributor, or any other person. No individual employed by GitLab should commit or threaten to commit any violent act or discuss committing such offenses, even in a joking manner. Retaliation Retaliation of any sort for filing a claim of harassment will not be tolerated. If you believe you have been retaliated against, please contact the Chief People Officer, Team Member Relations or a People Business Partner to initiate an investigation. Speaking up during a public situation If someone messes up, people are encouraged to speak up publicly and within the moment, in order to let that person and others know that what happened was not inclusive behavior. This makes for a situation from which all parties can learn, and is one which promotes understanding. Additionally it makes it possible for that person to de-escalate the situation by correcting themselves and apologizing. This does not ensure there will be no consequences. However, it will greatly reduce the chance of escalation and has the potential to help a situation become comfortable and inclusive again. Reporting a Physical Threat If a threat is made against you or someone else that makes you or another team member question their safety due to an issue, merge request, email or other work related matters do not hesitate to initiate the following process: Contact local law enforcement. Note the proper number to contact in your locality and whether the emergency, or non-emergency number should be called. Notify the People Operations Team via a HelpLab request. A private slack channel may then be opened with your People Business Partner, People Operations Team member, Team Member Relations, Manager, and the security team helping with the situation. The following steps may be taken based on the threat: Internal threat assessment Temporary accommodation (friends, family, hotel, etc.) Transportation to alternate location (stay with family/friends for example) Time off from work/LOA Personal Security Detail The above can be triggered by the People Operations Team, Manager, Team Member Relations, or People Business Partner based on their knowledge of the threat. Whenever it is safe to do so, please go through the normal permissions work flow, however if a threat is credible and potentially imminent, immediate action may be taken before the approvals have been put in place. The Sr. Director of Security will advise when it is best to halt any of the above tasks. Reporting Alleged Harassment Any individual who believes they have been the target of harassment of any kind is encouraged to immediately and directly address the harasser, letting them know that their behavior is unwelcome, offensive, and must stop immediately. If they do not wish to address the harasser directly or the behavior doesnt cease, they should report the misconduct to the Chief People Officer, Team Member Relations or a People Business Partner. Once reported, an impartial investigation will be conducted by a People Business Partner or by an independent third party, depending on the severity and circumstances of the complaint. Individual(s) reporting an incident or pattern of behavior will be asked to provide a written account, including any action(s) causing concern, the dates and times such actions occurred, and the names of anyone involved, including the participants and witnesses. All complaints or concerns of alleged harassment or discrimination will be taken seriously and handled confidentially. The Role of Managers If managers become aware of misconduct, they must deal with any allegations expeditiously, seriously, confidentially, and fairly, whether or not there has been a written or formal complaint made to People Business partner. Informed managers are expected to: Take all complaints or concerns of alleged harassment seriously no matter how minor or who is involved. Ensure that any form of harassment or misconduct is immediately reported to People Business Partner. Take appropriate action to prevent retaliation, or the alleged misconduct from recurring, during and after an investigation. Managers who knowingly allow or tolerate any form of harassment or retaliation, including the failure to immediately report such misconduct to People Business Partner, are in violation of this policy and subject to disciplinary action, including termination. The Role of Individual Contributors All employees have the responsibility to help create and maintain a work environment free of bullying and harassment and can help by: Being aware of how their own behavior may affect others, and changing it if necessary. Treating their colleagues with dignity and respect. Taking a stand if they think inappropriate jokes or comments are being made to others. Making it clear to others where they find their behavior unacceptable. Intervening, if possible, to stop harassment or bullying from occurring. Reporting promptly to their manager or the People Business Partner any incident of bullying or harassment witnessed by them. The Role of People Business Partners The Chief People Officer and People Business Partners are responsible for: Ensuring that any individual filing a complaint and any accused individual(s) are made aware of the seriousness of misconduct. Explaining GitLabs no tolerance harassment policy and investigation procedures to all individuals included in a complaint. Arranging for an immediate investigation of alleged misconduct and the preparation of a written report summarizing the results of the investigation and making recommendations for remediation to designated company officials. Notifying appropriate authorities (police, FBI, country specific bureaus) when criminal activities are alleged. Exploring informal means of resolving potential harassment if a written (formal) complaint is not made when verbal allegations are shared. Classification of disciplinary action All individual team members, managers, and leaders will be subject to disciplinary action, up to and including termination, for any act of harassment they commit. Although disciplinary action will be specific to each case, it can generally be classified into 4 levels: Level 1 First time occurrences of inappropriate behavior. An act out of character. After formal investigation, coworkers still feel comfortable working with the offender. Suspension (Paid/Unpaid based on country) Formal apology towards inflicted parties Level 2 Recurring socially inappropriate behavior. Suspension (Paid/Unpaid based on country) Mandatory course on Inclusivity Formal apology towards inflicted parties Written admonition Potential transfer to another team Potential of termination Level 3 Major infraction, including retaliation, or recurring socially inappropriate behavior after a written admonition. Termination of employment Level 4 Serious cases, including any criminal offence. Termination of employment Reported to the Police/Authorities Training  Guidance Training and guidance on understanding, preventing, and dealing with discrimination and sexual harassment will be provided to both managers and individual team members. The courses and the related enrollment logic can be found here. This training will be provided on a regular cadence, consistent with local requirements, and/or when new legal requirements are introduced. Country  US State-Specific Requirements GitLab BV (The Netherlands) Complaint Procedure If attempts to resolve the problem in an informal manner prove insufficient or if these attempts were refused or proved to be ineffective, the victim may follow the procedure below: Write a formal complaint and send it to the Chief People Officer or the People Business Partner. When the Chief People Officer or the People Business Partner receives the complaint, they must immediately handle the written complaint. The Chief People Officer or the People Business Partner shall ensure that the complaint is included in a dated document within a reasonable period of time, and includes the statements of the victim and any witnesses, as well as the outcome of any mediation. The victim and the witnesses receive a copy of their statement. A copy of the complaint will immediately be handed over to the responsible person within GitLab. After submission of the complaint to the responsible person within GitLab, an investigation will be initiated. This investigation may be conducted by a third (independent) party, depending on the complaint itself. After the investigation, the conclusion and a proposal for appropriate measures will be handed over to the responsible person within GitLab. GitLab will take the appropriate measures. Sanctions Without prejudice to the provisions that may arise from a judicial process instituted by the victim, one or more of the following sanctions shall be imposed on the person guilty of undesirable conduct: A written admonition. Transfer to another department. Termination of the agreement. GitLab shall impose, by registered letter and within five working days, the sanctions imposed upon the person who has been guilty of undesirable behavior. In case an employee abuses this complaint procedure, the above sanctions may also apply for the employee. GitLab BV (Belgium) Psychosocial Intervention GitLab has engaged with an external health and safety service called Mensura who are responsible for handling any complaints of harassment that are received but can not be resolved informally and internally. Team members in Belgium may contact this service if they wish and make a request for an informal or formal psychosocial intervention. A request for a formal intervention should include the following: a precise description of the constituent facts of violence, or psychological or sexual harassment at work, according to the Employee, when and where each of the events took place, the identity of the person(s) involved, the request to the Employer to take appropriate measures to put an end to the events. The psychosocial intervention advisor will investigate further and provide a report to the employee and People Business Partner with a recommended course of action. GitLab GK (Japan) Protection from Power Harassment Power harassment is defined as any act by a person using his/her authority in the workplace, such as job position or human relationship with a team member, beyond the appropriate scope of business conduct, which causes such team member mental distress or physical pain or degradation of the working environment. The law defines power harassment as remarks or behaviour by people taking advantage of their superior position that go beyond business necessity, thereby harming the workplace environment. GitLab expressly prohibits any behaviour toward team members that falls within the definition of power harassment. Depending on the individual, a person may feel dissatisfaction when given the instructions, advice, or guidance necessary in the ordinary course of business. In such cases where the actions are conducted within the scope of appropriate business practice, they should not fall under the category of power harassment. Examples of power harassment include, but may not be limited to: assault or injury (physical abuse) threats, defamation, insult or slander (mental abuse) isolation, ostracization or neglect (cutting them off from human relationships) forcing a team member to perform certain tasks, which are clearly unnecessary for the business or impossible to be performed or interrupting their normal duties (excessive work demands) ordering a team member to perform menial tasks which are far below the team members ability or experience and do not provide any work at all for the team member relevant to the business (insufficient work demands) excessively inquiring into the private affairs of a team member (invasion of privacy) Team members who feel that they may have been subjected to power harassment may bring their complaints to their People Business Partner, who will engage the appropriate internal consultation services and respond to claims. GitLab is prohibited from dismissing or treating unfairly any team members who report harassment cases or cooperate in an investigation or consultation process. Prohibition of Sexual Harassment Team members are prohibited from any activities that cause disadvantage or discomfort to other employees or that are damaging to the work environment by way of speech or behaviour of a sexual nature. GitLab shall take all necessary measures in managing employment to prevent sexual harassment at the workplace. Prohibition of Harassment Due to Pregnancy, Childbirth, Child Care Leave, or Family Care Leave Team members are prohibited from any activities that are damaging to the work environment of other employees by way of speech or behaviour related to pregnancy, childbirth, etc., or use of systems or measures related to pregnancy, childbirth, child care, family care, etc. GitLab shall take necessary measures in managing employment to prevent harassment due to pregnancy, childbirth, child care leave, family care leave, etc. at the workplace. Prohibition of Any Other Forms of Harassment In addition to the prohibitions listed above, team members are prohibited from any other forms of harassment at the workplace that are damaging to the work environment of other team members such as by way of speech or behaviours related to sexual orientation or gender identification. GitLab LTD (The UK) Complaint Procedure If the employee does not wish to address the harasser directly, or the behavior does not cease, then the employee (accompanied by a colleague/union representative if they wish) should report the misconduct to their line manager or a member of the People Business Partner. Wherever appropriate the line manager and or the People Business Partner may attempt to resolve the situation on an informal basis. If the informal approach does not resolve matters or the situation is too serious to be dealt with informally, the employee will need to make a formal complaint to the line manager and/or the People Business Partner. Once reported, a formal investigation will be conducted impartially by People Business Partner or by an independent third party, depending on the severity and circumstances of the complaint. Individual(s) reporting an incident or pattern of behavior will be asked to provide a written account of any action(s) causing concern, dates and times such actions occurred, and names of anyone involved, including participants and witnesses. All complaints or concerns of alleged harassment or discrimination will be taken seriously and handled promptly, sensitively and confidentially. Wherever possible the Company will try to ensure that the employee and the alleged harasser are not required to work together while the complaint is being investigated. This may involve the alleged harasser being suspended or transferred to another work area. In very serious cases, a criminal offence may have been committed and the employee may wish to report the matter to the police/authorities. Employees will be kept informed of the general progress of the investigation and the outcome of any disciplinary proceeding. If, following investigation, the complaint is upheld, appropriate disciplinary proceedings will be brought against the alleged harasser up to and including dismissal for gross misconduct. GitLab will work to prevent recurrence of the behavior. If, following investigation, the complaint is not upheld, then the company will support both the employee and the alleged harasser in rebuilding their working relationship and may consider making arrangements to avoid the employee and the alleged harasser working together. Where the employee is unhappy with the outcome of the formal investigation, they have the right to appeal against the outcome if they can demonstrate why they believe a particular aspect of the investigation has materially affected the outcome. Appeals must be submitted within 10 working days of receiving the outcome of the complaint. If an appeal is submitted, the People Business Partner will arrange a meeting to take place with the appeal chair within a reasonable time period. The appeal chairs decision will be final and there is no further right of appeal. The appeal chair will be independent of the investigation. GitLab Ireland Ltd Complaint Procedure and Contacts The Company is aware of and recognises the effect that bullying, harassment and sexual harassment can have on its team members. Contact Person  Team Member Relations: teammemberrelationsgitlab.com Designated Person - For each formal complaint that is reported through Lighthouse, a Designated Person will be appointed by the Company to deal with the specific issue. Informal Procedure The Company is of the view that an informal approach to solving matters can often be effective. In the first instance, an attempt should be made to address an allegation of bullying, harassment and sexual harassment on an informal basis through the procedure set out below. If you believe you are being bullied, harassed or sexually harassed you should explain clearly to the alleged perpetrator(s) that you find the behaviour in question to be unacceptable. If you would find it difficult to approach the alleged perpetrator(s) directly, then you may seek the advice or assistance of Team Member Relations. You may then request the assistance of Team Member Relations in raising the issue with the alleged perpetrator(s). Any approach made by Team Member Relations on your behalf to the alleged perpetrator(s) will be on a confidential, non-confrontational basis and will seek to resolve the issue in an informal low-key manner. If you decide that it would not be appropriate for the Company to deal with your complaint under the informal procedure, or having done so you are not satisfied with the outcome, you should proceed to the Formal Procedure. Formal procedure To begin with, you should make a formal complaint in writing via Lighthouse, giving concrete examples of the alleged bullying, harassment and/or sexual harassment, the dates of any such incidents and details of witnesses, where possible. You may make your complaint anonymously if you wish. The alleged perpetrator(s) will then be notified in writing that an allegation of bullying, harassment and/or sexual harassment has been made against them. A meeting will be arranged at which the alleged perpetrator(s) will be told that they will be given a fair opportunity to respond to each and every allegation of bullying, harassment and/or sexual harassment and they will be given a copy of your written complaint together with a copy of this policy. A copy of this policy will also be provided to the complainant. One or more designated members of the People Group (the Designated Person) will be responsible for carrying out an initial investigation into your complaint. The investigator may agree on terms of reference of the investigation with both you and the alleged perpetrator(s) in advance, and you and the alleged perpetrator(s) will be notified of the likely timescale for completion. This initial meeting will take place as soon as reasonably practicable following receipt of your complaint. If the Company considers it appropriate to do so, the Company reserves the right, at its discretion, to appoint or engage an external third party to conduct the investigation. Where the allegations made are of a severe nature, the Company reserves the right to suspend the alleged perpetrator(s) on full pay pending an investigation. The investigator will meet you, the alleged perpetrator(s) and any witnesses or other relevant persons on an individual basis to gather information surrounding the allegation. You and the alleged perpetrator(s) may be accompanied to such meeting by a colleague. The Company reserves the right to refuse your chosen representative attendance at the meeting where appropriate. You will be given the opportunity to change your chosen representative. Every effort will be made to carry out and complete the investigation as quickly as possible and preferably within the agreed timeframe. Once the investigation is complete, the investigator will present a written report to management. Both the complainant and the alleged perpetrator(s) will be informed in writing of the investigators report and both parties will be given the opportunity to comment on the report before any action is decided on by the Company. If, on foot of the report, the Company decides that it is appropriate, a People group representative and applicable manager will meet formally with the alleged perpetrator(s) to determine an appropriate course of action. This may include counselling, monitoring, mediation and/or invoking the disciplinary procedure. If the investigation concludes that based on the evidence, bullying, harassment or sexual harassment may have been perpetrated by an individual who is not a team member of the Company, the Company will decide what appropriate actions should be taken against such individuals including exclusion from Company premises or systems, suspension or termination of service/contract etc. If the Company decides that the complaint is not well founded, a People group representative and applicable manager will formally meet with the complainant, again to determine an appropriate course of action. It may be that some kind of counselling or mediation session(s) is required between the complainant and the alleged perpetrator(s). Either party may appeal the findings of an investigation under this procedure by submitting, in writing, within 5 working days of the Companys decision in respect of the complaint outlining the reasons for the appeal. The appeal will be heard on the points raised and will not involve reinvestigation of the complaint. Mediation Mediation is an alternative method of resolving issues relating to bullying, harassment and sexual harassment. Mediation involves the parties seeking to arrive at a solution through mutual agreement, rather than through an investigation and decision. Mediation provides a confidential opportunity for the person who feels that they have been bullied, harassed or sexually harassed and the person(s) accused of carrying out this inappropriate behaviour to discuss the matter and to reach an agreement on their continuing working relationship. Mediation is conducted in private, and is directly between the parties concerned, with the support of a mediator, who will act as an independent facilitator. Either party may withdraw from the process at any time by notifying the mediator, in writing, that they wish to do so. If both parties agree to resolve the issue by mediation, the Company will arrange the mediation process. An appropriate person, acceptable to both parties, from within or outside the Company will be assigned as mediator. The Team Member Relations specialist may serve as the internal mediator, if acceptable to both parties. If the mediation process results in an agreement acceptable to both parties, the mediator will draw up a written record of the terms of the settlement for signature by both parties. If mediation breaks down or fails to achieve its goal, the matter can be processed through the other stages of this procedure. The person involved in the mediation process will not be involved in the investigation process. GitLab Inc and GitLab Federal LLC In addition to EthicsPoint and Lighthouse, please review the Team Member Relations Specialist section. GitLab also offers a Harassment Complaint Form that any team member may use to document any instance of any type of workplace harassment. Simply copy the form, fill it out with your information and send it to our Team Member Relations Specialist at teammemberrelationsgitlab.com. California Law Requirements Every team member located in the state of California will be required to read, review, and understand the following three documents during their onboarding: State requirements policy California Law Prohibits Workplace Discrimination  Harassment Sexual Harassment  Civil Remedies Connecticut Law Requirements Every team member located in the state of Connecticut is required to take the 2 hour Anti Harassment Training for Supervisors. This training is to be completed by all individual contributors as well as managers. Maine Law Requirements Team members who reside in Maine have the right to file a complaint through the Maine Human Rights Commission within 300 days of the date of the alleged discrimination. You may contact the Commission by phone at (207) 624-6290, TTY Maine Relay 711, or by visiting the office located at 51 State House Station, August Maine, 04333-0051. It is unlawful under the Maine Human Rights Act for an employer to retaliate against you because you filed a complaint of discrimination or because you aided in an investigation. Massachusetts Law Requirements Team members who reside in Massachusetts have the right to file a complaint to the Massachusetts Commission Against Discrimination (MCAD): 1 Ashburton Place, Suite 601, Boston, MA 02108, tel: (617) 994-6000, TTY:(617) 994-6196. Oregon Law Requirements Nondisclosure or Nondisparagement Agreements Under this policy, a nondisclosure agreement is any agreement by which one or more parties agree not to discuss or disclose information regarding any complaint of work-related harassment, discrimination, or sexual assault. A nondisparagement agreement is any agreement by which one or more parties agree not to discredit or make negative or disparaging written or oral statements about any other party or the company. A no-rehire provision is an agreement that prohibits a team member from seeking reemployment with the company and allows a company to not rehire that individual in the future. The company will not require a team member to enter into any agreement if the purpose or effect of the agreement prevents the employee from disclosing or discussing conduct constituting discrimination, harassment, or sexual assault. A team member claiming to be aggrieved by discrimination, harassment, or sexual assault may, however, voluntarily request to enter into a settlement, separation, or severance agreement which contains a nondisclosure, nondisparagement, or no-rehire provision and will have at least seven days to revoke any such agreement. Time Limitations Nothing in this policy precludes any person from filing a formal grievance in accordance with a collective bargaining agreement if applicable, the Bureau of Labor and Industries Civil Rights Division 800 NE Oregon St., Suite 1045 Portland, OR 97232, tel: (971) 673-0761, TTY Relay 711, or the Equal Employment Opportunity Commission. Note that Oregon state law requires that any legal action taken on alleged discriminatory conduct (specifically that prohibited by ORS 659A.030, 659A.082 or 659A.112) commence no later than five years after the occurrence of the violation. Other applicable laws may have a shorter time limitation on filing. Rhode Island Law Requirements Team members who reside in Rhode Island have the right to file a complaint with the Rhode Island Commission for Human Rights located at 180 Westminster St., 3rd Floor, Providence, RI 02903. Phone: (401) 222-2661, Voice Relay: 7-1-1. Vermont Law Requirements If the a team member who resides in Vermont is dissatisfied with this employers action, or is otherwise interested in doing so, they may file a complaint by writing or calling the Vermont Attorney Generals Office, Civil Rights Unit, 109 State Street, Montpelier, VT 05609, ago.civilrightsvermont.gov, tel:(888)745-9195 (Toll Free VT) or (802)828-3657 (voice/TDD). Complaints should be filed within 360 days of the adverse action. Resources We are continuously gathering country specific references to review regulation and obtain guidance on the management of harassment or misconduct at work. Here are a few authorities we referred to in the creation of this policy: Equal Employer Opportunity Commission (EEOC) Contact EEOC: John F. Kennedy Federal Building, 475 Government Center, Boston, MA 02203, , tel:1-800-669-4000 (voice), 1-800-669-6820 (TDD). Complaints must be filed within 300 days of the adverse action. Society of Human Resource Management (SHRM) Further Guidance (Country-Specific) UK: Acas (advisory service for employees and employers) The Netherlands: Inspectorate SZW Belgium: Unia: For equality, against discrimination Last modified July 8, 2025: People Connect to People Operations Updates (facc4002) View page source - ",
      "keywords": [
        "anti",
        "anti-harassment",
        "behavior",
        "communication",
        "complaint",
        "conduct",
        "development",
        "discrimination",
        "diversity",
        "document",
        "employee",
        "everyone",
        "gitlab",
        "harassment",
        "inclusion",
        "inclusive",
        "introduction",
        "investigation",
        "learn",
        "policy",
        "remote",
        "reporting",
        "respect",
        "responsibilities",
        "results"
      ],
      "extracted_at": "2025-07-21 13:46:43",
      "content_length": 36255
    },
    {
      "id": "gitlab-values",
      "title": "GitLab Values",
      "url": "https://handbook.gitlab.com/handbook/values/",
      "section": "Company Values",
      "content": "GitLab Values Learn more about how we live our values at GitLab CREDIT GitLabs six core values are  Collaboration,  Results for Customers,  Efficiency,  Diversity, Inclusion  Belonging,  Iteration, and  Transparency, and together they spell the CREDIT we give each other by assuming good intent. We react to them with values emoji and they are made actionable below. About our values We take inspiration from other companies, and we always go for the boring solutions. Our co-founder, Sid Sijbrandij, has shared the origin of each of the CREDIT values, but just like the rest of our work, we continually adjust our values and strive to make them better. GitLab values are a living document. In many instances, they have been documented, refined, and revised based on lessons learned (and scars earned) in the course of doing business. We used to have more values, but it was difficult to remember them all. In response, we condensed them, created an acronym (CREDIT), and listed operating principles to guide behavior. Everyone is welcome to suggest improvements. Please assign MRs to update these values to our Chief People Officer and if you work at GitLab, also mention them in the values Slack channel. Driving Results with CREDIT from GitLab on Vimeo.  Collaboration To achieve results, team members must work together effectively. At GitLab, helping others is a priority, even when it is not immediately related to the goals that you are trying to achieve. Similarly, you can rely on others for help and advicein fact, youre expected to do so. Anyone can chime in on any subject, including people who dont work at GitLab. The person whos responsible for the work decides how to do it, but they should always take each suggestion seriously and try to respond and explain why it may or may not have been implemented. Kindness We value caring for others. Demonstrating we care for people provides an effective framework for challenging directly and delivering feedback. Kindness doesnt mean holding back on feedback or avoiding disagreements, these are crucial to professional growth and getting results for customers. Kindness means you make a separation between the work and the person, you can criticize someones work but still be respectful to the person. Give as much positive feedback as you can, and do it in a public way. Share There are aspects of GitLab culture, such as intentional transparency, that are unintuitive to outsiders and new team members. Be willing to invest in people and engage in open dialogue. For example, consider making private issues public wherever possible so that we can all learn from the experience. Dont be afraid of judgement or scrutiny when sharing publicly, we all understand its impossible to know everything. Everyone can remind anyone in the company about our values. If there is a disagreement about the interpretations, the discussion can be escalated to more people within the company without repercussions. Share problems you run into, ask for help, be forthcoming with information and speak up. Negative feedback is 1-1 Give negative feedback in the smallest setting possible. One-on-one video calls are preferred. Negative feedback is distinct from negativity and disagreement. If there is no direct feedback involved, strive to discuss disagreement in a public channel, respectfully and transparently. In a GitLab Unfiltered interview on values, GitLab co-founder Sid Sijbrandij offers the following context. We deal with negative all the time at GitLab. If its not a problem, then why are we discussing it? We deal with negativity a lot, and thats also part of our ambition. If you want to get better, you talk about what you can improve. Were allowed to publicly discuss negative things; were not allowed to give negative feedback in a large setting if it could be feasibly administered in a smaller setting. Negative feedback can be given in a group setting if its to someone higher in the management chain. This shows that no one is above feedback. Provide feedback in a timely manner We want to solve problems while they are small. If you are unhappy with anything (your duties, your colleague, your boss, your salary, your location, your computer), please voice your concerns rather than keeping them to yourself. If you need to escalate beyond your manager, you could consider speaking to your skip-level, a more senior person, or a people business partner. Say thanks Recognize the people that helped you publicly, for example in our thanks chat channel. When publicly thanking, its important to recognize the following: Showing thanks in as large a setting as possible (company-wide) at a company as large as ours is the exception instead of the norm, it takes some getting used to. Being thanked at the company level for what you view as a relatively small or minuscule contribution can feel awkward. Thanking a person in thanks should be done sincerely and summarize why you are thankful so the person on the receiving end can easily understand why they are being thanked. Even while assuming positive intent, not all folks are comfortable with public praise. Help this person understand how they went above and beyond and why you felt it was important for the team member to be recognized. There are a number of good ways and places to say thanks. We shouldnt limit saying thanks to just the thanks channel. Give feedback effectively Giving feedback is challenging, but its important to deliver it effectively. When providing feedback, always make it about the work itself; focus on the business impact and not the person. Make sure to provide at least one clear and recent example. If a person is going through a hard time in their personal life, then take that into account. An example of giving positive feedback is our thanks chat channel. For managers, its important to realize that team members react to a negative incident with their managers six times more strongly than they do to a positive one. Keeping that in mind, if an error is so inconsequential that the value gained from providing criticism is low, it might make sense to keep that feedback to yourself. In the situations where negative feedback must be given, focus on the purpose for that feedback: to improve the team members performance going forward. Give recognition generously, in the open, and often to generate more engagement from your team. Get to know each other We use a lot of text-based communication, and if you know the person behind the text, it will be easier to prevent conflicts. So we encourage people to get to know each other on a personal level through informal communication, for example, virtual coffee chats, and during GitLab Summit. Reach across company departments While its wise to seek advice from experts within your function, we encourage GitLab team members to do the same across departments. This enables the company to iterate more quickly, embrace the understanding that everyone can contribute and include more diverse perspectives when possible. Dont pull rank If you have to remind someone of the position you have in the company, youre doing something wrong. People already know our decision-making process. Explain why youre making the decision, and respect everyone irrespective of their function. This includes using the rank of another person - including the CEO - to sell an idea or decision. Assume positive intent We naturally have a double standard when it comes to the actions of others. We blame circumstances for our own mistakes, but individuals for theirs. This double standard is called the Fundamental Attribution Error. In order to mitigate this bias, you should always assume positive intent in your interactions with others, respecting their expertise and giving them grace in the face of what you might perceive as mistakes. When disagreeing, folks sometimes argue against the weakest points of an argument, or an imaginary argument (e.g. straw man). Assume the points are presented in good faith, and instead try to argue against the strongest version of your opponents position. We call this arguing against a steel position, instead of a straw one. This concept is borrowed from argue the steel man technique. A steel position should be against the absolute most effective version of your opponents position  potentially even more compelling than the one they presented. A good steel position is one where the other person feels youve represented their position well, even if they still disagree with your assumptions or conclusion. Address behavior, but dont label people There is a lot of good in this article about not wanting jerks on our team, but we believe that jerk is a label for behavior rather than an inherent classification of a person. We avoid classifications. Say sorry If you made a mistake, apologize as soon as possible. Saying sorry is not a sign of weakness but one of strength. The people that do the most work will likely make the most mistakes. Additionally, when we share our mistakes and bring attention to them, others can learn from us, and the same mistake is less likely to be repeated by someone else. Mistakes can include when you have not been kind to someone. In order to reinforce our values, it is important, and takes more courage, to apologize publicly when you have been unkind publicly (e.g., when you have said something unkind or unprofessional to an individual or group in a Slack channel). No ego Dont defend a point to win an argument or double-down on a mistake. You are not your work; you dont have to defend your point. You do have to search for the right answer with help from others. In a GitLab Unfiltered interview, GitLab Head of Remote Darren M. adds context on this operating principle. In many organizations, theres a subtle, low-level, persistent pressure to continually prove your worth. And I believe that this fuels imposter syndrome and wreaks havoc on mental health. Whats so troubling to me is how often perception is reality. In other words, those who have mastered the art of being perceived as elite reap benefits, though this has nothing to do with actual results. At GitLab, no ego means that we foster and support an environment where results matter, and youre given agency to approach your work in the way that makes sense to you. Instead of judging people for not approaching work in an agreed-upon way, no ego encourages people to glean inspiration from watching others approach work in new and different ways. See others succeed A candidate who has talked to a lot of people inside GitLab said that, compared to other companies, one thing stood out the most: everyone here mentioned wanting to see each other succeed. Dont let each other fail Keep an eye out for others who may be struggling or stuck. If you see someone who needs help, reach out and assist. This might involve offering to pair program or setting up a sync brainstorming session. The goal is to connect them with someone else who can provide expertise or assistance. We are a team, so we succeed and shine together by supporting each other! People are not their work Always make suggestions about examples of work, not the person. Say You didnt respond to my feedback about the design instead of You never listen. And, when receiving feedback, keep in mind that feedback is the best way to improve, and that others giving you feedback want to see you succeed. Do it yourself Our collaboration value is about helping each other when we have questions, need critique, or need help. No need to brainstorm, wait for consensus, or do with two what you can do yourself. The Bolt Handbook refers to this as the Founder Mentality, where all team members should approach the problem as if they own the company. Blameless problem solving Investigate mistakes in a way that focuses on the situational aspects of a failures mechanism and the decision-making process that led to the failure, rather than cast blame on a person or team. We hold blameless root cause analyses and retrospectives for stakeholders to speak up without fear of punishment or retribution. Short toes People joining the company frequently say, I dont want to step on anyones toes. At GitLab, we should be more accepting of people taking initiative in trying to improve things. As companies grow, their speed of decision-making goes down since there are more people involved. We should counteract that by having short toes and feeling comfortable letting others contribute to our domain. For example, pointed, respectful feedback to a proposal by GitLabs CEO led to his own merge request being closed. However, it is not required to respond to comments. Its impossible to know everything We know we must rely on others for the expertise they have that we dont. Its OK to admit you dont know something and to ask for help, even if doing so makes you feel vulnerable. It is never too late to ask a question, and by doing so, you can get the information you need to produce results and to strengthen your own skills as well as GitLab as a whole. After your question is answered, please document the answer so that it can be shared. Dont display surprise when people say they dont know something, as it is important that everyone feels comfortable saying I dont know and I dont understand. (As inspired by Recurse.) Collaboration is not consensus When collaborating, it is always important to stay above radar and work transparently, but collaboration is not consensus and disagreement is part of collaboration. You dont need to ask people for their input, and they shouldnt ask you Why didnt you ask me?. You dont have to wait for people to provide input, if you did ask them. You dont need to have everyone agreeing to the same thing - they can disagree, commit, and advocate. Two-way doors decisions can be reversed as part of disagree, commit, and advocate, while one-way door decisions benefit from more input. Recognize these reversible two-way door decisions for when less input is required to iterate faster. We believe in permissionless innovation  you dont need to involve people, but everyone can contribute. This is core to how we iterate, since we want smaller teams moving quickly rather than large teams achieving consensus slowly. Collaboration Competency Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate collaboration when we take action to help others and include others (both internal and external) input (both help and feedback) to achieve the best possible outcome. GitLab Job Grade Demonstrates Collaboration Competency by Knowledge Assessment 5 Develops collaboration skills by learning from other team members Knowledge Assessment for Individual Contributors 6 Grows collaboration skills by using different types of communication; files issues appropriately, asks in the right Slack channels and uses the right labels. 7 Models collaborative behavior for fellow team members and others within the group. 8 Coaches team members on how to collaborate more effectively and pointing team members to the right channels to collaborate. Knowledge Assessment for People Leaders 9 Fosters collaborative decision making and problem solving across the departments. 10 Drives team collaboration across divisions/departments, silos, and division boundaries. 11 Develops networks and builds partnerships, engages in cross-functional activities; collaborates across boundaries, and finds common ground with a widening range of stakeholders. Utilizes contacts to build and strengthen internal support base 12 Leads collaboration and teamwork in daily routines, prioritizing interactions, information sharing, and real time decision making across divisions/departments. Encourages greater cross-functional collaboration among e-team leaders. 14 Champions collaboration and teamwork into daily routines, prioritizing interactions, information sharing, and real time decision making across divisions/departments. Champions cross-functional collaboration among e-team leaders and GitLab.  Results for Customers We exist to help our customers achieve more. Everything we do should be in service of making our customers successful with GitLab. Results for Customers is at the top of our values hierarchy, as our customers achieving results drives overall business performance that enables everything else. The Results for Customers value is displayed through the following operating principles: Set Ambitious  Measurable goals While we iterate with small changes, we strive for large, ambitious results. We have an ambitious mission and vision, and we aim to be the best in the world across all our functions. Setting ambitious, measurable goals enables us to best deliver customer results. We agree in writing on measurable goals. We have and report against KPIs with guiding targets. Understand our customers All GitLab team members should understand our customers needs, issues, and value propositions. We understand how they use GitLab and what they need from a platform in order to meet their goals. Internally facing teams consider the impact of their work as it pertains indirectly to GitLabs customers. We better understand customers and their needs through: Reviewing public facing GitLab issues from our customers and users Dogfooding our product to understand the user experience Reading customer stories from Marketing and Sales Attending Customer fireside chats Learning feedback from our customers and users on product features and roadmap Co-create We create together with our customers. There is an open dialogue between GitLab and our customers so that we can better identify what they need. As a result of building a solution for them, we can also bring that solution to the world. Keep end users in sight Our focus is to increase customer results. At GitLab, one way to drive customer results is through platform enhancements that drive the most value for direct users. This requires being aware of the Concur effect. Arvind Narayanan, a Princeton Professor, described his frustration with Blackboard in a viral Tweet: It has every feature ever dreamed up. But like anything designed by a committee, the interface is incoherent and any task requires at least fifteen clicks (and thats if you even remember the correct sequence the first time). Software companies can be breathtakingly clueless when theres a layer of indirection between them and their users. Everyone whos suffered through Blackboard will have the same reaction to this: try having less functionality! Ryan Falor followed up on Narayanans tweet with his definition of the Concur Effect: decision makers are not direct users features are overwhelming and disjointed user experience gets worse over time See the Hacker News discussion for a specific UX example. At GitLab, we want to drive customer results through focusing on platform enhancements that drive the most value for direct users. Customer results are more important than: What we plan to make. If we focus only on our own plans, we would have only GitLab.com and no self-managed delivery of GitLab. This does not mean that we will agree to every feature request, but we wont let existing plans be an obstacle to working on what will drive the most customer value. Large customer requests. Catering to requests from large customers leads to the innovators dilemma, we need to also focus on results for small and future customers. Our existing scope. For example, when customers asked for better integrations and complained about integration costs and effort, we responded by expanding our scope to create a single application for the DevOps lifecycle. Our assumptions. Every company works differently, so we cant assume that what works well for us will support our customers needs. When we have an idea, we must directly validate our assumptions with multiple customers to ensure we create scalable, highly relevant solutions. What we control. We strive to provide the best possible experience for each of our customers, and take responsibility for all of the aspects that we can reasonably control. Measure impact, not activity We care about what you achieve: the code you shipped, the needle you moved, the user you made happy, and the team member you helped. Someone who took the afternoon off shouldnt feel like they did something wrong, unless it negatively impacted a goal or result they were responsible for. You dont have to defend how you spend your day if you are performing and delivering against expectations. We trust team members to do the right thing instead of having rigid rules. We trust team members to show up and do their best work. Do not incite competition by proclaiming how many hours you worked yesterday. If you are working too many hours, talk to your manager to discuss solutions. Dogfooding We use our own product in the way our users do to surface improvements that will lead to better customer results. GitLab is a DevSecOps Platform that can be used by people throughout the business. This is how we use it within GitLab. For example, we use our OKR functionality company-wide to inform product enhancements and for team members to have a great understanding of the customer experience. We also dogfood in the following ways: Our development organization uses GitLab.com to manage the DevOps lifecycle of GitLab itself. All team members use GitLab to collaborate on this handbook. We capture content and processes in Git repos and manage them with GitLab. When something breaks, doesnt work well, or needs improvement, we are more likely to notice it internally and address it before it impacts our larger community. Give agency We give people agency to focus on what they think is most beneficial. If a meeting doesnt seem interesting and someones active participation is not critical to the outcome of the meeting, they can always opt to not attend, or during a video call they can work on other things if they want. Staying in the call may still make sense even if you are working on other tasks, so other peers can ping you and get fast answers when needed. This is particularly useful in multi-purpose meetings where you may be involved for just a few minutes. Challenger mindset Challenging the status quo can lead to remarkable results - we must never stop. A challenger mindset requires that we continually ask ourselves bold, difficult questions about our business and the problems we solve, while resisting complacency. To succeed we must innovate and delight our customers with the value of the products we build. A challenger mindset requires a relentless pursuit of excellence - we must be tenacious. Each win for our customers builds reputational capital we can use to earn the trust of prospects in a competitive market. While competition is a feature of capitalism, internally as GitLab team members, we must focus our efforts inwardly on achieving our very best results for customers to win market share. Growth mindset You dont always get results and this will lead to criticism from yourself and/or others. We believe our talents can be developed through hard work, targeted training, learning from others, on-the-job experience, and receiving input from others. It is in our DNA as a company and individuals to look for opportunity, stay humble, and never settle. We try to hire people based on their trajectory, not their pedigree. We also strive to foster a culture of curiosity and continuous learning where team members are provided and proactively seek out opportunities to grow themselves and their careers. We believe that with the right expectations and direction, people can grow to take on new challenges and surpass expectations. Cross-functional optimization Our definition of cross-functional optimization is that you do what is best for the organization as a whole. Dont optimize for the goals of your team when it negatively impacts the goals of other teams, our users, and/or the company. Those goals are also your problem and your job. For example, you may have set a non-urgent functional milestone that is supposed to land at the end of the quarter. If delivering within the last week requires engagement from the GTM teams, the right decision may be to push your own teams target by a week to reduce the ask for the GTM team as the GTM focuses on meeting its revenue objectives. In the context of collaboration, if anyone is blocked by you on a question, your approval, or a merge request review, you should prioritize unblocking them, either directly or through helping them find someone else who can. Embrace Tenacity We refer to this as persistence of purpose. As talked about in The Influence Blog, tenacity is the ability to display commitment to what you believe in. You keep picking yourself up, dusting yourself off, and quickly get going again having learned a little more. We value the ability to maintain focus and motivation when work is tough and asking for help when needed. Have Ownership  Accountability We expect team members to complete tasks that they are assigned. You are responsible for executing with attention to detail, connecting the dots across the organization and anticipating and solving problems. As an owner, you are responsible for overcoming challenges, not suppliers or other team members. Take initiative and proactively inform stakeholders when there is something you might not be able to solve. Sense of urgency Time gained or lost has compounding effects. Try to get the results as fast as possible, but without compromising our other values and ways we communicate, so the compounding of results can begin and we can focus on the next improvement. Operate with a bias for action Its important that we keep our focus on action, and dont fall into the trap of analysis paralysis or sticking to a slow, quiet path without risk. Decisions should be thoughtful, but delivering fast results requires the fearless acceptance of occasionally making mistakes; our bias for action also allows us to course correct quickly. Try to get results as fast as possible, but without compromising our other values and ways of working Disagree, commit, and advocate When a decision is in place, we expect people to commit to executing it. Any past decisions and guidelines are open to questioning as long as you act in accordance with them until they are changed. This is a common principle. Every decision can be changed; our best decision was one that changed an earlier one. In a manager-report relationship, usually the report is the Directly Responsible Individual (DRI). The manager may disagree with the final decision, but they still commit to the decision of the DRI. In a group setting, participants may disagree with a proposal but not articulate their views for one reason or another. Sometimes, many or all individuals may disagree yet choose not to speak up, because no one believes they would get agreement from the group. As a result, everyone loses out on their feedback. Dissent is expression of that disagreement. However, it can be difficult and even socially expensive. Expression of feedback is a way for everyone to grow and learn, and is based on facts rather than opinions. Share your perspective, rather than agreeing simply to avoid conflict or to go along with everyone else. When you want to reopen the conversation on something, show that your argument is informed by previous conversations and assume the decision was made with the best intent. You have to achieve results on every decision while it stands, even when you are trying to have it changed. You should communicate with the DRI who can change the decision instead of someone who cant. Escalate to unblock If there is a disagreement and you cant move forward because of it, agree to escalate and escalate to one or both of your managers. Early escalation, delivered with context of the challenge, enables managers to function as an unblocker. Results Competency Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate results when we do what we promised to each other, customers, users, and investors. GitLab Job Grade Demonstrates Results Competency by Knowledge Assessment 5 Develops the skills needed to commit and execute on agreed actions. Knowledge Assessment for Individual Contributors 6 Applies commitment to results and demonstrates ability to execute on agreed actions. 7 Models a sense of urgency and commitment to deliver results. 8 Coaches team members to collaborate and work iteratively towards impact with the focus on the outcome and not activity worked. Knowledge Assessment for People Leaders 9 Fosters a culture of ownership of personal performance. 10 Drives efficient execution of results ensuring collaboration between team members. 11 Develops quarterly OKR's ensuring the performance and results of one or more teams. 12 Leads the achievement of results while driving the continued alignment to our values of collaboration, efficiency, diversity, iteration and transparency. EVP/CXO Leads the achievement of results while driving the continued alignment to our values of collaboration, efficiency, diversity, iteration and transparency.  Efficiency At GitLab, efficiency means producing results without wasting materials, time, or energy. We optimize solutions globally for the broader GitLab community over one person or a small group. Focus on efficiency should be global in nature, not just local to a given function. Global efficiency could include efficiency with customers, candidates, and contributors as well. It is easy to prioritize consistency over efficiency because consistency is often more efficient initially and makes managing processes more efficient. We should slow down when optimizing for consistency. Taking a company-wide lens when evaluating changes will help ensure that new processes will improve efficiency for GitLab as a whole and be the best decision for the company as a whole. When we work internally with other team members, we leverage GitLabs unique working practices and operating principles to achieve top efficiency. We do not expect people outside of GitLab to conform to GitLabs ways of working, and we will make accommodations to work effectively with them. For example, we may collaborate heavily in-person and not default to async communications. Only Healthy Constraints Most companies regress to the mean and slow down over time. While some changes are required as a company grows and matures, not all change is inevitable or should be allowed to passively happen. As GitLab grows, we are conscious of how we operate and how it enables our ability to continue to operate with the agility of a startup. We try to limit ourselves to healthy constraints. Write things down We document everything: in the handbook, in meeting notes, in issues. We do that because the faintest pencil is better than the sharpest memory. It is far more efficient to read a document at your convenience than to have to ask and explain. Having something in version control also lets everyone contribute suggestions to improve it. Boring solutions Use the simplest and most boring solution for a problem, and remember that boring should not be conflated with bad or technical debt. The speed of innovation for our organization and product is constrained by the total complexity we have added so far, so every little reduction in complexity helps. Dont pick an interesting technology just to make your work more fun; using established, popular tech will ensure a more stable and more familiar experience for you and other contributors. Make a conscious effort to recognize the constraints of others within the team. For example, sales is hard because you are dependent on another organization, and development is hard because you have to preserve the ability to quickly improve the product in the future. Self-service and self-learning Team members should first search for their own answers and, if an answer is not readily found or the answer is not clear, ask in public as we all should have a low level of shame. Write down any new information discovered and pay it forward so that those coming after will have better efficiency built on top of practicing collaboration, inclusion, and documenting the results. Team members have more room to grow themselves when they are able to self-service and self-learn. Efficiency for the right group Optimize solutions globally for the broader GitLab community. As an example, it may be best to discard a renewal process that requires thousands of customers to each spend two hours in favor of one that only takes sixty seconds, even when it may make a monthly report less efficient internally! In a decision, ask yourself For whom does this need to be most efficient? Quite often, the answer may be your users, contributors, customers, or team members that are dependent upon your decision. Be respectful of others time Consider the time investment you are asking others to make with meetings and a permission process. Try to avoid meetings, and if one is necessary, try to make attendance optional for as many people as possible. Any meeting should have an agenda linked from the invite, and you should document the outcome. Instead of having people ask permission, trust their judgment and offer a consultation process if they have questions. Spend company money like its your own Every dollar we spend will have to be earned back. Be as frugal with company money as you are with your own. In saying this, we ask team members to weigh the cost of purchases against the value that they will bring to the company. Consider the degree to which a purchase increases your ability to better accomplish your work and achieve business results relative to cost. Lowering overhead reduces the cost to operate the business and lets us shift spend toward other priority areas. We have guidelines around this operating principle to help team members better understand our expensing process and expectations. Frugality Amazon states it best with: Accomplish more with less. Constraints breed resourcefulness, self-sufficiency, and invention. There are no extra points for growing headcount, budget size, or fixed expense. Short verbal answers Give short answers to verbal questions so the other party has the opportunity to ask more or move on. Keep broadcasts short Keep one-to-many written communication short, as mentioned in this HBR study: A majority say that what they read is frequently ineffective because its too long, poorly organized, unclear, filled with jargon, and imprecise. Managers of one We want each team member to be a manager of one who doesnt need daily check-ins to achieve their goals. Team members are given the freedom to own projects and initiatives and are trusted to see them through to a successful end. When team members are managers of one they can have an increased work/life balance, because they are more empowered to make decisions around how they allocate their time throughout each day. Freedom and responsibility over rigidity When possible, we give people the responsibility to make a decision and hold them accountable for that, instead of imposing rules and approval processes. You should have clear objectives and the freedom to work on them as you see fit. Freedom and responsibility are more efficient than rigidly following a process, or creating interdependencies, because they enable faster decision velocity and higher rates of iteration. When team members have freedom and responsibility over rigidity, they have more room to help others. Accept mistakes Not every problem should lead to a new process to prevent them. Additional processes make all actions more inefficient; a mistake only affects one. Once you have accepted the mistake, learn from it. When team members are free to accept mistakes, they can take more calculated risks. Move fast by shipping the minimal valuable change We value constant improvement by iterating quickly, month after month. If a task is not the smallest viable and valuable thing, cut the scope. Embrace change Adoption of features, user requirements, and the competitive landscape change frequently and rapidly. The most successful companies adapt their roadmap and their organization quickly to keep pace. One of the things that makes this challenging is the impact on our team. People may need to change teams, subject matter, or even who manages them. This can rightly feel disruptive. If we coach ourselves to embrace the positive aspects of change, such as increased opportunity and new things to learn, we can move faster as a company and increase our odds of success. It is important to hold management accountable for being deliberate. Efficiency Competency Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate efficiency when we work on the right things, not doing more than needed, and not duplicating work. GitLab Job Grade Demonstrates Efficiency Competency by Knowledge Assessment 5 Develops an understanding of being a manager of 1 by taking responsibility for your own tasks and delivering on commitments. Brings up ideas for process improvements to 1:1s. Learns to write everything down as it is far more efficient to read a document at your convenience than to have to ask and explain. Knowledge Assessment for Individual Contributors 6 Develops a deeper understanding of efficiency and actively identifies process inefficiencies within the team. Seeks out ways to be more effective in their role, while also starting to mentor others in ways to work efficiently. 7 Models a culture of efficiency within the team where people make good, timely decisions using available data and assessing multiple alternatives. Models using boring solutions for increasing the speed of innovation for our organization and product. 8 Takes ownership of own team process inefficiencies, implements cross team efforts in ensuring things are running smoothly. Implements a way of working in the team where team members first search for their own answers and, if an answer is not readily found or the answer is not clear, ask in public as we all should have a low level of shame. Knowledge Assessment for People Leaders 9 Takes ownership of group level process inefficiencies and guides cross sub-departments in ensuring things are running smoothly. Fosters a culture in the sub-departments where you respect others' time and promote self-service and self-learning. 10 Drives the framework of frugality on a department level and owns departments efforts in ensuring things are running smoothly. Drives efficient resolution of highly complex or unusual business problems that impact the department / team. Holds their managers and peers accountable for upholding this value. 11 Develops the framework and strategy of frugality cross division resulting in efforts ensuring things are running smoothly. Develops leaders to action on division/department/team inefficiencies. Hold their management teams accountable for upholding this value. 12 Leads with efficiency across the company. Ensures efficient resource allocation decisions across the company. Leads across company strategy and policy improvements that move the business towards more efficiency. They hold their senior management and the e-group accountable for upholding this value. EVP/CXO Champions GitLab's strategy for efficiency internally and externally. Constantly looking for efficiency improvements cross company and holding other e-group members accountable for upholding efficiency too. They are comfortable leading through frugality and accepting of mistakes.  Diversity, Inclusion  Belonging Diversity, inclusion and belonging are fundamental to the success of GitLab. We aim to make a significant impact in our efforts to foster an environment where everyone can thrive. We are designing a multidimensional approach to ensure that GitLab is a place where people from every background and circumstance feel like they belong and can contribute. We actively chose to build a culture that is inclusive and supports all team members equally in the process of achieving their professional goals. We work to make everyone feel welcome and to increase the participation of underrepresented groups in our community and company. Bias towards asynchronous communication Take initiative to operate asynchronously whenever possible. This shows care and consideration for those who may not be in the same time zone, are traveling outside of their usual time zone, or are structuring their day around pressing commitments at home or in their community. This is demonstrated by communicating recordings of meetings, using GitLab Issues and Merge Requests rather than texts, calls, or Slack messages, and being sensitive to local holidays and vacation statuses. Encourage others to default to documentation rather than pressuring others to be online outside of their working hours. Embracing uncomfortable ideas and conversations Part of embracing diversity is a willingness to embrace often uncomfortable conversations and situations. This concept is also at the core of inclusion and helping to eliminate the problems that are faced by certain GitLab team members who may not be in the majority. We believe that being willing to embrace discomfort is the path forward to a safe, balanced and inclusive work place for all. Challenge yourself, challenge your own pre-set notions and ideas about different cultures or things you dont understand. When we are willing to embrace being uncomfortable, we can focus on actually fixing the issues at hand rather than simply appearing to care. Understanding the impact of microaggressions Microaggressions are much more than merely rude or insensitive comments. They can wear people down by slowly chipping away their sense of belonging/safety/inclusion over time. What is a microaggression? The everyday slights, indignities, put downs and insults that people of color, women, LGBT populations or those who are marginalized experiences in their day-to-day interactions with people. - Derald W. Sue At GitLab we believe that everyone is entitled to a safe working space where they can express who they are and participate in conversations without worry of being spoken to in a harmful way, given that we want to encourage everyone to be mindful of what is a microaggression and be mindful of their potential impact. Seek diverse perspectives We believe that team members seeking feedback from a diverse group of team members, inside and outside of their group or function, leads to better decisions and a greater sense of team member belonging. For more guidance on how we define Diversity, please refer to GitLabs definition of Diversity, Inclusion  Belonging. Feedback from a more heterogenous group often leads to better business outcomes as we incorporate diverse perspectives and uncover unconscious bias. An example of this operating principle in action showcases the value of actively seeking diverse perspectives. The term Brag Document was used to describe when individuals documented their accomplishments. Documenting accomplishments is critical to team member development. However, team members had the psychological safety to raise the question of whether or not the title of the document made some feel uncomfortable. In an effort to seek a diverse perspective, a survey was conducted in one of the Team Member and Advocacy Resource Group (TMRG) channels. The poll results showed that 100% of those polled preferred a different title and the title was changed. Make family feel welcome One of the unique elements to an all-remote culture is the ability to visit a persons home while collaborating. If the tenor of the meeting allows, feel welcome to invite your family members or pets to drop by and greet your colleagues. Be mindful of language and use of profanity to encourage a family-friendly environment. Shift working hours for a cause Caregiving, outreach programs, and community service do not conveniently wait for regular business hours to conclude. If theres a cause or community effort taking place, feel welcome to work with your manager and shift your working hours to be available during a period where youll have the greatest impact for good. For colleagues supporting others during these causes, document everything and strive to post recordings so its easy for them to catch up. Be a mentor People feel more included when theyre supported. To encourage this, and to support diversified learning across departments, consider GitLabs Internship for Learning program. Culture fit is a bad excuse We dont hire based on culture or select candidates because wed like to have a drink with them. We hire and reward team members based on our shared values as detailed on this page. We want a values fit, not a culture fit. We want cultural diversity instead of cultural conformity. Said differently: culture add  culture fit or hire for culture contribution since our mission is that everyone can contribute. Religion and politics at work We generally avoid discussing politics or religion in public forums because it is easy to alienate people that have a minority opinion. This doesnt mean we never discuss these topics. Because we value diversity, inclusion and belonging, and want all team members to feel welcome and contribute equally, we encourage free discussion of operational decisions that can move us toward being a more inclusive company. There is sometimes a grey area where advocating for diversity and political activities may intersect. Team members should use discretion in grey area communications, because a culture of belonging requires us to be respectful of the broad spectrum of views within our work environment. What does this mean in practice? Please feel empowered to share information that highlights diversity, inclusion and belonging issues and how GitLab and GitLab team members can get involved. In line with our Code of Business Conduct and Ethics, avoid posting articles that reference specific political figures or parties. While it is acceptable for individuals to bring up politics and religion in social contexts such as coffee chats and real-life meetups with other coworkers (with the goal to understand and not judge), always be aware of potential sensitivities, exercise your best judgment, and make sure you stay within the boundaries of our Code of Business Conduct and Ethics. Were a global company where perspectives and local norms may differ from culture to culture. Diversity, inclusion and belonging is about broad inclusion at a worldwide level. If there is a question or concern, please reach out to diversityinclusiongitlab.com or diversity_inclusion_and_belonging. Quirkiness Unexpected and unconventional things make life more interesting. Celebrate and encourage quirky gifts, habits, behavior, and points of view. Open source is a great way to interact with interesting people. We try to hire people who think work is a great way to express themselves. Building a safe community Do not make jokes or unfriendly remarks about characteristics of the people who make up GitLab and how they identify. Everyone has the right to feel safe when working for GitLab and/or as a part of the GitLab community. We do not tolerate abuse, harassment, exclusion, discrimination, or retaliation by/of any community members, including our team members. You can always refuse to deal with people who treat you badly and get out of situations that make you feel uncomfortable. Unconscious bias We recognize that unconscious bias is something that affects everyone and that the effect it has on us as humans and our company is large. We are responsible for understanding our own implicit biases and helping others understand theirs. We are continuously working on getting better at this topic. Inclusive benefits We list our Parental Leave publicly so people dont have to ask during interviews. Inclusive language  pronouns Use inclusive language. For example, prefer Hi everybody or Hi people to Hi guys, and they instead of he/she. While there are several good guides from folks like 18f, University of Calgary, and Buffer on using inclusive language, we dont keep an exhaustive list. When new possibly non-inclusive words arise, we prefer to be proactive and look for an alternative. If your goal is to be inclusive, it is more effective to make a small adjustment in the vocabulary when some people have a problem with it, rather than making a decision to not change it because some people dont think it is a problem. And if you make a mistake (e.g. accidentally using the wrong pronoun or an outdated phrase), acknowledge it, apologize gracefully and move on; there is no need to dwell on it, and you can work to avoid making that mistake in the future. Please also visit our Gender and Sexual-orientation Identity Definitions and FAQ page if you have questions around pronouns and other topics related to gender / sexual orientation. Learn how to pronounce other peoples names We attach part of our identity to our names, and if it is mispronounced it can feel less inclusive. If it happens repeatedly, you may be unintentionally sending a message to that person that you are not interested in learning how to pronounce their name correctly. This applies to everyone you are in contact with: team members, customers, candidates for jobs, and anyone else. People whose name is repeatedly mispronounced might feel unimportant or self-conscious, and might not speak up about it. Other negative behaviors include giving a person a nickname without their permission, or actively avoiding using their name in sync calls. It might be challenging to pronounce names from a different language or culture than your own, but with some effort, name pronunciation can be learned by anyone. Some ways to achieve this are: Ask the person for help in a private space: Im sorry, I dont think I am pronouncing your name correctly. Can you help me with the correct pronunciation? Use the written and recorded pronunciation tools in Slack. Use online tools such as videos recorded on YouTube or NameShouts. Practice the pronunciation with a friend or team member who knows the correct pronunciation. Always avoid making jokes or comments about how it is difficult to pronounce their name. Use of nicknames Some people might choose to use a nickname, for example: Bob instead of Robert. As long as this is their choice this is perfectly acceptable. We should avoid assigning a nickname to a person without their permission. Slack pronunciation features Slack has two features to help with this issue: the phonetic name pronunciation field and the ability to record your own name pronunciation audio clip. We encourage all team members to complete both of these. Update them by editing your profile. Inclusive interviewing This is documented on our page about interviewing. Inclusive meetings Be consciously inclusive in meetings by giving everyone present an opportunity to talk and present their points of view. This can be especially important in a remote setting. With internal meetings, consider using an agenda document for questions. For example, with GitLab AMAs, every meeting has a numbered list that GitLab team members can add questions to. During the meeting, questions are answered in turn and discussions noted in the same document. Sometimes, these documents can have so much traffic (during the meeting) such that only a limited number of people can edit the document. In these situations, those who have questions should post on zoom chat and those who can edit the document should help copy the question over to the document. In addition, those who can edit the document should also post in zoom chat to see if anyone has any questions that they could help add to the document so that meeting attendees are more empowered to contribute to the conversation. Customers are not used to working in this way. To promote inclusion with customers: ask participants for their goals; make sure during demos that you pause for question; leave time for discussion. Inclusive and fair policy to regions with fewer employees Being globally distributed has the benefit that someone can cover for you when you are off work. However, population density is not balanced across timezones. Policies should remain fair to those in less dense regions. For example, the Asia Pacific region covers more timezones but has fewer team members. If we use an algorithm to assign tasks to those in later timezones, all American tasks would fall on the fewer Asia Pacific employees. This can damage belonging and inclusivity and should be avoided. When planning an event, the organizer should cater for location density differences to maximize participation in all regions. See Something, Say Something As a globally-dispersed company, we have team members from many different backgrounds and cultures. That means it is important for each of us to use great judgment in being respectful and inclusive of our teammates. At the same time, we may sometimes not fully realize we have said or done something to offend someone. It is important that our teammates hold each other accountable and let them know if they have unintentionally or intentionally done something so they can learn and gain additional understanding of perspectives different from our own. It is also important that our teammates dont feel excluded or minimized by the words we use or the things we do. Thus, we all need to speak up when we see something that isnt respectful or inclusive. Embracing Neurodiversity Neurodiversity refers to variations in the human brain regarding learning, attention, sociability, mood, and other mental functions. There are various neurodevelopmental conditions, like autism, ADHD, dyslexia, dyscalculia, dyspraxia, cognitive impairment, schizophrenia, bipolarity, and other styles of neurodivergent functioning. While neurodivergent individuals often bring unique skills and abilities which can be harnessed for a competitive advantage in many fields (for example, cybersecurity), neurodivergent individuals are often discriminated against. Due to non-inclusive hiring practices, they sometimes have trouble making it through traditional hiring processes. Neurodiversity inclusion best practices benefit everyone, and at GitLab, everyone can contribute. The handbook, values, strategy, and interviewing processes must support the ability for everyone to thrive. At GitLab we embrace Neurodiversity through adopting a variety of different work styles and communication styles, and we lean into transparency, asynchronous as a default working style, and pre-filled meeting agendas. These best practices become even more important when embracing neurodiversity. Providing multiple ways to consume information (written / video / audio) allows everyone to contribute independent of their preferred comprehension style. It is important to ask team members specifically what their preferred communication method is in order to provide them information in a format that is easily consumable for them. Remember, brains work differently and always assume positive intent, even if someone behaves in an unexpected way. While it may be an unexpected behavior to you, it may not be unexpected to the individual exhibiting the behavior. That is the beauty and value of diversity, embracing differences and becoming stronger and better as a result. We also recommend that all team members review the Reasonable Accommodation process. A Reasonable Accommodation for a team member could include noise-cancelling headphones, scheduling smaller group session zoom calls, providing very explicit and precise instructions and due-dates when given tasks, or providing a variety of supportive software tools. The most important thing that managers can do is facilitate an environment in which all team members feel psychologically safe enough to make requests for what they need in order to do their job. Family and friends first, work second Long-lasting relationships are the rocks of life, and come before work. As someone said in our thanks channel after helping a family member for five days after a hurricane: THANK YOU to GitLab for providing a culture where family first is truly meant. Use the hashtag: FamilyAndFriends1st Equity not just equality Equity vs. Equality: Whats the Difference? While the terms equity and equality may sound similar, the implementation of one versus the other can lead to dramatically different outcomes for marginalized people. Equality means each individual or group of people is given the same resources or opportunities. Equity recognizes that each person has different circumstances and allocates the exact resources and opportunities needed to reach an equal outcome. Diversity, Inclusion  Belonging Competency Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate diversity, inclusion and belongings when we foster an environment where everyone can thrive and ensuring that GitLab is a place where people from every background and circumstance feel like they belong and can contribute. If you would like to improve your skills or expand your knowledge on topics relating to Diversity, Inclusion,  Belonging at GitLab, check out our resources: Being an Ally Being Inclusive Recognizing Bias GitLab Job Grade Demonstrates Diversity  Inclusion Competency by Demonstrates DIB Behaviors by(Should not be considered an exhaustive list) Knowledge Assessment 4 Learns to understand the impact of biases. Gathering more information about the skills needed to be accountable for their actions, apologizes and learn. 5 Develops an understanding of the impact of biases; seeks to learn more about their own biases. Is accountable for their actions, apologizes and learns from their mistakes. DIB training and/or other company wide training to further education on DIBAttend DIB Initiatives Calls to stay informed and connected with ongoing efforts and discussionsParticipate in a DIB Initiative: join TMRGs you identify with, support other groups as an Ally, attend events, \"like\" slack posts and spread the wordParticipate in a TMRG initiativeMember of a working group related to a DIB initiative, e.g. participate in a Mentorship program Knowledge Assessment for Individual Contributors 6 Has a growing understanding of the impact of biases; fosters a sense of inclusion and belonging on their team. Holds themselves and peers accountable for upholding this value by kindly pointing out when mistakes might be made. Encourages an inclusive team environment where differences are encouraged and everyone can contribute. 7 Actively aware of how bias or exclusion might occur on a team and helps to facilitate a team environment where team members belong and feel safe. Models empathy with their interactions with customers and cross functional team members. 8 Implements best practices to limit bias on their team. They ensure blameless accountability is practiced throughout their team. Creates an environment where team members feel safe to share ideas and welcomes individual differences. DIB training and/or other company wide training to further education on DIBAttend DIB Initiatives Calls to stay informed and connected with ongoing efforts and discussionsParticipate in a DIB Initiative: join TMRGs you identify with, support other groups as an Ally, attend events, like posts and spread the wordParticipate in a TMRG initiativeMember of a working group related to a DIB initiative, e.g. participate in a Mentorship programHiring Manager ensure a diverse candidate slate and interview panelActive participant and advocate for department DIB goals Knowledge Assessment for People Leaders 9 Proactively finds ways of facilitating an inclusive team environment and assesses processes to protect against unconscious bias. They hold their team members accountable including cross functional stakeholders. Promotes individual differences across their team and other departments. 10 Drives diversity, inclusion and sense of belonging across their department. They hold their managers and peers accountable for upholding this value. They are actively involved in the execution of DI strategies and encourage others to participate. Black is Tech, Grace Hopper 11 Embeds the value of Diversity  Inclusion across their division and finds opportunities to limit the impact of bias on decision making processes. Uses feedback and data to formulate a strategy on how to make improvements. They hold their management teams accountable for upholding the value. 12 Leads with the value of Diversity  Inclusion across the company and finds opportunities to limit the impact of bias on decision making processes. They sponsor internal initiatives to increase trust, psychological safety and inclusion. They hold their senior management and the e group accountable for upholding this value. DIB Team  Leadership DIB Council to establish an action plan for your departments  divisionServe as an TMRG executive sponsorEmbed DIB into All hands or in person events e.g.review organizations OKR as it relates to DIB progress, champion trainings related to further DIB knowledge, invite guest speakers to advocate EVP/CXO Champions the value of Diversity, Inclusion and Belonging into the company's strategy. They champion and sponsor internal and external DI initiatives. They speak to the importance of this value in company-wide meetings. They hold their leaders and other e group members accountable for upholding this value. They continuously seek ways to increase trust, psychological safety and inclusion across the broader company. DIB Team  Leadership DIB Council to establish an action plan for your departments  division Serve as a TMRG executive sponsor Embed DIB into All hands or in person events e.g.review organizations OKR as it relates to DIB progress, champion trainings related to further DIB knowledge, invite guest speakers to advocate  Iteration Merriam-Webster defines iteration as the the action or a process of iterating or repeating: such as a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. At GitLab, we iterate to do the smallest valuable thing to get fast feedback and efficiently reach a desired end goal. Feedback can be from internal users (dogfooding), a limited number of external users (through our early access program), or through feedback from our broader user community. We validate each iteration and adjust, but not at the expense of the user experience that we deliver to our customers. When we iterate at GitLab, we break up the work that we know we need to do into smaller chunks to iterate toward a targeted end state: Merge in codebase Dogfood Have some external users (early access program) Ensure global optimization (use standardized systems) Plan beyond the iteration Iteration does not require us to ship features that are open to all users from day one. Feedback can come from internal users or a limited number of external users (early access program). Moving through the release process is not iteration though. Iteration is also not a replacement for having a plan. We expect you to know where you are going, but you can iterate to get there. An iteration might be additive (adding something) or subtractive (removing something). If you make suggestions that can be excluded from the first iteration, turn them into a separate issue that you link. While you should have a clear vision of the desired outcome and how it addresses a customer pain point or improves the user experience, be efficient in your planning. Unless you identify important cross-functional interdependencies, focus detailed planning on the first step. It might feel you are moving too slowly; however, planning is critical in order to ensure you can move fast when implementing. Youre doing it right if you feel that you have shipped the minimal feature set in the first iteration. This value is the one people most underestimate when they join GitLab. The impact, both on your work process and on how much you achieve, is greater than anticipated. Frequently, the simplest version that provides value turns out to be the best one. Many people who join GitLab say they already practice iteration. But this is the value that is the hardest to understand and adopt. People are trained that if you dont deliver a perfect or polished thing, there will be a problem. If you do just one piece of something, you have to come back to it. Doing the whole thing seems more efficient, even though it isnt. If the complete picture is not clear, your work might not be perceived as you want it to be perceived. It seems better to make a comprehensive product. They see other GitLab team members being really effective with iteration but dont know how to make the transition, and its hard to shake the fear that constant iteration can lead to shipping lower-quality work or a worse product. In reality, it is possible to ship a minimally valuable product while continuing to adhere to the documented quality standards. The way to resolve this is to write down only what value you can add with the time you have for this project right now. That might be 5 minutes or 2 hours. Think of what you can complete in that time that would improve the current situation. Iteration can be uncomfortable, even painful. If youre doing iteration correctly, it should be. Reverting work back to a previous state is positive, not negative. Were quickly getting feedback and learning from it. Making a small change prevented a bigger revert and made it easier to revert. However, if we take smaller steps and ship smaller, simpler features, we get feedback sooner. Instead of spending time working on the wrong feature or going in the wrong direction, we can ship the smallest product, receive fast feedback, and course correct. People might ask why something was not perfect. In that case, mention that it was an iteration, you spent only x amount of time on it, and that the next iteration will contain y and be ready on z. Iteration enables results and efficiency. In the GitLab Unfiltered video embedded above, GitLab co-founder Sid Sijbrandij shares key operating principles to reinforce iteration in an organization. Start with a long-term vision Iteration involves driving results in pursuit of a long-term vision. While the intermediate goals may change as we iterate, we are unlikely to be successful if we dont start with a vision of what we are working toward. Shipping that vision in iterations allows us to learn from customers using it and adjust the vision if needed. Iteration for the sake of iteration can lead to inefficiencies and not deliver desired results. Iteration is no substitute for planning Iteration without a plan can lead to inefficiencies and a subpar customer experience. Before iterating we need to plan. A plan should include: Time-bound objective: Where we want to be in a year UX: User experience we are working toward Quality: What quality is sufficient quality, inclusive of security Success metric: Usage we want at a specific time Data schema: The data schema we need to measure progress towards project goals GTM plan: How we want to go to market Enablement: When wed plan to train and enable the support and field teams Marketing: When wed launch marketing (doesnt have to be at release) Secure by design: default to the most secure configuration The release process is not iteration Moving through the release process is not iteration. The release process can include: Dogfooding Early access Incremental release using a feature flag Development stage progression (such as experiment to beta) Release Announcement While development stages can be used to indicate release progress, is not itself iteration. Iterate toward global maximum If we are not aware of interdependencies beyond our team, and we are not collaborating with others across the organization, we risk deliverables that settle into a local maximum of quality, richness, and efficiency. This localization is largely defined by team structure and organizational boundaries. While an iteration can take place within a single team, that team is responsible for identifying inter-dependencies and proactively communicating and aligning with other teams working on related projects. This helps ensure that iterations are not half-baked and align with work being done across the entire organization. Dont wait Dont wait on the small things. When you have something of value like a potential blog post or a small fix, implement it straight away. Right now, everything is fresh in your head and you have the motivation. Inspiration is perishable. Dont wait until you have a better version. Dont wait until you record a better video. Dont wait for an event (like GitLab Summit). Inventory that isnt released is a liability since it has to be managed, becomes outdated, and you miss out on the feedback you would have received had you implemented it straight away. When we dont wait we signal intent to others that we have a purpose to resolve something. Note: Dont wait should not be used as a justification for not iterating toward the global maximum or at expense of the plan. If there are interdependencies to be considered or the iteration is customer facing, slow down and ensure that we are considering what is best for GitLab and our customers. Set a due date We always try to set a due date. If needed, we cut scope. If we have something planned for a specific date, we make that date. For example we shipped over 133 monthly releases. But every one of them doesnt contain all the features we planned. If we planned an announcement for a certain date, we might announce less or indicate what is still uncertain. But we set a due date because having something out there builds trust and gives us better feedback. Cleanup over sign-off As discussed in Sids interview on iteration, waiting for approval can slow things down. We can prevent this with automation (such as tests of database migration performance) or clean-up after the fact (refactor a Pajamas if something was added that isnt coherent), but we try to ensure that people dont need to wait for sign-off. As iteration does not require us to ship to all users on day one, we can clean up after an internal or beta release to mitigate the negative impact to all customers. Start off by impacting the fewest users possible Iteration does not mean being open to all users from day one. If you do a gradual rollout of your change, prefer: Few users over many users Internal users (dogfooding) over external users Environments with fast feedback (SaaS) over slow feedback (self-managed) Reduce cycle time Short iterations reduce our cycle time. Merging frequently also prevents merge conflicts. Work as part of the community Small iterations make it easier to work with the wider community. Their work looks more like our work, and our work is also quicker to receive feedback. Minimal Valuable Change (MVC) We encourage MVCs to be as small as possible. Always look to make the quickest change possible to improve the users outcome. If you validate that the change adds more value than what is there now, then do it. This may be additive (adding something) or subtractive (removing something). No need to wait for something more robust. More information is in the product handbook, but this applies to everything we do in all functions. Specifically for product MVCs, there is additional responsibility to validate with customers that were adding useful functionality without obvious bugs or usability issues. Make a proposal If you need to decide something as a team, make a concrete proposal instead of calling a meeting to get everyones input. Having a proposal will be a much more effective use of everyones time. Every meeting should be a review of a proposal. We should be brainwriting on our own instead of brainstorming out loud. State the underlying problem so that people have enough context to propose reasonable alternatives. The people that receive the proposal should not feel left out and the person making it should not feel bad if a completely different proposal is implemented. Dont let your desire to be involved early or to see your solution implemented stand in the way of getting to the best outcome. If you dont have a proposal, dont let that stop you from highlighting a problem, but please state that you couldnt think of a good solution and list any solutions you considered. By making a proposal you also provide better visibility into the work and the context surrounding it. In this GitLab Unfiltered video, GitLab co-founder Sid Sijbrandij converses about iteration in engineering, leveraging proposals to break work into smaller components. Everything is in draft At GitLab, we rarely mark any content or proposals as drafts. Everything is always in draft and subject to change. When everything is in draft, contributions from team members as well as the wider community are welcomed. By having everything in draft and assuming others have low context, confusion can be reduced as people have shared access to information. Under construction As we continue to expand the number of users we have, they will continue to expect stability and reliability. We must optimize for the long term without sacrificing stability along the way. This means that users may be inconvenienced in the short term, but current and future users will enjoy a better product in the end. Educating users on the longer-term plan helps create a shared understanding of how a small change will incrementally grow into something more. For example, we could share how a dropdown will evolve into a much more nuanced solution in the future. We can take the following steps to articulate our plan: Open a feedback issue that provides context about the initial MVC (example) Ensure the direction page articulates a long-term plan (example) Announce the MVC in a release post, link to the feedback issue, and link to the direction page (example) Low level of shame when dogfooding In many organizations, you take a risk when you put forth any work thats not perfect, work where you havent spent endless cycles planning for contingencies or counterpoints. Because of this, youre incentivized to invest a lot of time and effort into preparing for What if? scenarios before any work is presented, even if the release is not customer facing and there is a low level of risk in imperfection. The downside to that is clear when we are dogfooding: If you do eventually put forth the work, but it needed to be course-corrected a long time ago, youve squandered time that you could have spent improving it through iteration. Having a low level of shame when dogfooding or working internally requires you to combat a natural inclination to conceal work until its perfect, and instead celebrate the small changes. Cultural lens Cultural differences can bring unique challenges and expectations to iteration. For some, expressions like it doesnt have to be perfect can challenge cultural norms. We encourage you to bring your authentic self and seek shared understanding when iterating. Giving feedback and ensuring psychological safety are necessary for every iterative attempt. Focus on improvement We believe great companies sound negative because they focus on what they can improve, not only on what is working well. In every conversation, inside and outside the company, we should ask a question: What do you think we can improve? This doesnt mean we dont recognize our successes; for example, see our Say Thanks value. We are positive about the future of the company. We are Short Term Critical And Long Term Optimistic (STeCALTO, for short). Be deliberate about scale First, optimize for speed and results (and be deliberate about how your change affects other processes/functionality); when it is a success, figure out how to scale it. Great examples are in this article by Paul Graham. Resist bundling Resist the urge to bundle a series of smaller iterations so team members dont see a project as their last (or best) opportunity to contribute. Its tempting to create encompassing projects or initiatives that roll many smaller projects up. This incarnation of scope creep drives up cost, encourages fewer risks, and incentivizes perfection (via longer cycle times) over progress. When we resist bundling, we reduce the risk that work will be canceled due to scale or scope. By resisting bundling we also reduce the coordination needed because fewer people or teams may be involved. Make two-way door decisions Most decisions are easy to reverse. In these cases, the Directly Responsible Individual should go ahead and make them without approval. Only when you cant reverse them should there be a more thorough discussion. By embracing iteration and making two-way door decisions, we are more efficient and achieve more results. Changing proposals isnt iteration Changing something without shipping it is a revision, not iteration. Only when the change is rolled out to users, whether internal users or a limited customer group, can you learn from feedback. When youre changing a proposal based on different opinions, youre frequently wasting time; it would be better to roll out a small change quickly and get real world feedback. Never call a revision an iteration because it is almost the opposite. Embracing Iteration In order to embrace iteration, we should have the attitude that we are trying to achieve as much as possible in a small amount of time; its where we land at the end state of an iteration that counts. The benefit of iteration is to get fast feedback from users. Focus on sharing context at the end of the first iteration rather than a hypothetical future state that requires multiple iterations. By embracing iteration we can increase creativity in incremental components. Make small merge requests When you are submitting a merge request for a code change, or a process change in the handbook, keep it as small as possible. If you are adding a new page to the handbook, create the new page with a small amount of initial content, get it merged quickly via Handbook Usage guidelines, and then add additional sections iteratively with subsequent merge requests. Similarly, when adding features to GitLab, consider ways to reduce the scope of the feature before creating the merge request to ensure your merge request is as small as possible. Always iterate deliberately Rapid iteration can get in the way of results if its not thought out; for example, when adjusting our marketing messaging (where consistency is key), product categories (where weve set development plans), organizational structure or product scope alignment (where real human stresses and team stability are involved), sales methodologies (where weve trained our teams) and this values page (where we use the values to guide all GitLab team members). In those instances, we add additional review to the approval process; not to prohibit, but to be more deliberate in our iteration. The change process is documented in the GitLab Handbook Usage page and takes place via merge request approvals. 12 things that are not iteration Iteration is often counterintuitive and difficult to do. To clarify what an iteration is, it helps to see examples of what is not an iteration. Below are 12 examples of things weve seen mistaken as iteration, but dont meet our definition of iteration. Reducing quality, or lowering goal posts Avoiding or reducing documentation Compromising on security Delivering something thats not the recommended path or on by default Shipping something of no value An excuse to focus on unimportant items Moving through the release process Revisions you dont ship or publish An excuse to impose unrealistically tight timelines An excuse to avoid planning Imposing long hours Expecting others to fix your work In this GitLab Unfiltered video, GitLab co-founder Sid Sijbrandij elaborates on each of these 12 things that are not iteration. Iteration Competency Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate iteration when we do the smallest viable and valuable thing, get it out quickly for feedback, and make changes based that feedback. GitLab Job Grade Demonstrates Iteration Competency by Knowledge Assessment 5 Develops own knowledge by trying and failing. When asking questions isn't content with silence or unhelpful/incomplete responses, seeks out primary sources. Knowledge Assessment for Individual Contributors 6 Actively looks for opportunities to iterate and contribute to boring solutions. Balances short term gains and long term benefit with team's help. Ships things that aren't 100% knowing that you'll be able to improve them in the next revision. Asks questions with abandon. Publicly shares failures if you'll help colleagues learn. 7 Independently balances short term gains and long term benefit. Identifies opportunities to deliver projects in an iterative way. 8 Is able to take long term goals and turn them into small actionable steps that can be implemented in an iterative way. Identifies and prevents decisions that are not \"two-way door decisions\". Ships. All the time. Sounds like a broken record in discussions with more junior members of the team; always asking if we can make something smaller. Knowledge Assessment for People Leaders 9 In addition to upholding the requirements of a Staff/Manager level, a Principal/Sr. Manager practices and fosters the value of iteration to team members. They hold their team members accountable for iteration and boring solutions. 10 In addition to upholding the requirements of a Principal/Sr. Manager, a Distinguished/Director proactively finds ways to drive the value of iteration and boring solutions. 11 In addition to upholding the requirements of a Distinguished/Director , a Sr. Distinguished/Sr. Director embeds the value of Iteration across the department and division. They use their cognitive and analytical abilities to anticipate and adapt to unpredictabilities in regard to strategic risk in a way that benefits all involved. 12 In addition to upholding the requirements of a Sr. Distinguished/Sr. Director , a Fellow/VP leads the way for the value of Iteration across the division and cross functional teams. They confidently lead their teams through change and proactively take risks based on values and the strategic vision. EVP/CXO In addition to upholding the requirements of a Fellow/VP, the EVP champions the value of Iteration across GitLab. They are comfortable leading through discomfort and the unease associated with change and innovation.  Transparency Be open about as many things as possible. By making information public, we can reduce the threshold to contribution and make collaboration easier. Use public issue trackers, projects, and repositories when possible. Transparency is not communication. Just because something exists in the handbook or elsewhere doesnt mean it cant be communicated again or in a more robust fashion to the people who need to understand or acknowledge it. On a personal level, be direct when sharing information, and admit when youve made a mistake or were wrong. When something goes wrong, it is a great opportunity to say Whats the kaizen moment here? and find a better way without hurt feelings. Even as a public company, we know that our value of transparency will be key to our success. This value can be hard to follow at times. You might ask yourself: what should be shared, how much to share, whether or not to speak up but definitely take the time to always opt for maximum transparency by adhering to the operating principles below. Often, company values get diluted as they grow, most likely because they do not write anything down. But we will make sure our values scale with the company. As a public company, we declare everyone in the company as an insider, which allows us to remain transparent internally about our numbers, etc. Everything else that can be transparent will continue to be so. When there are exceptions, material that is not public by default is documented. Public by default Everything at GitLab is public by default. The public process does two things: allows others to benefit from the conversation and acts as a filter. Since there is only a limited amount of time, we prioritize conversations that a wider audience can benefit from. One example of transparency at GitLab is the public repository of this website that also contains this company handbook. Others include the GitLab CE and GitLab EE issue trackers, as well as marketing and infrastructure. Transparency creates awareness for GitLab, allows us to recruit people that care about our values, gets us more and faster feedback from people outside the company, and makes it easier to collaborate with them. It is also about sharing great software, documentation, examples, lessons, and processes with the whole community and the world in the spirit of open source, which we believe creates more value than it captures. In line with our value of transparency and being public by default, all GitLab team member profiles should be public. Public profiles also enable broader collaboration and efficiencies between teams. To do so, please make sure that the checkbox under the Private profile option is unchecked in your profile settings. If you do not feel comfortable with your full name or location on your profile, please change it to what feels appropriate to you as these are displayed even on private profiles. Because we are public by default and have the SAFE framework we dont need to make cases for why things should be transparent. If something is unSAFE and needs to remain not public it can be. Not public We make information public by default because transparency is one of our values. However it is most important to focus on results. Therefore, a category of information is public unless there is a reason for it not to be. If something is not public, there should be a reference in the handbook that states a confidential decision was taken with a link to our Not Public guidelines, unless GitLab Legal and Corporate Affairs believes it carries undue risk. We document what is not public by default on our communication page. If you believe something shouldnt be public that currently is (or vice versa), then make a merge request to the relevant page(s) suggesting the change so that you can collaborate with others and discuss with the DRI. When content contains information which is not public it is recommended to remove the specific sections which are not public, put them on their own page in the internal handbook, and then link out to that with a not public/internal only note. Always share publicly what we can. When information is not public, it may also be treated as limited access, only shared with certain GitLab roles, teams, or team members due to privacy considerations, contractual obligation, or other reasons that the author or DRI can specify. Certain kinds of information default to limited access, including details about team members or customers who did not give permission to share the information. Most companies become non-transparent over time because they dont accept any mistakes. Instead, we should always err on the side of transparency when there is a choice to be made between caution or inaction, and transparency. If we make a mistake, we now know what the limits of transparency are for the company and we should document this. The only exception to this rule would be in the case when there are legal concerns. Because some information is not public the public information can be lacking some context. We should be cognizant of that. Directness Being direct is about being transparent with each other. We try to channel our inner Ben Horowitz by being both straightforward and kind. Feedback is always about your work and not your person. That doesnt mean it will be easy to give or receive it. Articulate when you change your mind If you state one thing, and then change course and support a different direction, point, or outcome, articulate this. It is OK to have your position changed by new data. Articulating that an earlier stance is not your current stance provides clarity to others and encourages data-driven decision making. Surface issues constructively Be transparent to the right people (up) at the right time (when still actionable). If you make a mistake, dont worry; correct it and proactively let the affected party, your team, and the CEO know what happened, how you corrected it, and howif neededyou changed the process to prevent future mistakes. Transparency is most valuable if you continue to do it when there are costs We practice transparency even when hiding the facts would be easier. For example, many companies do not give you the real reason why they declined your application because it increases the chance of legal action. We want to only reject people for the right reasons and we want to give them the opportunity to grow by getting this feedback. Therefore, well accept the increased risk of holding ourselves to a high standard of making decisions and do the right thing by telling them what we thought. Other examples are being transparent about security incidents and participating in and contributing to Live Broadcasts. Transparency has costs (distraction, mis-interpretation, etc.) but also great benefits (productivity, hiring, retention, brand awareness, etc). We should carefully weigh the tradeoff between costs and benefits, to prevent a knee-jerk reaction to reduce transparency when it has costs. Single Source of Truth By having most company communications and work artifacts be public to the Internet, we have one single source of truth for all GitLab team members, users, customers, and other community members. We dont need separate artifacts with different permissions for different people. Findability Our transparency value means more than just making information accessible to all. In order to improve performance its important that we not only ensure information is accessible, but also ensure it flows to the correct places and is findable by those who need it. Focusing on information flow will ensure you, for example, utilize multi-modal communication, or that you keep your stakeholders informed of changes by posting links to MRs in Slack. Say why, not just what Transparent changes have the reasons for the change laid out clearly along with the change itself. This leads to fewer questions later on because people already have some understanding. A change with no public explanation can lead to a lot of extra rounds of questioning, which is less efficient. This also helps with institutional memory: a year from now when you want to know why a decision was made, or not, the issue or MR that has the decision also shares why the decision was made. This is related to Chestertons fence - its much easier to suggest removing or changing something if you know why it exists in the first place. If you use generalized terms such as industry standard or best practices, be sure to give context, as without context they can be seen as potentially vague or opaque. Similarly, merely stating a single value isnt a great explanation for why we are making a particular decision. Many things could be considered iteration or efficiency that dont match our definition of those values. Try to link to an operating principle of the value or provide more context, instead of just saying a single values name. Saying why and not just what enables discussion around topics that may impact more than one value; for instance, when weighing the efficiency of boring solutions with the focus on customer results. When decisions align with all of our values, they are easy to discuss and decide. When there are multiple values involved, using our values hierarchy and directly discussing the tradeoffs is easier with more context. Articulating why also helps people understand how something changed when you articulate that you changed your mind. Saying why does not mean justifying a decision against all other suggestions. The DRI is responsible for their decision. The DRI is not responsible for convincing other people, but they should be able to articulate their reasoning for the change. When a GitLab Team Member comes across an ask or material (MR, handbook, etc.) that does not provide a why with sufficient context, the Team Member is responsible for getting the why and, if needed, working with the DRI to ensure that it is adequately documented and communicated to give context to other team members. In the absence of a why, team members may speculate the why. This is something that can lead to disruption and inefficiency. Reproducibility Enable everybody involved to come to the same conclusion as you. This not only involves reasoning, but also providing, for example: raw data and not just plots; scripts to automate tasks and not just the work they have done; and documenting steps while analyzing a problem. Do your best to make the line of thinking transparent to others, even if they may disagree. Transparency Competency Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate transparency when we are open with as many things as possible reducing the threshold to contribution and make collaboration easier. GitLab Job Grade Demonstrates Transparency Competency by Knowledge Assessment 5 Uses public issue trackers, projects, and repositories when possible. Looks for opportunities to publicly share the things that they are working on. Knowledge Assessment for Individual Contributors 6 Provides context and background on projects and issues so that those with no prior knowledge are able to contribute to the discussion. They welcome feedback and new ideas as they know that will lead to a better solution. 7 Continually surfaces improvements across their functional area of expertise. They share feedback with others and understand how to disagree and commit to solutions. They model what it means to be as open as possible. They encourage conversation in public channels. 8 Implements open processes across their team. They also track team issues and projects openly so their team members are aware of everything that is happening on a team at a given time. They leverage feedback to drive the best possible outcomes with the information they have available. They also share feedback with their team and their peers in a timely, kind manner so their position on a given topic is known. Knowledge Assessment for People Leaders 9 Fosters and coaches openness across cross functional departments. They lead cross functional issues, projects and ideas inviting feedback to generate the best possible solution. They hold their teams accountable to continue to find opportunities to share things openly. They give feedback to their team members, peers and managers in a timely, kind manner so their position on a topic is known. 10 Drives their departmental strategy with openness as a key value. They hold their management team accountable to working openly and pushes them to make everything transparent even when it might be difficult to do so. They coach managers on the value that additional feedback can bring to the end solution. 11 Develops leaders that work openly and continue to provide timely, kind feedback across their division. They develop leaders that drive their teams with openness as a foundational part of the way that they operate. 12 Leads the company by being open in all things. They are open with things that might traditionally not be shared broadly. They communicate directly and provide feedback in a timely manner to initiatives happening within their department and across the company. They hold the e group and other leaders accountable for upholding this value. EVP/CXO Champions transparency both internally, across the company and externally. They participate both internally and externally in events and share the value that being open can provide to increasing trust with team members and others that interact with our product. They provide timely, kind feedback with initiatives happening internally and externally. They hold the e group and other leaders accountable for upholding this value. Why have values Our values provide guidelines on how to behave and are written to be actionable. They help us describe the type of behavior that we expect from GitLab team members. They help us to know how to behave in the organization and what to expect from others. Values provide a framework for distributed decision making, detailed in GitLabs TeamOps management philosophy. They allow individuals to determine what to do without asking their manager and they allow teams to make consistent decisions. When teams across the organization reference the same values in their decision making, there is consistency in how decisions are made. This ensures that our culture remains driven by our values. Lastly, values create a conscious culture that is designed to help you prosper and experience exceptional personal growth through work. Five dysfunctions Our values also help us to prevent the five dysfunctions: Fear of conflict Seeking artificial harmony over constructive passionate debate  prevented by transparency, specifically directness and collaboration, specifically short toes Absence of trust Unwilling to be vulnerable within the group  prevented by collaboration, specifically kindness Avoidance of accountability Ducking the responsibility to call peers on counterproductive behavior which sets low standards  prevented by results, iteration, and transparency Inattention to results Focusing on personal success, status, and ego before team success  prevented by results Lack of commitment Feigning buy-in for group decisions creates ambiguity throughout the organization  prevented by transparency, specifically directness Some dysfunctions are not addressed directly by our values; for example, trust is not one of our values. Similar to happiness, trust is something that is an outcome, not something you can strive for directly. We hope that the way we work and our values will instill trust, instead of mandating it from people; trust is earned, not given. Operating principles Operating principles are behaviors that empower GitLab team members to definitively live out a given value. They clarify what a given core value means and looks like at GitLab. Understanding this distinction is critical to thriving at GitLab, particularly for newer team members who may be familiar with a prior organizations interpretation of iteration or collaboration (as examples). Process for removing operating principles Values are not just things we do, but things that actively drive good behavior. When we remove them it doesnt mean we stopped believing in it, just that it wasnt actively helping to drive behavior. If we dont prune our operating principles, then we will be like every other company: things that make sense but are not leading to a better culture. To remove an operating principle from the Handbook page, submit your change through a merge request and explain your reasons in the merge request description. The GitLab Value Handbook Page owner must approve and merge the request. Mention the specific value Most companies have a list of values. In companies without strong values, folks often use generalizations when they refer to values. For example, not a value add or scored well on values during our interview. In companies with strong values, folks name the specific, relevant value as it applies to a given topic or situation. Values are only powerful when they are individually understood and applied by team members. How to scale the business while preserving GitLab values? For certain business decisions or projects (such as compensation and end-point management ), GitLab team members may have a lot of opinions and interest, and they want to provide their feedback and comments. On the other hand, it might be challenging for the project DRI to digest and respond to all these inputs. What should you do in this scenario? Everyone can contribute at GitLab. We encourage team members to share feedback and leave comments on issues. Leaving feedback and comments shows that team members care about a topic and about GitLab as a company. These perspectives may also uncover potential risks and problems in the project. There shouldnt be a Dont they have their job to do? type of response. Furthermore, we shouldnt judge team members who are perceived as being the squeaky wheel. At GitLab, we measure impact, not activity. As long as a team member is producing required results, they are empowered to decide how to spend their time. On the other hand, as GitLab grows in size, we need to make decisions and the decisions may not be agreed to by everyone. If a decision or project is sensitive or controversial, and receives large amounts of feedback, it can be challenging for the project DRI to handle. In these cases, its best to have time-boxed feedback built into timelines. In a hypothetical example where a DRI needs to decide between red and gold potatoes for a stew, they would create an issue with the following sentiment: Were deciding between red potatoes and gold potatoes to go into the stew. We have to decide by Tuesday 2020-07-14 so that we can get our order to the grocery store on Wednesday 2020-07-15. Well be collecting input and feedback until that point. Jane is the DRI and will make the decision on 2020-07-14 with all the information we have at that point. Here is the framework were using for the decision: are there allergies to consider? cost per pound team member preferences Once the decision is made, it will be what is going into the stew. This method has shown itself to be effective at soliciting productive feedback that doesnt derail a timeline while ensuring team members feel heard. Why our values are public Companies are encouraged to copy and implement GitLabs values. They are Creative Commons and can be copied verbatim. We make our values public for many reasons. There is great power and efficiency in teams who share company values. Concealing values until after someone is hired into an organization is not a wise strategy. Not everyone will see our values and feel aligned with them, and thats OK. By making values public, it shows respect for the time of job seekers who conduct due diligence on prospective employers. When people who are aligned with GitLabs values apply for an open vacancy, this allows our hiring teams to more efficiently move candidates through the interview process. In a GitLab Unfiltered interview on values, GitLab co-founder Sid Sijbrandij offers the following context. Companies may ask you to write a blank check. Theyll say, Come join our organization, and when youre here, you need to subscribe to our values, our way of working, and our strategy. Its very essential, and its part of our identity! But these companies dont give you the opportunity up front to evaluate it. It doesnt make any sense to me. If its so important that people share your values, have them out there. Hierarchy Occasionally, values can contradict each other. Its useful to keep in mind this hierarchy to resolve confusion about what to do in a specific circumstance, while remaining consistent with our core values. Think of the hierarchy as a weighting system. Values higher in the hierarchy do not automatically override values lower in the hierarchy. Here are some examples: If a change impacts Transparency positively but impacts Efficiency negatively in roughly the same amount, we would move ahead since Transparency is higher in the hierarchy than Efficiency. If a change has a massive positive impact on Diversity but negatively impacts Iteration, we would move ahead even though Diversity is lower in the hierarchy than Iteration because the overall impact is more positive than negative. In a GitLab Unfiltered interview on values, GitLab co-founder Sid Sijbrandij offers the following context. Its an attempt to relieve at least some of the tension. Its not absolute. If you think of values as binary, thats not going to work. There will always be interpretation, and theres always magnitude to consider. We made a hierarchy so that its clear, in the end, the result matters most. For instance, were not going to be transparent for the sake of being transparent. Were not radical in our transparency. We do it because we think it will lead to better outcomes. Those hierarchies are really important. They wont preempt every debate, but it helps. Updating our values Our values are updated frequently and as needed. Everyone is welcome to make a suggestion to improve them. To update: make a merge request and assign it to the CEO. If youre a team member or in the core team please post a link to the MR in the values Slack channel. If youre not part of those groups, please send a direct X/Twitter message to sytses. How do we reinforce our values Whatever behavior you reward will become your values. We reinforce our values by: Criteria we use for promotions and communicate to the whole company on announcement. What we select for during hiring. What we emphasize during on-boarding. Criteria we use for our annual compensation review. What we refer to when making decisions. The example the E-group sets for the company since a fish rots from the head down. What we expect from all team members, as ambassadors for our values. Keeping them up to date with a stream of commits that add details. Behavior we give each other 360 feedback on. Behavior we compliment. Criteria we use for discretionary bonuses. What we include in our offer letters Criteria we use to manage underperformance. What we do when we let people go. Giving value awards during GitLab Summit. Providing GitLab team members and qualified individuals transparency into all aspects of the company through the CEO Shadow Program to enable them to better engage and collaborate cross-functionally. Linking the takeaways of courses to our values, like we did for the Crucial Conversations training. The default settings of the software we use (for example: Speedy meetings, document sharing, agendas, etc.) Reinforcing our values with features in GitLab, for example the Iterations feature. Applying one of our values virtual backgrounds in video calls. Our GitLab Song Book, the song lyrics often mention GitLab values. Regularly conduct a values exercise at the e-group offsite. The most important moments to reinforce our values are decisions which affect individual team members most: hiring, promotions, and bonuses, which is why every promotion document at GitLab is shared with the entire company and uses the values as its core structure. In negative feedback, we should be specific about what the problem is. For example, saying someone is not living the values isnt helpful. Your values are what you hire for, what you praise people for, and what you promote them for. By definition, what you do in those instances are your values. Its not what you say they are. Values should be explicitly part of our hiring process, our job profiles, and our review process. When we give bonuses and promotions, they are always linked to values. Thats the crucial thing. If you reinforce them there, thats the most powerful thing you can do.  Sid Sijbrandij, GitLab co-founder What to do if values arent being lived out Value erosion can occur when indifference and apathy are tolerated. It can also occur when individuals justify undesired behaviors by interpreting values as me values rather than company values. For example, a team member may speak to the importance of personal efficiency in order to justify not collaborating professionally with peers. This is not what we expect from team members in terms of efficiency and collaboration. If you feel that values are not being lived out in a given scenario, speak up and ask for context in a respectful manner. Navigating value conflicts starts with assuming positive intent from other team members. Offer links to relevant values and/or operating principles when discussing the issue. If there is confusion or disagreement about the interpretation of a value, please surface the discussion in GitLabs values Slack channel (for GitLab team members) or -mentioning gitlab on X/Twitter (for those who do not work at GitLab). In a GitLab Unfiltered interview on values, GitLab co-founder Sid Sijbrandij offers the following context. Almost every time we face a hard decision at GitLab, its because values are in conflict. Its not binary logic. It requires conversation, and sometimes there is no obvious answer. We can only achieve resolution by respectfully talking with each other and trusting the DRI to make the ultimate decision. Permission to play From our values we excluded some behaviors that are obvious; we call them our permission to play behavior: Be truthful and honest. Be dependable and reliable. Try to keep promises. If you might not keep a promise, proactively communicate as soon as you suspect it. Be deserving of the trust of our team members, users and customers. Be committed to the success of the whole organization. Act in the best interest of the company, our team members, our customers, users, and investors. Make the best decisions for GitLab. Act in accordance with the law. Dont show favoritism as it breeds resentment, destroys employee morale, and creates disincentives for good performance. Seek out ways to be fair to everyone. Playing politics is counter to GitLab values We dont want people to play politics at GitLab. An example of politics is people discussing a proposal and being overly focused on whose proposal it is. This is a manifestation of the Belief Bias, where we judge an arguments strength not by how strongly it supports the conclusion but by how strongly we support the conclusion. Proposals should be weighed on their merits and not on who proposed them. Another example is people being promoted based on others liking them or having a lot of alliances. We want people to be promoted based on their results. We value collaboration, but thats different from being promoted just because people like you. Below are some attributes of political and non-political work environments. GitLab plans to maintain a non-political one. Political environment Non-political environment Values are weaponized and used out of their intended context Team members utilize values with a positive intent Team members are driven by self-interest Team members are driven by company interest Team members work in silos Team members optimize globally People have territorial behaviors and are quick to perceive suggestions as attacks People have short toes People have unhealthy alliances with backroom conversations People have good intent and actively collaborate with folks Information is intentionally withheld Information is shared early (often WIP) and at the same time with all interested parties People try to undermine each others credibility by arguing with the weakest part of their argument People take a steel man position and argue against the strongest version of your opponents position Folks do not provide direct feedback. Instead, they withhold their thoughts or speak behind each others backs Feedback is given directly. This includes feedback about a managers team Communicating your own suggestions through a report instead of directly Feedback is given directly from the person who has it Evaluating proposals or work by who said or did it instead of by what is in it Proposals and work is evaluated without regard to who worked on them Lack of transparency in escalations. Team members go to a manager without first attempting to align with peers on an issue or letting peers know Team members speak directly to each other about feedback and requests in order to resolve their own conflicts. When they escalate, they do it in an effective way Values make choices Values make and clarify choices. A well-chosen value has a defensible opposite. Apple, for example, values secrecy over transparency and product perfection over iteration. They are successful building around our counter values  although the result is a very different company. What is not a value All-remote isnt a value. It is something we do because it helps to practice our values of transparency, efficiency, results, and diversity, inclusion  belonging. Questions from new team members During every GitLab 101 session with new hires we discuss our values. We document the questions and answers to Frequently Asked Questions about the GitLab Culture. New team members should read GitLabs guide to starting a new remote role, and reference interviews centered on values within the GitLab Unfiltered YouTube channel. Mission Our mission is to enable everyone to contribute to and co-create the software that powers our world. This mission guides our path, and we live our values along that path. Mitigating Concerns We have a page which documents our Mitigating Concerns. Many of our values help to mitigate some of these concerns. GitLab Values Quiz Anyone with a GitLab account can access the GitLab Values Quiz. To participate in the quiz, you will need to complete this learning course in Level Up. If you have questions, please reach out to our LD team at learninggitlab.com. Last modified June 27, 2025: Remove company OKR process (99161f51) View page source - ",
      "keywords": [
        "about",
        "behavior",
        "belonging",
        "collaboration",
        "communication",
        "conduct",
        "culture",
        "customers",
        "development",
        "discrimination",
        "diversity",
        "efficiency",
        "employee",
        "engineering",
        "everyone",
        "gitlab",
        "handbook",
        "harassment",
        "inclusion",
        "inclusive",
        "iteration",
        "learn",
        "please",
        "policy",
        "remote"
      ],
      "extracted_at": "2025-07-21 13:46:52",
      "content_length": 113815
    },
    {
      "id": "communication-guidelines",
      "title": "Communication Guidelines",
      "url": "https://handbook.gitlab.com/handbook/communication/",
      "section": "Company Processes",
      "content": "GitLab Communication Were an all-remote company that allows people to work from almost anywhere in the world. Its important for us to practice clear communication in ways that help us stay connected and work more efficiently. Were an all-remote company that allows people to work from almost anywhere in the world. We hire great people regardless of where they live, but with GitLab team members across more than 60 countries, its important for us to practice clear communication in ways that help us stay connected and work more efficiently. To accomplish this, we use asynchronous communication as a starting point and stay as open and transparent as we can by communicating through public issues, merge requests, and Slack channels. We also place an emphasis on ensuring that conclusions of offline conversations are written down. When we go back and forth three times, we jump on a synchronous video call. We communicate respectfully and professionally at all times. Effective  Responsible Communication Guidelines Assume Positive Intent. Always begin with a position of positivity and grace. Kindness Matters. You are looking at a screen, but you are really talking to a person. If you wouldnt say it to a persons face, do not send it to them in a text message. Express Your Thoughts Responsibly and Inclusively. We live in different locations and often have very different perspectives. We want to know your thoughts, opinions, and feelings on things. We also ask you to consider the guidelines around communicating potentially sensitive topics. Own It. If you say it or type it, own it. If it hurts the company or an individual, even unintentionally, we encourage you to look at things from other points of view and apologize easily. Be a Role Model of our Values. Feedback is Essential. It is difficult to know what is appropriate in every one of our team members 60 countries. We encourage team members to give feedback and receive feedback in a considerate way. Do not underestimate a 1:1. Asynchronous communication (e.g., via text) is helpful and necessary. In some cases (e.g., to clarify misunderstandings) it can be much more effective to jump on a Zoom video call. Always Adhere to our Anti-Harassment Policy and GitLab Code of Business Conduct and Ethics. Everyone should be comfortable in their work environment. Focus on what we can directly influence. There are many factors we cant directly influence and we should avoid spending time discussing those things. For example, we dont talk about our market capitalization because aspects of this are out of our control. Instead, we should focus on how we can work together to achieve company objectives and grow annual recurring revenue. Commit to active and effective listening. Embracing asynchronous communication and learning to use it effectively requires a mental shift. This can feel unusual or even uncomfortable for those who come from a colocated environment, where in-person meetings and communiques are the norm. Learn more about mastering the use of the written word in an all-remote setting. Everyone is a moderator If you see something that concerns you in Slack, Issues, Merge Requests, Video, Emails or any other forum, we encourage you to respectfully say something directly to the individual in a 1:1 format. If there is an issue to raise regarding someones communication or conduct, team members should follow the process for raising communication concerns by sharing their concern with their manager or, if preferred, email Team Member Relations (teammemberrelationsgitlab.com) directly. Asynchronous communication In an all-remote setting, where team members are empowered to live and work where theyre most fulfilled, mastering asynchronous workflows is vital to avoiding dysfunction and enjoying outsized efficiencies and lifestyle flexibility. Asynchronous communication is the art of communicating and moving projects forward without the need for additional stakeholders to be available at the same time your communique is sent. To learn more on when to use asynchronous and synchronous communication, examples of async workflows in practice at GitLab, core async behaviors, and to take an async knowledge assessment, visit GitLabs guide to embracing asynchronous communication. Communicate directly When working on a problem or issue, communicate directly with the people you need support from rather than working through reporting lines. Direct communication with the people you need to collaborate with is more efficient than working through your manager, their manager, or another intermediary. Escalate to management if you are not getting the support you need. Remember that everyone is a manager of one and they might have to complete their own assignments and inform the reporting lines. Communicating Potentially GitLab Sensitive Topics (This guidance supplements and overlaps with GitLabs SAFE Framework, the guidance on the use of the internal handbook, and the additional guidance on this page. We ask our team members to consider the factors below in their communication. ) As GitLab matures, we want to continue to foster discussion while evolving our communication guidelines so that topics that are potentially GitLab sensitive are discussed in appropriate forums. This is particularly relevant as team members heavily leverage async modes of communication including merge requests, issues and epics, and in Slack communication. Words have impact long after they are written, and even when youre communicating internally, the manner in which you speak with one another should be viewed through an external lens. For additional information, please review our Guidelines for communicating effectively and responsibly through text. Confidentiality levels At GitLab, we are public by default, but some information is classified as internal or limited access. Please see the confidentiality levels handbook page for details on this. Examples of Potentially GitLab Sensitive Topics Team member data (individual performance, start dates, departures) Violations, or potential violations, of policies and/or local rules and regulations Customer or partner information (logos, trademarks, spend) Material nonpublic information The above examples overlap with the GitLabs SAFE Framework examples. We recommend you to further review that page for more information and context. What are the risks? Legal risk: These are the risks that arise from regulations and laws that govern GitLab or the market in which it operates. This includes, but is not limited to, content that would compromise a GitLab team member, customer, or users personal data and/or privacy. Morale risk: Raising GitLab sensitive topics that may be misinterpreted without the opportunity to ask clarifying questions can create risk to team culture and/or morale. PR risk: Remember that anything you document could ultimately be shared/viewed externally. Consider that a discussion in a public MR or issue is a demonstration of our values to those outside of GitLab who are looking to learn more about how we collaborate. We encourage communicating risks to GitLab, its team members, or customers in a synchronous 1:1 setting. Determining Which Communication Forum To Use The table below outlines an overview of different communication forums at GitLab, and the considerations team members should think through related to potentially GitLab Sensitive topics when determining which forum to leverage. Communication Forum When To Utilize Use the internal Handbook aligned with the guidelines When you want to document information for team members that is internal-only, including not public and not limited access External MR/issue (not confidential) For discussion and collaboration when there is no risk suspected or identified (directly or later) and it doesnt fall into not public category Internal MR/ confidential issue For discussion and collaboration when there is no risk suspected or identified but adhering to things that are internal-only, not public, SAFE Framework/General Communication Guidelines Your Manager, DRI and/or Legal For discussion and collaboration when in doubt about potential risk and you want to review if theres a potential risk DRI For discussion and collaboration when theres a risk suspected or identified, communicate directly with the DRI verbally via Zoom. Examples include issues where Limited Access applies or it covers a change to People Process/policy. People Group (your People Business Partner or Team Member Relations) For discussion and collaboration when theres a risk suspected or identified, a policy violation, and/or its a private matter GitLabs Whistleblower policy For flagging a situation that is a violation as set out in the policy When in doubt, you can reach out to your People Business Partner and/or your leadership team directly. Organization code names Please see our Project names section. Internal communication Internal communication is any work related communication at a company. Internal Communication includes team member conversations, wider team discussions, or internal announcements to the company or targeted outreach to select internal audiences. At GitLab, everyone can contribute to the effectiveness of Internal Communications to support aspects of GitLab culture, such as intentional transparency and engaging people in open dialogue. Since we believe that all team members must be Managers of One, most communication is handled by the relevant group, but we know that some communications are more sensitive and contentious than others. In those cases, the DRIs may want to engage the Internal Communications function. Top tips and best practices All written communication happens in English, even when sent one on one, because sometimes you need to forward an email or chat. Use asynchronous communication when possible: merge requests (preferred) or issues. Announcements happen on the appropriate Slack channels and people should be able to do their work without getting interrupted by chat. Discussion in issues or Merge Requests is preferred over everything else. If you need a response urgently, you can Slack someone with a link to your comment on an issue or merge request, asking them to respond there, however be aware that they still may not see it straight away. See Slack for more. If you choose to email instead of chat it is OK to send an internal email that contains only a short message, similar as you would use in chat. You are not expected to be available all the time. There is no expectation to respond to messages outside of your planned working hours. Sometimes synchronous communication is the better option, but do not default to it. For example, a video call can clear things up quickly when you are blocked. See the guidelines on video chats for more detail. It is OK to ask as many questions as you have. Please ask them so many people can answer them and so others can benefit from seeing the answer. Use issues or public chat channels (like questions) instead of direct messages or one-on-one emails. If you have researched in the handbook and could not find the answer or need clarity, include the handbook link you were reviewing and state while looking in the handbook I could not find x,y,z. If you send a handbook link to someone as an answer to a question, consider adding some context, especially if they are new to GitLab. Its great that we often have the answer documented, but its not always easy to find if you are a new team member. If the answer to a question isnt documented, please immediately make a merge request to add it to the handbook in a place you have looked for it. It is great for the person who answered the question to see you leading by example to ensure that question only needs to be answered once. A merge request is the best way to say thanks for help. If you mention something (a merge request, issue, commit, webpage, comment, etc.) please include a link to it. All company data should be shareable by default. Do not use a local text file, but rather leave comments on an issue. When someone asks something, give back a deadline or that you did it. Answers like: will do, OK, it is on my todo list are not helpful. If it is small its better to spend 2 minutes and do the tasks so the other person can mentally forget about it. If it is large you need to figure out when youll do it, by returning that information the other person might decide to solve it in another way if it takes too long. It is OK to bring an issue to someones attention with a CC (cc user), but CCs alone are not enough if specific action is needed from someone. The mentioned user may read the issue and take no further action. If you need something, please explicitly communicate your need along with  mentioning who you need it from. Avoid creating private groups for internal discussions: Its disturbing (all users in the group get notified for each message). Its not searchable. Its not shareable: there is no way to add people in the group (and this often leads to multiple groups creation). They dont have a subject, so everyone has to remember the topic of each private group based on the participants, or open the group again to read the content. History is lost when leaving the group or after 90 days. It is perfectly fine to create a channel, even for a single customer meeting. These channels should be named a_-internal to indicate their internal nature (not shared with customers). Use low-context communications by being explicit in your communications. We are a remote-only company, located all over the world. Provide as much context as possible to avoid confusion. Relatedly, we use ubiquitous language for communication efficiency. When discussing concepts, be careful not to lean too much into hypotheticals. There is a tipping point in which it decreases value and no longer becomes constructive at helping everyone come into a unified decision. Consult our tips for better writing. Internal Communication Channel Guidance What/When The GitLab Handbook The Loop Slack Email/Newsletters Meetings Primary Purpose Transparency around GitLab procedures, documenting information handbook-first Connect team members with news, information, and stories Real-time collaboration and quick communications Formal communications, select company updates, and consolidated updates to targeted audiences Synchronous discussions and collaboration Best For 1.) Sharing processes and/or procedures valuable to customers, community, or candidates 2.) Creating external transparency (core values, mission, and vision) 3.) Documenting workflows and standardized processes 1.) Finding/sharing company information, announcements, and events 2.) Learning/sharing programs and initiatives 3.) Accessing personalized and relevant content 4.) Team member storytelling, connection, and engagement 5.) Team showcases and wins 1.) Immediate discussions 2.) Quick questions 3.) Team coordination 4.) Time-sensitive, informal updates 5.) Instantaneous feedback/communication 6.) Channel-specific discussions 1.) Critical and/or formal announcements 2.) Newsletters with targeted updates 3.) External communications (customers, vendors, etc.) 4.) Items requiring official email notification 5.) Informing targeted audiences 6.) Select leadership communications 1.) Complex discussions 2.) Decision-making sessions 3.) Relationship building 4.) Project kickoffs/reviews 5.) Interactive sessions 6.) Ideation and/or problem solving 7.) Engaging and visual presentations 8.) Resolving conflicts Not For 1.) Time-sensitive updates 2.) Internal communication 4.) Team-specific news 5.) Daily operational matters 1.) Technical documentation 2.) Small audience communication 3.) Highly confidential information. Note: Private Sites is an option for safeguarding access 1.) Detailed documentation 2.) Complex content sharing 3.) Evergreen or long-term Information sharing 1.) Collaborative discussions 2.) Questions requiring quick responses 3.) Urgent issues requiring immediate attention 1.) Simple updates 2.) Information sharing only 3.) Documentation of processes 4.) That which could be handled asynchronously Key Features / Benefits 1.) Version control 2.) Public accessibility 3.) Single source of truth for processes 1.) Customization and personalization 2.) Newsletter, feed, employee generated content 3.) AI powered search and content governance 4.) Fosters Communication, connection, and culture 1.) Collaboration and connection 2.) Integrations 3.) Real-time communication 4.) Productivity and efficiency 5.) Supports projects, teams, and transparency 1.) Improved awareness 2.) Streamlined communication 3.) Personalized content delivery 1.) Face-to-face interaction 2.)Screen and presentation sharing 3.) Breakout rooms 4.) Recording capability Structure content instead of using FAQs We want to avoid unstructured content which includes FAQs (Frequently Asked Questions), especially for internal communication. FAQs tend to take on the voice and concerns of assumed personas. Instead of assuming questions, aim to articulate key facts as statements and use these to structure content under topical headers which arent questions. Structured content around GitLab, the product, should be in GitLab Docs and structured content around GitLab, the company, should be in the handbook; we should not use separate documents or locations to share this information. Restructuring the content As an example, lets say your FAQ would have a question like: Q: Im not seeing widget X, what should I do? A: If youre not seeing widget X, you can verify if its enabled or not by going to User Profile - Settings and ensure the checkbox is enabled under Enable widget X You can reframe it to: How to enable widget X You can enable widget X by going to User Profile - Settings and ticking the checkbox next to Enable widget X then clicking on the Save button FAQs are discouraged elsewhere as well Content guidelines across the industry support avoiding FAQs: https://www.plainlanguage.gov/guidelines/web/avoid-faqs/ https://digital.gov/2015/04/27/are-faqs-still-relevant/ https://guides.18f.gov/content-guide/our-approach/structure-the-content/ https://gds.blog.gov.uk/2013/07/25/faqs-why-we-dont-have-them/ https://thegood.com/insights/faq-pages/ https://alistapart.com/article/no-more-faqs-create-purposeful-information-for-a-more-effective-user-experi/ Multimodal communication Employ multimodal communication to broadcast important decisions. To reach our distributed organization, announce important decisions in the company announcements Slack channel, email the appropriate team email lists, Slack the appropriate channels, and target 1:1s or other important meetings on the same day, with the same information. When doing this, create and link to a single source of truth: ideally the handbook, otherwise an epic, issue, or Google Doc. The email or Slack message should not be the source of truth. When referring to email that recipients should have received, reference the sender and subject of the email so its easy to find. For example, You should have received an email from Jane Smith with the subject Training Seminar Details. Asking is this known If something is behaving strangely on https://gitlab.com, it might be a bug. It could also mean that something was changed intentionally. Please search if the issue has already been reported. If it has not been reported, and you are sure it is a bug, please file an issue. If you are unsure whether the behavior you experience is a bug, you may ask in the Slack channel is-this-known. If you know which stage of the DevOps lifecycle is affected, it is also okay to ask in s_stage, for example s_manage. When you ask: Make sure that no-one has experienced this issue before, by checking the channel for previous messages. Describe the behavior you are experiencing, this makes it searchable and easier to understand. Different people might look for different things in the same screenshots. Asking in a single channel helps discoverability, duplicated efforts and reduces noise in other channels. Please refrain from asking in general purpose channels like frontend, backend, development or questions. Numbering is for reference, not as a signal When taking notes in an agenda, in the handbook, or in other documents, keep items numbered so we can refer to Item 3 or 4a. The number is not a signal of the importance or rank of the subject unless explicitly stated to be such. It is just for ease of reference. Cross link Linking should not be in one direction. We should go beyond deep-linking to create a richer web of links that can surface content and ensure people consider all pages when making updates. When linking one page to another, try to link back as well. Instead of only linking from Page A to Page B, both link Page A to Page B and link Page B back to Page A. For example, the Live Doc Meeting section of the All Remote Guide links to the Live Docs Meetings page. The Live Docs Meetings page links back to the Live Doc Meeting section of the All Remote Guide. Acknowledgement Receipts (ACK) Informal ACKs In informal acknowledgement scenarios, such as on Slack or on issue comments, it is common practice to use the following: Slack emoji reaction of :ack: or an ACK response  Acknowledged, or message received Eyes   Ill check this out  seen  working on it Thumbs up   good idea White checkmark   task is complete or done Heart   expression of gratitude or appreciation cc mentions  if someone needs to see a message Formal ACKs In order to effectively communicate an important change to hundreds of distributed employees, we occasionally use an ACK process. To prevent overuse, this should only be used by a member of the exec team. Anyone may ask an exec to sponsor one. As a guideline, wed expect no more than one per quarter to be sent out. Too many ACKs lose power. To initiate an ACK process: Clone the form from the ACK template and fill it out. Link to MRs and Handbook pages instead of duplicating your content in the form. Why handbook first? Ask People Ops to pull a report from Workday with the column headers First Name, Last Name, Job Title, Department, Manager, and Work Email. Double check it and turn the emails into a comma-delimited string with an excel formula like this: TEXTJOIN(\", \", true, Sheet1!E2:E432) Send the form and expect to get 50% of the responses in the first 24 hours. To get the rest: Post in common Slack channels. Add to staff meeting agendas. Suggest to team managers to post to their team Slack channels, ask for explicit :ack: and pin to the channel until everyone responds. Lastly, reach out 1-on-1 to stragglers while being respectful of vacation time. Say thanks As we continue to build on inclusion, recognition is a key and transformative tactic. Thanking team members provides an opportunity for them to be recognized for their contributions, influences engagement behavior, and acknowledges to team members their work is seen. By saying thanks, you are contributing to and supporting the value of DIB. Thank people that did a great job in our thanks Slack channel. Almost everyone in the company is active in this channel so please dont be shy. Consider other channels where recognition can be acknowledged: team meetings, issues, company calls, 1-1 meetings, etc. If someone is a team member just -mention them, if multiple people were working on something try -mentioning each person. When announcing a completed project, list the key contributors. Please be as timely as possible with your recognition. If possible please include a link with your thanks that points to the subject matter that you are giving thanks for, for example a link to a merge request. Please do not mention working outside of working hours, we want to minimize the pressure to do so. Please do not celebrate GitLab contribution graphs that include working for uninterrupted weeklong cycles, as this does not foster healthy work/life harmony for all team members. While GitLab team members are free to time-shift and work weekends in place of weekdays, we discourage celebrating the absence of time away from work. Do not thank the CEO or other executives for something that the company paid for, thank GitLab instead. To thank someone who is not a team member, you can nominate them for community swag. Understand that everyone doesnt need or want recognition. Once this is advised, please respect when they dont. Values emoji Add Values emoji reactions to thank you messages in the thanks slack channel or feel free to use them in GitLab.com, other slack channels and social media, when you see alignment to our values: GitLabs values. Emoji Custom values emoji Meaning :handshake: :collaboration-value: Collaboration :chart_with_upwards_trend: :results-value: Results for Customers :stopwatch: :efficiency-value: Efficiency :globe_with_meridians: :diversity-value: Diversity Inclusion and Belonging :footprints: :iteration-value: Iteration :eye: :transparency-value: Transparency As a second iteration, we have added these custom emoji to GitLab to enable tanuki values reactions in issues, epics, and MRs within the gitlab-com and gitlab-org groups. As a later iteration, we will begin tracking the number of emoji reactions for each value through the Reacji API and update this page with our findings! Indicating availability Indicate your availability by updating your own calendar using Googles out of office feature and include the dates you plan to be away in your automated response. Note that this feature will automatically decline any meeting invitations during the time frame you select. Put your planned away time including holidays, vacation, travel time, and other leave in your own calendar. Please see Communicating your time off for more. Set your working hours in your Google Calendar settings. Utilize Time Off by Deel to keep other GitLab team members aware of your planned time away within Slack. Informal communication Informal communication is made up of interactions between co-workers that are unofficial in nature and focus on building social relationships outside of the normal hierarchy of a typical business structure. In other words, its what happens when we get to know each other and talk about anything other than work. Informal communication is a vital part of GitLab culture, and weve listed 20 ways to engage. Not sure where to go? If there is something that you want to discuss, but you do not feel that it is a reasonable option to discuss with either your manager or CEO, then you can reach out to any of the other C-level GitLab team members. Start with a Merge Request When possible, its best practice to start a discussion with a Merge Request (MR) instead of an issue. An MR is associated with a specific change that is proposed and transparent for everyone to review and openly discuss. The nature of MRs facilitate discussions around a proposed solution to a problem that is actionable. An MR is actionable, while an issue will take longer to take action on. Always open an MR for things you are suggesting and/or proposing. Whether something is not working right or we are iterating on a new internal process, it is worth opening a merge request with the minimal valuable change instead of opening an issue encouraging open feedback on the problem without proposing any specific change directly. Remember, an MR also invites discussion, but its specific to the proposed change which facilitates focused decision. Never ask someone to create an issue when they can default to the merge request. Starting with a Merge Request is part of Handbook First and helps ensure the handbook is up-to-date when a decision is made. It is also how we make it possible for Everyone to Contribute. This is true, not just for updating the handbook but for updating all things. Merge Requests, by default, are non-confidential. However, for things that are not public by default please open a confidential issue with suggestions to specific changes that you are proposing. The ability to create Confidential Merge Requests is also available. When possible, consider not including sensitive information so the wider community can contribute. Not every solution will solve the problem at hand. Keep discussions focused by defining the problem first and explaining your rationale behind the Minimal Valuable Change (MVC) proposed in the MR. Be proactive and consistent with communication on discussions that have external stakeholders such as customers. Its important to keep communication flowing to keep everyone up to date. MRs can appear stale if there arent recent discussions and no clear definition on when another update will be provided, based on feedback. This leaves those subscribed in the dark, causing unnecessary surprise if something ends up delayed and suddenly jumps to the next milestone. It is important that MRs are closed in a timely manner through approving or rejecting the open requests. Have a bias for action and do not aim for consensus. Every MR is a proposal, if an MRs author isnt responsive take ownership of it and complete it. Some improvement is better than none. Cross link issues or other MRs with related conversations. E.g. if theres a Zendesk ticket that caused you to create a GitLab.com MR, make sure to document the MR link in the Zendesk ticket and vice versa. And when approving or rejecting the MR, include reason or response from Zendesk. Put the link at the top of each MRs description with a short mention of the relationship (Report, Dependency, etc.) and use one as the central one and ideally close the alternate if duplicate. When providing links to specific lines of code relevant to the MR, always use a permalink (a link to a specific commit for the file). This ensures that the reference is still valid if the file changes. For more information, see Link to specific lines of code. If submitting a change for a feature, update the description with the final conclusions (Why an MR was rejected or why it was approved). This makes it much easier to see the current state of an issue for everyone involved in the implementation and prevents confusion and discussion later on. Submit the smallest viable and valuable thing. When proposing a change, submit the smallest reasonable commit, put suggestions for other enhancements in separate issues/MRs and link them. An MR can start off as only a problem description and TODO comments. If youre new to GitLab and are writing documentation or instructions, submit your first merge request for at most 20 lines. Do not leave MRs open for a long time. MRs should be actionable  stakeholders should have a clear understanding of what changed and what they are ultimately approving or rejecting. Make a conscious effort to prioritize your work. The priority of items depends on multiple factors: Is someone waiting for the answer? What is the impact if you delay it? How many people does it affect, etc.? This is detailed in Engineering Work flow. When submitting a MVC, ask for feedback from your peers. For example, if youre a designer and you propose a design, ping a fellow designer to review your work. If they suggest changes, you get the opportunity to improve your design and propose an alternative MR. This promotes collaboration and advances everyones skills. Respond to comments within a threaded discussion. If there isnt a discussion thread yet, you can use the Reply to comment button from the comments to create one. This will prevent comments from containing many interweaved discussions with responses that are hard to follow. If your comment or answer contains separate topics, write separate comments for each, so others can address topics independently using the Reply to comment button. If you have received any feedback or questions on your MR, try to acknowledge comments as thats how we ensure we create an environment of belonging for all team members. Merging your MR as-is without giving an answer or any response makes the commenters feel their opinions are unheard. If you are the Directly Responsible Individual (DRI) who does not have to make a fast decision, you can choose not to change your MR, but you should acknowledge the comments or feedback, consider if they warrant a change to your MR, and say why, not just what. If there are many comments, you can choose to summarize key feedback areas and share your response at a high level. We appreciate that if you force a DRI to explain too much, youll create incentives to ship projects under the radar. The fear of falling into a perpetual loop of explaining can derail a DRI, and cause people to defer rather than working with a bias for action. This is something we want to avoid. When fast decisions are needed, well have to accept that people listened to us but dont owe us an explanation to have fast decisions based on everyones input. The goals are to be transparent and collaborativenot to lose efficiency. Not everyone will agree, but we expect all people to disagree, commit, and disagree. For GitLab, the product merge request guidelines are in the Contribution guide and code review guidelines for reviewers and maintainers are described in our Code Review Guidelines. Even when something is not done, share it internally so people can comment early and prevent rework. Create a Draft merge request to prevent an accidental early merge. Only use Draft when merging it would make things worse, which should rarely be the case when contributing to the handbook. Most merge requests that are in progress dont make things worse. In this case, do not use Draft; if someone merges it earlier than you expected just create a new merge request for additional items. Never ask someone to do a final review or merge something that still has Draft status. At that point you should be convinced it is good enough to go out. If any follow-up actions are required on the issue after the merge request is merged (like reporting back to any customers or writing documentation), avoid auto-closing the issue. If a project requires multiple approvals to accept your MR, feel free to assign multiple reviewers concurrently. This way the earliest available reviewer can start right away rather than being blocked by the preceding reviewer. If the MR involved gets a lot of comments, you can turn it into a Manager Mention MR. Consider recording a concise video or audio file outlining the merge request and uploading it to the GitLab Unfiltered channel on YouTube. This will make content more accessible, prevent future confusion, allow for multitasking (e.g. cooking dinner and listening to the video), and increase participation for folks who digest audio information better than visual. Scaling Merge Requests through Manager Mention MRs (formerly Consolidated MRs) Some merge requests that involve a big decision or change tend to collect a large amount of feedback. As GitLab grows in size, it is unrealistic for a single person to respond to potentially hundreds of comments. To remain efficient in these MRs and to make it scalable, it is important for the DRI to receive a clear signal of input that is shared on the merge request. Some MRs may be marked as Manager Mention MRs by clearly designating them as such at the beginning of the MR description with the following code block:  Manager Mention MR This MR is a Manager Mention MR(/handbook/communication/scaling-merge-requests-through-manager-mention-mrs-formerly-consolidated-mrs). Contributors should tag their manager when adding a comment. If managers are tagged they should either respond to the question or summarize and tag their manager. Additionally, add the \"Manager Mention MR\" label to the merge request. This will make future analytics on Manager Mention merge requests more easily identifiable. It also enables managers to subscribe to the label to be notified when an MR has elected the Manager Mention MR designation. We tried Manager Mention MRs for the first time in a recent announcement (2021-03-03) but this did not work well and we are working on making it better. Were starting with a more thoughtful and transparent process in our communications cadence and approach going forward, including all directs and people managers getting a few days notice before important company-wide changes are announced to all team members. This will allow all directs and people managers to feel more enabled and better understand the why behind big changes in order to scale communication to team members. For all managers: It is important to ground yourself in the contents of the changes before the announcement goes live to all team members. If a team member tags you in a Manager Mention MR, it is your role to respond candidly and thoughtfully to their question or comment. If the line of questioning in the Manager Mention MR gets out of your depth, ask the DRI to help answer. If a team member comments without a manager tagged, the comment will be closed with a link to this handbook section or closed without comment. In a situation where a team member leaves a wildly inappropriate comment in the Manager Mention MR, you should feel empowered to delete comment and talk to your team member 1:1. Consider subscribing to the label \"Manager Mention MR\" to be notified when MRs transition to this designation. What not to do: Not communicate to team members about company-wide changes. Ignoring team member questions, whether thats in a 1:1 or Manager Mention MR. What to do: If one of your team members has a suggestion, solution or sees an issue, see if talking through the communication will answer any of their questions. Team members are also allowed to bring forward their ideas in the Manager Mention MR addressed to you, we want everyone to contribute. As a manager, you will be expected to communicate changes to your teams and also be present to answer any team member questions, whether thats in a 1:1 or Manager Mention MR. As a manager, it is part of your role to understand and own change management for your team and properly triage the process and expectations. Consider a synchronous call with the team member for further context, make a suggestion, link to additional context, delete any unnecessary comments from their team, or escalate to the author of the MR. Ensure that the comments of your reports you interact with were made after the Manager Mention label was added. For team members: Check if the MR you are about to comment on has the \"Manager Mention MR\" label. Check each time as the label may have been added since you last commented. When leaving a comment in a Manager Mention MR, frame the comment as a question or suggestion to your manager directly, and not anyone else, including the DRI. We do this to scale communication, as it is unsustainable for the DRI to answer every question. What not to do: Leaving a comment and CCing your manager at the end of your post, but not addressing your manager directly. What to do: Address your manager directly at the beginning of your message as your comments should be addressed to your manager. If you have a suggestion, solution or see an issue with a big change, you can also bring it up directly to your manager. The MR is not a poll. Give suggestions on how to improve and try to find data that helps support your argument or change in the MR. MRs should not start out as a Manager Mention MR as we prefer communication to be direct. They should only be designated as such after the number of comments on them grows to a level that is unsustainable for the DRI. An exception to this is compensation changes and other company-wide announcements that can be sensitive/contentious in nature since they have historically generated many comments. When an MR is changed to be Manager Mention, the person making this change should add a comment stating this so that everyone tracking the MR can be informed. Issues Issues are valuable when there isnt a specific code change that is being proposed, such as: Crafting a research proposal to validate a problem or solution Ideating on designs in order to solve a particular problem Breaking down implementation tasks in order to deliver a solution iteratively Tracking progress of particular tasks, especially when an issue board is needed When utilizing issues, it is still important to maintain focus by defining a single specific topic of discussion and the desired outcome that would result in the resolution of the issue. Issues should not be open-ended or go stale due to lack of resolution. For example, a team member may open an issue to track the progress of a blog post with associated to-do items that need to be completed by a certain date (e.g. first draft, peer review, publish). Once the specific items are completed, the issue can successfully be closed. Below are a few things to remember when creating issues: When closing an issue leave a comment explaining why you are closing the issue and what the MVC outcome was of the discussion (if it was implemented or not). We keep our promises and do not make external promises without internal agreement. Be proactive and consistent with communication on discussions that have external stakeholders such as customers. Its important to keep communication flowing to keep everyone up to date. Issues can appear stale if there arent recent discussions and no clear definition on when another update will be provided, based on feedback. This leaves those subscribed in the dark, causing unnecessary surprise if something ends up delayed and suddenly jumps to the next milestone. It is important that issues are closed in a timely manner. One way of doing this is having the current assignee set a due date for when they will provide another update. This can be days or weeks ahead depending on the situation, prioritization, and available capacity that we may have. Pro Tip: When creating a Merge Request you can add closes: insert issue number here and when the Merge Request is merged, the issue will automatically close. You can see an example of this here. Note: Automatic issue closing is disabled on some projects. If a user suggests an enhancement, try and find an existing issue that addresses their concern, or create a new one. Ask if theyd like to elaborate on their idea in an issue to help define the first MVC via a subsequent MR. Cross link issues or MRs with related conversations. Another example is to add Report: \" lines to the issue description with links to relevant issues and feature requests. When done, add a comment to relevant issues (and close them if you are responsible for reporting back, or reassign if you are not). This prevents internal confusion and us failing to report back to the reporters. When cross-linking issues or MRs, include a preview of the content you are linking, to facilitate low-context communication: Good: this would cause performance issue similar to 123456. The reader has full information on first read and can refer to the link for more. Avoid: this would cause issue similar to 123456. The reader needs to click the link and find the relevant information among other discussion threads, before switching back to the original discussion. When providing links to specific lines of code relevant to the issue, always use a permalink (a link to a specific commit for the file). This ensures that the reference is still valid if the file changes. For more information, see Link to specific lines of code. Prioritize your work on issues in the current milestone. Use the public issue trackers on GitLab.com for everything since we work out in the open. Issue trackers that can be found on the relevant page in the handbook and in the projects under the gitlab-com group. Assign an issue to yourself as soon as you start to work on it, but not before that time. If you complete part of an issue and need someone else to take the next step, re-assign the issue to that person. Ensure the issue title states what the desired outcome should be. For instance, for bugs make sure the issue states the desired result, not the current behavior. Regularly update the issue description with the latest information and its current status, especially when important decisions were made during the discussion. The issue description should be the single source of truth. If you want someone to review an issue, do not assign them to it. Instead, -mention them in an issue comment. Being assigned to an issue is a signal that the assignee should or intends to work on it. So you should not assign someone to an issue and misrepresent this with a false signal. If youd like to inform someone about an issue or assign a task to them, do so via an issue comment, not only by adding them to the description. The to-do item generated when you mention someone in an issue description provides little context for the action youre requesting. But using a comment to explicitly inform someone of the action youd like them to take ensures that when they read the associated to-do item they wont need to read the entire issue to gather the context they need to complete the work. Do not close an issue until it is done. Its okay to explicitly ask if everyone is on board and in agreement on how to move forward, whether to iterate, close the open issue, or create a subsequent MR to implement a MVC. Once a feature is done, update the description to add a link to the corresponding documentation. When using a Search Engine, issues often appear before documentation pages, which makes it harder to find the relevant information about the feature. Write issues so that they exclude private information. This way, the issue can be public. Only use confidential issues, if the issue must contain non-public information. Note: Confidential issues are accessible to all members of the project with Reporter access and above. You may consider using a Google Doc for items that require a stricter level of confidentiality. If the content within a public issue transitions to become what is deemed confidential non-public information, the issue may be made confidential. If the content of a public issue draws comments that are deemed in violation of our code of conduct the issue may be locked and may undergo moderation. How to make a company wide announcement Consider the subject and the audience. Questions you might want to ask yourself: Is this relevant to all team members globally? Is this something important, urgent and high priority? Is there a better place for this communication, such as a more informal Slack channel? Keep it simple, brief and summarize what is important. Cover the 5 Ws. What, Why, Who, When, Where (you can also add How, if required as a call to action). The majority of information should still be in the Handbook which you include links to. Common company wide announcements include (but are not limited to): organization changes, policy iterations, requests to participate in a company survey, unveiling the next GitLab Contribute location, codebase migrations, process improvement and security/safety announcements. Remember Handbook First. When you announce anything, include links to the respective Handbook pages for more information. Consider adding link to an Issue if the information is not public yet. Optional AMA. If desired and appropriate, offer a company wide Zoom call to host an AMA (Ask Me Anything). Oftentimes, questions can be managed within the Discussion tab of a GitLab Issue or Merge Request. For broad announcements, such as registration opening for GitLab Contribute, an AMA may be better suited for a large volume of inquiries. To schedule a company wide call, please make a request in the people-connect Slack channel, and include a Google Doc in the invite for questions. Remember we are a global company with significant time-zone differences. Unless there is a reason to do otherwise, ensure any time-sensitive calls to action or announcements are made when the whole company has enough time to action. Consider different timezones, non-linear work days, and PTO. Announcements should be made ideally 72 hours (at minimum 24 hours) in advance of a due date. This is to prevent APAC/EMEA team members missing important announcements posted outside their normal working hours. Sometimes a late announcement is better than none at all, and acknowledging those who will miss it might be a kind gesture, such as Apologies to our APAC/EMEA friends for the late notice. Posting in company-fyi Our company-wide announcements channel is company-fyi. It is an announcement only channel, meaning that communications need to be approved before they can be posted. To minimize noise, announcements made in company-fyi should not be duplicated in whats-happening-at-gitlab. Be mindful of the attention economy. In order to post or have a message posted in company-fyi, please reach out to the internal communications team or your functions executive who can approve the message and post it. Examples of what should not go in company-fyi (as per new group guidelines): Competition prize winner announcements Org change or new team member announcements (unless they are E-group) Promotion of an optional non-company-wide internal event Announcement that directly impacts less than 75% of team members Actions required from team members is not critical or timely The above should all go in the new whats-happening-at-GitLab channel (formerly the company-announcement channel). graph TB everybody\"Do you want to reach the entire company?\" important\"How important is it?\" permission\"Do you have permissionbr to post in company-fyi?\" urgent\"Is it urgent?\" reconsider\"Are you sure you can't reach the people you need by posting in topic channels?\" channel-important\"Post in company-fyi\" channel-important-ask\"Ask your function's executivebr to post in company-fyi\" channel-general\"Post in whats-happening-at-gitlab\" channel-topic\"Post in the most topical channel\" repost(\"Repost in the 1-2 most appropriate channel(s) based on your topic/audience\") no-repost(\"Do not repost\") classDef question fill: ECECFF class everybody,important,permission,urgent,reconsider question; classDef action fill: a2f2a9 class channel-important,channel-important-ask,channel-general,channel-topic,repost,no-repost action; classDef repost fill: f2d3a2 class repost,no-repost repost; everybody -- Yes -- important everybody -- No -- channel-topic important -- need-to-know -- permission important -- good-to-know -- reconsider permission -- Yes -- channel-important permission -- No -- urgent reconsider -- Yes -- channel-general reconsider -- No -- channel-topic urgent -- No -- channel-important-ask urgent -- Yes -- channel-general channel-topic -- repost channel-general -- repost channel-important -- no-repost channel-important-ask -- no-repost Posting in whats-happening-at-gitlab Due to the volume of posts in the Slack channel, we recommend that you do not use whats-happening-at-gitlab as a sole location for important announcements as information might get lost or muted. Examples of important items include but are not limited to: Anything involving GitLab team member policy, such as changes in benefits, laws, review cycles, etc. Urgent matters that cant wait for company-fyi but still need to be communicated to everyone such as service outages or last minute event changes Meetings Common meeting problems Meetings are incredibly expensive since they require synchronous time. The most common meeting problems can all be addressed by following the above guidelines around scheduling meetings. Some of the most common meetings problems are outlined below: Problem Solution Present instead of QA Pre-record presentations on YouTube, so meetings are only QA Meetings set up for or default to brainstorming People should default to making thoughtful proposals async and building upon them in meetings, if needed No agenda with edit rights for everyone Ensure that every meeting has an agenda and is available for everyone to edit People are late to meetings or dont have time to use the restroom between meetings Use Speedy Meetings to give people breathing space before their next meeting Everyone is responsible for notes If folks are involved in a meeting and have capacity to do so, they should take notes using GitLabs Live Doc Meetings principles. This is important, because: Meetings at GitLab should have notes (for a single source of truth and to enable async participation among other reasons) In the absence of this joint commitment to note-taking, this is the type of work that is likely to fall disproportionately to underrepresented groups. This is not in line with our diversity, inclusion, and belonging value. It may look like a few people are already taking notes, do not see this as a deterrent for helping. Initial note takers may be first to show up and then see it as their responsibility to continue if no one else is stepping in. While meetings recordings are helpful, written notes are more efficient to read and offer greater opportunities for async engagement. Takes notes even when a meeting is being recorded. Engaging EBAs in note-taking GitLab Executive Business Administrators sometimes support teams by taking notes. Since note taking takes time away from their other activities and can often be done by other folks, consider the following before engaging an EBA in a meeting solely for note taking purposes. Can the folks already in this meeting cover note taking responsibilities, or is there a reason to engage an EBA in this capacity? Can other folks be identified ahead of time or at the start of the meeting to ensure adequate coverage? How does this stack against the EBAs other priorities? You can check directly with the EBA or their manager. Smart note taking in meetings Note taking helps us to work asynchronously. Team members can add thoughts to an agenda in advance of a meeting and understand what was discussed if they cannot attend. It also offers a record of discussion. Consider the following best practice when taking notes in meetings: If at the start of the meeting, it does not look like all team members will contribute to note-taking, identify a set of note-takers who will be responsible for this activity within the meeting Utilize Zooms AI Companion to create and/or share a meeting summary. Meeting Summary with Zoom AI Companion uses AI technology, which may include third-party models, and allows meeting hosts to initiate an AI-generated summary of their meeting. When the host enables this feature in a meeting, participants may automatically receive a summary after the meeting ends, if the host chose to share it with them. Note-taking can be a lot for a single person to stay on top ofespecially when there is a fast moving conversation with many speakers. Team members should still feel empowered to contribute by helping with notes as needed, even if there is someone assigned. Another good reference is the CEO Shadow handbook page tips section, specifically It's helpful if shadow one takes notes as the first speaker is talking, then shadow two starts when the next speaker continues the conversation. Shadow one can pick up note taking again when the next speaker contributes. By alternating this way, the shadows are better able to keep up with all the participants in the conversation. This advice can be used in general meetings as well. Ask others to scribe answers in real-time to allow the person who asked the question to focus on the answer. Touch up the answer when the conversation has moved on to something less relevant. It can be hard to keep up with the dialog and capture quality notes when theres fast back and forth conversation. Lead by example and write when youre not talking, expect others will write when youre talking. Focus on noting speakers and their key points over capturing all words said. Extensive note-taking should not happen at the expense of correct note-taking. Write down your questions in the agenda before vocalizing. Always ask people to vocalize their questions to provide the most detailed context and for audio-only playbacks. Use discretion in taking notes if sensitive topics are being discussed. For example, do not takes notes on not-public information if the agenda may be available to an audience who should not be privy to this information. If someone requests folks to stop taking notes, stop for the duration of the discussion unless there is verbal confirmation that note-taking should resume. Ask for the confirmation before typing before you resume note-taking. At the end of the meeting, clearly capture key takeaways, next steps, and DRIs. If you have any questions about what may or may not be a sensitive topic, please refer to our SAFE Framework or reach out via the safe Slack channel Few meetings with presentations Presenting during meetings requires valuable synchronous time. Instead, recorded presentations make content accessible, prevent confusion, and increase participation for team members that prefer consuming content asynchronously. Remember it is not required to have a presentation or have a pre-recorded presentation. In the video below, GitLab co-founder, Sid Sijbrandij, explains why there are no presentations in most meetings. Pre-recorded presentations enable: Allows time for QA, which enables attendees to have their questions answered without running out of time. Reinforces GitLabs Bias Towards Asynchronous Communication because it allows a distributed team to consume the presentation asynchronously. Strengthens self-service and self-learning by maximizing the meeting times efficiency to ensure that team members have their voices heard during the QA. Standardizes the approach to meetings across the organization. Includes transcripts that can boost content value, help team members focus, and increase accessibility. Flexibility in viewing using rewind and playback speed adjustments. Encourages and enables greater participation from neurodiverse team members who might take added time to process and reflect before asking questions. Allows for selective watching of presentation material for a certain period. There are times when presenting during a meeting is needed. This may occur when adding more context to a specific topic on slides. If this is the case, consider the following: A presentation, with optional attendance and mandatory recording. This will allow clarifying questions to be asked and answered efficiently and enables team members to watch async. Include an async QA doc for team members who did not attend the presentation. Ensure the async QA doc is linked in the YouTube description. Best Practices for Pre-Recorded Presentations Use Zoom to create a pre-recorded video presentation. Post the recording to the GitLab Unfiltered YouTube channel and attach it to the meeting agenda. At least 24 hours in advance of the meeting, announce in Slack Channels that the meeting has a pre-recorded video, and all attendees are advised to watch beforehand. Framework for meetings with presentations While most meetings should not have presentations, there are a few exceptions. Specifically, we may use synchronous touch points in meetings with large numbers of folks. These tend to be meetings used for building team cohesion and alignment. For example, GitLab Assembly or the Functional Leaders Meeting. GitLab has the following meeting framework for determining which meetings should have presentations: Presentation Approach Types of meetings with few participants Types of meetings with many participants No presentations (async prep) Most meetings AMA Presentations These meetings should not happen Assembly and other large team meetings Meeting introduction guidelines Introductions can be helpful during some external meetings, such as executive sales calls. In those meetings, use these guidelines: Agree ahead of time to do introductions so everyone is prepared for it. Create a list of people with their roles in a shared agenda and use that for the introduction sequence. Each person should introduce themselves so that everyone can see that person on Zoom. The person introducing themselves hands it over to the next person in the agenda. Make sure youre never screen sharing when people are introducing themselves. Scheduling meetings Every scheduled meeting should either have a Google Presentation (for example for functional updates that dont require participation) or a Google Doc (for most meetings) linked. If it is a Google Doc it should have an agenda, including any preparation materials (can be a presentation). For a step-by-step guide on GitLab meeting best practices, visit our Live Doc Meetings page. No agenda is required for coffee chats. Note that only meetings that are primarily social in nature should be labeled as a coffee chat in the calendar invite. A suggested format for 1:1 agendas can be found on the 1:1 leadership page. For team members working in AMER timezones who regularly collaborate with EMEA team members: If all meeting attendees are located in AMER timezones, the meeting should be scheduled outside of the PST morning block. The PST morning block should be reserved for cross-regional collaboration with team members whose timezones make it harder for them to meet later in the day. For team members working in AMER timezones who regularly collaborate with APAC team members: If all meeting attendees are located in AMER timezones, the meeting should be scheduled outside of the PST afternoon block. The PST afternoon block should be reserved for cross-regional collaboration with team members whose timezones make it harder for them to meet earlier in the day. Due to the number of timezones covered in APAC, the PST afternoon block will only overlap with the Eastern most APAC countries If you want to ask GitLab team members if they are available for an event please send a calendar invite with Google Calendar using your Google GitLab account to their Google GitLab account. When you add a GitLab team member as a Guest in Google Calendar, you can click the See Guest Availability button to check availability and find a time on their calendar. These calendar invites will automatically show up on all parties calendars even when the email is not opened. It is an easier way to ensure everyone has visibility to the meeting and members status. Please respond quickly to invites so people can make necessary plans. If you want to check if a team member is available for an outside meeting, create a calendar appointment and invite the team member only after they respond yes. Then invite outside people. When scheduling a call with multiple people, invite them using a Google Calendar that is your own, or one specific to the people joining, so the calendar item doesnt unnecessarily appear on other peoples calendars. If you want to move a meeting just move the calendar appointment instead of reaching out via other channels. Note the change at the top of the description. Please click Guests can modify event so people can update the time in the calendar instead of having to reach out via other channels. You can configure this to be checked by default under Event Settings.) When scheduling a meeting we value peoples time and prefer the speedy meetings setting in our Google Calendar. This gives us meetings of, for example, 25 or 50 minutes leaving some time to: Write notes and reflect Respond to urgent messages Take a bio break Stretch your legs Grab a snack When scheduling a meeting, please try to have it start at :00 (hour) or :30 (mid-hour) to leave common start times available for other meetings on your attendees calendars. Meetings should be for the time needed, so if you need 15 minutes just book that. When creating a calendar event that will be used company wide, please place it on the GitLab Team Meetings Calendar. That way the event is easily located by all individuals. When you need to cancel a meeting, make sure to delete/decline the meeting and choose the option Delete  update guests to make sure everyone knows you cant attend and dont wait for you. If you want to schedule a meeting with a person not on the team please use Calendly. Use Google Calendar directly if scheduling with a GitLab team member. Materials Review are scheduled as all day not busy events as a reminder three days before the scheduled call. When scheduling recurring meetings, consider using (UTC00:00) Coordinated Universal Time as the meeting time zone, so that the meeting time does not change for others when your local time zone changes. Cross-regional Working Hours Recommendations If youre scheduling a meeting across multiple regions, consider using the time ranges below to respect common working hours. The suggested times are organized by the regions that youre trying to accommodate. Each suggested window is shown in the local time zone. For example, if your meeting includes team members in EMEA and AMER, you could consider scheduling from 8:00 AM to 10:00 AM Pacific Time. Note: Time zone offsets change throughout the year due to Daylight Savings Time, Summer Time, and similar time changes, so these suggested times may be less convenient at different times of year. EMEA/AMER Timezone Start End London/Lisbon 04:00 PM 06:00 PM Paris/Rome 05:00 PM 07:00 PM Istanbul/Tel Aviv 06:00 PM 08:00 PM Abu Dhabi 07:00 PM 09:00 PM Mumbai 08:30 PM 09:30 PM Pacific Time 08:00 AM 10:00 AM Eastern Time 11:00 AM 01:00 PM APAC/AMER Timezone Start End Sydney 09:00 AM 11:00 AM Tokyo 08:00 AM 10:00 AM Hong Kong 07:00 AM 09:00 AM Ho Chi Minh 07:00 AM 08:00 AM Pacific Time 04:00 PM 06:00 PM Eastern Time 07:00 PM 09:00 PM EMEA/APAC Timezone Start End Lisbon/Dublin 08:00 AM 10:00 AM Paris/Rome 09:00 AM 11:00 AM Istanbul/Tel Aviv 10:00 AM 12:00 PM Mumbai 12:30 PM 02:30 PM Ho Chi Minh 02:00 PM 04:00 PM Hong Kong 03:00 PM 05:00 PM Sydney 05:00 PM 07:00 PM Multi-session meeting naming When scheduling meetings with two or more sessions (usually when trying ensure worldwide coverage for all team members), name them after the topic, appended with a session number based on the order they show up in the calendar. Team members will see the meeting invites in their email or calendar in relation to their local time zone and can decide for themselves which session to attend, based on their working hours. Avoid: Terms like friendly or early / late, as these terms are overly subjective. An early meeting for one team member might seem late for someone in a different time zone. Or a west coast AMER meeting might seem APAC friendly, but not to someone in western APAC who is still asleep when the meeting starts. Using AMER, EMEA, APAC, or only unless the meeting is specifically targeting members of that time zone. These terms give the impression that only team members from those timezones are welcome, when people from any timezone with any working style are welcome. For example: Scheduled time Preferred Avoid 07:00:00 UTC All members meeting - Session 1 All members meeting - EMEA/AMER 15:00:00 UTC All members meeting - Session 2 All members meeting - AMER/APAC friendly 23:00:00 UTC All members meeting - Session 3 All members meeting - APAC/EMEA only Video calls Use video calls if you find yourself going back and forth in an issue/via email or over chat. Guideline: if you have gone back and forth 3 times, its time for a video call. Sometimes its better to not have a video call. Consider these tradeoffs: It is difficult (or impossible) to multi-task in a video call. It may be more efficient to have an async conversation in an issue, depending on the topic. A video call is limited in time: A conversation in an issue can start or stop at any time, whenever theres interest. It is async. A video call is limited in people: You can invite anybody into an async conversation at any time in an issue. You dont have to know who the relevant parties are ahead of time. Everyone can contribute at any time. A video call is limited to invited attendees (and those who have accepted). You can easily promote an async conversation from an issue to a video call, as needed. The reverse is harder. So there is lower risk to start with an async conversation. For a newcomer to the conversation, its easier and more efficient to parse an issue, than read a video transcript or watch it. Conversations in issues are easily searchable. Video calls are not. Try to have your video on at all times because its much more engaging for participants. Do not worry if you cant pay attention at the meeting because youre doing something else, you are the manager of your attention. The flip-side of being the manager of your own attention is that others should not hesitate to request your attention when it is needed. During internal calls, its okay to eat on video if youre hungry or the call is during your lunch time (please turn your mic off). To maintain professionalism, if you are presenting or facilitating a customer call please try to avoid eating. If eating during a customer call is unavoidable, please turn off your video and mute your mic. You should ensure that you are properly dressed for all video calls. Properly dressed means that you are wearing clothing that covers the top and bottom parts of your body. We do not have a strict dress code policy, but want to make sure that all participants on video calls feel comfortable. If you cannot be properly dressed for the entirety of the call, you should not join, but watch the recording at a later time. Having pets, children, significant others, friends, and family visible during video chats is encouraged. If they are human, ask them to wave at your remote team member to say Hi in your native language. Do not feel forced to have your video on, use your best judgement. Additional points for video calls with customers or partners: Results come first. Your appearance, location and background is less important than making customers successful so dont wait for the perfect time / place when you can engage a customer right away. Communicating that GitLab is an enterprise grade product and service provider is supported by the way you present yourself. Most of the time, if you would not wear something or present yourself in a certain way at a customers office, candidate interview, or partner meeting in person then its probably not the right choice on a video call with them either. Green screens are a great background solution. Its great to work in your garage or basement! Just get a green screen behind you and put up a professional background image to present well externally and still use the rest of the room how you want! We prefer Zoom. Google Calendar also has a Zoom plugin where you can easily add a Zoom link for a video call to the invite. For meetings that are scheduled with Zoom: After reviewing our Zoom handbook page, if you have additional questions, please contact IT in the it_help Slack channel. Note that if you select to record meetings to the cloud (setting within Zoom), you must include the text REC in the meeting title if you want them to be automatically placed in the GitLab Videos Recorded folder in Google Drive on an hourly basis via a scheduled pipeline. You can find these videos in Google Drive by looking under Shared drives and GitLab Videos Recorded. If you do not have access to this drive, contact IT Ops. The script for syncing the files is here. Note also that after a meeting ends, Zoom may take some time to process the recording before it is actually available. The sync to Google Drive happens on the hour mark, so if the recording is not available, it may take another hour to be transferred. Consider using a utility to easily mute/unmute yourself, see Shush in the tools section. Hybrid calls are annoying. Always be sure to advise participants to mute their mics if there is unnecessary background noise to ensure the speaker is able to be heard by all attendees. We start on time and do not wait for people. People are expected to join no later than the scheduled minute of the meeting (before :01 if it is scheduled for :00). The question is everyone here is not needed. It feels rude in video calls to interrupt people. This is a situation where we have to do something counter intuitive to make all-remote meetings work. In GitLab, everyone is encouraged to interrupt the speaker in a video call to ask a question or offer context. We want everyone to contribute instead of a monologue. Interrupting can be done by clicking Raise Hand in Zoom, by physically raising your hand on video, or by interrupting verbally. As a speaker, allow yourself to be interrupted. As a listener, advocate (verbally if necessary) for those who have raised their hand. Just like in-person meetings be cognizant of when, who, and how you interrupt, we dont want manterrupting. We end on the scheduled time. It might feel rude to end a meeting, but youre actually allowing all attendees to be on time for their next meeting. Do not use the chat of products like Zoom to communicate during the call, use the linked document instead. Zoom Chat has been configured for a 30 day retention. This allows everyone to contribute additional questions, answers, and links in the relevant place. It also makes it easier for people in conflicting timezones to contribute questions before the call and makes it easier to review questions and answers after the call, which can be before watching the recording. You do not need to remind other people to vocalize their questions. Just say their name and a keyword of the question, e.g. Jay about credit-cards. Every comment is document worthy, even small support comments such as 1 or Very Cool!. We encourage the recording and sharing of everything to our YouTube Unfiltered channel. It is unusual to smoke in an open office or video conference, vaping is associated with this. For this reason we ask that you dont vape during calls, and if you absolutely have to, kindly switch your camera off. Speak up when you notice something is not working. If you notice someones microphone, web cam or latency is causing issues for them it is good to speak up. On a video call it can be harder for the speaker to notice that they arent being understood compared to a face to face conversation. As such you will be doing them a favour by speaking up early to let them know that they are having a problem. Also see Hear nothing say something for further explanation. You are the manager of your attention You are the manager of your attention, and you decide when you do or dont pay attention in a meeting. You will always have more work than time in your life. If you get invited to a meeting you dont think you should go to, you should decline the meeting. It is better to cancel than to show up and not pay attention. On the other hand, not every part of a meeting is relevant, but it can sometimes be helpful to have more people in a call. If you only have one discussion point, if possible, try to reorder the meeting agenda to have your point first and then drop from the call. If you get asked a question when youre not paying attention, it is an okay use of time to repeat a question every now and then. If training is required for ones role, team members should plan to give the training full attentionespecially if engagement in discussions or breakout rooms is required. If training is nice to learn or optional for team members, multi-tasking can be done at the team members discretion. We dont use the first 15 minutes of a meeting to read the materials like they do at Amazon. You can use the start of a meeting to review the materials for the meeting if you need to, given you do not have to be paying attention, but that should not delay the start of the meeting for the people that already have questions based on the materials. Meetings start on time at GitLab. Do not use your camera to signal youre not paying attention; cameras should always be on. Do not ask meeting attendees to pay attention There are too few hours in a week, so we expect each team member to manage their attention. If youre hosting a meeting, dont tell people to give you their attention or stop multi-tasking. Respect each team members agency over their time. Instead of demanding attention, earn participants attention by organizing and facilitating meetings so they are compelling to attendees. First post is a badge of honor You should take pride in being the first person to add a question to a meeting agenda, however unlike the First post meme we do want the first post to be more than just First!. The meeting DRI will be happy to see there is a question ready before to kick off the meeting. The Meeting DRI should remember to thank the person for asking the first question. Do not do a countdown before ending a call Never do a countdown or say something like. Ill give it x seconds, people are very unlikely to ask a question if you do that. Either ask for a question, wait for a question, or end the call. Hybrid calls are annoying In calls that have remote participants everyone should use their own equipment (camera, headset, screen). When multiple people share equipment the following problems arise for remote participants: Cant hear the sharing people well Background noise since the microphone of the sharing people is on all the time Cant clearly see facial expressions since each face takes up only a small part of the screen Cant easily see who is talking since the screen shows multiple people Hard getting a word in since their delay is longer than for the sharing people The people sharing equipment also have problems because they dont have their own equipment: Cant easily screen share something themselves Trouble seeing details in screen sharing since the screen is further away from them Cant scroll through a slide deck at their own pace Sharing people cant easily participate (view or type) in a shared document with the agenda and meeting notes. The disadvantages for remote people are much greater than for the sharing people and hard to notice for the sharing people. The disadvantages cause previously remote participants to travel to the meeting to be in person for a better experience. The extra travel is inefficient since it is time consuming, expensive, bad for the environment, and unhealthy. Theoretically you can have multiple people in a room with their own equipment but in practice it is much better to be in separate rooms: It is annoying to first hear someone talk in the room and then hear it over audio with a delay. It is hard to consistently mute yourself when not talking to prevent someone elses voice coming through your microphone as well. Types of meetings Ask Me Anything meetings Ask Me Anything meetings can be a useful opportunity for team members to meet a new leader, learn more about an existing team member, or gain clarity on a recent change. Format: AMAs use the whole meeting time for questions from attendees, answered by the host. Fireside Chats Fireside chats are informal conversations between a host and a guest. The guest is typically a new leader, board member, or guest speaker. They are a useful opportunity to learn specific information about these individuals and their professional careers and personal interests. Fireside chats allow the audience to learn more about the guests in a casual and approachable setting. Format: In advance of the call, the host will prepare questions and share them with the guest. During the call, the host will moderate the conversation with the guest, by verbalizing the prepared questions. There is specific amount of time reserved at the end of the agenda for questions from attendees. Walk and Talk calls A Walk and Talk call is when team members step away from their computers and get outside for a meeting. The difference between a coffee chat and a Walk and Talk call is that a Walk and Talk call be held with people that you interact with frequently at GitLab. It could be social in nature or focused on a specific problem/topic that needs to be discussed. If its a problem-solving focused discussion, the outcome should be captured in a merge request. It should not be used if the problem being discussed requires screen sharing or detailed note taking. There are great physical and mental health benefits to a walk and talk call. There are also benefits with increased focus and creativity. A Walk and Talk can also help prevent Zoom fatigue. The team members can use Zoom on their mobile device with the audio only function, or call one another from their preferred mobile device. A walk and talk call should be agreed to in advance to ensure that the local weather is compatible for a walk in both locations and that the walk and talk call fits into both team members schedules. Weve created a Slack channel walk-and-talk-meetings where, if youd like, you can share pictures from your walking meetings. Release retrospectives and kickoffs After GitLab releases a new version every month, we have a 30-minute call a few days later reflecting on what could have been better: What went well this month? What went wrong this month? What could we have done better? We spend the first part of the retrospective meeting reviewing the action items from the previous month. On the 8th of each month (or the next business day), we have a kickoff meeting for the version that will be released in the following month. The product team and other leads will have already had discussions on what should be prioritized for that release. The purpose of this kickoff is to get everyone on the same page and to invite comments. Both the retrospectives and kickoffs are live streamed to our GitLab Unfiltered YouTube channel and posted to our Unfiltered YouTube channel. Deep Dives As GitLab continues to grow, sharing knowledge across the community becomes even more important. The Deep Dives page describes initiatives we are trying to encourage. This aligns with how we work since everything at GitLab is public by default. Daily Sync Escalation Process GitLab has a specific process to follow in crisis situations to ensure effective communications. Details can be found in the internal handbook. Presentations All presentations are made in Google Slides using our templates. Please allow anyone at GitLab to edit the presentation (preferred) or at least comment on the presentation. If the content can be public use File  Publish to the web  Publish to get a URL and paste that in the speaker notes of the first slide (commonly the title slide). The title of every slide should be the message you want the audience to take away, not the subject matter. So use Our revenue more than doubled instead of Revenue growth. Slide titles should not be more than one line. Be concise in highlighting the key point that you want to make. Do not add a period at the end of a title. During introductions, make sure that nobody is presenting. We remember people better and have more empathy when we clearly see peoples faces and expressions. At the end of the presentation, when you go to QA, stop presenting in Zoom. This way the other people can see the person who is speaking much better. All presentations at GitLab should be based on screenshots of the handbook, issues, merge requests, review apps, and data from GitLab Insights and Sisense charts. In most cases it shouldnt be needed to make content uniquely for the presentation. If you need something that doesnt exist yet add it to the place it belongs and then copy it into the presentation. This way we can have a Single Source of Truth for everything we do. By using screenshots you indicate to people you did the right thing and they can find the canonical source in the appropriate place. Having to find information by digging through old presentations doesnt scale. Consider linking the screenshot to the original source. Do not use cumulative graphs internally. For example total ARR, total user, total contributors, or total Merge Requests. Instead use IACV per dollar spend, users added per month, contributions per month, or MR rate. Cumulative graphs can hide trends and are far more likely to be misinterpreted. The only acceptable use of cumulative graphs is for external presentations where they are expected by the audience and commonly used. When your presentation includes graphs or other data, make sure your graphs have clear titles and dimensions. Make sure your data has significant figures and labels. For example, use January: 1.95M projects instead of January: 1.95M. Keep in mind that your audience may not have the full context, especially if they are reading the presentation asynchronously. When giving a presentation, your commentary should not be a regurgitation of the words in the slide. The audience can read the slide for themselves; your commentary should focus on the most important takeaways. Video and presentation tips with Lorraine Lee On 2022-01-20, the LD team hosted Lorraine Lee for a live speaker series on video and presentation techniques in an all-remote workspace. Key points addressed in the training include: Increase your confidence on video using lighting, visuals, and curating your environment Keep your audience engaged with movement, power words, and the think/do/feel matrix Stay connected with your audience by smiling, making eye contact, and framing yourself in video Insert energy by standing up, projecting, and using hand gestures Watch the replay below: Writing style guidelines As youre creating external or business content for GitLab, please refer to the GitLab Content Style Guide. For technical content, you can reference this word list. This list offers additional guidance for written communication at GitLab: Do not use rich text, it makes it hard to copy/paste. Use Markdown to format text that is stored in a Git repository. In Google Docs, use Normal text using the style/heading/formatting dropdown and paste without formatting. Read our Markdown Style Guide for more information when using Markdown. Do not use ALL CAPS because it feels like shouting. However, there is the all-caps Slack channel for your good-natured shouting needs. We use Unix style (lf) line endings, not Windows style (crlf), please ensure .md text eollf is set in the repositorys .gitattributes and run git config --global core.autocrlf input on your client. When specifying measurements, please include both Metric and Imperial equivalents. When mentioning currency amounts that team members may need to convert to their local currency (e.g. benefits, expenses, or bonuses), link those amounts to our Exchange Rates section (e.g. 500 USD). Monetary amounts shouldnt have one digit, so prefer $19.90 to $19.9. GitLab is an internationally diverse company. US-based team members should not refer to team members outside the US as international. Instead, use non-US. Please also avoid the use of offshore/overseas to refer to non-American continents. If you have multiple points in a comment or email, please number them. Numbered lists are easier to reference during a discussion over bulleted lists. When you reference an issue, merge request, comment, commit, page, doc, etc. and you have the URL available, please include it. In making URLs, always prefer hyphens to underscores, and always use lowercase. The community includes users, contributors, core team members, customers, people working for GitLab Inc., and friends of GitLab. If you want to refer to people not working for GitLab Inc., just say that, and dont use the word community. If you want to refer to people working for GitLab Inc., you can also use the GitLab Inc. team, but dont use GitLab Inc. employees. When we refer to the GitLab community (excluding GitLab team members), please say wider community instead of community. All people working for GitLab (the company) are the GitLab team. We also have the Core team that consists of volunteers. Please always refer to GitLab Inc. people as GitLab team members, not employees. Use inclusive and gender-neutral language in all writing. Always write GitLab with G and L capitalized, even when writing GitLab.com, except within URLs. When gitlab.com is part of a URL, it should be lowercase. Do not use a hyphen when writing the term open source except where doing so eliminates ambiguity or clumsiness. If an email needs a response, write the answer at the top of it. Use the future version of words, just like we dont write internet with a capital letter anymore. We write frontend and webhook without a hyphen or space. Our homepage is https://about.gitlab.com/ (with the about. and with https). If you use headers, properly format them ( in Markdown, Heading 2 in Google Docs); start at the second header level because header level 1 is for titles. Do not end headers with a colon. Do not use emoji in headers as these cause links to have strange characters. Do not use acronyms when you can avoid them. Acronyms have the effect of excluding people from the conversation if they are not familiar with a particular term. Example: instead of MR, write merge request (MR). If acronyms are used, expand them at least once in the conversation or document and define them in the document using Kramdown abbreviation syntax. Alternatively, link to the definition. If you dont know the meaning of an acronym, ask. Its always ok to speak up. Communicating dates and time For external content, refer to the guidance in the GitLab Content Style Guide. For internal content, use ISO dates: yyyy-mm-dd For months, use yyyy-mm, so 2018-01 for January. Refer to a year with CY18 (never with 2018) and a quarter with CY18-Q1 to prevent confusion with fiscal years and quarters. If the year is obvious from the context it is OK to use Dec 4, but not 12/4. GitLab operates on a Fiscal Year offset from the calendar year. When referring to a fiscal year or quarter, please use the following abbreviations: FY20 is the preferred format and means: Fiscal Year 2020, the period running from February 1, 2019 through January 31, 2020 Q1  the first quarter of the current Fiscal Year, so on Feb 1, 2020, Q1 is the period from Feb. 1, 2020 through April 30, 2020. Note that Epics in GitLab follow Calendar Years and Quarters. When referring to a quarter in a future or past year, combine the two above: FY21-Q1 When financial data is presented, include a note to indicate fiscal year (e.g. Fiscal Year ending January, 31 YYYY) For time formatting guidelines, refer to the GitLab Content Style Guide. Please remember that not everyone is working in the same timezone; what may be morning for you is evening for someone else. Try to say 3 hours ago or 4 hours from now, or use a timestamp, including a timezone reference. Dont use EOD or end of day (COB or close of business, EOB or end of business), unless you are okay with a deliverable being due at the end of anywhere on earth. Team members communicate across timezones, where end of day does not specify the exact date and time. When you want something due at a specific time, communicate the date and time by when the request should be done, for example: Please review before 2023-06-10 5PM PT. Visuals Many times an explanation can be aided by a visual. Whenever presenting a diagram, we should still allow everyone to contribute. Where possible, take advantage of the handbooks support for Mermaid. If you are new to using Mermaid or need help troubleshooting errors in your Mermaid code, the Mermaid Live Editor can be a helpful tool. Where taking advantage of Mermaid isnt possible, link to the original in our Google Drive so that the diagram can be edited by anyone. Ubiquitous language At GitLab we use ubiquitous language to increase communication efficiency. This is defined in Domain-driven design as: A language structured around the domain model and used by all team members to connect all the activities of the team with the software. We use it for activities in GitLab, even ones not implemented in software. By having ubiquitous words to identify concepts we prevent confusion over what is meant, for example we refer to parts of our organization as a function, department, or group depending on exactly what is meant. Make sure that domains dont overlap, for example organization size and deal size dont reuse words to prevent overlap. If a term is ambiguous dont use it, for example our hiring team uses the terms roles and vacancies, but avoid the ambiguous word job. Make sure that projects and working groups have clear and direct names. Prefer CI Spend Reduction Working Group to Project Raven Working Group. Make sure that people can infer as much as possible from the word, for example our subscription options allow you to know if someone is using self-managed or GitLab.com. Make sure terms dont overlap without clearly defining how and why, for example see our tier definitions. Keep terms to one or at most two words to prevent people from introducing ambiguity by shortening a term. When using two words make the first word unique because people tend to drop the second word more often. MECEFU terms MECEFU is an acronym for Mutually Exclusive Collectively Exhaustive Few words Ubiquitous-language. You pronounce it: MessiFu. Think of the great soccer player Lionel Messi and his kung fu or soccer fu skills. We want to use MECEFU terms to describe a domain to ensure efficient communication. MECEFU terms have 4 characteristics that help with efficiency: Mutually Exclusive: nothing is referenced by more than one term Collectively Exhaustive: everything is covered by one of the terms Few words: the longer terms are the more likely it is people will not use all of them and cause confusion, therefore consider two words as the upper limit for a single term. Avoid acronyms because they are hard to remember (were open to a few words to replace MECEFU as an acronym :) Ubiquitous language: defined above An example of a MECEFU term is our sales segmentation: Mutually Exclusive: There is no overlap between the numbers and there is a single dimension. Collectively Exhaustive: Everything for 0 to infinite employees is covered. Few words: Mid-market is a natural combination and SMB is abbreviated. Ubiquitous language: Were not using the word Enterprise which already can refer to our Enterprise Edition distribution. One nit-pick is that the Medium of SMB and Mid of Mid-Market sound very similar. Simple language Simple Language is meant to encourage everyone at GitLab to simplify the language we use. We should always use the most clear, straightforward, and meaningful words possible in every conversation. Avoid using fluff words, jargon, or corporate-speak phrases that dont add value. When you dont use Simple Language, you: Confuse people and create a barrier for participants of your conversation. Cause others to not speak up in a meeting because they dont understand what youre saying. Are not inclusive of those whose first language is not English. Do not add value with your words. When you do use Simple Language, you: Get work done more efficiently. Build credibility with your audience (your team, coworker, customer, etc.). Keep peoples attention while youre speaking. Come across more confident and knowledgeable. Heres an example: Original sentence Were now launching an optimization of our approach leveraging key learnings from the projects postmortem. A Simple Language sentence Were creating a new plan based on what we learned from this project. Simple Language is important both when were speaking to other team members and when were representing GitLab to people outside the company. Be sure to use Simple Language in written communications as well. Our handbook, website, docs, marketing materials, and candidate or customer emails should be clear, concise, and effective. Corporate marketing maintains guidelines on GitLabs tone of voice. Instead of Try Getting buy-in/Getting alignment Asking for feedback since DRIs make decisions Synergy Effective Collaboration Get all your ducks in a row Be organized Do not let the grass grow too long Work quickly Leverage Use more explicit phrasing- debt, etc. Send it over the wall Share it with a customer Boil the ocean Waste time Punt Make less of a priority Helicopter view/100 foot view A broad view of the business Turtles all the way down Cascade through the organization When someone has spare/extra cycles When someone is available Inefficient things shouldnt sound positive For example, do not suggest that youre working in real-time when a matter is in disarray. Convey that a lack of organization is hampering a result, and provide feedback and clear steps on resolving. Do not use a cool term such as tiger team when the existing term of working group is more exact. While cool terms such as these may be useful for persuading colleagues to join you in working towards a solution, the right way isnt to use flowery language. The last example is when we used Prioritizing for Global Optimization for what we renamed to headcount reset. When we renamed it we saw a good reduction in the use of this disruptive practice of moving people around. Using additional languages Using American English as our standard language supports our values such as efficiency, results, and transparency. Careful use of another persons language can be a celebration of diversity and build an atmosphere of inclusion. The guidance in this section applies to written one-to-one communication, for example, merge request comments between an author and reviewer, not merge request descriptions or commit messages. Also keep the following in mind: Use of an additional language is optional. Stick to the few simple phrases in the table below. Always include the language used and a translation to English. Team members can choose to indicate the languages they speak in their Slack profile. When in doubt, use American English. Heres an example: Hey nmalcolm, I left some suggestions for your merge request. Ka mau te wehi! (Te Reo Māori: great work / well done!) ありがとうございます (Japanese: thank you very much) for the review cynthia! Language Hello Thank you Great work / well done Croatian Hvala Japanese ありがとうございます Te Reo Māori Kia ora Ngā mihi Ka mau te wehi! Avoid using Git in Project Names Avoid using Git in the naming of internal and external company related programs (BagGit, GitFit, Gitty, GitIt, etc.). Referencing Git creates an inaccurate perception that GitLab has a narrow focus. While GitLab started as a source control platform, it has become The DevOps Platform. Email We have a low internal email culture, as we see greater efficiency in other forms of communication (e.g. Slack). If you are emailing, please use the following guidelines: Send one email per subject as multiple items in one email will cause delays (have to respond to everything) or misses (forgot one of the items). Always reply to emails by replying to all, even when no action is needed. This lets the other person know that you received it. A thread is done when there is a single word reply, such as OK, thanks, or done. If youre sending an email to a large group of people (or a distribution list), put those recipients in BCC (rather than in the To field) so that a reply all wont ping hundreds of people. If you forward an email without other comments please add FYI (for your information), FYA (for your action), or FYC (for your consideration). If you forward an external request with FYC it just means the person who forwarded it will not follow up on the request and expects you to decide if you should follow up or not, the terms comes from movie promotion to voters. Email forwarding rules are specified in the shared Email, Slack, and GitLab Groups and Aliases Google Doc accessible only to people in the company. If you want to be added or removed from an internal alias, change a rule, or add a forwarding email alias, please suggest an edit in the doc and submit a new access request. Only Google Workspace domain admins are allowed to provision Google Groups and email distributions. Emails are asynchronous, for example, if your manager emails you on a weekend it is fine to reply during the workweek. If an email is or has become urgent feel free to ping people via chat referencing the subject of the email. If you or your team needs to send an email to a group of team members, not grouped in a current Google email group, and specifically related to personally identifiable information (location, state, country, etc.) please contact a Total Rewards Analyst at total-rewardsgitlab who can create an email list from Workday data, with approval. Where appropriate, consider using professional salutations including Hi or Hello and avoid colloquial expressions such as Hey, Oh, or Sup. Sometimes only the persons name is suitable. The level of formality should often mirror the formality from previous messages when communicating with internal team members as well as external persons. Try to always use a persons name when starting or responding to a message, especially if there are multiple persons ccd, so that the addressee knows you are addressing them. Make sure all relevant letters and words that need capitalization are capitalized, such as the start of sentences or the word I. Proofread your messages so that sentences are punctuated correctly, typos are fixed, and grammar is corrected. Consider using the really helpful Grammarly tool - this tool is great for both native English speakers and for those who use English as an additional language. All messages and replies are signed with a professional send-off (ex. Best regards), your name, and your signature block. Slack Slack is used for: Internal-only communication and announcements impacting all team members Linking a GitLab Issue or Merge Request (confidential if necessary) where discussion can take place is encouraged when sharing announcements on Slack Consider creating a Manager Mention MR, so that we can collaborate with Efficiency and Transparency across threads Company newsletters and team updates Asynchronous team standups, questions, and quick collaboration Informal communication Use a bias for action to quickly move conversations that require collaboration and action out of Slack and into an issue. Only 90 days of Slack activity will be retained, so Slack should specifically NOT be used for: Obtaining approvals Documenting decisions Storing official company records or documents Sharing personal or sensitive information regarding any individuals Internal Slack messages between team members are still considered professional communication. Please do not use or add emojis to Slack that are of a political, religious or of a sexual nature. You can refer to the Religion and politics at work section of the handbook. When in doubt do not use or add the emoji. If you have any concerns about an emoji that was used, please reach out to the author or if you are not comfortable doing so please reach out to your People Business Partner. There is a lot of information pertaining to Slack, as it is a critical part of GitLabs communication. See the Slack tools and tips page. General guidelines Everyone can contribute, and while opinions are important to provide perspective, we value proposals and iteration. If the subject is of value to the wider community, consider commenting on an existing issue or opening a new merge request instead. Use the :white_check_mark: emoji or similar to indicate an inquiry has been answered. Anyone can add the emoji. If youre not sure, then feel free to leave it up to the person who asked. An emoji indicator is particularly helpful in channels where lots of questions are posted, such as questions, and git-help. In general, you can think of emoji reactions as equivalent to body-language responses we use in real-life conversations, such as nodding your head as encouragement when a verbal (or in Slack, written) response might be too much. However, please be aware that use and understanding of emoji, like body-language, is not universal. Others may not communicate via those means the same way that you do, particularly those who are Autistic or otherwise neurodivergent. If in doubt, you can use text to clarify. In both public and private channels, threads are valuable for keeping conversations together. If you want to respond to a question or comment in a channel, please start a thread instead of responding below them in the channel. This helps to keep the discussion in one place where it is easy to follow, and reduces noise as each message in a thread does not result in an unread message for everyone in the channel. Unless youre in an active chat, dont break up a topic into multiple messages as each one will result in a notification which can be disruptive. Use threads if you want to provide extra info to the question/comment you posted. If you are having a hard time keeping up with messages, you can update your preferences to have Slack email you all notifications. To change the setting, go to Preferences  Notifications  When I'm not active on desktop... and send me email notifications. If you agree in a message to start a video call (typically by asking Call?) the person that didnt leave the last comment starts the call. So either respond to the Call? request with a video link or say Yes and let the other person start it. Do not say Yes and start a call 5 seconds later since it is likely youll both be creating a video call link at the same time. As an admin of the Slack workspace, if given the option to Disable future attachments from this website when removing an attachment from a message this will block the link/domain from unfurling in the entire Slack workspace. Be careful and deliberate when choosing this option as it will impact every user in the workspace. When referencing a Slack thread in a GitLab.com issue, dont only link to the thread. Not only will people outside of the GitLab organization be unable to access the content, but the link will expire after the Slack retention period expires. Instead: Review the contents for confidentiality of users, customers, or any other sensitive information before posting. Copy and paste the relevant parts of the thread into the issue using blockquote formatting. Link to the Slack thread and include (internal) after the link. For example: https://gitlab.slack.com/archives/C0AR2KW4B/p1555347101079800 (internal) Post a link to the issue note in the Slack thread to let others know that discussion has moved to the issue. When selecting your Slack display name, please do not have your name in all capital letters as this is often associated as shouting in written communications. Avoid direct messages Note: We dont use the term private message, because these direct messages are not inherently private like a phone call or private letter. The messages are potentially accessible by Workspace admins or via Backups. Slack refers to these types of messages as direct messages themselves. When using Slack for work-related purposes, please avoid direct messages. Direct messages discourage collaboration. You might actually be contacting the wrong person, and they cannot easily redirect you to the right person. If the person is unavailable at the moment, it is less efficient because other people cannot jump in and help. Use a public channel and mention the person or group you want to reach. This ensures it is easy for other people to chime in, involve other people if needed, and learn from whatever is discussed. If someone sends you a work-related direct message, it is okay to let them know youd like to take the conversation to a public channel, linking to this section of the handbook. The process might look something like: In the direct message: Thanks for reaching out, that's a great question/idea I think the rest of the team could benefit from. I'm going to move this to public-channel based on our desire to avoid direct messages(/handbook/communication/avoid-direct-messages) In the appropriate public channel: Person asked \"question\" in a DM, pulling that out here if anyone else has input. Answer the question in a thread on that channel message, allowing others to benefit. If you find yourself getting a lot of direct messages that should go in a public channel, consider changing your Slack status to an attention grabbing emoji and set it to something like: Please consider posting in a public channel before direct messaging Why direct message me when you can post in a public channel? If you must send a work-related direct message, dont start a conversation with Hi or Hey as that interrupts their work without communicating anything. If you have a quick question, just ask the question directly, and the person will respond asynchronously. If you truly need to have a synchronous communication, then start by asking for that explicitly, while mentioning the subject. e.g., Im having trouble understanding issue x, can we talk about it quickly?. Do not use group direct messages Use private channels instead of group direct messages. Group direct messages are very hard to maintain, track, and respond to. They also have a key limitation in that you cant add people to the conversation. This is a hindrance to collaboration and transparency. Consider whether the conversation can take place in a public channel. If not, please use a private channel instead. This channel may have a short-term purpose. It is acceptable to leave the channel and/or archive it if you are no longer an active participant or the channel is no longer in use. As we grow headcount, we exponentially increase the lines of communication- 3 people have 3 communication lines, 4 have 6, and 41 have 820. As a result, there is a natural tendency for people to prefer private channels of communication. The intentions are good, as people are looking to reduce noise for others, but this can lead to the same problems as described elsewhere on this page, notably: Communication is siloed. As we grow, people may be reaching out to the wrong person. If you have a question, other people might have it too. Slack is our primary source of chat communication and is where many personal interactions happen. We want to continue to encourage folks to build personal relationships with one another which will often happen over DMs. Use public channels If you use Slack and plan to message 3 or more people, we recommend a channel for customer/issue/project/problem/partnership. Learn about common channels and channel-naming conventions. If something is important but not urgent - like complimenting or encouraging the entire team - use email or post in the channel without -mentioning the team. Its not rude to leave a channel. When youve had your questions answered or are no longer interested, feel free to leave the channel so it wont distract you anymore. The usage of ChatBots for integrations can sometimes depend upon the name of the channel. You should consult the channel about such integrations before changing the name of commonly used/popular channels to avoid inadvertently breaking integrations. Be respectful of others time Start by understanding what we mean by respecting time. We should err toward putting material into channels over DMs and public channels over private channels even though we understand that this will generate more messages that can be read by more people. Respecting time is not about reducing the overall volume of channel messages that team members receive. Its about making sure that messages are targeted, expectations for asynchronous responses are clear, and we are communicating with consideration. The following tips provide ways to work respectfully with others given this context, though is not an exhaustive list: If youre only referring to someone, but dont actually need their attention, and want to spare them from getting notified, spell out their name normally without  mentioning them. You also do not need to  mention someone if they are part of a Slack thread unless you need their attention (for them to review, respond, etc.), since Slack has a dedicated view for threads. Slack messages should be considered asynchronous communication, and you should not expect an instantaneous response; you have no idea what the other person is doing. Do not feel obligated to respond to Slack messages when you are not working. Feel free to send a colleague a link to these guidelines if the communication in Slack should be done asynchronously. Please avoid using here or channel unless this is about something urgent and important. In chat, try to keep the use of keywords that mention the whole channel to a minimum. They should only be used for pings that are both urgent and important, not just important. By overusing channel mentions, you make it harder to respond to personal mentions promptly since people get pinged too frequently. Additionally, if you are planning to mention a specific team (Slack User Group), consider the size of the group you are mentioning (see group membership) and the impact of pinging all of these people for the particular situation. If something is urgent and important: Use here to notify all currently active members in the room. Please only use here if the message is important and urgent. Use channel to notify ALL members in the room, irrespective of away status. Please only use channel if the message is important and urgent. If you are aware that your teammate is on vacation, avoid mentioning them in a high volume channel. It will be difficult to find the information or question when they return. If you need to ensure they refer back to the thread, ensure to send them a link to the relevant Slack message through a direct message. Questions If you have a question that you cant find the answer to in our handbook (or you need help finding something in the handbook) team members across the company are here to help. Go directly to the subject matter experts/source in the designated slack channel to ensure your question is addressed. If your question doesnt relate to any of the existing topics: Ask it in the questions Slack channel Once you receive an answer, document it in the handbook and post the MR link in your question thread  once youve been helped When would GitLab use Corporate Export? The times this feature would be used would be to comply with certain obligations. Corporate Export must be enabled by Slack in accordance with Slacks policy, which can be found here. Examples of instances where GitLab may need to use this feature may include, but are not limited to, those situations listed in Slacks documentation. Are my direct messages and private channel conversations completely private? No. The Slack Workspace Owner has the ability to export data from all direct messages and private channel conversations for the maximum retention period set by GitLab, which is currently set for 90-days. All messages that are older than 90-days cannot be exported by the Workspace Owner or any other Team Member at GitLab. While messages are not actively monitored, GitLab reserves the right to monitor its software for the reasons stated in its Employee Privacy Policy, including, but not limited to, the safety and protection of our Team Members, the protection of our intellectual property, and the exercise or defense of legal claims. Please keep GitLab values in mind when communicating directly with other team members. If you have a confidential personal issue that you do not feel comfortable discussing via a business-provided internal communications tool, it is recommended to use a personal form of communication such as a text message or phone call. For additional questions, please address in the issue. Emergency chat Slack is down To use the Slack Down! group chat on Zoom: In the Zoom desktop app go to the Team Chat tab Click  Click Join a Channel Search Slack down! Click Join Once service is restored, go back to Slack. Zoom is down To use Slack Huddle: Navigate to the appropriate Slack channel or direct message. Use /huddle to trigger a huddle, which supports both audio and video calls. You may need to give permissions if its the first time you are using Slack calls. Once service is restored, go back to Zoom. Slack and Zoom are down Join the Slack Down! room on Hangouts Chat. Once service is restored, go back to Slack and Zoom. Types of documents Google Docs Never use a Google Doc / Presentations for something non-confidential that has to end up on the website or the handbook. Work on these edits via commits to a merge request. Then link to the merge request or diff to present the change to people. This prevents a duplication of effort and/or an out of date handbook. Google Docs can be useful when rapidly iterating/commenting/suggesting on the content, but if the content is meant to be long lived it should be moved to the handbook as an SSOT and deprecated with a link to the handbook page. If the content is short lived, e.g. one-time report that wont be referred to beyond 2-3 weeks, it can remain in a Google Doc or presentation. Pageless is the GitLab preferred format Google Docs Pageless format is the preferred format for company documents that wont be printed. If you set your default to Pageless then this will be applied to all future documents as well. If a document is likely going to be printed (for example, a contract) the older paged style is acceptable. See Good practices and helpful tips for help navigating the pageless format. Link sharing If you do need a Google Doc, create one with your company Google Workspace (formerly G Suite) account and set the visibility, access controls and searchable flag according to the following guidelines. The recommended defaults when sharing a document for GitLab internal purposes is setting visibility to GitLab, access to Editor and searchable Can find in search results to ensure everyone can contribute! Note: To our knowledge, it is not possible to set the default to Can Edit and you have to change the permissions from View manually. We hope that Google adds this capability in the future. Visibility Setting Use Cases Anyone with the link Avoid this setting. Instead, choose GitLab, then explicitly share the document with desired external individuals. Only use this if you want the document to be public but not indexed by Google. GitLab (Recommended Default) This is the recommended default as it allows anyone within GitLab to easily discover documents via searching for their name within Drive. Restricted When the document contains highly sensitive or private information such as 1:1s with direct reports Searchable Setting Effect   Can find in search results. makes the file available to anyone with a PeppGitLaberdine Google account and discoverable within GitLab Google Drives search feature. Must have link to access makes the file available to anyone with a GitLab Google account who has the link. Access Setting Use Cases   Editor Anyone that can view the document can edit it. This is the recommended setting when On - GitLab is enabled for the document Commenter Anyone that can view the document can add a comment but cannot edit the document. This is ideal if you want to provide visibility but retain more fine-grained control of document editing. Viewer Individuals with access to the document will only be able to view it. Reference Googles documentation on Link Sharing to learn more. Good practices  helpful tips If you have content in a Google Doc that is later moved to the website or handbook, deprecate the Google Doc. When referring to a Google Doc or folder on the Google Drive in the handbook, refrain from directly linking it. Instead, indicate the name of the doc. If you link the URL people from outside the organization can request access, creating workload and the potential for mistakes. (In the past, linking a Google Doc has led to inadvertently opening the sharing settings beyond what was intended.) This also helps prevent spam from people outside GitLab requesting access to a doc when clicking its link. To save people time you can also link to the search results page which allows people to quickly get to the doc without anyone being able to request access. If there are multiple documents showing up in the search, you may filter your search link by adding the owner. If you are having trouble finding a shared Google Doc, make sure you Search your domain in Google Drive. In our handbook, if you find yourself wondering whether it is better to provide a public link to a Google Doc vs. writing out the content on the website, use the following guideline: Is this document frequently adapted / customized? If yes, then provide a link, making sure that the document can be commented on by anyone with the link. For instance, this is how we share our employment contracts. If the document is rarely customized, then provide the content directly on the site and deprecate the Google Doc. If you want to quickly find where a team members cursor is in a Google Doc, click their icon at the top of the document and the app will jump you to the current location. This works in Sheets and Presentations as well. You can set the notifications on a Google Doc so you only get emailed when someone tags you directly instead of getting emails for every comment. Click on notifications and select Only yours. By the way, when you create the doc, it defaults to All, but when you are just shared with it, it defaults to Only yours. There is no global default. You can find a template of the GitLab letterhead on the shared Google Drive. Please be sure to make a copy of the document to your Google Drive before customizing the template for your use. If you want to have the Google Doc be readable to the public, do not change the sharing settings from Editable by Everyone at GitLab, publish the document instead. In all cases, the sharing settings (who a document is shared with, if it is visible to the whole company, etc.) on a Google Doc should be the single source of truth for the confidentiality of the document. Avoid using your initials when adding content to Google Docs or referring to someone else. Use your full name, as Google Docs Smart Compose will auto-complete names for you, and display information about the GitLab team member on hover. It makes documents more readable and consumable, especially for people outside your team/department. When there is a synchronous discussion about an issue or MR captured in a Google Doc, be sure to summarize the discussion into the issue or MR and link to the agenda item where it was discussed with a bookmark. If the notes are limited access or no notes were taken, please say so. This will ensure that interested GitLab Team Members can see both the summary and context of the discussion. In the pageless format you can use COMMANDOPTIONSHIFTJ or ViewHide Comments to quickly hide comments that reduce document width. When using Google Docs, paste full URLs rather than linking text. Chips are the one acceptable alternative when linking to another Google document. Advantages for using URLs rather than hyperlinks include: Greater visibility when it is a long URL and specific. Links are important but easy to miss otherwise (short and only a different color and/or underlined). Ability to see what the content is without hovering over (which isnt quick on mobile). Makes it easier to paste the content as formatting free text (not rich text), which we prefer and is sometimes the only option. How to deprecate a Google Doc Add Deprecated:  to the start of the title. Remove the content you moved. Add a link to the new location at the beginning of the doc/first slide/first tab. Add a link to the merge request or commit that moved it (if applicable). Handbook page Pages like this are part of the handbook. The GitLab handbook is the central repository for how we run the company. Product documentation GitLab Docs - docs.gitlab.com is where you can find documentation on GitLab, the product. GitLab repositories repository/repositories are where files are kept under source code management. In most cases, requires MRs to merge. The Handbooks are in a repository, our code is in a repository, etc. READMEs README - README.md files are what are shown by default when you browse a repository. Contains useful information to give context on what the project/repository are for. These can also be used for user profiles as personal READMEs. Google Calendar We recommend you set your Google Calendar access permissions to Make available for GitLab - See all event details. Consider marking the following appointments as Private: Personal appointments Confidential  sensitive meetings with third-parties outside of GitLab 1-1 performance or evaluation meetings Meetings on organizational changes There are several benefits and reasons to sharing your calendar with everyone at GitLab: Transparency is one of our values and sharing what you work on is in line with our message of be open about as many things as possible. Due to our timezone differences, there are small windows of time when our availabilities overlap. If other members need to schedule a new meeting, seeing the details of recurring meetings (such as 1-1s) will allow for more flexibility in scheduling without needing to wait for a confirmation from the team member. This speaks to our value to be more efficient. If you add blocks of time spent on recurring tasks to your Google Calendar to remind yourself to do things (e.g. Check Google Analytics), consider marking yourself Free for those events so that coworkers know they may schedule a meeting during that time if they cant find another convenient time. Google Calendar Appointment Scheduling This feature allows you to create a link to an availability schedule that you can send to your customers or coworkers for them to schedule a call according to your availability. This allows you to only show available spots while keeping your other calls private. This also avoids having to go back and forth between you and other person figuring out what day and time works best for both of you. Since this is a native Google Calendar functionality, there is no need to set up integrations with your calendar like other scheduling tools. A member of our Customer Success team created a demo video of how to use this feature. External communication Key practices to consider during any meeting are listed below. Video Calls - If this is your first time meeting a customer/prospect/partner/etc., turn on your camera when you login to Zoom. This will help to make the customer/prospect feel more comfortable as they are certain your undivided attention is geared towards them. No agenda, no attenda - Always have an agenda prepped and ready to go, with the exception of coffee chats. Share this with your audience. Make sure that everything on the agenda is accurate and ask if theres anything missing that needs to be addressed during this call or for the future. When there is no agenda, it translates to you not caring. When sharing agendas with customers and partners it should be called GitLab  Name Shared Collaboration  Agenda, not External Agenda as that implies there is something the parties are not seeing. 70/30 Rule - Ask open ended questions that leave the audience talking 70% of the time, while you are talking 30% of the time. Please note that this varies based on the type of meeting that you are conducting. Be conscious of what questions need to be asked and to capture those items. Take Notes - Effective note-taking is a valuable skill that will help you retain and recall any important details. Be the person who remembers all the details of your audiences needs. Adapt to Audience Tone - Before going into the business portion of your meeting, evaluate first the tone of the audience. Adapt your tone accordingly in order to appeal to various types of personalities. Mid-call - Half-way through the meeting, check in with your audience. Ask them what their thoughts are on the progression of this meeting and if what youre presenting is on the right track. This helps both you and the audience by re-aligning expectations and making sure the meeting is going the right direction. Pre-Close Summary - 10 Minutes (1-hour meetings) or 5 minutes (30 minute meetings) prior to ending the call, ask the audience to build out an agenda for the next step or meeting. This helps to secure next steps and to ensure there are no balls dropped. Post Meeting Action - Immediately write down notes and next steps and input into the proper directory (Google Drive, Salesforce, etc.). Two Block Rule - For in person meetings with external parties you should wait until youre more than two blocks from the meeting before discussing the results of the meeting. Nobody wants to hear themselves being discussed in the bathroom. Communicating with media and industry analysts GitLab team members are not authorized to speak with the media or analysts on behalf of our company unless authorized by our Marketing department. Unless authorized, do not give the impression that you are speaking on behalf of GitLab in any communication that may become public. This includes posts to online forums, social media sites, blogs, chat rooms, and bulletin boards. This policy also applies to comments to journalists about specific matters that relate to our businesses, as well as letters to the editor and endorsements of products or services. For more, please visit the Corporate Communications handbook section. Paid external speaking requests GitLab as the leader in all remote work creates opportunities for our team members to receive requests from external 3rd parties to participate on panels, blogs or news publication or articles. Recently our team members have been approached by external 3rd parties looking to pay or compensate GitLab team members for their time to discuss GitLab remote practice to help them guide a client. Other third parties may contact GitLab team members to provide subject matter expertise that they may have by virtue of their role at GitLab. As in any request we ask that team members verify who they are speaking with to make sure the source is indeed a valid and legitimate request. Always remember that you represent GitLab and if any question makes you uncomfortable or gives you a pause on whether you should answer then we recommend that you do not answer. A third partys questions regarding GitLab financials, sales, compliance, executives or specifically where the company is heading should be treated with the most caution. We want and encourage all team members to be remote evangelists and this can be done without giving very specific information about GitLab. If you have any concern about a request please reach out on slack to external-comms Social media Please see our team member social media policy. Posting or streaming to YouTube See the YouTube page for options and instructions for posting recordings and live streaming to our YouTube channels. Guidelines for vendor meetings We request external vendor meetings to use our video conferencing tool so we can quickly join the call and record the session if we need to. Confirm with vendor that they agree we can record the call. The DRI for the vendor meeting will generate the zoom link and share with the vendor. Decide ahead of the meeting who should be invited, i.e. those likely to get the most out of it. Ahead of the meeting, we should agree internal agenda items/requirements/priorities and provide to the external provider. In order to make the best use of time, we wish to avoid team introductions on the call, particularly where there are a number of us attending. We can include a list of attendees with the agenda and give it to the vendor before or after the meeting. Introductions can be helpful in some external calls. In those meetings, use these guidelines. When a question or issue is raised on the agenda, if the person who raised it is present they will verbalize it live on the call; or if they are not present, then someone will raise it for them. This is a common GitLab practice. Where possible, we request that the vendor provides their slides / presentation materials and any other related information after the meeting. Do not demo your tool live, create a pre-recorded walk-through of the tool and make it available to GitLab before the meeting so we can ask questions if needed. Be cognizant of using inclusive language. We respectfully request that everyone is mindful of the time available, to help manage the call objectives effectively. User communication guidelines Keep conversations positive, friendly, real, and productive while adding value. If you make a mistake, admit it. Be upfront and be quick with your correction. If youre posting to a blog, you may choose to modify an earlier post. Just make it clear that you have done so. There can be a fine line between healthy debate and incendiary reaction. Try to frame what you write to invite differing points of view without inflaming others. You dont need to respond to every criticism or barb. Be careful and considerate. Assume positive intent and explicitly state the strongest plausible interpretation of what someone says before you respond, not a weaker one thats easier to criticize. Rapoports Rules also implores you to list points of agreement and mention anything you learned. Answer questions, thank people even if its just a few words. Make it a two way conversation. Appreciate suggestions and feedback. Do not make promises that you cant keep. Do not offer platitudes. Be direct and respectful. For example - we dont need to suggest that our actions are because we heard feedback when they are really done for other reasons. Guide users who ask for help or give a suggestion and share links. Improving Open Development for Everyone, Types of requests. When facing negative comments, respond patiently and treat every user as an individual, people with the strongest opinions can turn into the strongest supporters. By default, discussions in issues and MRs are public and could include participation of wider community members. It is important to make the wider community members feel welcome participating in discussions and sharing their view. Wider community members also submit MRs to help improve our website/handbook and this is often their first contribution to GitLab. We want to make sure that we are responsive to their contributions and thank them for helping improve GitLab. Adhere to the Code of Conduct in all communication. Similarly, expect users to adhere to the same code when communicating with the GitLab team and the rest of the GitLab community. No one should accept being mistreated. Company phone number If you need to provide the details of GitLabs contact information you can take the address from the visiting page for reference; or the mailing address of the office in the Netherlands if that is more applicable. If a phone number is required, leave this field empty by default. If that is not possible, then use the general number (1-415-761-1791), but be aware that this number simply guides to a voice message that refers the caller back to contacting us via email. Effective communication competency Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. In an all-remote organization effective communication is key to exchanging knowledge, ideas, and information. Effective communication at GitLab: Uses asynchronous communication as the starting point and stays as open and transparent as we can by communicating via text through public issues, merge requests, and Slack channels (over DMs). Places an emphasis on ensuring that conclusions of offline conversations are written down ensuring a single source of truth. Produces video when necessary. If you would like to improve your skills or expand your knowledge on topics relating to Communication at GitLab, check out our resources: Communicating effectively and responsibly through text Embracing asynchronous communication Skills and behavior of applying effective communication as a Team Member: Effectively practices communication via text. Uses asynchronous communication when possible: merge requests (preferred) or issues. Directs all communication to the appropriate channels (Slack, GitLab, email). Recognises when synchronous communication is the more appropriate option. Directs all decisions and discussions to the Handbook as a single source of truth. Records videos to communicate information when that is the most efficient and effective way to consume the content. Employs multimodal communication to broadcast important decisions. Practices low context communication and provides as much background as possible when communicating via text to avoid confusion. Skills and behavior of applying effective communication as a People Manager: Implements working asynchronously across teams, departments or across the company. Drives communication where possible to asynchronous channels. Holds team members accountable for effectively communicating via text. Fosters an environment across teams, departments or divisions where asynchronous communication is the starting point. Guides team members on when producing video is appropriate. Implements interactive communication tools across their team, department or the company depending on level. Drives and funnels conversations to the right channels across teams, divisions and the company. Ally Resources What is an ally? A diversity, inclusion and belonging ally is someone who is willing  Ask Me Anything Learn and ask questions at GitLab's Ask Me Anything (AMA) meetings Confidentiality levels At GitLab, we are public by default, but some information is classified as internal or limited access. This page provides details on confidentiality levels. Deep Dives The goal of a Deep Dive session is to share knowledge about a particular topic, with the assumption that recipients already have some basic understanding or aptitude for the given subject. GitLab Communication  Zoom Zoom-specific communication guides GitLab uses Zoom as the primary video collaboration platform for  GitLab Communication Chat Introduction At GitLab, Slack is critical to our communication with each other. While it enables  GitLab Video Playbook GitLab Video Playbook The purpose of this playbook is to help those who are looking to create video  Power of the Pause Power of the Pause There are times in everyones life when you can feel overwhelmed, anxious,  Top Misused Terms - GitLab Communication List of Top Misused Terms Below are terms people frequently use when they should use another term.  Last modified July 9, 2025: Update file _index.md (2a31acb0) View page source - ",
      "keywords": [
        "always",
        "anti-harassment",
        "assume",
        "behavior",
        "belonging",
        "collaboration",
        "communication",
        "conduct",
        "culture",
        "development",
        "diversity",
        "effective",
        "efficiency",
        "employee",
        "engineering",
        "gitlab",
        "guidelines",
        "handbook",
        "harassment",
        "inclusion",
        "inclusive",
        "intent",
        "iteration",
        "kindness",
        "matters"
      ],
      "extracted_at": "2025-07-21 13:47:06",
      "content_length": 138706
    },
    {
      "id": "engineering-practices",
      "title": "Engineering Practices",
      "url": "https://handbook.gitlab.com/handbook/engineering/",
      "section": "Engineering",
      "content": "Engineering The GitLab Product team looks ahead for expanding the platform What\" (customer needs) and Why (business strategy) and Engineering determines the How (technical implementation) and When (scheduling) of the platform releases. The content on this page talks about how we do engineering at GitLab. Engineering Direction GitLab has a Three-Year Strategy, and were excited to see every member of the Engineering division contribute to achieving it. Whether youre creating something new or improving something that already exists, we want you to feel empowered to bring your best ideas for influencing the product direction through improved scalability, usability, resilience, and system architectures. And when you feel like you need to expand your knowledge in a particular area, know that youre supported in having the resources to learn and improve your skills. Our focus is to make sure that GitLab is enterprise grade in all its abilities and to support the AI efforts required to successfully launch AI features to General Availability. Making sure that GitLab is enterprise grade involves several teams collaborating on improving our disaster recovery and support offerings through ongoing work with GitLab Dedicated and Cells infrastructure. Our goal here is improved availability and service recovery. Engineering Culture Engineering culture at GitLab encompasses the processes, workflows, principles and priorities that all stem from our GitLab Values. All these things continuously strengthen our engineering craftsmanship and allow engineers to achieve engineering excellence, while growing and having a significant, positive impact on the product, people, and the company as a whole. Our engineering culture is primarily being carried and evolves through knowledge sharing and collaboration. Everyone can be part of this process because at GitLab everyone can contribute. Engineering Excellence Engineering excellence can be defined as an intrinsic motivation to improve engineering efficiency, software quality, and deliver better results while building software products. Engineering excellence is being fueled by a strong engineering culture combined with a mission: to build better software that allows everyone to contribute. Engineering Initiatives Engineering is the primary advocate for the performance, availability, and security of the GitLab project. Product Management prioritizes 60% of engineering time, so everyone in the engineering function should participate in the Product Management prioritization process to ensure that our project stays ahead in these areas. Engineering prioritizes 40% of time on initiatives that improve the product, underlying platform, and foundational technologies we use. Work in the 40% time budget should be coordinated and prioritized by the Engineering Manager of a team. Use the label Engineering Time for issues and MRs that are done as part of it so we can follow the work and the results across the engineering division. Contributing to broad engineering initiatives and participating in working group-related tasks. Review fixes from our support team. These merge requests are tagged with the Support Team Contributions label. You can filter on open MRs. Working on high priority issues as a result of issue triaging. This is our commitment to the community and we need to include some capacity to review MRs or work on defects raised by the community. Improvements to the performance, stability and scalability of a feature or dependency including underlying infrastructure. Again, the Product team should be involved in the definition of these issues but Engineering may lead here by planning, prioritizing, and coordinating the recommended improvements. Improvements and upgrades to our toolchain in order to boost efficiency. Codebase improvements: Removing technical debt, updating or replacing outdated dependencies, and enhancing logging and monitoring capabilities. Constructing Proof-of-Concept models for thorough exploration of new technologies, enhancements and new possibilites. Work on improvements and feature enhancements to the product, in the sense of internal community contributions, that would increase our internal engineering productivity by focusing on ready-to-go items that are currently assigned a low priority in the backlog. Engineering Innovation Engineering Innovation is a new process geared toward individual or small-team collaboration that encourages engineers to explore new ideas and Proof-of-Concepts. These projects are typically lean, time-boxed, iterative, and designed to validate whether an idea has the potential to evolve into a viable experimental feature or product. See the Innovation at GitLab Guide. Technical Roadmaps Some of the above examples for the 40% time budget can help in forming a long-term technical roadmap for your group, and determine how best to prioritize your technical work to support overall business goals. In addition to the examples above: Ask yourself these questions What are your most frequent sources of delays? (Could be long-standing tech debt you have to work past while developing, could be lack of reviewers for your domain, could be external to your team like with pipeline duration) Do you have any consistently similar bugs or security issues that come in due to a certain area? Has your team been talking about potentially refactoring any areas? Is your team struggling with certain processes? Have you had recent incidents that allude to a larger problem? Are you getting frequent requests for help in some area? Is your team frequently missing their deliverable commitments? What would help? Does your area have performance (slow endpoints, inconsistent responses, intermittent errors) or scalability (the feature or area as-is will not scale) concerns? Where do you see the biggest instability? Have you talked to operations and support about feedback for your area? Do you have application or rate limits in the right places? Have you burned down your security, corrective action, and infradev issues? Is your error budget green? Have your feature flags been removed from the codebase yet? Do you have adequate unit test, integration test and E2E coverage? Do you have adequate documentation for your features? Do you have adequate telemetry , logging, monitoring of your features? Do you have adequate error handling and error codes that allows fast and easy diagnostics? Gather data like this Master:Broken issues severity::1 and severity::2 bugs Missed-Slo issues Flaky test issues type::maintenance issues Think about the future state of your product Where do you want your product to be this time next year? What are the technical requirements to achieve that? What are technical topics that would benefit from research/POCs? What would make it easier for you to achieve that if it was no longer a factor? What would be the performance and/or business impact once you address these issues? How would you evolve your team processes to regularly review your technical roadmap? Technical roadmap process Engineering Managers (EMs) are responsible for collaboratively developing their teams technical roadmap backlog. All items should be documented as epics and issues using the Technical Roadmap label. Global initiatives will be defined and must be incorporated into each groups roadmap and prioritization (e.g., allocating 40% of front-end capacity for Vue upgrade, completing all Cells issues for a specific area by milestone XYZ). Prioritization of items should align with: General business goals Engineering vision Team capacity and expertise Planning Guidelines: Allocate 40% of the overall time budget for technical roadmap items in the normal milestone planning process. Use the Technical roadmap label for all related issues to facilitate tracking and coordination. Key Steps: Identify and document technical debt and improvement opportunities Assess impact and effort for each item Prioritize based on business value and strategic alignment Integrate with existing iteration/milestone planning Regularly review and adjust the roadmap This process ensures a balanced approach between feature development and technical improvements, promoting long-term sustainability and efficiency of the engineering organization. Community Contributions We have a 3-year goal of reaching 1,000 monthly contributors as a way to mature new stages, add customer-desired features that arent on our roadmap, and even translate our product into multiple languages. Diversity Diverse teams perform better. They provide a sense of belonging that leads to higher levels of trust, better decision making, and a larger talent pool. They also focus more on facts, process facts more carefully, and are more innovative. By hiring globally and increasing the numbers of women and under represented groups (URGs) in the Engineering division, were helping everyone bring their best selves to work. Growing our team Strategic hiring is a top priority, and were excited to continue hiring people who are passionate about our product and have the skills to make it the best DevSecOps tool in the market. Our current focus areas include reducing the amount of time between offer and start dates and hiring a diverse team (see above). Were also implementing industry-standard approaches like structured, behavioral, and situational interviewing to help ensure a consistent interview process that helps to identify the best candidate for every role. Were excited to have a recruiting org to partner with as we balance the time that managers spend recruiting against the time they spend investing in their current team members. Expand customer focus through depth and stability As expected, a large part of our focus is on improving our product. For Enterprise customers, were refining our product to meet the levels of security and reliability that customers rightfully demand from SaaS platforms (SaaS Reliability). Were also providing more robust utilization metrics to help them discover features relevant to their own DevOps transformations (Usage Reporting) and offering the ability to purchase and manage licenses without spending time contacting Sales or Support (E-Commerce and Cloud Licensing). Lastly, in response to Enterprise customer requests, were adding features to support Suggested Reviewers, better portfolio management through Work Items, and Audit Events that provide additional visibility into user passive actions. For Free Users, were becoming more efficient with our open core offering, so that we can continue to support and give back to students, startups, educational institutions, open source projects, GitLab contributors, and nonprofits. For Federal Agencies, were obtaining FedRAMP certification to strengthen confidence in the security standards required on our SaaS offering. This is a mandated prerequisite for United States federal agencies to use our product. For Hosted Customers, were supporting feature parity between Self-Managed and GitLab Hosted environments through the Workspace initiative. Were also launching GitLab Dedicated for customers who want the flexibility of cloud with the security and performance of a single-tenant environment. For customers using CI/CD, were expanding the available types of Runners to include macOS, Linux/Docker, and Windows, and were autoscaling build agents. Taking time off Note: This process is expected for PTO that is five consecutive days or more, inclusive of adjacent public holidays (excluding weekend days). For PTO that is fewer than five consecutive days, including the cases where there are multiple PTO blocks with fewer than 5 consecutive days and a few working days in-between, a coverage issue is not required but a coverage issue can be filed for PTO of any length, especially if itd be helpful to balance team continuity and individual flexibility. In order to ensure business continuity, and deliver on commitments; the Engineering Division is adopting a PTO Coverage Issue Process. Processes like this are already formalized in GitLab (e.g. PM Coverage Issue) and some teams within Engineering have practiced this regularly at the Management level. This allows us to continue to support team member well-being through time away without negatively impacting the rest of the team. A PTO Coverage issue is required for job grades 8 and up. For job grades 7 and below a PTO Coverage issue is recommended as there is value in going through the process of creating the PTO Coverage issue even if there are minimal items to include (for all levels) in that it forces you to think about what you have on your plate and what impact your PTO will have on those items. So whether the result is that the work waits or there is someone designated as a replacement DRI, it makes the decision explicit and documented. Once planning for a milestone has been completed (see Monday, 5 days before the milestone begins) PTO for periods longer than 5 consecutive days, inclusive of adjacent public holidays (excluding weekend days), cannot be requested. This is to prevent disrupting plans for that milestone. There are exceptions to this, but all need to be discussed with your manager. Examples include: urgent scenarios a team/individual hits targets earlier in the milestone (we measure impact, not activity) a strong need for a team member to take PTO of this length These issues will help inform teams as they plan their milestones to ensure the work teams are committed to can be achieved with the staff available, or if there will be a lack of staff to achieve those commitments, to work with team members to see what can be done to achieve the results for our customers. The process below helps to clarify and expand upon the Flexible PTO Policy by making the coordination with the team members manager explicit. 1. Creating an Engineering coverage issue You should use this issue template to define handshake responsibilities. For extended leave, it is important to find one or more Directly Responsible Individuals (DRIs) that will be able to make decisions while you are away. This may be your manager, another engineer, or maybe the Product Manager for your team. The coverage issue should contain all the necessary information for the DRIs to make good decisions in your absence, so please make sure to include as much detail as needed. The coverage issue should highlight work impact estimates, mitigations identified, and coverage alternatives. If additional context needs to be shared to provide color to the coverage issue, you can consider a specific handover meeting to cover further details. It is recommended to work with your manager and other stakeholders when considering cross-functional teammate capacity for a coverage task assignment. For example, while its optimal for PM, EM, and PDs to assist in covering for each other given their shared knowledge of their product area including customers and users, PM teammates may or may not have the bandwidth or expertise to take on covering engineering specific responsibilities. Alternatively, it may be better for the manager of the engineer or another engineer in the same stage to aid in coverage. Plan to have the necessary conversations across teams and managers. 2. Sharing your Engineering coverage issue with your manager Once youve filed your engineering coverage issue, share this with your manager prior to milestone planning so they can review and approve. Check the latest guidance in our PTO policy on how much notice is required. Consider whether any new commitments would be affected by your planned PTO. If a team member falls behind on something, they will need to make sure they have a coverage plan in place to ensure success of their commitments. 3. Manager reviews coverage issue Once the team member has shared their coverage issue with their manager, the manager will review the coverage issue and validate assumptions with stakeholders or impacted project DRIs as needed. The manager will make a decision on approval or discuss different arrangements or other contingency plans. Once the manager ticks their box on the coverage issue approving the leave, enter the time off into Workday. 4. Communicate your time off After team members coverage issue is approved, team members will communicate their time off and enter the PTO into Deel/Workday including a link to their coverage issue. Team members will share their coverage issue with their relevant colleagues via Slack channels, GitLab status, etc. ahead of the milestone planning. 5. Take your time off Please disconnect and take the time off that you need! 6. Returning from Time Off Returning from time off can be overwhelming and daunting. You should work with your DRIs to understand what has changed during your absence and what the current priorities are. Also, communicate transparently that your response time may be slower because you are catching up. Here are some additional tips on how to return back to work after time off. Engineering Departments There are five departments within the Engineering Division: DevOps Engineering Department AI Engineering Department Sec Department Infrastructure Platforms Support Engineering Department Other Related Pages CTO Leadership Team Communication Database Engineering Development Principles Engineering Automation Engineering Metrics Engineering READMEs Frequently Used Projects GitLab Innovation Program, managed by the GitLab Legal Team Hiring Mentorship Pajamas Design System RD Tax Credit Applications Workflows Developer onboarding Engineering Demo Process Engineering Workflow Code Review Security Issues Architecture Design GitLab Repositories Issue Triage Policies Contributing to Go projects Wider Community Merge Request Triage Policies Root Cause Analysis Unplanned Critical Patch releases Incident Management GitLab in Production Workflow Diagram Error Budgets Performance of GitLab Monitoring of GitLab.com Production Readiness Guide People Management Engineering Career Development Engineering Career Mobility Principles Emerging Talent  GitLab Engineering Management Cross-Functional Prioritization See the Cross-Functional Prioritization page for more information. SaaS Availability Weekly Standup To maintain high availability, Engineering runs a weekly SaaS Availability standup to: Review high severity (S1/S2) public facing incidents Review important SaaS metrics Track progress of Corrective Actions Track progress of Feature Change Locks Infrastructure Items Each week the Infrastructure team reports on incidents and key metrics. Updating these items at the top of the Engineering Allocation Meeting Agenda is the responsibility of the Engineering Manager for the General Squad in Reliability. Incident Review Include any S1 incidents that have occurred since the previous meeting. Include any incidents that required a status page update. SaaS Metrics Review Include screenshots of the following graphs in the agenda. Alert Volume Review Corrective Actions Development Items For the core and expansion development departments, updates on current status of: Error budgets Reliability issues (infradev) Security issues Groups under Feature Change Locks should update progress synchronously or asynchronously in the weekly agenda. The intention of this meeting is to communicate progress and to evaluate and prioritise escalations from infrastructure. Feature Change Locks progress reports should appear in the following format in the weekly agenda: FCL xxxx - team name FCL planning issue: issue link Incident Issue: issue link Incident Review Issue: issue link Incident Timeline: link to Timeline tab of the Incident issue e.g. time to detection, time to initiate/complete rollback (as applicable), time to mitigation Cause of Incident Mitigation Status of Planned/completed work associated with FCL Feature Change Locks A Feature Change Lock (FCL) is a process to improve the reliability and availability of GitLab.com. We will enact an FCL anytime there is an S1 or public-facing (status page) S2 incident on GitLab.com (including the License App, CustomersDot, and Versions) determined to be caused by an engineering department change. The team involved should be determined by the author, their line manager, and that managers other direct reports. If the incident meets the above criteria, then the manager of the team is responsible for: Form the group of engineers working under the FCL. By default, it will be the whole team, but it could be a reduced group if there is not enough work for everyone. Plan and execute the FCL. Inform their manager (e.g. Senior Manager / Director) that the team will focus efforts towards an FCL. Provides updates at the SaaS Availability Weekly Standup. If the team believes there does not need to be an FCL, approval must be obtained from either the VP of Infrastructure or VP of Development. Direct reports involved in an active borrow should be included if they were involved in the authorship or review of the change. The purpose is to foster a sense of ownership and accountability amongst our teams, but this should not challenge our no-blame culture. Timeline Rough guidance on timeline is provided here to set expectations and urgency for an FCL. We want to balance moving urgently with doing thoughtful important work to improve reliability. Note that as times shift we can adjust accordingly. The DRI of an FCL should pull in the timeline where possible. The following bulleted list provides a suggested timeline starting from incident to completion of the FCL. Business day x in this case refers to the x business day after the incident. Day 0: Incident: Business day 1: relevant Engineering Director collaborates with VP of Development and/or VP of Infrastructure or their designee to establish if FCL is required. Business day 2: confirmation that an FCL is required for this incident and start planning. Business days 3-4: planning time Business days 5-9 (1 week): complete planned work Business days 10-11: closing ceremony, retrospective and report back to standup Activities During the FCL, the team(s) exclusive focus is around reliability work, and any feature type of work in-flight has to be paused or re-assigned. Maintainer duties can still be done during this period and should keep other teams moving forward. Explicitly higher priority work such as security and data loss prevention should continue as well. The team(s) must: Create a public slack channel called fcl-incident-number, with members The Teams Manager The Author and their teammates The Product Manager, the stages Product leader, and the sections Product leader All reviewer(s) All maintainers(s) Infrastructure Stable counterpart The chain-of-command from the manager to the VP (Sr Manager, Sr/Director, VP, etc) Create an FCL issue in the FCL Project with the information below in the description: Name the issue: Group Name FCL for Incident  Links to the incident, original change, and slack channel FCL Timeline List of work items Complete the written Incident Review documentation within the Incident Issue as the first priority after the incident is resolved. The Incident Review must include completing all fields in the Incident Review section of the incident issue (see incident issue template). The incident issue should serve as the single source of truth for this information, unless a linked confidential issue is required. Completing it should create a common understanding of the problem space and set a shared direction for the work that needs to be completed. See that not only all procedures were followed but also how improvements to procedures could have prevented it A work plan referencing all the Issues, Epics, and/or involved MRs must be created and used to identify the scope of work for the FCL. The work plan itself should be an Issue or Epic. Daily - add an update comment in your FCL issue or epic using the template: Exec-level summary Target End Date Highlights/lowlights Add an agenda item in the SaaS Availability weekly standup and summarize status each week that the FCL remains open. Hold a synchronous closing ceremony upon completing the FCL to review the retrospectives and celebrate the learnings. All FCL stakeholders and participants shall attend or participate async. Managers of the groups participating in the FCL, including Sr. EMs and Directors should be invited. Agenda includes reviewing FCL retrospective notes and sharing learnings about improving code change quality and reducing risk of availability. Outcome includes handbook and GitLab Docs updates where applicable. Scope of work during FCL After the Incident Review is completed, the team(s) focus is on preventing similar problems from recurring and improving detection. This should include, but is not limited to: Address immediate corrective actions to prevent incident reoccurrence in the short term Introduce changes to reduce incident detection time (improve collected metrics, service level monitoring, which users are impacted) Introduce changes to reduce mitigation time (improve rollout process through feature flags, and clean rollbacks) Ensure that the incident is reproducible in environments outside of production (Detect issues in staging, increase end-to-end integration test coverage) Improve development test coverage to detect problems (Harden unit testing, make it simpler to detect problems during reviews) Create issues with general process improvements or asks for other teams Examples of this work include, but are not limited to: Fixing items from the Incident Review which are identified as causal or contributing to the incident. Improving observability Improving unit test coverage Adding integration tests Improving service level monitoring Improving symmetry of pre-production environments Improving the GitLab Performance Tool Adding mock data to tests or environments Making process improvements Populating their backlog with further reliability work Security work Improve communication and workflows with other teams or counterparts Any work for the specific team kicked off during this period must be completed, even if it takes longer than the duration of the FCL. Any work directly related to the incident should be kicked off and completed even if the FCL is over. Work paused due to the FCL should be the priority to resume after the FCL is over. Items created for other teams or on a global level dont affect the end of the FCL. A stable counterpart from Infrastructure will be available to review and consult on the work plan for Development Department FCLs. Infrastructure FCLs will be evaluated by an Infrastructure Director. Engineering Performance Indicator process The Product Analytics team is responsible for maintaining Engineering Performance Indicators. Work regarding KPI / RPI is tracked using the Product Analytics task intake tracker. Manual verification We manually verify that our code works as expected. Automated test coverage is essential, but manual verification provides a higher level of confidence that features behave as intended and bugs are fixed. We manually verify issues when they are in the workflow::verification state. Generally, after you have manually verified something, you can close the associated issue. See the Product Development Flow to learn more about this issue state. We manually verify in the staging environment whenever possible. In certain cases we may need to manually verify in the production environment. If you need to test features that are built for GitLab Ultimate then you can get added to the issue-reproduce group on production and staging environments by asking in the development Slack channel. These groups are on an Ultimate plan. Critical Customer Escalations We follow the below process when existing critical customer escalations requires immediate scheduling of bug fixes or development effort. Requirements for critical escalation Customer is in critical escalation state The issues escalated have critical business impact to the customer, determined by Customer Success and Support Engineering leadership Failure to expedite scheduling may have cascading business impact to GitLab Approval from a VP from Customer Success AND a Director of Support Engineering are required to expedite scheduling Customer Success: approval from VP, Customer Success Management - Sherrod Patching Support Engineering: approval from VP, Support - Johnny Scarborough Process The issue priority is set to \"priority::1\" regardless of severity The label \"critical-customer-escalation\" is applied to the issue The issue is scheduled within 1 business day For issues of type features, approval from the Product DRI is needed. The DRI or their delegate provides daily process updates in the escalated customer slack channel DRI If issue is type bug DRI is the Director of Development If issue is type feature DRI is the Director of Product If issue requires Infrastructure work the DRI is the Engineering Manager in Infrastructure The DRI can use the customer critical merge requests process to expedite code review  merge. Pairing Engineers on priority::1/severity::1 Issues In most cases, a single engineer and maintainer review are adequate to handle a priority::1/severity::1 issue. However, some issues are highly difficult or complicated. Engineers should treat these issues with a high sense of urgency. For a complicated priority::1/severity::1 issue, multiple engineers should be assigned based on the level of complexity. The issue description should include the team member and their responsibilities. Team Member Responsibility Team Member 1 Reproduce the Problem Team Member 2 Audit Code Base for other places where this may occur If we have cases where three or five or X people are needed, Engineering Managers should feel the freedom to execute on a plan quickly. Following this procedure will: Decrease the time it takes to resolve priority::1/severity::1 issues Allow for a smooth handover of the issue in case of OOO or End of the Work Day Provide support for Engineers if they are stuck on a problem Provide another set of eyes on topics with high urgency or securing security-related fixes Internal Engineering handbook There are some engineering handbook topics that are internal only. These topics can be viewed by GitLab team members in the engineering section of the internal handbook. AI Engineering Vision Our goal is not merely to launch features, but to ensure they land successfully and provide  Architecture Complexity at Scale As GitLab grows, through the introduction of new features and improvements on  Cross Functional Prioritization Overview The Cross-Functional Prioritization framework exists to give everyone a voice within the  CTO Leadership Team The CTO Leadership Team is composed of the CTOs direct reports and the Office of the CTO  Deployments and Releases Overview and terminology This page describes the deployment and release approach used to deliver  Developer Onboarding Awesome! You're about to become a GitLab developer! Here you'll find everything you need to start developing. Development Development Department Learning and Development Resources Secure coding best practices It is important that all developers are aware of secure  DevOps Engineering Vision Our goal is not merely to launch features, but to ensure they land successfully and provide  Engineering Career Development The Three Components of Career Development There are three important components of developing  Engineering Communication Communication GitLab Engineering values clear, concise, transparent, asynchronous, and frequent  Engineering Demo Process Occasionally, it is useful to set up a demo on a regular cadence to ensure cross-functional  Engineering Error Budgets The error budget provides a clear, objective metric that determines how unreliable the service is allowed to be within a single quarter. Engineering Function Performance Indicators Executive Summary KPI Health Status Engineering Handbook MR Rate Okay Above target Engineering Team  Engineering Hiring Overview Hiring is a cornerstone of success for our engineering organization, contributing to our  Engineering IC Leadership Engineering IC Leadership at GitLab: going beyond Senior level At GitLab, it is expected that  Engineering Management How Engineering Management Works at GitLab At GitLab, we promote two paths for leadership in  Engineering Mentorship Mentorship, Coaching and Engineering Programs Senior Leaders in Engineering The 7CTOs Program is run  Engineering Projects Name Location about.gitlab.com gitlab-com/marketing/digital-experience/about-gitlab-com AI Gateway  Engineering Team Readmes Engineering Workflow This document explains the workflow for anyone working with issues in GitLab Inc. Fast Boot A Fast Boot is an event that gathers the members of a team or group in one physical location to work  Frontend Group Teams Create Monitor Plan Secure Verify and Release Frontend domain experts You can find engineers  GitLab Repositories GitLab consists of many subprojects. A curated list of GitLab projects can be found at the GitLab  Guidelines for automation and access tokens Guidelines for automation with project/group tokens or service accounts Incident Definition of an Incident The definition of incident can vary widely among companies  Infrastructure The Infrastructure Department is responsible for the availability, reliability, performance, and scalability of GitLab.com and other supporting services Infrastructure Platforms The Infrastructure Platforms department is responsible for the availability, reliability, performance, and scalability of GitLab SaaS Platforms and supporting services Innovation at GitLab This guide serves as a comprehensive handbook for GitLab team members (engineers, product managers,  Monitor Stage The Monitor Stage is responsible providing observability and response features. Monitoring of GitLab.com GitLab.com Service Availability The calculation methodology for GitLab.com Service Availability  On-Call If youre a GitLab team member and are looking to alert Reliability Engineering about an  Open Source at GitLab We believe in Open Source As a company, GitLab is dedicated to open source. Not only do we believe  Performance Performance Facets We categorize performance into 3 facets Backend Frontend Infrastructure Backend  Policies related to GitLab.com The handbook pages nested under policies directory are controlled documents, and  RD Tax Credits GitLab submits applications for RD Tax Credits in a number of jurisdictions that implement  Recognition in Engineering Engineering Quarterly Achievers Quarterly, CTO Leadership will recognize Engineering team members  Releases Overview and terminology This page describes the processes used to release packages to self-managed  Root Cause Analysis At GitLab transparency is one of our core values, as it helps create an open and honest working  Testing Welcome to the Testing Guide. Pages in this section provides information about testing practices,  Unplanned Upgrade Stop Workflow An unplanned upgrade stop is disruptive for customers as it requires to perform rollback and  Last modified July 17, 2025: Removes outdated strategy page (387298cd) View page source - ",
      "keywords": [
        "availability",
        "behavior",
        "belonging",
        "collaboration",
        "communication",
        "culture",
        "development",
        "direction",
        "diversity",
        "efficiency",
        "engineering",
        "general",
        "gitlab",
        "handbook",
        "inclusive",
        "iteration",
        "making",
        "policy",
        "practices",
        "product",
        "reporting",
        "results",
        "security",
        "strategy",
        "team"
      ],
      "extracted_at": "2025-07-21 13:47:14",
      "content_length": 35267
    },
    {
      "id": "security-policies",
      "title": "Security Policies",
      "url": "https://handbook.gitlab.com/handbook/security/",
      "section": "Security",
      "content": "Security at GitLab Security Vision and Mission Our vision is to transparently lead the world to secure outcomes. Our mission is to enable everyone to innovate and succeed on a safe, secure, and trusted DevSecOps platform. This will be achieved through 5 security operating principles: Accelerate business success with a focus on: Prioritize boring, iterative solutions that minimize risk Find ways to say Yes Understand goals before recommending solutions Use GitLab first Efficient operations with a focus on: Technical controls over handbook rules Leverage automation first (robots over humans) Responsible decisions (Spending, Tooling, Staffing, etc) over low ROI (return on investment) decisions Reusable or repeatable over singular solutions Transparency with a focus on: Responsible protection of MNPI (material non-public information) Evangelize dogfooding of GitLab publicly Lead with metrics Balance security with usefulness Risk Reduction with a focus on: Secure by default Preventative controls over detective controls Solving root causes over treating symptoms Visibility through Coverage, Discoverability, Observability Collaborative Culture with a focus on: Working together on common solutions Solve shared problems with shared solutions Simplifying language for everyone to understand Avoiding security jargon Seek opportunities to help others succeed To help achieve the vision of transparently leading the world to secure outcomes, the Security Division has nominated a Security Culture Committee. Division Structure The Security Division provides essential security operational services, is directly engaged in the development and release processes, and offers consultative and advisory services to better enable the business to function while minimising risk. To reflect this, we have structured the Security Division around four key tenets, which drive the structure and the activities of our group. These are : Product Security Security Operations Corporate Security Security Assurance Application Security Infrastructure Security Security Platforms and Architecture Vulnerability Management Data Security Security Logging Security Incident Response Team (SIRT) Trust and Safety Red Team Threat Intelligence Signals Engineering Corporate Security Helpdesk Support Tech Stack Systems Engineering Teams Field Security Security Compliance Security Governance Security Risk Secure the Product - The Product Security Department The Product Security Department is primarily focused on Securing the Product. This reflects the Security Divisions current efforts to be involved in the Application development and Release cycle for Security Releases, Infrastructure Security, and our HackerOne bug bounty program. The term Product is interpreted broadly and includes the GitLab application itself and all other integrations and code that is developed internally to support the GitLab application for the multi-tenant SaaS. Our responsibility is to ensure all aspects of GitLab that are exposed to customers or that host customer data are held to the highest security standards, and to be proactive and responsive to ensure world-class security in anything GitLab offers. Protect the Company - The Security Operations Department Security Operations Department teams are primarily focused on protecting GitLab the business and GitLabs platform. This encompasses protecting company property as well as to prevent, detect and respond to risks and events targeting the business and our platform. This department includes the Security Incident Response Team (SIRT) and the Trust and Safety team. These functions have the responsibility of shoring up and maintaining the security posture of GitLabs platform to ensure enterprise-level security is in place to protect our new and existing customers. Lead with Data - The Threat Management Department Threat Management Department teams are cross-functional. They are responsible for collaborating across the Security Division to identify, communicate, and remediate threats or vulnerabilities that may impact GitLab, our Team Members or our users and the community at large. Assure the Customer - The Security Assurance Department The Security Assurance Department is comprised of the teams noted above. They target Customer Assurance projects among their responsibilities. This reflects the need for us to provide resources to our customers to assure them of the security and safety of GitLab as an application to use within their organisation and as a enterprise-level SaaS. This also involves providing appropriate support, services and resources to customers so that they trust GitLab as a Secure Company, as a Secure Product, and Secure SaaS Protect the Organization - Corporate Security GitLab is both a company and a product. The Corporate Security department focuses on implementing and protecting the information technology (IT) related systems that the company uses to conduct business internally, and provides the hardware, software, and tools that our team members and 3rd party service providers (aka contractors) need to be productive and get their job done efficiently. The configurations that we implement for team members internally are designed to protect our customers and their data. We have a 24x5 technical support helpdesk for team members and have engineers that configure and maintain many of our company-wide tech stack applications. We invest heavily in device trust, identity management, and infrastructure governance to provide the highest level of security assurance for the administrators of our product and ensure all appropriate controls are in place when handling customer data. Other groups and individuals Security Program Management Security Program Management is responsible for complete overview and driving security initiatives across Product, Engineering, and Business Enablement. This includes the tracking, monitoring, and influencing priority of significant security objectives, goals, and plans/roadmaps from all security sub-departments. Security Program Manager Job Family Security Program areas of focus Drive Accountability  Visibility for Program Objectives  Goals Drive, Gather,  Examine Program Needs  Opportunities through Intra  Inter Organizational Collaboration Provide Insights  Suggestions Impacting Program Strategy  Roadmap Assist in Gathering  Prioritizing Program Risks, Requirements,  Alignment to Influence Remediation Drive  Define Acceptance Criteria, Value Proposition, Milestones to Visualize and Communicate Program Effectiveness Develop Repeatable, Scalable, Efficient, Effective, Processes  Procedures Product development In keeping with our core values and the belief that everyone can contribute, the Security Division is committed to dogfooding and contributing to the development of the GitLab product. Contacting the Team Reporting vulnerabilities and security issues For information regarding GitLabs HackerOne bug bounty program, and creating and scheduling security issues, please see our engaging with security page and our Responsible Disclosure Policy. Reporting an Incident If an urgent security incident has been identified or you suspect an incident may have occurred, please refer to Engaging the Security Engineer On-Call. Examples include, but are not limited to: Lost or stolen devices Leaked credentials Endpoint compromise or infection Exposure of sensitive GitLab data GitLab provides a panicgitlab.com email address for team members to use in situations when Slack is inaccessible and immediate security response is required. This email address is only accessible to GitLab team members and can be reached from their gitlab.com or personal email address as listed in Workday. Using this address provides an excellent way to limit the damage caused by a loss of one of these devices. Additionally if a GitLab team member experiences a personal emergency the People Group also provides an emergency contact email. Sub-groups and projects Many teams follow a convention of having a GitLab group team-name-team with a primary project used for issue tracking underneath team-name or similar. gitlab-com/gl-security is used for mentioning the entire Security Division gitlab-com/gl-security/security-managers is used for mentioning all managers in the Security Division Security Division Meta is for Security Division initiatives, meta and backend tasks, and catch all for anything not covered by other projects Security Assurance (gitlab-com/gl-security/security-assurance) gitlab-com/gl-security/security-assurance/sec-compliance gitlab-com/gl-security/security-assurance/field-security-team gitlab-com/gl-security/security-assurance/security-risk-team gitlab-com/gl-security/security-assurance/governance Product Security (gitlab-com/gl-security/product-security) Product Security Meta For department wide management and planning issues. gitlab-com/gl-security/product-security/appsec is the primary group for mentioning the Application Security team. gitlab-com/gl-security/security-research gitlab-com/gl-security/threatmanagement/vulnerability-management Security Operations (gitlab-com/gl-security/security-operations) Security Operations Department gitlab-com/gl-security/security-operations/sirt is the primary group for mentioning the Security Incident Response Team (SIRT). SIRT (private) for SIRT issues. gitlab-com/gl-security/security-operations/trust-and-safety is the primary group for mentioning the Trust  Safety team. gitlab-com/gl-security/security-operations/redteam Corporate Security (gitlab-com/gl-security/corp) Functional Teams Org Chart Issue Tracker gitlab-com/gitlab-com/gl-security/corp/managers - Management Team gitlab-com/gitlab-com/gl-security/corp/helpdesk - End User Services Helpdesk Team (see Support Handbook Page) gitlab-com/gitlab-com/gl-security/corp/logistics - Laptop and Phone Logistics gitlab-com/gitlab-com/gl-security/corp/code - Code Platforms Engineering gitlab-com/gitlab-com/gl-security/corp/device - Device Trust Engineering gitlab-com/gitlab-com/gl-security/corp/identity - Identity Engineering gitlab-com/gitlab-com/gl-security/corp/infra - Infrastructure Governance Engineering gitlab-com/gitlab-com/gl-security/corp/saas - SaaS and Tech Stack Engineering (shared responsibility handled by Device Trust and Identity Teams) gitlab-com/gitlab-com/gl-security/corp/dept - Entire Department Slack Channels security; Used for general security questions and posting of external links for the great discussions. Company wide security relevant announcements are announced in whats-happening-at-gitlab and may be copied here. security-division - Daily questions and discussions focused on work internal to the Security Division. Can be used for reporting when unsure of where to go. abuse - Used for reporting suspected abusive activity/content (GitLab Internal) as well as general discussions regarding anti-abuse efforts. Use trust-and-safety in the channel to alert the team to anything urgent. security-team-standup - Channel for daily standups. incidents and other infrastructure department channels security-alert-manual - New reports for the Security Division from various intake sources, including ZenDesk and new HackerOne reports. hackerone-feed - Feed of most activity from our HackerOne program. Other security-alert- and abuse - Multiple channels for different notifications handled by the Security Division. Use the sirt-members mention in any Slack channel to tag the members of the Security Incident Response Team (SIRT). Use the sec-assurance-team mention in any Slack channel to tag the members of the Security Compliance, Risk, and Governance  Field Security teams. Use the field-security mention in any Slack channel to tag the members of the Field Security team. Use the appsec-team mention in any Slack channel to tag the members of the Application Security team. Use the trust-and-safety mention in any Slack channel to tag the members of the Trust  Safety team. Use the security-identity mention in any Slack channel (or security-identity-ops) to tag members of the Identity team. Division, Department, and Team updates We believe it is important to share regular updates at various levels of the Security Division, and we use Slack as the primary mechanism for providing these updates. Our updates are open to all GitLab team members using the following process: Start of each month: A thread per-department is started in security-division by each department leader (CorpSec, ProdSec, SecAssurance, SecOps). These threads are pinned for the duration of the month. Thread template: MONTH DEPARMENT Weekly Updates Example: August Product Security Weekly Updates Weekly: At least once a week, teams provide updates they wish to share within the appropriate thread. For example, updates from Vulnerability Management would be placed in the Product Security thread for the given month. These weekly updates, while highly encouraged, are strictly optional and should represent content that ICs and managers feel should be highlighted. Teams are encouraged to define processes and DRIs around these updates that work for them. Individuals providing the weekly updates are encouraged to use the Also send to security-division option within the thread to increase visibility. End of each month: Departmental leaders prepare a monthly update, including no more than three updates per team, and post it in ciso within the first week of the following month. Each monthly update should include a brief preface written by the departmental leader covering any notable themes or other strategic updates. Each of the three updates per-team should be no more than 2-3 sentences and include at least one link to allow readers to gain additional context. Links should be to GitLab Issues or Epics wherever possible. If information is confidential and not able to be added to an Issue or Epic, a note should be added indicating this. It is recommended that departmental leaders build their monthly update over the course of the month via a GitLab issue (see an example) in collaboration with their managers and senior ICs. Twice-Monthly Security Leadership Meetings Security Leadership meets twice a month over Zoom to discuss division-wide topics. Individual contributors from across the security organization are invited to present their work, ideas, or projects to this leadership forum. If youre interested in presenting: Discuss the topic with your manager first Your manager will help you: Add your topic to the agenda with supporting materials Request an appropriate time slot (5-25 minutes) Coordinate scheduling your presentation Note that these meetings are not on the general Security calendar. Your manager will ensure you receive the meeting invitation for your scheduled time. We encourage all team members to take advantage of this opportunity to share your work and insights with security leadership. Ransomware For an overview of the communication and response process for a suspected ransomware attack, please see our Responding to Ransomware page. Important topics Tokens The following best practices will help ensure tokens are handled appropriately at GitLab. For detailed requirements regarding the use of tokens at GitLab, please see our token management standard. When creating a Personal Access Token, be sure to choose the appropriate scopes that only have the permissions that are absolutely necessary. Oftentimes a Project Access Token might be sufficient instead of a Personal Access Token. Project Access Tokens have a much more limited scope and should be preferred over Personal Access Tokens whenever possible. Always set an expiration for your tokens when creating them. Tokens should preferably expire in a matter of hours or a day. Be mindful to keep these personal access tokens secret. Be particularly careful not to accidentally commit them in configuration files, paste them into issue or merge request comments, or otherwise expose them. Please consider periodically reviewing your currently active Personal Access Tokens and revoking any that are no longer needed. Personal Access Tokens will be highly discouraged within the GitLab production environment, and disallowed/disabled wherever possible. Existing tokens shall remain, but additional issuance will not be permissible/possible. If you believe a personal access token has been leaked, revoke it immediately (if possible) and contact the security team using the /security Slack command. Receive notification of security releases To receive security release blog notifications delivered to your inbox, visit our contact us page. To receive release notifications via RSS, subscribe to our security release RSS feed or our RSS feed for all releases. For additional information regarding security releases, please visit the Delivery Teams security releases page. Resources Tools Incident-Tools (private) for working scripts and other code during or while remediating an incident. If the tool is applicable outside of the GitLab.com environment, consider if its possible to release when the security issue becomes non-confidential. This group can also be used for private demonstration projects for security issues. security-tools (mostly private) contains some operational tools used by the security teams. Contents and/or configurations require that most of these projects remain private. Calendar We welcome GitLab team members to join meetings that are on our shared Security Calendar. Other Frequently Used GitLab.com Projects Security crosses many teams in the company, so you will find security labeled issues across all GitLab projects, especially: gitlab-foss gitlab infrastructure production When opening issues, please follow the Creating New Security Issues process for using labels and the confidential flag. Other Resources for GitLab Team Members Security Best Practices, using 1Password and similar tools, are documented on their own security best practices page. Secure Coding Training. GitLab.com data breach notification policy. GitLab Internal Acceptable Use Policy. For GitLab.com, we have developed a Google Cloud Platform (GCP) Security Guidelines Policy document, which outlines recommended best practices, and is enforced through our security automation initiatives. GitLab Security Tanuki for use on security release blogs, social media and security related swag as appropriate: Web-RGB Print-CMYK and one exclusively for stickers. Security READMEs Working in Security Contributing to GitLab the product as a Security team member Threat Modeling Last modified May 16, 2025: Move existing security standards to new section, which includes an index (840eb803) View page source - ",
      "keywords": [
        "accelerate",
        "collaboration",
        "communication",
        "conduct",
        "culture",
        "development",
        "efficient",
        "engineering",
        "find",
        "gitlab",
        "handbook",
        "leverage",
        "mission",
        "policies",
        "policy",
        "prioritize",
        "reporting",
        "responsible",
        "security",
        "spending",
        "team",
        "technical",
        "this",
        "tooling",
        "transparency"
      ],
      "extracted_at": "2025-07-21 13:47:23",
      "content_length": 18689
    }
  ],
  "metadata": {
    "extracted_at": "2025-07-21 13:47:25",
    "total_documents": 5,
    "source": "GitLab Handbook Specific Pages",
    "extractor_version": "1.0",
    "pages_extracted": [
      "https://handbook.gitlab.com/handbook/people-group/anti-harassment/",
      "https://handbook.gitlab.com/handbook/values/",
      "https://handbook.gitlab.com/handbook/communication/",
      "https://handbook.gitlab.com/handbook/engineering/",
      "https://handbook.gitlab.com/handbook/security/"
    ],
    "note": "Includes anti-harassment policy and key GitLab policies"
  }
}
[
  {
    "document_id": "gitlab-handbook-377484",
    "url": "https://handbook.gitlab.com/handbook/company/",
    "title": "About GitLab",
    "category": "Company",
    "content": "About GitLab AMAs What you need to know about Ask Me Anything (AMA) Being a public company GitLab as a Public Company In 2017, GitLab established aspirational milestones for a public ‚Ä¶ Cadence Everything in a company happens in a certain cadence. The period of each cadence differs. Learn about the cadences we have at GitLab. E-Group offsite The E-Group offsite happens every quarter for four days after the Board of Directors meeting E-Group Weekly For executives to connect on a weekly basis in order to get timely input from E-Group, align on key initiatives, inform about key business happenings and celebrate company successes. Family and Friends Day At GitLab, Family & Friends days are shared days away from work to prioritize time with family and friends, volunteering, self-care, or anything else. General guidance to OKRs An overview of how OKRs may be done. GitLab All-Company Meetings An overview of GitLab Assembly and Quarterly Kickoff Meetings GitLab Culture Here's a look at what you can expect from our culture and all-remote environment. GitLab Environmental, Social, and Governance (ESG) An overview of corporate sustainability at GitLab. GitLab licensing technology to independent Chinese company FAQ On this page you can view frequently asked questions about GitLab licensing its technology to a new, independent Chinese company. GitLab Mission We at GitLab believe that all digital products should be open to contributions; from legal documents to movie scripts, and from websites to chip designs. GitLab Purpose GitLab empowers everyone through knowledge sharing, job access, and our software platform. GitLab Vision Behind the scenes of The DevSecOps Platform History of GitLab Review a summarised history of GitLab and the adventure so far from 2011 up until the present day. Learn more here! Infrastructure Standards This handbook section defines the latest iteration of infrastructure standards for AWS and GCP across all departments and groups at GitLab. Inspired by GitLab Which companies can be listed here? Any company that has been inspired by GitLab‚Äôs culture ‚Ä¶ KPIs What are KPIs Every part of GitLab has Key Performance Indicators (KPIs). Avoid the term metric ‚Ä¶ Meet Our Team More than 3,000 people have contributed to GitLab. The GitLab Inc. team consists of the following ‚Ä¶ Only Healthy Constraints Companies often slow down as they mature. GitLab strives for healthy constraints. Organizational Structure GitLab has at most eight layers in the company structure (Associate/Intermediate/Senior, Manager/Staff, Senior Manager/Principal, Director/Distinguished, Senior Director, VP/Fellow, Executives, Board). View more here! Our stewardship of GitLab GitLab has an open core business model and generate almost all our revenue with subscriptions to paid tiers. Learn more! Pricing model Most GitLab functionality is and will be available for free in our Free tier. Paid tiers include features targeted for managers, directors, and executives. Quote to Cash GitLab's Quote to Cash systems and processes Still a Startup GitLab elevates others through knowledge sharing, job access, and our software platform. Working Groups Like all groups at GitLab, a working group is an arrangement of people from different functions. Learn more! Last modified September 1, 2023: Add comment to vision doc to signpost to buyer exp. ( 25772a09 ) View page source -  - please contribute .",
    "headings": [
      "About GitLab"
    ],
    "word_count": 528,
    "extracted_at": "2025-07-21 20:12:25"
  },
  {
    "document_id": "gitlab-handbook-414026",
    "url": "https://handbook.gitlab.com/handbook/values/",
    "title": "GitLab Values",
    "category": "Company",
    "content": "GitLab Values Learn more about how we live our values at GitLab CREDIT GitLab‚Äôs six core values are ü§ù Collaboration , üìà Results for Customers , ‚è±Ô∏è Efficiency , üåê Diversity, Inclusion & Belonging , üë£ Iteration , and üëÅÔ∏è Transparency , and together they spell the CREDIT we give each other by assuming good intent. We react to them with values emoji and they are made actionable below. About our values We take inspiration from other companies, and we always go for the boring solutions . Our co-founder, Sid Sijbrandij, has shared the origin of each of the CREDIT values, but just like the rest of our work, we continually adjust our values and strive to make them better. GitLab values are a living document. In many instances, they have been documented, refined, and revised based on lessons learned (and scars earned) in the course of doing business. We used to have more values, but it was difficult to remember them all. In response, we condensed them, created an acronym (CREDIT), and listed operating principles to guide behavior. Everyone is welcome to suggest improvements. Please assign MRs to update these values to our Chief People Officer and if you work at GitLab, also @mention them in the #values Slack channel . Driving Results with CREDIT from GitLab on Vimeo . ü§ù Collaboration To achieve results, team members must work together effectively. At GitLab, helping others is a priority, even when it is not immediately related to the goals that you are trying to achieve. Similarly, you can rely on others for help and advice‚Äîin fact, you‚Äôre expected to do so. Anyone can chime in on any subject, including people who don‚Äôt work at GitLab. The person who‚Äôs responsible for the work decides how to do it, but they should always take each suggestion seriously and try to respond and explain why it may or may not have been implemented. Kindness We value caring for others. Demonstrating we care for people provides an effective framework for challenging directly and delivering feedback. Kindness doesn‚Äôt mean holding back on feedback or avoiding disagreements, these are crucial to professional growth and getting results for customers. Kindness means you make a separation between the work and the person, you can criticize someone‚Äôs work but still be respectful to the person. Give as much positive feedback as you can, and do it in a public way. Share There are aspects of GitLab culture, such as intentional transparency, that are unintuitive to outsiders and new team members. Be willing to invest in people and engage in open dialogue. For example, consider making private issues public wherever possible so that we can all learn from the experience. Don‚Äôt be afraid of judgement or scrutiny when sharing publicly, we all understand it‚Äôs impossible to know everything . Everyone can remind anyone in the company about our values. If there is a disagreement about the interpretations, the discussion can be escalated to more people within the company without repercussions. Share problems you run into, ask for help, be forthcoming with information and speak up . Negative feedback is 1-1 Give negative feedback in the smallest setting possible. One-on-one video calls are preferred. Negative feedback is distinct from negativity and disagreement. If there is no direct feedback involved, strive to discuss disagreement in a public channel , respectfully and transparently . In a GitLab Unfiltered interview on values , GitLab co-founder Sid Sijbrandij offers the following context. We deal with negative all the time at GitLab. If it‚Äôs not a problem, then why are we discussing it? We deal with negativity a lot, and that‚Äôs also part of our ambition. If you want to get better, you talk about what you can improve. We‚Äôre allowed to publicly discuss negative things; we‚Äôre not allowed to give negative feedback in a large setting if it could be feasibly administered in a smaller setting. Negative feedback can be given in a group setting if it‚Äôs to someone higher in the management chain. This shows that no one is above feedback. Provide feedback in a timely manner We want to solve problems while they are small . If you are unhappy with anything (your duties, your colleague, your boss, your salary, your location, your computer), please voice your concerns rather than keeping them to yourself. If you need to escalate beyond your manager, you could consider speaking to your skip-level , a more senior person, or a people business partner . Say thanks Recognize the people that helped you publicly, for example in our #thanks chat channel . When publicly thanking, it‚Äôs important to recognize the following: Showing thanks in as large a setting as possible (company-wide) at a company as large as ours is the exception instead of the norm, it takes some getting used to. Being thanked at the company level for what you view as a relatively small or minuscule contribution can feel awkward. Thanking a person in #thanks should be done sincerely and summarize why you are thankful so the person on the receiving end can easily understand why they are being thanked. Even while assuming positive intent , not all folks are comfortable with public praise. Help this person understand how they went above and beyond and why you felt it was important for the team member to be recognized. There are a number of good ways and places to say thanks. We shouldn‚Äôt limit saying thanks to just the #thanks channel . Give feedback effectively Giving feedback is challenging, but it‚Äôs important to deliver it effectively. When providing feedback, always make it about the work itself; focus on the business impact and not the person. Make sure to provide at least one clear and recent example. If a person is going through a hard time in their personal life, then take that into account. An example of giving positive feedback is our thanks chat channel . For managers, it‚Äôs important to realize that team members react to a negative incident with their managers six times more strongly than they do to a positive one. Keeping that in mind, if an error is so inconsequential that the value gained from providing criticism is low, it might make sense to keep that feedback to yourself. In the situations where negative feedback must be given, focus on the purpose for that feedback: to improve the team member‚Äôs performance going forward. Give recognition generously, in the open, and often to generate more engagement from your team. Get to know each other We use a lot of text-based communication , and if you know the person behind the text, it will be easier to prevent conflicts. So we encourage people to get to know each other on a personal level through informal communication , for example, virtual coffee chats , and during GitLab Summit . Reach across company departments While it‚Äôs wise to seek advice from experts within your function, we encourage GitLab team members to do the same across departments. This enables the company to iterate more quickly, embrace the understanding that everyone can contribute and include more diverse perspectives when possible. Don‚Äôt pull rank If you have to remind someone of the position you have in the company, you‚Äôre doing something wrong. People already know our decision-making process . Explain why you‚Äôre making the decision, and respect everyone irrespective of their function. This includes using the rank of another person - including the CEO - to sell an idea or decision. Assume positive intent We naturally have a double standard when it comes to the actions of others. We blame circumstances for our own mistakes, but individuals for theirs. This double standard is called the Fundamental Attribution Error . In order to mitigate this bias, you should always assume positive intent in your interactions with others, respecting their expertise and giving them grace in the face of what you might perceive as mistakes. When disagreeing , folks sometimes argue against the weakest points of an argument, or an imaginary argument (e.g. ‚Äústraw man‚Äù ). Assume the points are presented in good faith, and instead try to argue against the strongest version of your opponent‚Äôs position. We call this arguing against a ‚Äústeel‚Äù position, instead of a ‚Äústraw‚Äù one. This concept is borrowed from argue the ‚Äústeel man‚Äù technique. A ‚Äústeel‚Äù position should be against the absolute most effective version of your opponent‚Äôs position ‚Äî potentially even more compelling than the one they presented. A good ‚Äústeel‚Äù position is one where the other person feels you‚Äôve represented their position well, even if they still disagree with your assumptions or conclusion. Address behavior, but don‚Äôt label people There is a lot of good in this article about not wanting jerks on our team, but we believe that jerk is a label for behavior rather than an inherent classification of a person. We avoid classifications. Say sorry If you made a mistake, apologize as soon as possible. Saying sorry is not a sign of weakness but one of strength. The people that do the most work will likely make the most mistakes. Additionally, when we share our mistakes and bring attention to them, others can learn from us, and the same mistake is less likely to be repeated by someone else. Mistakes can include when you have not been kind to someone. In order to reinforce our values, it is important, and takes more courage, to apologize publicly when you have been unkind publicly (e.g., when you have said something unkind or unprofessional to an individual or group in a Slack channel). No ego Don‚Äôt defend a point to win an argument or double-down on a mistake. You are not your work; you don‚Äôt have to defend your point. You do have to search for the right answer with help from others. In a GitLab Unfiltered interview , GitLab Head of Remote Darren M. adds context on this operating principle. In many organizations, there‚Äôs a subtle, low-level, persistent pressure to continually prove your worth. And I believe that this fuels imposter syndrome and wreaks havoc on mental health . What‚Äôs so troubling to me is how often perception is reality. In other words, those who have mastered the art of being perceived as elite reap benefits, though this has nothing to do with actual results. At GitLab, ‚Äúno ego‚Äù means that we foster and support an environment where results matter, and you‚Äôre given agency to approach your work in the way that makes sense to you. Instead of judging people for not approaching work in an agreed-upon way, ‚Äúno ego‚Äù encourages people to glean inspiration from watching others approach work in new and different ways. See others succeed A candidate who has talked to a lot of people inside GitLab said that, compared to other companies, one thing stood out the most: everyone here mentioned wanting to see each other succeed. Don‚Äôt let each other fail Keep an eye out for others who may be struggling or stuck. If you see someone who needs help, reach out and assist. This might involve offering to pair program or setting up a sync brainstorming session. The goal is to connect them with someone else who can provide expertise or assistance. We are a team, so we succeed and shine together by supporting each other! People are not their work Always make suggestions about examples of work, not the person. Say ‚ÄúYou didn‚Äôt respond to my feedback about the design‚Äù instead of ‚ÄúYou never listen‚Äù. And, when receiving feedback, keep in mind that feedback is the best way to improve, and that others giving you feedback want to see you succeed. Do it yourself Our collaboration value is about helping each other when we have questions, need critique, or need help. No need to brainstorm, wait for consensus, or do with two what you can do yourself . The Bolt Handbook refers to this as the Founder Mentality , where all team members should approach the problem as if they own the company. Blameless problem solving Investigate mistakes in a way that focuses on the situational aspects of a failure‚Äôs mechanism and the decision-making process that led to the failure, rather than cast blame on a person or team. We hold blameless root cause analyses and retrospectives for stakeholders to speak up without fear of punishment or retribution. Short toes People joining the company frequently say, ‚ÄúI don‚Äôt want to step on anyone‚Äôs toes.‚Äù At GitLab, we should be more accepting of people taking initiative in trying to improve things. As companies grow, their speed of decision-making goes down since there are more people involved. We should counteract that by having short toes and feeling comfortable letting others contribute to our domain. For example, pointed, respectful feedback to a proposal by GitLab‚Äôs CEO led to his own merge request being closed. However, it is not required to respond to comments. It‚Äôs impossible to know everything We know we must rely on others for the expertise they have that we don‚Äôt. It‚Äôs OK to admit you don‚Äôt know something and to ask for help, even if doing so makes you feel vulnerable. It is never too late to ask a question, and by doing so, you can get the information you need to produce results and to strengthen your own skills as well as GitLab as a whole. After your question is answered, please document the answer so that it can be shared . Don‚Äôt display surprise when people say they don‚Äôt know something, as it is important that everyone feels comfortable saying ‚ÄúI don‚Äôt know‚Äù and ‚ÄúI don‚Äôt understand.‚Äù (As inspired by Recurse .) Collaboration is not consensus When collaborating, it is always important to stay above radar and work transparently , but collaboration is not consensus and disagreement is part of collaboration. You don‚Äôt need to ask people for their input, and they shouldn‚Äôt ask you ‚ÄúWhy didn‚Äôt you ask me?‚Äù. You don‚Äôt have to wait for people to provide input, if you did ask them. You don‚Äôt need to have everyone agreeing to the same thing - they can disagree, commit, and advocate . Two-way doors decisions can be reversed as part of disagree, commit, and advocate , while one-way door decisions benefit from more input. Recognize these reversible two-way door decisions for when less input is required to iterate faster. We believe in permissionless innovation ‚Äî you don‚Äôt need to involve people, but everyone can contribute. This is core to how we iterate , since we want smaller teams moving quickly rather than large teams achieving consensus slowly. Collaboration Competency Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate collaboration when we take action to help others and include other‚Äôs (both internal and external) input (both help and feedback) to achieve the best possible outcome. GitLab Job Grade Demonstrates Collaboration Competency by‚Ä¶ Knowledge Assessment 5 Develops collaboration skills by learning from other team members Knowledge Assessment for Individual Contributors 6 Grows collaboration skills by using different types of communication; files issues appropriately, asks in the right Slack channels and uses the right labels. 7 Models collaborative behavior for fellow team members and others within the group. 8 Coaches team members on how to collaborate more effectively and pointing team members to the right channels to collaborate. Knowledge Assessment for People Leaders 9 Fosters collaborative decision making and problem solving across the departments. 10 Drives team collaboration across divisions/departments, silos, and division boundaries. 11 Develops networks and builds partnerships, engages in cross-functional activities; collaborates across boundaries, and finds common ground with a widening range of stakeholders. Utilizes contacts to build and strengthen internal support base 12 Leads collaboration and teamwork in daily routines, prioritizing interactions, information sharing, and real time decision making across divisions/departments. Encourages greater cross-functional collaboration among e-team leaders. 14 Champions collaboration and teamwork into daily routines, prioritizing interactions, information sharing, and real time decision making across divisions/departments. Champions cross-functional collaboration among e-team leaders and GitLab. üìà Results for Customers We exist to help our customers achieve more. Everything we do should be in service of making our customers successful with GitLab. Results for Customers is at the top of our values hierarchy, as our customers achieving results drives overall business performance that enables everything else. The Results for Customers value is displayed through the following operating principles: Set Ambitious & Measurable goals While we iterate with small changes, we strive for large, ambitious results. We have an ambitious mission and vision , and we aim to be the best in the world across all our functions. Setting ambitious, measurable goals enables us to best deliver customer results. We agree in writing on measurable goals. We have and report against KPIs with guiding targets. Understand our customers All GitLab team members should understand our customers‚Äô needs, issues, and value propositions. We understand how they use GitLab and what they need from a platform in order to meet their goals. Internally facing teams consider the impact of their work as it pertains indirectly to GitLab‚Äôs customers. We better understand customers and their needs through: Reviewing public facing GitLab issues from our customers and users Dogfooding our product to understand the user experience Reading customer stories from Marketing and Sales Attending Customer fireside chats Learning feedback from our customers and users on product features and roadmap Co-create We create together with our customers. There is an open dialogue between GitLab and our customers so that we can better identify what they need. As a result of building a solution for them, we can also bring that solution to the world. Keep end users in sight Our focus is to increase customer results. At GitLab, one way to drive customer results is through platform enhancements that drive the most value for direct users. This requires being aware of the Concur effect . Arvind Narayanan , a Princeton Professor, described his frustration with Blackboard in a viral Tweet: It has every feature ever dreamed up. But like anything designed by a committee, the interface is incoherent and any task requires at least fifteen clicks (and that‚Äôs if you even remember the correct sequence the first time). Software companies can be breathtakingly clueless when there‚Äôs a layer of indirection between them and their users. Everyone who‚Äôs suffered through Blackboard will have the same reaction to this: try having less functionality! Ryan Falor followed up on Narayanan‚Äôs tweet with his definition of the Concur Effect: decision makers are not direct users features are overwhelming and disjointed user experience gets worse over time See the Hacker News discussion for a specific UX example. At GitLab, we want to drive customer results through focusing on platform enhancements that drive the most value for direct users. Customer results are more important than: What we plan to make . If we focus only on our own plans, we would have only GitLab.com and no self-managed delivery of GitLab. This does not mean that we will agree to every feature request, but we won‚Äôt let existing plans be an obstacle to working on what will drive the most customer value. Large customer requests . Catering to requests from large customers leads to the innovator‚Äôs dilemma , we need to also focus on results for small and future customers. Our existing scope . For example, when customers asked for better integrations and complained about integration costs and effort, we responded by expanding our scope to create a single application for the DevOps lifecycle. Our assumptions . Every company works differently, so we can‚Äôt assume that what works well for us will support our customers‚Äô needs. When we have an idea, we must directly validate our assumptions with multiple customers to ensure we create scalable, highly relevant solutions. What we control . We strive to provide the best possible experience for each of our customers, and take responsibility for all of the aspects that we can reasonably control. Measure impact, not activity We care about what you achieve: the code you shipped, the needle you moved, the user you made happy, and the team member you helped. Someone who took the afternoon off shouldn‚Äôt feel like they did something wrong, unless it negatively impacted a goal or result they were responsible for. You don‚Äôt have to defend how you spend your day if you are performing and delivering against expectations. We trust team members to do the right thing instead of having rigid rules. We trust team members to show up and do their best work. Do not incite competition by proclaiming how many hours you worked yesterday. If you are working too many hours, talk to your manager to discuss solutions. Dogfooding We use our own product in the way our users do to surface improvements that will lead to better customer results . GitLab is a DevSecOps Platform that can be used by people throughout the business. This is how we use it within GitLab. For example, we use our OKR functionality company-wide to inform product enhancements and for team members to have a great understanding of the customer experience. We also dogfood in the following ways: Our development organization uses GitLab.com to manage the DevOps lifecycle of GitLab itself. All team members use GitLab to collaborate on this handbook. We capture content and processes in Git repos and manage them with GitLab. When something breaks, doesn‚Äôt work well, or needs improvement, we are more likely to notice it internally and address it before it impacts our larger community. Give agency We give people agency to focus on what they think is most beneficial. If a meeting doesn‚Äôt seem interesting and someone‚Äôs active participation is not critical to the outcome of the meeting, they can always opt to not attend, or during a video call they can work on other things if they want. Staying in the call may still make sense even if you are working on other tasks, so other peers can ping you and get fast answers when needed. This is particularly useful in multi-purpose meetings where you may be involved for just a few minutes. Challenger mindset Challenging the status quo can lead to remarkable results - we must never stop. A challenger mindset requires that we continually ask ourselves bold, difficult questions about our business and the problems we solve, while resisting complacency. To succeed we must innovate and delight our customers with the value of the products we build. A challenger mindset requires a relentless pursuit of excellence - we must be tenacious . Each win for our customers builds reputational capital we can use to earn the trust of prospects in a competitive market. While competition is a feature of capitalism, internally as GitLab team members, we must focus our efforts inwardly on achieving our very best results for customers to win market share. Growth mindset You don‚Äôt always get results and this will lead to criticism from yourself and/or others. We believe our talents can be developed through hard work, targeted training, learning from others, on-the-job experience, and receiving input from others. It is in our DNA as a company and individuals to look for opportunity, stay humble, and never settle. We try to hire people based on their trajectory, not their pedigree . We also strive to foster a culture of curiosity and continuous learning where team members are provided and proactively seek out opportunities to grow themselves and their careers. We believe that with the right expectations and direction, people can grow to take on new challenges and surpass expectations. Cross-functional optimization Our definition of cross-functional optimization is that you do what is best for the organization as a whole. Don‚Äôt optimize for the goals of your team when it negatively impacts the goals of other teams, our users, and/or the company. Those goals are also your problem and your job. For example, you may have set a non-urgent functional milestone that is supposed to land at the end of the quarter. If delivering within the last week requires engagement from the GTM teams , the right decision may be to push your own team‚Äôs target by a week to reduce the ask for the GTM team as the GTM focuses on meeting its revenue objectives. In the context of collaboration , if anyone is blocked by you on a question, your approval, or a merge request review, you should prioritize unblocking them, either directly or through helping them find someone else who can. Embrace Tenacity We refer to this as ‚Äúpersistence of purpose‚Äù. As talked about in The Influence Blog , tenacity is the ability to display commitment to what you believe in. You keep picking yourself up, dusting yourself off, and quickly get going again having learned a little more. We value the ability to maintain focus and motivation when work is tough and asking for help when needed. Have Ownership & Accountability We expect team members to complete tasks that they are assigned. You are responsible for executing with attention to detail, connecting the dots across the organization and anticipating and solving problems. As an owner, you are responsible for overcoming challenges, not suppliers or other team members. Take initiative and proactively inform stakeholders when there is something you might not be able to solve. Sense of urgency Time gained or lost has compounding effects. Try to get the results as fast as possible, but without compromising our other values and ways we communicate , so the compounding of results can begin and we can focus on the next improvement. Operate with a bias for action It‚Äôs important that we keep our focus on action, and don‚Äôt fall into the trap of analysis paralysis or sticking to a slow, quiet path without risk. Decisions should be thoughtful, but delivering fast results requires the fearless acceptance of occasionally making mistakes; our bias for action also allows us to course correct quickly. Try to get results as fast as possible, but without compromising our other values and ways of working Disagree, commit, and advocate When a decision is in place, we expect people to commit to executing it. Any past decisions and guidelines are open to questioning as long as you act in accordance with them until they are changed. This is a common principle . Every decision can be changed; our best decision was one that changed an earlier one . In a manager-report relationship, usually the report is the Directly Responsible Individual (DRI). The manager may disagree with the final decision, but they still commit to the decision of the DRI. In a group setting, participants may disagree with a proposal but not articulate their views for one reason or another. Sometimes, many or all individuals may disagree yet choose not to speak up , because no one believes they would get agreement from the group. As a result, everyone loses out on their feedback. Dissent is expression of that disagreement. However, it can be difficult and even socially expensive. Expression of feedback is a way for everyone to grow and learn, and is based on facts rather than opinions . Share your perspective, rather than agreeing simply to avoid conflict or to go along with everyone else. When you want to reopen the conversation on something, show that your argument is informed by previous conversations and assume the decision was made with the best intent . You have to achieve results on every decision while it stands, even when you are trying to have it changed. You should communicate with the DRI who can change the decision instead of someone who can‚Äôt. Escalate to unblock If there is a disagreement and you can‚Äôt move forward because of it, agree to escalate and escalate to one or both of your managers. Early escalation, delivered with context of the challenge, enables managers to function as an unblocker. Results Competency Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate results when we do what we promised to each other, customers, users, and investors. GitLab Job Grade Demonstrates Results Competency by‚Ä¶ Knowledge Assessment 5 Develops the skills needed to commit and execute on agreed actions. Knowledge Assessment for Individual Contributors 6 Applies commitment to results and demonstrates ability to execute on agreed actions. 7 Models a sense of urgency and commitment to deliver results. 8 Coaches team members to collaborate and work iteratively towards impact with the focus on the outcome and not activity worked. Knowledge Assessment for People Leaders 9 Fosters a culture of ownership of personal performance. 10 Drives efficient execution of results ensuring collaboration between team members. 11 Develops quarterly OKR's ensuring the performance and results of one or more teams. 12 Leads the achievement of results while driving the continued alignment to our values of collaboration, efficiency, diversity, iteration and transparency. EVP/CXO Leads the achievement of results while driving the continued alignment to our values of collaboration, efficiency, diversity, iteration and transparency. ‚è±Ô∏è Efficiency At GitLab, efficiency means producing results without wasting materials, time, or energy. We optimize solutions globally for the broader GitLab community over one person or a small group. Focus on efficiency should be global in nature, not just local to a given function. Global efficiency could include efficiency with customers, candidates, and contributors as well. It is easy to prioritize consistency over efficiency because consistency is often more efficient initially and makes managing processes more efficient. We should slow down when optimizing for consistency. Taking a company-wide lens when evaluating changes will help ensure that new processes will improve efficiency for GitLab as a whole and be the best decision for the company as a whole. When we work internally with other team members, we leverage GitLab‚Äôs unique working practices and operating principles to achieve top efficiency. We do not expect people outside of GitLab to conform to GitLab‚Äôs ways of working, and we will make accommodations to work effectively with them. For example, we may collaborate heavily in-person and not default to async communications. Only Healthy Constraints Most companies regress to the mean and slow down over time. While some changes are required as a company grows and matures, not all change is inevitable or should be allowed to passively happen. As GitLab grows, we are conscious of how we operate and how it enables our ability to continue to operate with the agility of a startup . We try to limit ourselves to healthy constraints . Write things down We document everything: in the handbook, in meeting notes, in issues. We do that because ‚Äú the faintest pencil is better than the sharpest memory .‚Äù It is far more efficient to read a document at your convenience than to have to ask and explain. Having something in version control also lets everyone contribute suggestions to improve it. Boring solutions Use the simplest and most boring solution for a problem, and remember that ‚Äúboring‚Äù should not be conflated with ‚Äúbad‚Äù or ‚Äútechnical debt.‚Äù The speed of innovation for our organization and product is constrained by the total complexity we have added so far, so every little reduction in complexity helps. Don‚Äôt pick an interesting technology just to make your work more fun; using established, popular tech will ensure a more stable and more familiar experience for you and other contributors. Make a conscious effort to recognize the constraints of others within the team. For example, sales is hard because you are dependent on another organization, and development is hard because you have to preserve the ability to quickly improve the product in the future. Self-service and self-learning Team members should first search for their own answers and, if an answer is not readily found or the answer is not clear, ask in public as we all should have a low level of shame . Write down any new information discovered and pay it forward so that those coming after will have better efficiency built on top of practicing collaboration, inclusion, and documenting the results. Team members have more room to grow themselves when they are able to self-service and self-learn. Efficiency for the right group Optimize solutions globally for the broader GitLab community. As an example, it may be best to discard a renewal process that requires thousands of customers to each spend two hours in favor of one that only takes sixty seconds, even when it may make a monthly report less efficient internally! In a decision, ask yourself ‚ÄúFor whom does this need to be most efficient?‚Äù Quite often, the answer may be your users, contributors, customers, or team members that are dependent upon your decision. Be respectful of others‚Äô time Consider the time investment you are asking others to make with meetings and a permission process. Try to avoid meetings, and if one is necessary, try to make attendance optional for as many people as possible. Any meeting should have an agenda linked from the invite, and you should document the outcome. Instead of having people ask permission, trust their judgment and offer a consultation process if they have questions. Spend company money like it‚Äôs your own Every dollar we spend will have to be earned back. Be as frugal with company money as you are with your own. In saying this, we ask team members to weigh the cost of purchases against the value that they will bring to the company. Consider the degree to which a purchase increases your ability to better accomplish your work and achieve business results relative to cost. Lowering overhead reduces the cost to operate the business and lets us shift spend toward other priority areas. We have guidelines around this operating principle to help team members better understand our expensing process and expectations. Frugality Amazon states it best with: ‚ÄúAccomplish more with less. Constraints breed resourcefulness, self-sufficiency, and invention. There are no extra points for growing headcount, budget size, or fixed expense.‚Äù Short verbal answers Give short answers to verbal questions so the other party has the opportunity to ask more or move on. Keep broadcasts short Keep one-to-many written communication short, as mentioned in this HBR study : ‚ÄúA majority say that what they read is frequently ineffective because it‚Äôs too long, poorly organized, unclear, filled with jargon, and imprecise.‚Äù Managers of one We want each team member to be a manager of one who doesn‚Äôt need daily check-ins to achieve their goals. Team members are given the freedom to own projects and initiatives and are trusted to see them through to a successful end. When team members are managers of one they can have an increased work/life balance, because they are more empowered to make decisions around how they allocate their time throughout each day. Freedom and responsibility over rigidity When possible, we give people the responsibility to make a decision and hold them accountable for that, instead of imposing rules and approval processes. You should have clear objectives and the freedom to work on them as you see fit. Freedom and responsibility are more efficient than rigidly following a process, or creating interdependencies , because they enable faster decision velocity and higher rates of iteration . When team members have freedom and responsibility over rigidity, they have more room to help others. Accept mistakes Not every problem should lead to a new process to prevent them. Additional processes make all actions more inefficient; a mistake only affects one. Once you have accepted the mistake, learn from it. When team members are free to accept mistakes, they can take more calculated risks. Move fast by shipping the minimal valuable change We value constant improvement by iterating quickly, month after month. If a task is not the smallest viable and valuable thing , cut the scope. Embrace change Adoption of features, user requirements, and the competitive landscape change frequently and rapidly. The most successful companies adapt their roadmap and their organization quickly to keep pace. One of the things that makes this challenging is the impact on our team. People may need to change teams, subject matter, or even who manages them. This can rightly feel disruptive. If we coach ourselves to embrace the positive aspects of change, such as increased opportunity and new things to learn, we can move faster as a company and increase our odds of success. It is important to hold management accountable for being deliberate . Efficiency Competency Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate efficiency when we work on the right things, not doing more than needed, and not duplicating work. GitLab Job Grade Demonstrates Efficiency Competency by‚Ä¶ Knowledge Assessment 5 Develops an understanding of being a manager of 1 by taking responsibility for your own tasks and delivering on commitments. Brings up ideas for process improvements to 1:1s. Learns to write everything down as it is far more efficient to read a document at your convenience than to have to ask and explain. Knowledge Assessment for Individual Contributors 6 Develops a deeper understanding of efficiency and actively identifies process inefficiencies within the team. Seeks out ways to be more effective in their role, while also starting to mentor others in ways to work efficiently. 7 Models a culture of efficiency within the team where people make good, timely decisions using available data and assessing multiple alternatives. Models using boring solutions for increasing the speed of innovation for our organization and product. 8 Takes ownership of own team process inefficiencies, implements cross team efforts in ensuring things are running smoothly. Implements a way of working in the team where team members first search for their own answers and, if an answer is not readily found or the answer is not clear, ask in public as we all should have a low level of shame. Knowledge Assessment for People Leaders 9 Takes ownership of group level process inefficiencies and guides cross sub-departments in ensuring things are running smoothly. Fosters a culture in the sub-departments where you respect others' time and promote self-service and self-learning. 10 Drives the framework of frugality on a department level and owns departments efforts in ensuring things are running smoothly. Drives efficient resolution of highly complex or unusual business problems that impact the department / team. Holds their managers and peers accountable for upholding this value. 11 Develops the framework and strategy of frugality cross division resulting in efforts ensuring things are running smoothly. Develops leaders to action on division/department/team inefficiencies. Hold their management teams accountable for upholding this value. 12 Leads with efficiency across the company. Ensures efficient resource allocation decisions across the company. Leads across company strategy and policy improvements that move the business towards more efficiency. They hold their senior management and the e-group accountable for upholding this value. EVP/CXO Champions GitLab's strategy for efficiency internally and externally. Constantly looking for efficiency improvements cross company and holding other e-group members accountable for upholding efficiency too. They are comfortable leading through frugality and accepting of mistakes. üåê Diversity, Inclusion & Belonging Diversity, inclusion and belonging are fundamental to the success of GitLab. We aim to make a significant impact in our efforts to foster an environment where everyone can thrive. We are designing a multidimensional approach to ensure that GitLab is a place where people from every background and circumstance feel like they belong and can contribute. We actively chose to build a culture that is inclusive and supports all team members equally in the process of achieving their professional goals. We work to make everyone feel welcome and to increase the participation of underrepresented groups in our community and company. Bias towards asynchronous communication Take initiative to operate asynchronously whenever possible. This shows care and consideration for those who may not be in the same time zone, are traveling outside of their usual time zone, or are structuring their day around pressing commitments at home or in their community. This is demonstrated by communicating recordings of meetings , using GitLab Issues and Merge Requests rather than texts, calls, or Slack messages, and being sensitive to local holidays and vacation statuses. Encourage others to default to documentation rather than pressuring others to be online outside of their working hours. Embracing uncomfortable ideas and conversations Part of embracing diversity is a willingness to embrace often uncomfortable conversations and situations. This concept is also at the core of inclusion and helping to eliminate the problems that are faced by certain GitLab team members who may not be in the majority. We believe that being willing to embrace discomfort is the path forward to a safe, balanced and inclusive work place for all. Challenge yourself, challenge your own pre-set notions and ideas about different cultures or things you don‚Äôt understand. When we are willing to embrace being uncomfortable, we can focus on actually fixing the issues at hand rather than simply ‚Äúappearing to care‚Äù. Understanding the impact of microaggressions Microaggressions are much more than merely rude or insensitive comments. They can wear people down by slowly chipping away their sense of belonging/safety/inclusion over time. What is a microaggression? ‚ÄúThe everyday slights, indignities, put downs and insults that people of color, women, LGBT populations or those who are marginalized experiences in their day-to-day interactions with people.‚Äù - Derald W. Sue At GitLab we believe that everyone is entitled to a safe working space where they can express who they are and participate in conversations without worry of being spoken to in a harmful way, given that we want to encourage everyone to be mindful of what is a microaggression and be mindful of their potential impact. Seek diverse perspectives We believe that team members seeking feedback from a diverse group of team members, inside and outside of their group or function, leads to better decisions and a greater sense of team member belonging. For more guidance on how we define Diversity, please refer to GitLab‚Äôs definition of Diversity, Inclusion & Belonging . Feedback from a more heterogenous group often leads to better business outcomes as we incorporate diverse perspectives and uncover unconscious bias. An example of this operating principle in action showcases the value of actively seeking diverse perspectives. The term ‚ÄúBrag Document‚Äù was used to describe when individuals documented their accomplishments. Documenting accomplishments is critical to team member development. However, team members had the psychological safety to raise the question of whether or not the title of the document made some feel uncomfortable. In an effort to seek a diverse perspective , a survey was conducted in one of the Team Member and Advocacy Resource Group (TMRG) channels. The poll results showed that 100% of those polled preferred a different title and the title was changed. Make family feel welcome One of the unique elements to an all-remote culture is the ability to visit a person‚Äôs home while collaborating. If the tenor of the meeting allows, feel welcome to invite your family members or pets to drop by and greet your colleagues. Be mindful of language and use of profanity to encourage a family-friendly environment. Shift working hours for a cause Caregiving, outreach programs, and community service do not conveniently wait for regular business hours to conclude. If there‚Äôs a cause or community effort taking place, feel welcome to work with your manager and shift your working hours to be available during a period where you‚Äôll have the greatest impact for good. For colleagues supporting others during these causes, document everything and strive to post recordings so it‚Äôs easy for them to catch up. Be a mentor People feel more included when they‚Äôre supported. To encourage this, and to support diversified learning across departments, consider GitLab‚Äôs Internship for Learning program. Culture fit is a bad excuse We don‚Äôt hire based on culture or select candidates because we‚Äôd like to have a drink with them. We hire and reward team members based on our shared values as detailed on this page. We want a values fit , not a culture fit. We want cultural diversity instead of cultural conformity. Said differently: ‚Äúculture add‚Äù > ‚Äúculture fit‚Äù or ‚Äúhire for culture contribution‚Äù since our mission is that everyone can contribute . Religion and politics at work We generally avoid discussing politics or religion in public forums because it is easy to alienate people that have a minority opinion. This doesn‚Äôt mean we never discuss these topics. Because we value diversity, inclusion and belonging, and want all team members to feel welcome and contribute equally, we encourage free discussion of operational decisions that can move us toward being a more inclusive company. There is sometimes a grey area where advocating for diversity and political activities may intersect. Team members should use discretion in grey area communications, because a culture of belonging requires us to be respectful of the broad spectrum of views within our work environment. What does this mean in practice? Please feel empowered to share information that highlights diversity, inclusion and belonging issues and how GitLab and GitLab team members can get involved. In line with our Code of Business Conduct and Ethics , avoid posting articles that reference specific political figures or parties. While it is acceptable for individuals to bring up politics and religion in social contexts such as coffee chats and real-life meetups with other coworkers (with the goal to understand and not judge), always be aware of potential sensitivities, exercise your best judgment, and make sure you stay within the boundaries of our Code of Business Conduct and Ethics . We‚Äôre a global company where perspectives and local norms may differ from culture to culture. Diversity, inclusion and belonging is about broad inclusion at a worldwide level. If there is a question or concern, please reach out to diversityinclusion@gitlab.com or #diversity_inclusion_and_belonging . Quirkiness Unexpected and unconventional things make life more interesting. Celebrate and encourage quirky gifts, habits, behavior, and points of view. Open source is a great way to interact with interesting people. We try to hire people who think work is a great way to express themselves. Building a safe community Do not make jokes or unfriendly remarks about characteristics of the people who make up GitLab and how they identify . Everyone has the right to feel safe when working for GitLab and/or as a part of the GitLab community. We do not tolerate abuse, harassment , exclusion, discrimination, or retaliation by/of any community members, including our team members. You can always refuse to deal with people who treat you badly and get out of situations that make you feel uncomfortable. Unconscious bias We recognize that unconscious bias is something that affects everyone and that the effect it has on us as humans and our company is large. We are responsible for understanding our own implicit biases and helping others understand theirs. We are continuously working on getting better at this topic . Inclusive benefits We list our Parental Leave publicly so people don‚Äôt have to ask during interviews. Inclusive language & pronouns Use inclusive language. For example, prefer ‚ÄúHi everybody‚Äù or ‚ÄúHi people‚Äù to ‚ÄúHi guys‚Äù, and ‚Äúthey‚Äù instead of ‚Äúhe/she‚Äù. While there are several good guides from folks like 18f , University of Calgary , and Buffer on using inclusive language, we don‚Äôt keep an exhaustive list. When new possibly non-inclusive words arise, we prefer to be proactive and look for an alternative. If your goal is to be inclusive, it is more effective to make a small adjustment in the vocabulary when some people have a problem with it, rather than making a decision to not change it because some people don‚Äôt think it is a problem. And if you make a mistake (e.g. accidentally using the wrong pronoun or an outdated phrase), acknowledge it, apologize gracefully and move on ; there is no need to dwell on it, and you can work to avoid making that mistake in the future. Please also visit our Gender and Sexual-orientation Identity Definitions and FAQ page if you have questions around pronouns and other topics related to gender / sexual orientation. Learn how to pronounce other people‚Äôs names We attach part of our identity to our names, and if it is mispronounced it can feel less inclusive. If it happens repeatedly, you may be unintentionally sending a message to that person that you are not interested in learning how to pronounce their name correctly. This applies to everyone you are in contact with: team members, customers, candidates for jobs, and anyone else. People whose name is repeatedly mispronounced might feel unimportant or self-conscious, and might not speak up about it. Other negative behaviors include giving a person a nickname without their permission, or actively avoiding using their name in sync calls. It might be challenging to pronounce names from a different language or culture than your own, but with some effort, name pronunciation can be learned by anyone. Some ways to achieve this are: Ask the person for help in a private space: ‚ÄúI‚Äôm sorry, I don‚Äôt think I am pronouncing your name correctly. Can you help me with the correct pronunciation?‚Äù Use the written and recorded pronunciation tools in Slack. Use online tools such as videos recorded on YouTube or NameShouts . Practice the pronunciation with a friend or team member who knows the correct pronunciation. Always avoid making jokes or comments about how it is difficult to pronounce their name. Use of nicknames Some people might choose to use a nickname, for example: ‚ÄúBob‚Äù instead of ‚ÄúRobert‚Äù. As long as this is their choice this is perfectly acceptable. We should avoid assigning a nickname to a person without their permission. Slack pronunciation features Slack has two features to help with this issue: the phonetic name pronunciation field and the ability to record your own name pronunciation audio clip. We encourage all team members to complete both of these. Update them by editing your profile . Inclusive interviewing This is documented on our page about interviewing . Inclusive meetings Be consciously inclusive in meetings by giving everyone present an opportunity to talk and present their points of view. This can be especially important in a remote setting. With internal meetings, consider using an agenda document for questions. For example, with GitLab AMAs , every meeting has a numbered list that GitLab team members can add questions to. During the meeting, questions are answered in turn and discussions noted in the same document. Sometimes, these documents can have so much traffic (during the meeting) such that only a limited number of people can edit the document. In these situations, those who have questions should post on zoom chat and those who can edit the document should help copy the question over to the document. In addition, those who can edit the document should also post in zoom chat to see if anyone has any questions that they could help add to the document so that meeting attendees are more empowered to contribute to the conversation. Customers are not used to working in this way. To promote inclusion with customers: ask participants for their goals; make sure during demos that you pause for question; leave time for discussion. Inclusive and fair policy to regions with fewer employees Being globally distributed has the benefit that someone can cover for you when you are off work. However, population density is not balanced across timezones. Policies should remain fair to those in less dense regions. For example, the Asia Pacific region covers more timezones but has fewer team members. If we use an algorithm to assign tasks to those in later timezones, all American tasks would fall on the fewer Asia Pacific employees. This can damage belonging and inclusivity and should be avoided. When planning an event, the organizer should cater for location density differences to maximize participation in all regions. See Something, Say Something As a globally-dispersed company, we have team members from many different backgrounds and cultures. That means it is important for each of us to use great judgment in being respectful and inclusive of our teammates. At the same time, we may sometimes not fully realize we have said or done something to offend someone. It is important that our teammates hold each other accountable and let them know if they have unintentionally or intentionally done something so they can learn and gain additional understanding of perspectives different from our own. It is also important that our teammates don‚Äôt feel excluded or minimized by the words we use or the things we do. Thus, we all need to speak up when we see something that isn‚Äôt respectful or inclusive. Embracing Neurodiversity Neurodiversity refers to variations in the human brain regarding learning, attention, sociability, mood, and other mental functions. There are various neurodevelopmental conditions, like autism, ADHD, dyslexia, dyscalculia, dyspraxia, cognitive impairment, schizophrenia, bipolarity, and other styles of neurodivergent functioning. While neurodivergent individuals often bring unique skills and abilities which can be harnessed for a competitive advantage in many fields (for example, cybersecurity ), neurodivergent individuals are often discriminated against. Due to non-inclusive hiring practices, they sometimes have trouble making it through traditional hiring processes. Neurodiversity inclusion best practices benefit everyone, and at GitLab, everyone can contribute. The handbook, values, strategy, and interviewing processes must support the ability for everyone to thrive. At GitLab we embrace Neurodiversity through adopting a variety of different work styles and communication styles, and we lean into transparency , asynchronous as a default working style, and pre-filled meeting agendas. These best practices become even more important when embracing neurodiversity. Providing multiple ways to consume information (written / video / audio) allows everyone to contribute independent of their preferred comprehension style. It is important to ask team members specifically what their preferred communication method is in order to provide them information in a format that is easily consumable for them. Remember, brains work differently and always assume positive intent , even if someone behaves in an unexpected way. While it may be an unexpected behavior to you, it may not be unexpected to the individual exhibiting the behavior. That is the beauty and value of diversity, embracing differences and becoming stronger and better as a result. We also recommend that all team members review the Reasonable Accommodation process. A Reasonable Accommodation for a team member could include noise-cancelling headphones, scheduling smaller group session zoom calls, providing very explicit and precise instructions and due-dates when given tasks, or providing a variety of supportive software tools. The most important thing that managers can do is facilitate an environment in which all team members feel psychologically safe enough to make requests for what they need in order to do their job. Family and friends first, work second Long-lasting relationships are the rocks of life , and come before work. As someone said in our #thanks channel after helping a family member for five days after a hurricane: ‚ÄúTHANK YOU to GitLab for providing a culture where ‚Äúfamily first‚Äù is truly meant‚Äù. Use the hashtag: #FamilyAndFriends1st Equity not just equality Equity vs. Equality: What‚Äôs the Difference? While the terms equity and equality may sound similar, the implementation of one versus the other can lead to dramatically different outcomes for marginalized people. Equality means each individual or group of people is given the same resources or opportunities. Equity recognizes that each person has different circumstances and allocates the exact resources and opportunities needed to reach an equal outcome. Diversity, Inclusion & Belonging Competency Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate diversity, inclusion and belongings when we foster an environment where everyone can thrive and ensuring that GitLab is a place where people from every background and circumstance feel like they belong and can contribute. If you would like to improve your skills or expand your knowledge on topics relating to Diversity, Inclusion, & Belonging at GitLab, check out our resources: Being an Ally Being Inclusive Recognizing Bias GitLab Job Grade Demonstrates Diversity & Inclusion Competency by‚Ä¶ Demonstrates DIB Behaviors by‚Ä¶ (Should not be considered an exhaustive list) Knowledge Assessment 4 Learns to understand the impact of biases. Gathering more information about the skills needed to be accountable for their actions, apologizes and learn. 5 Develops an understanding of the impact of biases; seeks to learn more about their own biases. Is accountable for their actions, apologizes and learns from their mistakes. DIB training and/or other company wide training to further education on DIB Attend DIB Initiatives Calls to stay informed and connected with ongoing efforts and discussions Participate in a DIB Initiative: join TMRGs you identify with, support other groups as an Ally, attend events, \"like\" slack posts and spread the word Participate in a TMRG initiative Member of a working group related to a DIB initiative, e.g. participate in a Mentorship program Knowledge Assessment for Individual Contributors 6 Has a growing understanding of the impact of biases; fosters a sense of inclusion and belonging on their team. Holds themselves and peers accountable for upholding this value by kindly pointing out when mistakes might be made. Encourages an inclusive team environment where differences are encouraged and everyone can contribute. 7 Actively aware of how bias or exclusion might occur on a team and helps to facilitate a team environment where team members belong and feel safe. Models empathy with their interactions with customers and cross functional team members. 8 Implements best practices to limit bias on their team. They ensure blameless accountability is practiced throughout their team. Creates an environment where team members feel safe to share ideas and welcomes individual differences. DIB training and/or other company wide training to further education on DIB Attend DIB Initiatives Calls to stay informed and connected with ongoing efforts and discussions Participate in a DIB Initiative: join TMRGs you identify with, support other groups as an Ally, attend events, like posts and spread the word Participate in a TMRG initiative Member of a working group related to a DIB initiative, e.g. participate in a Mentorship program Hiring Manager ensure a diverse candidate slate and interview panel Active participant and advocate for department DIB goals Knowledge Assessment for People Leaders 9 Proactively finds ways of facilitating an inclusive team environment and assesses processes to protect against unconscious bias. They hold their team members accountable including cross functional stakeholders. Promotes individual differences across their team and other departments. 10 Drives diversity, inclusion and sense of belonging across their department. They hold their managers and peers accountable for upholding this value. They are actively involved in the execution of D&I strategies and encourage others to participate. Black is Tech , Grace Hopper 11 Embeds the value of Diversity & Inclusion across their division and finds opportunities to limit the impact of bias on decision making processes. Uses feedback and data to formulate a strategy on how to make improvements. They hold their management teams accountable for upholding the value. 12 Leads with the value of Diversity & Inclusion across the company and finds opportunities to limit the impact of bias on decision making processes. They sponsor internal initiatives to increase trust, psychological safety and inclusion. They hold their senior management and the e group accountable for upholding this value. DIB Team & Leadership DIB Council to establish an action plan for your departments & division Serve as an TMRG executive sponsor Embed DIB into All hands or in person events e.g.review organizations OKR as it relates to DIB progress, champion trainings related to further DIB knowledge, invite guest speakers to advocate EVP/CXO Champions the value of Diversity, Inclusion and Belonging into the company's strategy. They champion and sponsor internal and external D&I initiatives. They speak to the importance of this value in company-wide meetings. They hold their leaders and other e group members accountable for upholding this value. They continuously seek ways to increase trust, psychological safety and inclusion across the broader company. DIB Team & Leadership DIB Council to establish an action plan for your departments & division Serve as a TMRG executive sponsor Embed DIB into All hands or in person events e.g.review organizations OKR as it relates to DIB progress, champion trainings related to further DIB knowledge, invite guest speakers to advocate üë£ Iteration Merriam-Webster defines iteration as the ‚Äúthe action or a process of iterating or repeating: such as a procedure in which repetition of a sequence of operations yields results successively closer to a desired result.‚Äù At GitLab, we iterate to do the smallest valuable thing to get fast feedback and efficiently reach a desired end goal . Feedback can be from internal users (dogfooding), a limited number of external users (through our early access program ), or through feedback from our broader user community. We validate each iteration and adjust, but not at the expense of the user experience that we deliver to our customers. When we iterate at GitLab, we break up the work that we know we need to do into smaller chunks to iterate toward a targeted end state: Merge in codebase Dogfood Have some external users (early access program) Ensure global optimization (use standardized systems) Plan beyond the iteration Iteration does not require us to ship features that are open to all users from day one. Feedback can come from internal users or a limited number of external users (early access program). Moving through the release process is not iteration though. Iteration is also not a replacement for having a plan . We expect you to know where you are going, but you can iterate to get there. An iteration might be additive (adding something) or subtractive (removing something). If you make suggestions that can be excluded from the first iteration, turn them into a separate issue that you link. While you should have a clear vision of the desired outcome and how it addresses a customer pain point or improves the user experience, be efficient in your planning. Unless you identify important cross-functional interdependencies, focus detailed planning on the first step. It might feel you are moving too slowly; however, planning is critical in order to ensure you can move fast when implementing. You‚Äôre doing it right if you feel that you have shipped the minimal feature set in the first iteration. This value is the one people most underestimate when they join GitLab. The impact, both on your work process and on how much you achieve, is greater than anticipated. Frequently, the simplest version that provides value turns out to be the best one. Many people who join GitLab say they already practice iteration. But this is the value that is the hardest to understand and adopt. People are trained that if you don‚Äôt deliver a perfect or polished thing, there will be a problem. If you do just one piece of something, you have to come back to it. Doing the whole thing seems more efficient, even though it isn‚Äôt. If the complete picture is not clear, your work might not be perceived as you want it to be perceived. It seems better to make a comprehensive product. They see other GitLab team members being really effective with iteration but don‚Äôt know how to make the transition, and it‚Äôs hard to shake the fear that constant iteration can lead to shipping lower-quality work or a worse product. In reality, it is possible to ship a minimally valuable product while continuing to adhere to the documented quality standards. The way to resolve this is to write down only what value you can add with the time you have for this project right now. That might be 5 minutes or 2 hours. Think of what you can complete in that time that would improve the current situation. Iteration can be uncomfortable, even painful. If you‚Äôre doing iteration correctly, it should be. Reverting work back to a previous state is positive, not negative. We‚Äôre quickly getting feedback and learning from it. Making a small change prevented a bigger revert and made it easier to revert. However, if we take smaller steps and ship smaller, simpler features, we get feedback sooner. Instead of spending time working on the wrong feature or going in the wrong direction, we can ship the smallest product, receive fast feedback, and course correct. People might ask why something was not perfect. In that case, mention that it was an iteration, you spent only ‚Äúx‚Äù amount of time on it, and that the next iteration will contain ‚Äúy‚Äù and be ready on ‚Äúz‚Äù. Iteration enables results and efficiency . In the GitLab Unfiltered video embedded above, GitLab co-founder Sid Sijbrandij shares key operating principles to reinforce iteration in an organization. Start with a long-term vision Iteration involves driving results in pursuit of a long-term vision. While the intermediate goals may change as we iterate, we are unlikely to be successful if we don‚Äôt start with a vision of what we are working toward. Shipping that vision in iterations allows us to learn from customers using it and adjust the vision if needed. Iteration for the sake of iteration can lead to inefficiencies and not deliver desired results. Iteration is no substitute for planning Iteration without a plan can lead to inefficiencies and a subpar customer experience. Before iterating we need to plan. A plan should include: Time-bound objective: Where we want to be in a year UX: User experience we are working toward Quality: What quality is sufficient quality, inclusive of security Success metric: Usage we want at a specific time Data schema: The data schema we need to measure progress towards project goals GTM plan: How we want to go to market Enablement: When we‚Äôd plan to train and enable the support and field teams Marketing: When we‚Äôd launch marketing (doesn‚Äôt have to be at release) Secure by design: default to the most secure configuration The release process is not iteration Moving through the release process is not iteration. The release process can include: Dogfooding Early access Incremental release using a feature flag Development stage progression (such as experiment to beta) Release Announcement While development stages can be used to indicate release progress, is not itself iteration. Iterate toward global maximum If we are not aware of interdependencies beyond our team, and we are not collaborating with others across the organization, we risk deliverables that settle into a ‚Äúlocal maximum‚Äù of quality, richness, and efficiency. This localization is largely defined by team structure and organizational boundaries. While an iteration can take place within a single team, that team is responsible for identifying inter-dependencies and proactively communicating and aligning with other teams working on related projects. This helps ensure that iterations are not ‚Äúhalf-baked‚Äù and align with work being done across the entire organization. Don‚Äôt wait Don‚Äôt wait on the small things. When you have something of value like a potential blog post or a small fix, implement it straight away. Right now, everything is fresh in your head and you have the motivation. Inspiration is perishable. Don‚Äôt wait until you have a better version. Don‚Äôt wait until you record a better video. Don‚Äôt wait for an event (like GitLab Summit ). Inventory that isn‚Äôt released is a liability since it has to be managed, becomes outdated, and you miss out on the feedback you would have received had you implemented it straight away. When we don‚Äôt wait we signal intent to others that we have a purpose to resolve something. Note : ‚ÄúDon‚Äôt wait‚Äù should not be used as a justification for not iterating toward the global maximum or at expense of the plan. If there are interdependencies to be considered or the iteration is customer facing, slow down and ensure that we are considering what is best for GitLab and our customers. Set a due date We always try to set a due date. If needed, we cut scope. If we have something planned for a specific date, we make that date. For example we shipped over 133 monthly releases . But every one of them doesn‚Äôt contain all the features we planned. If we planned an announcement for a certain date, we might announce less or indicate what is still uncertain. But we set a due date because having something out there builds trust and gives us better feedback. Cleanup over sign-off As discussed in Sid‚Äôs interview on iteration , waiting for approval can slow things down. We can prevent this with automation (such as tests of database migration performance) or clean-up after the fact (refactor a Pajamas if something was added that isn‚Äôt coherent), but we try to ensure that people don‚Äôt need to wait for sign-off. As iteration does not require us to ship to all users on day one, we can clean up after an internal or beta release to mitigate the negative impact to all customers. Start off by impacting the fewest users possible Iteration does not mean being open to all users from day one. If you do a gradual rollout of your change, prefer: Few users over many users Internal users (dogfooding) over external users Environments with fast feedback (SaaS) over slow feedback (self-managed) Reduce cycle time Short iterations reduce our cycle time . Merging frequently also prevents merge conflicts. Work as part of the community Small iterations make it easier to work with the wider community. Their work looks more like our work, and our work is also quicker to receive feedback. Minimal Valuable Change (MVC) We encourage MVCs to be as small as possible. Always look to make the quickest change possible to improve the user‚Äôs outcome. If you validate that the change adds more value than what is there now, then do it. This may be additive (adding something) or subtractive (removing something). No need to wait for something more robust. More information is in the product handbook , but this applies to everything we do in all functions. Specifically for product MVCs, there is additional responsibility to validate with customers that we‚Äôre adding useful functionality without obvious bugs or usability issues. Make a proposal If you need to decide something as a team, make a concrete proposal instead of calling a meeting to get everyone‚Äôs input. Having a proposal will be a much more effective use of everyone‚Äôs time. Every meeting should be a review of a proposal. We should be brainwriting on our own instead of brainstorming out loud . State the underlying problem so that people have enough context to propose reasonable alternatives. The people that receive the proposal should not feel left out and the person making it should not feel bad if a completely different proposal is implemented. Don‚Äôt let your desire to be involved early or to see your solution implemented stand in the way of getting to the best outcome. If you don‚Äôt have a proposal, don‚Äôt let that stop you from highlighting a problem, but please state that you couldn‚Äôt think of a good solution and list any solutions you considered. By making a proposal you also provide better visibility into the work and the context surrounding it. In this GitLab Unfiltered video , GitLab co-founder Sid Sijbrandij converses about iteration in engineering, leveraging proposals to break work into smaller components. Everything is in draft At GitLab, we rarely mark any content or proposals as drafts. Everything is always in draft and subject to change. When everything is in draft, contributions from team members as well as the wider community are welcomed. By having everything in draft and assuming others have low context , confusion can be reduced as people have shared access to information. Under construction As we continue to expand the number of users we have, they will continue to expect stability and reliability. We must optimize for the long term without sacrificing stability along the way. This means that users may be inconvenienced in the short term, but current and future users will enjoy a better product in the end. Educating users on the longer-term plan helps create a shared understanding of how a small change will incrementally grow into something more. For example, we could share how a dropdown will evolve into a much more nuanced solution in the future. We can take the following steps to articulate our plan: Open a feedback issue that provides context about the initial MVC ( example ) Ensure the direction page articulates a long-term plan ( example ) Announce the MVC in a release post, link to the feedback issue, and link to the direction page ( example ) Low level of shame when dogfooding In many organizations, you take a risk when you put forth any work that‚Äôs not perfect, work where you haven‚Äôt spent endless cycles planning for contingencies or counterpoints. Because of this, you‚Äôre incentivized to invest a lot of time and effort into preparing for ‚ÄòWhat if?‚Äô scenarios before any work is presented, even if the release is not customer facing and there is a low level of risk in imperfection. The downside to that is clear when we are dogfooding: If you do eventually put forth the work, but it needed to be course-corrected a long time ago, you‚Äôve squandered time that you could have spent improving it through iteration. Having a low level of shame when dogfooding or working internally requires you to combat a natural inclination to conceal work until it‚Äôs perfect, and instead celebrate the small changes. Cultural lens Cultural differences can bring unique challenges and expectations to iteration. For some, expressions like ‚Äúit doesn‚Äôt have to be perfect‚Ä¶‚Äù can challenge cultural norms. We encourage you to bring your authentic self and seek shared understanding when iterating. Giving feedback and ensuring psychological safety are necessary for every iterative attempt. Focus on improvement We believe great companies sound negative because they focus on what they can improve, not only on what is working well. In every conversation, inside and outside the company, we should ask a question: What do you think we can improve? This doesn‚Äôt mean we don‚Äôt recognize our successes; for example, see our Say Thanks value. We are positive about the future of the company. We are S hort Te rm C ritical A nd L ong T erm O ptimistic ( STeCALTO , for short). Be deliberate about scale First, optimize for speed and results (and be deliberate about how your change affects other processes/functionality); when it is a success, figure out how to scale it. Great examples are in this article by Paul Graham . Resist bundling Resist the urge to bundle a series of smaller iterations so team members don‚Äôt see a project as their last (or best) opportunity to contribute. It‚Äôs tempting to create encompassing projects or initiatives that roll many smaller projects up. This incarnation of scope creep drives up cost, encourages fewer risks, and incentivizes perfection (via longer cycle times) over progress. When we resist bundling, we reduce the risk that work will be canceled due to scale or scope. By resisting bundling we also reduce the coordination needed because fewer people or teams may be involved. Make two-way door decisions Most decisions are easy to reverse. In these cases, the Directly Responsible Individual should go ahead and make them without approval. Only when you can‚Äôt reverse them should there be a more thorough discussion. By embracing iteration and making two-way door decisions, we are more efficient and achieve more results. Changing proposals isn‚Äôt iteration Changing something without shipping it is a revision, not iteration. Only when the change is rolled out to users, whether internal users or a limited customer group , can you learn from feedback. When you‚Äôre changing a proposal based on different opinions, you‚Äôre frequently wasting time; it would be better to roll out a small change quickly and get real world feedback. Never call a revision an iteration because it is almost the opposite. Embracing Iteration In order to embrace iteration, we should have the attitude that we are trying to achieve as much as possible in a small amount of time; it‚Äôs where we land at the end state of an iteration that counts. The benefit of iteration is to get fast feedback from users. Focus on sharing context at the end of the first iteration rather than a hypothetical future state that requires multiple iterations. By embracing iteration we can increase creativity in incremental components. Make small merge requests When you are submitting a merge request for a code change, or a process change in the handbook, keep it as small as possible. If you are adding a new page to the handbook, create the new page with a small amount of initial content, get it merged quickly via Handbook Usage guidelines , and then add additional sections iteratively with subsequent merge requests. Similarly, when adding features to GitLab, consider ways to reduce the scope of the feature before creating the merge request to ensure your merge request is as small as possible. Always iterate deliberately Rapid iteration can get in the way of results if it‚Äôs not thought out; for example, when adjusting our marketing messaging (where consistency is key), product categories (where we‚Äôve set development plans), organizational structure or product scope alignment (where real human stresses and team stability are involved), sales methodologies (where we‚Äôve trained our teams) and this values page (where we use the values to guide all GitLab team members). In those instances, we add additional review to the approval process; not to prohibit, but to be more deliberate in our iteration. The change process is documented in the GitLab Handbook Usage page and takes place via merge request approvals. 12 things that are not iteration Iteration is often counterintuitive and difficult to do. To clarify what an iteration is, it helps to see examples of what is not an iteration. Below are 12 examples of things we‚Äôve seen mistaken as iteration, but don‚Äôt meet our definition of iteration. Reducing quality, or lowering goal posts Avoiding or reducing documentation Compromising on security Delivering something that‚Äôs not the recommended path or on by default Shipping something of no value An excuse to focus on unimportant items Moving through the release process Revisions you don‚Äôt ship or publish An excuse to impose unrealistically tight timelines An excuse to avoid planning Imposing long hours Expecting others to fix your work In this GitLab Unfiltered video , GitLab co-founder Sid Sijbrandij elaborates on each of these 12 things that are not iteration. Iteration Competency Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate iteration when we do the smallest viable and valuable thing, get it out quickly for feedback, and make changes based that feedback. GitLab Job Grade Demonstrates Iteration Competency by‚Ä¶ Knowledge Assessment 5 Develops own knowledge by trying and failing. When asking questions isn't content with silence or unhelpful/incomplete responses, seeks out primary sources. Knowledge Assessment for Individual Contributors 6 Actively looks for opportunities to iterate and contribute to boring solutions. Balances short term gains and long term benefit with team's help. Ships things that aren't 100% knowing that you'll be able to improve them in the next revision. Asks questions with abandon. Publicly shares failures if you'll help colleagues learn. 7 Independently balances short term gains and long term benefit. Identifies opportunities to deliver projects in an iterative way. 8 Is able to take long term goals and turn them into small actionable steps that can be implemented in an iterative way. Identifies and prevents decisions that are not \"two-way door decisions\". Ships. All the time. Sounds like a broken record in discussions with more junior members of the team; always asking if we can make something smaller. Knowledge Assessment for People Leaders 9 In addition to upholding the requirements of a Staff/Manager level, a Principal/Sr. Manager practices and fosters the value of iteration to team members. They hold their team members accountable for iteration and boring solutions. 10 In addition to upholding the requirements of a Principal/Sr. Manager, a Distinguished/Director proactively finds ways to drive the value of iteration and boring solutions. 11 In addition to upholding the requirements of a Distinguished/Director , a Sr. Distinguished/Sr. Director embeds the value of Iteration across the department and division. They use their cognitive and analytical abilities to anticipate and adapt to unpredictabilities in regard to strategic risk in a way that benefits all involved. 12 In addition to upholding the requirements of a Sr. Distinguished/Sr. Director , a Fellow/VP leads the way for the value of Iteration across the division and cross functional teams. They confidently lead their teams through change and proactively take risks based on values and the strategic vision. EVP/CXO In addition to upholding the requirements of a Fellow/VP, the EVP champions the value of Iteration across GitLab. They are comfortable leading through discomfort and the unease associated with change and innovation. üëÅÔ∏è Transparency Be open about as many things as possible. By making information public, we can reduce the threshold to contribution and make collaboration easier. Use public issue trackers, projects, and repositories when possible. Transparency is not communication. Just because something exists in the handbook or elsewhere doesn‚Äôt mean it can‚Äôt be communicated again or in a more robust fashion to the people who need to understand or acknowledge it. On a personal level, be direct when sharing information, and admit when you‚Äôve made a mistake or were wrong. When something goes wrong, it is a great opportunity to say ‚ÄúWhat‚Äôs the kaizen moment here?‚Äù and find a better way without hurt feelings. Even as a public company , we know that our value of transparency will be key to our success. This value can be hard to follow at times. You might ask yourself: what should be shared, how much to share, whether or not to speak up but definitely take the time to always opt for maximum transparency by adhering to the operating principles below. Often, company values get diluted as they grow, most likely because they do not write anything down. But we will make sure our values scale with the company. As a public company , we declare everyone in the company as an insider, which allows us to remain transparent internally about our numbers, etc. Everything else that can be transparent will continue to be so. When there are exceptions, material that is not public by default is documented . Public by default Everything at GitLab is public by default. The public process does two things: allows others to benefit from the conversation and acts as a filter. Since there is only a limited amount of time, we prioritize conversations that a wider audience can benefit from. One example of transparency at GitLab is the public repository of this website that also contains this company handbook . Others include the GitLab CE and GitLab EE issue trackers, as well as marketing and infrastructure . Transparency creates awareness for GitLab, allows us to recruit people that care about our values, gets us more and faster feedback from people outside the company, and makes it easier to collaborate with them. It is also about sharing great software, documentation, examples, lessons, and processes with the whole community and the world in the spirit of open source, which we believe creates more value than it captures. In line with our value of transparency and being public by default, all GitLab team member profiles should be public. Public profiles also enable broader collaboration and efficiencies between teams. To do so, please make sure that the checkbox under the Private profile option is unchecked in your profile settings . If you do not feel comfortable with your full name or location on your profile, please change it to what feels appropriate to you as these are displayed even on private profiles. Because we are public by default and have the SAFE framework we don‚Äôt need to make cases for why things should be transparent. If something is unSAFE and needs to remain not public it can be. Not public We make information public by default because transparency is one of our values . However it is most important to focus on results . Therefore, a category of information is public unless there is a reason for it not to be. If something is not public, there should be a reference in the handbook that states a confidential decision was taken with a link to our Not Public guidelines, unless GitLab Legal and Corporate Affairs believes it carries undue risk. We document what is not public by default on our communication page. If you believe something shouldn‚Äôt be public that currently is (or vice versa), then make a merge request to the relevant page(s) suggesting the change so that you can collaborate with others and discuss with the DRI . When content contains information which is not public it is recommended to remove the specific sections which are not public, put them on their own page in the internal handbook, and then link out to that with a ‚Äúnot public/internal only‚Äù note. Always share publicly what we can. When information is not public, it may also be treated as limited access, only shared with certain GitLab roles, teams, or team members due to privacy considerations, contractual obligation, or other reasons that the author or DRI can specify. Certain kinds of information default to limited access, including details about team members or customers who did not give permission to share the information. Most companies become non-transparent over time because they don‚Äôt accept any mistakes. Instead, we should always err on the side of transparency when there is a choice to be made between caution or inaction, and transparency. If we make a mistake, we now know what the limits of transparency are for the company and we should document this . The only exception to this rule would be in the case when there are legal concerns. Because some information is not public the public information can be lacking some context. We should be cognizant of that. Directness Being direct is about being transparent with each other. We try to channel our inner Ben Horowitz by being both straightforward and kind . Feedback is always about your work and not your person. That doesn‚Äôt mean it will be easy to give or receive it. Articulate when you change your mind If you state one thing, and then change course and support a different direction, point, or outcome, articulate this. It is OK to have your position changed by new data. Articulating that an earlier stance is not your current stance provides clarity to others and encourages data-driven decision making. Surface issues constructively Be transparent to the right people (up) at the right time (when still actionable). If you make a mistake, don‚Äôt worry; correct it and proactively let the affected party, your team, and the CEO know what happened, how you corrected it, and how‚Äîif needed‚Äîyou changed the process to prevent future mistakes. Transparency is most valuable if you continue to do it when there are costs We practice transparency even when hiding the facts would be easier. For example, many companies do not give you the real reason why they declined your application because it increases the chance of legal action. We want to only reject people for the right reasons and we want to give them the opportunity to grow by getting this feedback. Therefore, we‚Äôll accept the increased risk of holding ourselves to a high standard of making decisions and do the right thing by telling them what we thought. Other examples are being transparent about security incidents and participating in and contributing to Live Broadcasts. Transparency has costs (distraction, mis-interpretation, etc.) but also great benefits (productivity, hiring, retention, brand awareness, etc). We should carefully weigh the tradeoff between costs and benefits, to prevent a knee-jerk reaction to reduce transparency when it has costs. Single Source of Truth By having most company communications and work artifacts be public to the Internet, we have one single source of truth for all GitLab team members, users, customers, and other community members. We don‚Äôt need separate artifacts with different permissions for different people. Findability Our transparency value means more than just making information accessible to all. In order to improve performance it‚Äôs important that we not only ensure information is accessible, but also ensure it flows to the correct places and is findable by those who need it. Focusing on information flow will ensure you, for example, utilize multi-modal communication , or that you keep your stakeholders informed of changes by posting links to MRs in Slack. Say why, not just what Transparent changes have the reasons for the change laid out clearly along with the change itself. This leads to fewer questions later on because people already have some understanding. A change with no public explanation can lead to a lot of extra rounds of questioning, which is less efficient. This also helps with institutional memory: a year from now when you want to know why a decision was made, or not, the issue or MR that has the decision also shares why the decision was made. This is related to Chesterton‚Äôs fence - it‚Äôs much easier to suggest removing or changing something if you know why it exists in the first place. If you use generalized terms such as ‚Äúindustry standard‚Äù or ‚Äúbest practices,‚Äù be sure to give context, as without context they can be seen as potentially vague or opaque. Similarly, merely stating a single value isn‚Äôt a great explanation for why we are making a particular decision. Many things could be considered ‚Äúiteration‚Äù or ‚Äúefficiency‚Äù that don‚Äôt match our definition of those values. Try to link to an operating principle of the value or provide more context, instead of just saying a single value‚Äôs name. Saying why and not just what enables discussion around topics that may impact more than one value; for instance, when weighing the efficiency of boring solutions with the focus on customer results . When decisions align with all of our values, they are easy to discuss and decide. When there are multiple values involved, using our values hierarchy and directly discussing the tradeoffs is easier with more context. Articulating why also helps people understand how something changed when you articulate that you changed your mind . Saying why does not mean justifying a decision against all other suggestions. The DRI is responsible for their decision. The DRI is not responsible for convincing other people, but they should be able to articulate their reasoning for the change. When a GitLab Team Member comes across an ask or material (MR, handbook, etc.) that does not provide a ‚Äúwhy‚Äù with sufficient context, the Team Member is responsible for getting the why and, if needed, working with the DRI to ensure that it is adequately documented and communicated to give context to other team members. In the absence of a why, team members may speculate the why. This is something that can lead to disruption and inefficiency. Reproducibility Enable everybody involved to come to the same conclusion as you. This not only involves reasoning , but also providing, for example: raw data and not just plots; scripts to automate tasks and not just the work they have done; and documenting steps while analyzing a problem. Do your best to make the line of thinking transparent to others, even if they may disagree . Transparency Competency Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate transparency when we are open with as many things as possible reducing the threshold to contribution and make collaboration easier. GitLab Job Grade Demonstrates Transparency Competency by‚Ä¶ Knowledge Assessment 5 Uses public issue trackers, projects, and repositories when possible. Looks for opportunities to publicly share the things that they are working on. Knowledge Assessment for Individual Contributors 6 Provides context and background on projects and issues so that those with no prior knowledge are able to contribute to the discussion. They welcome feedback and new ideas as they know that will lead to a better solution. 7 Continually surfaces improvements across their functional area of expertise. They share feedback with others and understand how to disagree and commit to solutions. They model what it means to be as open as possible. They encourage conversation in public channels. 8 Implements open processes across their team. They also track team issues and projects openly so their team members are aware of everything that is happening on a team at a given time. They leverage feedback to drive the best possible outcomes with the information they have available. They also share feedback with their team and their peers in a timely, kind manner so their position on a given topic is known. Knowledge Assessment for People Leaders 9 Fosters and coaches openness across cross functional departments. They lead cross functional issues, projects and ideas inviting feedback to generate the best possible solution. They hold their teams accountable to continue to find opportunities to share things openly. They give feedback to their team members, peers and managers in a timely, kind manner so their position on a topic is known. 10 Drives their departmental strategy with openness as a key value. They hold their management team accountable to working openly and pushes them to make everything transparent even when it might be difficult to do so. They coach managers on the value that additional feedback can bring to the end solution. 11 Develops leaders that work openly and continue to provide timely, kind feedback across their division. They develop leaders that drive their teams with openness as a foundational part of the way that they operate. 12 Leads the company by being open in all things. They are open with things that might traditionally not be shared broadly. They communicate directly and provide feedback in a timely manner to initiatives happening within their department and across the company. They hold the e group and other leaders accountable for upholding this value. EVP/CXO Champions transparency both internally, across the company and externally. They participate both internally and externally in events and share the value that being open can provide to increasing trust with team members and others that interact with our product. They provide timely, kind feedback with initiatives happening internally and externally. They hold the e group and other leaders accountable for upholding this value. Why have values Our values provide guidelines on how to behave and are written to be actionable. They help us describe the type of behavior that we expect from GitLab team members. They help us to know how to behave in the organization and what to expect from others. Values provide a framework for distributed decision making, detailed in GitLab‚Äôs TeamOps management philosophy. They allow individuals to determine what to do without asking their manager and they allow teams to make consistent decisions. When teams across the organization reference the same values in their decision making, there is consistency in how decisions are made. This ensures that our culture remains driven by our values. Lastly, values create a conscious culture that is designed to help you prosper and experience exceptional personal growth through work. Five dysfunctions Our values also help us to prevent the five dysfunctions : Fear of conflict Seeking artificial harmony over constructive passionate debate => prevented by transparency, specifically directness and collaboration, specifically short toes Absence of trust Unwilling to be vulnerable within the group => prevented by collaboration, specifically kindness Avoidance of accountability Ducking the responsibility to call peers on counterproductive behavior which sets low standards => prevented by results, iteration, and transparency Inattention to results Focusing on personal success, status, and ego before team success => prevented by results Lack of commitment Feigning buy-in for group decisions creates ambiguity throughout the organization => prevented by transparency, specifically directness Some dysfunctions are not addressed directly by our values; for example, trust is not one of our values. Similar to happiness, trust is something that is an outcome, not something you can strive for directly. We hope that the way we work and our values will instill trust, instead of mandating it from people; trust is earned, not given. Operating principles Operating principles are behaviors that empower GitLab team members to definitively live out a given value. They clarify what a given core value means and looks like at GitLab . Understanding this distinction is critical to thriving at GitLab, particularly for newer team members who may be familiar with a prior organization‚Äôs interpretation of iteration or collaboration (as examples). Process for removing operating principles Values are not just things we do, but things that actively drive good behavior. When we remove them it doesn‚Äôt mean we stopped believing in it, just that it wasn‚Äôt actively helping to drive behavior. If we don‚Äôt prune our operating principles, then we will be like every other company: things that make sense but are not leading to a better culture. To remove an operating principle from the Handbook page, submit your change through a merge request and explain your reasons in the merge request description. The GitLab Value Handbook Page owner must approve and merge the request. Mention the specific value Most companies have a list of values. In companies without strong values, folks often use generalizations when they refer to values. For example, ‚Äúnot a value add‚Äù or ‚Äúscored well on values during our interview.‚Äù In companies with strong values, folks name the specific, relevant value as it applies to a given topic or situation. Values are only powerful when they are individually understood and applied by team members. How to scale the business while preserving GitLab values? For certain business decisions or projects (such as compensation and end-point management ), GitLab team members may have a lot of opinions and interest, and they want to provide their feedback and comments. On the other hand, it might be challenging for the project DRI to digest and respond to all these inputs. What should you do in this scenario? Everyone can contribute at GitLab. We encourage team members to share feedback and leave comments on issues. Leaving feedback and comments shows that team members care about a topic and about GitLab as a company. These perspectives may also uncover potential risks and problems in the project. There shouldn‚Äôt be a ‚ÄúDon‚Äôt they have their job to do?‚Äù type of response. Furthermore, we shouldn‚Äôt judge team members who are perceived as being the ‚Äúsqueaky wheel.‚Äù At GitLab, we measure impact, not activity . As long as a team member is producing required results, they are empowered to decide how to spend their time. On the other hand, as GitLab grows in size, we need to make decisions and the decisions may not be agreed to by everyone. If a decision or project is sensitive or controversial, and receives large amounts of feedback, it can be challenging for the project DRI to handle. In these cases, it‚Äôs best to have time-boxed feedback built into timelines. In a hypothetical example where a DRI needs to decide between red and gold potatoes for a stew, they would create an issue with the following sentiment: We‚Äôre deciding between red potatoes and gold potatoes to go into the stew. We have to decide by Tuesday 2020-07-14 so that we can get our order to the grocery store on Wednesday 2020-07-15. We‚Äôll be collecting input and feedback until that point. Jane is the DRI and will make the decision on 2020-07-14 with all the information we have at that point. Here is the framework we‚Äôre using for the decision: are there allergies to consider? cost per pound team member preferences Once the decision is made, it will be what is going into the stew. This method has shown itself to be effective at soliciting productive feedback that doesn‚Äôt derail a timeline while ensuring team members feel heard. Why our values are public Companies are encouraged to copy and implement GitLab‚Äôs values. They are Creative Commons and can be copied verbatim. We make our values public for many reasons . There is great power and efficiency in teams who share company values. Concealing values until after someone is hired into an organization is not a wise strategy. Not everyone will see our values and feel aligned with them, and that‚Äôs OK. By making values public, it shows respect for the time of job seekers who conduct due diligence on prospective employers. When people who are aligned with GitLab‚Äôs values apply for an open vacancy , this allows our hiring teams to more efficiently move candidates through the interview process . In a GitLab Unfiltered interview on values , GitLab co-founder Sid Sijbrandij offers the following context. Companies may ask you to write a blank check. They‚Äôll say, ‚ÄòCome join our organization, and when you‚Äôre here, you need to subscribe to our values, our way of working, and our strategy. It‚Äôs very essential, and it‚Äôs part of our identity!‚Äô But these companies don‚Äôt give you the opportunity up front to evaluate it. It doesn‚Äôt make any sense to me. If it‚Äôs so important that people share your values, have them out there. Hierarchy Occasionally, values can contradict each other. It‚Äôs useful to keep in mind this hierarchy to resolve confusion about what to do in a specific circumstance, while remaining consistent with our core values. Think of the hierarchy as a weighting system. Values higher in the hierarchy do not automatically override values lower in the hierarchy. Here are some examples: If a change impacts Transparency positively but impacts Efficiency negatively in roughly the same amount, we would move ahead since Transparency is higher in the hierarchy than Efficiency. If a change has a massive positive impact on Diversity but negatively impacts Iteration, we would move ahead even though Diversity is lower in the hierarchy than Iteration because the overall impact is more positive than negative. In a GitLab Unfiltered interview on values , GitLab co-founder Sid Sijbrandij offers the following context. It‚Äôs an attempt to relieve at least some of the tension. It‚Äôs not absolute. If you think of values as binary, that‚Äôs not going to work. There will always be interpretation, and there‚Äôs always magnitude to consider. We made a hierarchy so that it‚Äôs clear, in the end, the result matters most. For instance, we‚Äôre not going to be transparent for the sake of being transparent. We‚Äôre not radical in our transparency. We do it because we think it will lead to better outcomes. Those hierarchies are really important. They won‚Äôt preempt every debate, but it helps. Updating our values Our values are updated frequently and as needed. Everyone is welcome to make a suggestion to improve them. To update: make a merge request and assign it to the CEO. If you‚Äôre a team member or in the core team please post a link to the MR in the #values Slack channel . If you‚Äôre not part of those groups, please send a direct X/Twitter message to @sytses . How do we reinforce our values Whatever behavior you reward will become your values. We reinforce our values by: Criteria we use for promotions and communicate to the whole company on announcement. What we select for during hiring . What we emphasize during on-boarding . Criteria we use for our annual compensation review . What we refer to when making decisions . The example the E-group sets for the company since a fish rots from the head down . What we expect from all team members, as ambassadors for our values . Keeping them up to date with a stream of commits that add details . Behavior we give each other 360 feedback on. Behavior we compliment . Criteria we use for discretionary bonuses . What we include in our offer letters Criteria we use to manage underperformance . What we do when we let people go . Giving value awards during GitLab Summit . Providing GitLab team members and qualified individuals transparency into all aspects of the company through the CEO Shadow Program to enable them to better engage and collaborate cross-functionally. Linking the takeaways of courses to our values, like we did for the Crucial Conversations training . The default settings of the software we use (for example: Speedy meetings , document sharing , agendas, etc.) Reinforcing our values with features in GitLab, for example the Iterations feature . Applying one of our values virtual backgrounds in video calls. Our GitLab Song Book , the song lyrics often mention GitLab values. Regularly conduct a values exercise at the e-group offsite . The most important moments to reinforce our values are decisions which affect individual team members most: hiring, promotions, and bonuses, which is why every promotion document at GitLab is shared with the entire company and uses the values as its core structure. In negative feedback, we should be specific about what the problem is. For example, saying someone is ‚Äú not living the values ‚Äù isn‚Äôt helpful. Your values are what you hire for, what you praise people for, and what you promote them for. By definition, what you do in those instances are your values. It‚Äôs not what you say they are. Values should be explicitly part of our hiring process, our job profiles, and our review process . When we give bonuses and promotions , they are always linked to values. That‚Äôs the crucial thing. If you reinforce them there, that‚Äôs the most powerful thing you can do. ‚Äî Sid Sijbrandij, GitLab co-founder What to do if values aren‚Äôt being lived out Value erosion can occur when indifference and apathy are tolerated. It can also occur when individuals justify undesired behaviors by interpreting values as ‚Äúme values‚Äù rather than ‚Äúcompany values.‚Äù For example, a team member may speak to the importance of personal efficiency in order to justify not collaborating professionally with peers. This is not what we expect from team members in terms of efficiency and collaboration. If you feel that values are not being lived out in a given scenario, speak up and ask for context in a respectful manner. Navigating value conflicts starts with assuming positive intent from other team members. Offer links to relevant values and/or operating principles when discussing the issue. If there is confusion or disagreement about the interpretation of a value, please surface the discussion in GitLab‚Äôs #values Slack channel (for GitLab team members) or @-mentioning @gitlab on X/Twitter (for those who do not work at GitLab). In a GitLab Unfiltered interview on values , GitLab co-founder Sid Sijbrandij offers the following context. Almost every time we face a hard decision at GitLab, it‚Äôs because values are in conflict. It‚Äôs not binary logic. It requires conversation, and sometimes there is no obvious answer. We can only achieve resolution by respectfully talking with each other and trusting the DRI to make the ultimate decision. Permission to play From our values we excluded some behaviors that are obvious; we call them our permission to play behavior: Be truthful and honest. Be dependable and reliable. Try to keep promises. If you might not keep a promise, proactively communicate as soon as you suspect it. Be deserving of the trust of our team members, users and customers. Be committed to the success of the whole organization. Act in the best interest of the company, our team members, our customers, users, and investors. Make the best decisions for GitLab. Act in accordance with the law. Don‚Äôt show favoritism as it breeds resentment, destroys employee morale, and creates disincentives for good performance . Seek out ways to be fair to everyone. Playing politics is counter to GitLab values We don‚Äôt want people to play politics at GitLab. An example of politics is people discussing a proposal and being overly focused on whose proposal it is. This is a manifestation of the Belief Bias , where we judge an argument‚Äôs strength not by how strongly it supports the conclusion but by how strongly we support the conclusion. Proposals should be weighed on their merits and not on who proposed them. Another example is people being promoted based on others liking them or having a lot of alliances. We want people to be promoted based on their results. We value collaboration, but that‚Äôs different from being promoted just because people like you. Below are some attributes of political and non-political work environments. GitLab plans to maintain a non-political one. Political environment Non-political environment Values are weaponized and used out of their intended context Team members utilize values with a positive intent Team members are driven by self-interest Team members are driven by company interest Team members work in silos Team members optimize globally People have territorial behaviors and are quick to perceive suggestions as attacks People have short toes People have unhealthy alliances with backroom conversations People have good intent and actively collaborate with folks Information is intentionally withheld Information is shared early (often WIP) and at the same time with all interested parties People try to undermine each other‚Äôs credibility by arguing with the weakest part of their argument People take a ‚Äústeel man‚Äù position and argue against the strongest version of your opponent‚Äôs position Folks do not provide direct feedback. Instead, they withhold their thoughts or speak behind each other‚Äôs backs Feedback is given directly. This includes feedback about a manager‚Äôs team Communicating your own suggestions through a report instead of directly Feedback is given directly from the person who has it Evaluating proposals or work by who said or did it instead of by what is in it Proposals and work is evaluated without regard to who worked on them Lack of transparency in escalations. Team members go to a manager without first attempting to align with peers on an issue or letting peers know Team members speak directly to each other about feedback and requests in order to resolve their own conflicts. When they escalate, they do it in an effective way Values make choices Values make and clarify choices. A well-chosen value has a defensible opposite. Apple, for example, values secrecy over transparency and product perfection over iteration. They are successful building around our counter values ‚Äî although the result is a very different company. What is not a value All-remote isn‚Äôt a value. It is something we do because it helps to practice our values of transparency, efficiency, results, and diversity, inclusion & belonging. Questions from new team members During every GitLab 101 session with new hires we discuss our values. We document the questions and answers to Frequently Asked Questions about the GitLab Culture . New team members should read GitLab‚Äôs guide to starting a new remote role , and reference interviews centered on values within the GitLab Unfiltered YouTube channel . Mission Our mission is to enable everyone to contribute to and co-create the software that powers our world . This mission guides our path, and we live our values along that path. Mitigating Concerns We have a page which documents our Mitigating Concerns . Many of our values help to mitigate some of these concerns. GitLab Values Quiz Anyone with a GitLab account can access the GitLab Values Quiz. To participate in the quiz, you will need to complete this learning course in Level Up. If you have questions, please reach out to our L&D team at learning@gitlab.com . Last modified June 27, 2025: Remove company OKR process ( 99161f51 ) View page source -  - please contribute .",
    "headings": [
      "GitLab Values",
      "CREDIT",
      "ü§ù Collaboration",
      "üìà Results for Customers",
      "‚è±Ô∏è Efficiency",
      "üåê Diversity, Inclusion & Belonging",
      "üë£ Iteration",
      "üëÅÔ∏è Transparency",
      "Why have values",
      "Five dysfunctions",
      "Operating principles",
      "How to scale the business while preserving GitLab values?",
      "Why our values are public",
      "Hierarchy",
      "Updating our values",
      "How do we reinforce our values",
      "What to do if values aren‚Äôt being lived out",
      "Permission to play",
      "Playing politics is counter to GitLab values",
      "Values make choices",
      "What is not a value",
      "Questions from new team members",
      "Mission",
      "Mitigating Concerns",
      "GitLab Values Quiz"
    ],
    "word_count": 18611,
    "extracted_at": "2025-07-21 20:12:27"
  },
  {
    "document_id": "gitlab-handbook-372575",
    "url": "https://handbook.gitlab.com/handbook/communication/",
    "title": "Communication",
    "category": "Company",
    "content": "GitLab Communication We‚Äôre an all-remote company that allows people to work from almost anywhere in the world. It‚Äôs important for us to practice clear communication in ways that help us stay connected and work more efficiently. We‚Äôre an all-remote company that allows people to work from almost anywhere in the world . We hire great people regardless of where they live, but with GitLab team members across more than 60 countries , it‚Äôs important for us to practice clear communication in ways that help us stay connected and work more efficiently. To accomplish this, we use asynchronous communication as a starting point and stay as open and transparent as we can by communicating through public issues, merge requests , and Slack channels . We also place an emphasis on ensuring that conclusions of offline conversations are written down. When we go back and forth three times, we jump on a synchronous video call . We communicate respectfully and professionally at all times. Effective & Responsible Communication Guidelines Assume Positive Intent . Always begin with a position of positivity and grace. Kindness Matters. You are looking at a screen, but you are really talking to a person. If you wouldn‚Äôt say it to a person‚Äôs face, do not send it to them in a text message. Express Your Thoughts Responsibly and Inclusively. We live in different locations and often have very different perspectives. We want to know your thoughts, opinions, and feelings on things. We also ask you to consider the guidelines around communicating potentially sensitive topics. Own It. If you say it or type it, own it. If it hurts the company or an individual, even unintentionally, we encourage you to look at things from other points of view and apologize easily. Be a Role Model of our Values . Feedback is Essential. It is difficult to know what is appropriate in every one of our team members 60+ countries. We encourage team members to give feedback and receive feedback in a considerate way. Do not underestimate a 1:1. Asynchronous communication (e.g., via text) is helpful and necessary. In some cases (e.g., to clarify misunderstandings) it can be much more effective to jump on a Zoom video call. Always Adhere to our Anti-Harassment Policy and GitLab Code of Business Conduct and Ethics . Everyone should be comfortable in their work environment. Focus on what we can directly influence. There are many factors we can‚Äôt directly influence and we should avoid spending time discussing those things. For example, we don‚Äôt talk about our market capitalization because aspects of this are out of our control. Instead, we should focus on how we can work together to achieve company objectives and grow annual recurring revenue . Commit to active and effective listening . Embracing asynchronous communication and learning to use it effectively requires a mental shift. This can feel unusual or even uncomfortable for those who come from a colocated environment, where in-person meetings and communiques are the norm. Learn more about mastering the use of the written word in an all-remote setting . Everyone is a moderator If you see something that concerns you in Slack, Issues, Merge Requests, Video, Emails or any other forum, we encourage you to respectfully say something directly to the individual in a 1:1 format. If there is an issue to raise regarding someone‚Äôs communication or conduct, team members should follow the process for raising communication concerns by sharing their concern with their manager or, if preferred, email Team Member Relations ( teammemberrelations@gitlab.com ) directly. Asynchronous communication In an all-remote setting , where team members are empowered to live and work where they‚Äôre most fulfilled, mastering asynchronous workflows is vital to avoiding dysfunction and enjoying outsized efficiencies and lifestyle flexibility. Asynchronous communication is the art of communicating and moving projects forward without the need for additional stakeholders to be available at the same time your communique is sent. To learn more on when to use asynchronous and synchronous communication, examples of async workflows in practice at GitLab, core async behaviors, and to take an async knowledge assessment, visit GitLab‚Äôs guide to embracing asynchronous communication . Communicate directly When working on a problem or issue, communicate directly with the people you need support from rather than working through reporting lines. Direct communication with the people you need to collaborate with is more efficient than working through your manager, their manager, or another intermediary. Escalate to management if you are not getting the support you need. Remember that everyone is a manager of one and they might have to complete their own assignments and inform the reporting lines. Communicating Potentially GitLab Sensitive Topics (This guidance supplements and overlaps with GitLab‚Äôs SAFE Framework , the guidance on the use of the internal handbook , and the additional guidance on this page. We ask our team members to consider the factors below in their communication. ) As GitLab matures, we want to continue to foster discussion while evolving our communication guidelines so that topics that are potentially GitLab sensitive are discussed in appropriate forums. This is particularly relevant as team members heavily leverage async modes of communication including merge requests, issues and epics, and in Slack communication. Words have impact long after they are written, and even when you‚Äôre communicating internally, the manner in which you speak with one another should be viewed through an external lens. For additional information, please review our Guidelines for communicating effectively and responsibly through text . Confidentiality levels At GitLab, we are public by default , but some information is classified as internal or limited access. Please see the confidentiality levels handbook page for details on this. Examples of Potentially GitLab Sensitive Topics Team member data (individual performance, start dates, departures) Violations, or potential violations, of policies and/or local rules and regulations Customer or partner information (logos, trademarks, spend) Material nonpublic information The above examples overlap with the GitLab‚Äôs SAFE Framework examples. We recommend you to further review that page for more information and context. What are the risks? Legal risk: These are the risks that arise from regulations and laws that govern GitLab or the market in which it operates. This includes, but is not limited to, content that would compromise a GitLab team member, customer, or user‚Äôs personal data and/or privacy. Morale risk: Raising GitLab sensitive topics that may be misinterpreted without the opportunity to ask clarifying questions can create risk to team culture and/or morale. PR risk: Remember that anything you document could ultimately be shared/viewed externally. Consider that a discussion in a public MR or issue is a demonstration of our values to those outside of GitLab who are looking to learn more about how we collaborate. We encourage communicating risks to GitLab, its team members, or customers in a synchronous 1:1 setting. Determining Which Communication Forum To Use The table below outlines an overview of different communication forums at GitLab, and the considerations team members should think through related to potentially GitLab Sensitive topics when determining which forum to leverage. Communication Forum When To Utilize Use the internal Handbook aligned with the guidelines When you want to document information for team members that is internal-only , including not public and not limited access External MR/issue (not confidential) For discussion and collaboration when there is no risk suspected or identified (directly or later) and it doesn‚Äôt fall into not public category Internal MR/ confidential issue For discussion and collaboration when there is no risk suspected or identified but adhering to things that are internal-only , not public , SAFE Framework/General Communication Guidelines Your Manager, DRI and/or Legal For discussion and collaboration when in doubt about potential risk and you want to review if there‚Äôs a potential risk DRI For discussion and collaboration when there‚Äôs a risk suspected or identified, communicate directly with the DRI verbally via Zoom. Examples include issues where Limited Access applies or it covers a change to People Process/policy. People Group (your People Business Partner or Team Member Relations) For discussion and collaboration when there‚Äôs a risk suspected or identified, a policy violation, and/or it‚Äôs a private matter GitLab‚Äôs Whistleblower policy For flagging a situation that is a violation as set out in the policy When in doubt, you can reach out to your People Business Partner and/or your leadership team directly. Organization code names Please see our Project names section . Internal communication Internal communication is any work related communication at a company. Internal Communication includes team member conversations, wider team discussions, or internal announcements to the company or targeted outreach to select internal audiences. At GitLab, everyone can contribute to the effectiveness of Internal Communications to support aspects of GitLab culture, such as intentional transparency and engaging people in open dialogue. Since we believe that all team members must be Managers of One , most communication is handled by the relevant group, but we know that some communications are more sensitive and contentious than others. In those cases, the DRIs may want to engage the Internal Communications function . Top tips and best practices All written communication happens in English, even when sent one on one, because sometimes you need to forward an email or chat. Use asynchronous communication when possible: merge requests (preferred) or issues. Announcements happen on the appropriate Slack channels and people should be able to do their work without getting interrupted by chat. Discussion in issues or Merge Requests is preferred over everything else. If you need a response urgently, you can Slack someone with a link to your comment on an issue or merge request, asking them to respond there, however be aware that they still may not see it straight away. See Slack for more. If you choose to email instead of chat it is OK to send an internal email that contains only a short message, similar as you would use in chat. You are not expected to be available all the time. There is no expectation to respond to messages outside of your planned working hours. Sometimes synchronous communication is the better option, but do not default to it. For example, a video call can clear things up quickly when you are blocked. See the guidelines on video chats for more detail. It is OK to ask as many questions as you have. Please ask them so many people can answer them and so others can benefit from seeing the answer. Use issues or public chat channels (like #questions ) instead of direct messages or one-on-one emails. If you have researched in the handbook and could not find the answer or need clarity, include the handbook link you were reviewing and state ‚Äúwhile looking in the handbook I could not find x,y,z‚Äù. If you send a handbook link to someone as an answer to a question, consider adding some context, especially if they are new to GitLab. It‚Äôs great that we often have the answer documented, but it‚Äôs not always easy to find if you are a new team member. If the answer to a question isn‚Äôt documented, please immediately make a merge request to add it to the handbook in a place you have looked for it. It is great for the person who answered the question to see you leading by example to ensure that question only needs to be answered once. A merge request is the best way to say thanks for help. If you mention something (a merge request, issue, commit, webpage, comment, etc.) please include a link to it. All company data should be shareable by default. Do not use a local text file, but rather leave comments on an issue. When someone asks something, give back a deadline or that you did it. Answers like: ‚Äòwill do‚Äô, ‚ÄòOK‚Äô, ‚Äòit is on my todo list‚Äô are not helpful. If it is small it‚Äôs better to spend 2 minutes and do the tasks so the other person can mentally forget about it. If it is large you need to figure out when you‚Äôll do it, by returning that information the other person might decide to solve it in another way if it takes too long. It is OK to bring an issue to someone‚Äôs attention with a CC (‚Äúcc @user‚Äù), but CCs alone are not enough if specific action is needed from someone. The mentioned user may read the issue and take no further action. If you need something, please explicitly communicate your need along with @ mentioning who you need it from. Avoid creating private groups for internal discussions: It‚Äôs disturbing (all users in the group get notified for each message). It‚Äôs not searchable. It‚Äôs not shareable: there is no way to add people in the group (and this often leads to multiple groups creation). They don‚Äôt have a subject, so everyone has to remember the topic of each private group based on the participants, or open the group again to read the content. History is lost when leaving the group or after 90 days . It is perfectly fine to create a channel, even for a single customer meeting. These channels should be named ‚Äúa_ -internal‚Äù to indicate their ‚Äúinternal‚Äù nature (not shared with customers). Use low-context communications by being explicit in your communications. We are a remote-only company, located all over the world. Provide as much context as possible to avoid confusion. Relatedly, we use ubiquitous language for communication efficiency. When discussing concepts, be careful not to lean too much into hypotheticals. There is a tipping point in which it decreases value and no longer becomes constructive at helping everyone come into a unified decision. Consult our tips for better writing . Internal Communication Channel Guidance What/When The GitLab Handbook The Loop Slack Email/Newsletters Meetings Primary Purpose Transparency around GitLab procedures, documenting information handbook-first Connect team members with news, information, and stories Real-time collaboration and quick communications Formal communications, select company updates, and consolidated updates to targeted audiences Synchronous discussions and collaboration Best For 1.) Sharing processes and/or procedures valuable to customers, community, or candidates 2.) Creating external transparency (core values, mission, and vision) 3.) Documenting workflows and standardized processes 1.) Finding/sharing company information, announcements, and events 2.) Learning/sharing programs and initiatives 3.) Accessing personalized and relevant content 4.) Team member storytelling, connection, and engagement 5.) Team showcases and wins 1.) Immediate discussions 2.) Quick questions 3.) Team coordination 4.) Time-sensitive, informal updates 5.) Instantaneous feedback/communication 6.) Channel-specific discussions 1.) Critical and/or formal announcements 2.) Newsletters with targeted updates 3.) External communications (customers, vendors, etc.) 4.) Items requiring official email notification 5.) Informing targeted audiences 6.) Select leadership communications 1.) Complex discussions 2.) Decision-making sessions 3.) Relationship building 4.) Project kickoffs/reviews 5.) Interactive sessions 6.) Ideation and/or problem solving 7.) Engaging and visual presentations 8.) Resolving conflicts Not For 1.) Time-sensitive updates 2.) Internal communication 4.) Team-specific news 5.) Daily operational matters 1.) Technical documentation 2.) Small audience communication 3.) Highly confidential information. Note: Private Sites is an option for safeguarding access 1.) Detailed documentation 2.) Complex content sharing 3.) Evergreen or long-term Information sharing 1.) Collaborative discussions 2.) Questions requiring quick responses 3.) Urgent issues requiring immediate attention 1.) Simple updates 2.) Information sharing only 3.) Documentation of processes 4.) That which could be handled asynchronously Key Features / Benefits 1.) Version control 2.) Public accessibility 3.) Single source of truth for processes 1.) Customization and personalization 2.) Newsletter, feed, employee generated content 3.) AI powered search and content governance 4.) Fosters Communication, connection, and culture 1.) Collaboration and connection 2.) Integrations 3.) Real-time communication 4.) Productivity and efficiency 5.) Supports projects, teams, and transparency 1.) Improved awareness 2.) Streamlined communication 3.) Personalized content delivery 1.) Face-to-face interaction 2.)Screen and presentation sharing 3.) Breakout rooms 4.) Recording capability Structure content instead of using FAQs We want to avoid unstructured content which includes FAQs (Frequently Asked Questions), especially for internal communication. FAQs tend to take on the voice and concerns of assumed personas. Instead of assuming questions, aim to articulate key facts as statements and use these to structure content under topical headers which aren‚Äôt questions. Structured content around GitLab, the product, should be in GitLab Docs and structured content around GitLab, the company, should be in the handbook; we should not use separate documents or locations to share this information. Restructuring the content As an example, let‚Äôs say your FAQ would have a question like: Q: I‚Äôm not seeing widget X, what should I do? A: If you‚Äôre not seeing widget X, you can verify if it‚Äôs enabled or not by going to User Profile -> Settings and ensure the checkbox is enabled under Enable widget X You can reframe it to: How to enable widget X You can enable widget X by going to User Profile -> Settings and ticking the checkbox next to Enable widget X then clicking on the Save button FAQs are discouraged elsewhere as well Content guidelines across the industry support avoiding FAQs: https://www.plainlanguage.gov/guidelines/web/avoid-faqs/ https://digital.gov/2015/04/27/are-faqs-still-relevant/ https://guides.18f.gov/content-guide/our-approach/structure-the-content/ https://gds.blog.gov.uk/2013/07/25/faqs-why-we-dont-have-them/ https://thegood.com/insights/faq-pages/ https://alistapart.com/article/no-more-faqs-create-purposeful-information-for-a-more-effective-user-experi/ Multimodal communication Employ multimodal communication to broadcast important decisions. To reach our distributed organization, announce important decisions in the company announcements Slack channel, email the appropriate team email lists, Slack the appropriate channels, and target 1:1s or other important meetings on the same day, with the same information. When doing this, create and link to a single source of truth : ideally the handbook , otherwise an epic, issue, or Google Doc. The email or Slack message should not be the source of truth. When referring to email that recipients should have received, reference the sender and subject of the email so it‚Äôs easy to find. For example, ‚ÄúYou should have received an email from Jane Smith with the subject ‚ÄòTraining Seminar Details‚Äô‚Äù. Asking ‚Äúis this known‚Äù If something is behaving strangely on https://gitlab.com , it might be a bug. It could also mean that something was changed intentionally. Please search if the issue has already been reported . If it has not been reported, and you are sure it is a bug, please file an issue . If you are unsure whether the behavior you experience is a bug, you may ask in the Slack channel #is-this-known . If you know which stage of the DevOps lifecycle is affected, it is also okay to ask in #s_{stage}, for example #s_manage . When you ask: Make sure that no-one has experienced this issue before, by checking the channel for previous messages. Describe the behavior you are experiencing, this makes it searchable and easier to understand. Different people might look for different things in the same screenshots. Asking in a single channel helps discoverability, duplicated efforts and reduces noise in other channels. Please refrain from asking in general purpose channels like #frontend , #backend , #development or #questions . Numbering is for reference, not as a signal When taking notes in an agenda, in the handbook, or in other documents, keep items numbered so we can refer to Item 3 or 4a. The number is not a signal of the importance or rank of the subject unless explicitly stated to be such. It is just for ease of reference. Cross link Linking should not be in one direction. We should go beyond deep-linking to create a richer web of links that can surface content and ensure people consider all pages when making updates. When linking one page to another, try to link back as well. Instead of only linking from Page A to Page B, both link Page A to Page B and link Page B back to Page A. For example, the Live Doc Meeting section of the All Remote Guide links to the Live Docs Meetings page . The Live Docs Meetings page links back to the Live Doc Meeting section of the All Remote Guide. Acknowledgement Receipts (ACK) Informal ACKs In informal acknowledgement scenarios, such as on Slack or on issue comments, it is common practice to use the following: Slack emoji reaction of :ack: or an ACK response => Acknowledged, or message received Eyes üëÄ => I‚Äôll check this out | seen | working on it Thumbs up üëç => good idea White checkmark ‚úÖ => task is complete or done Heart ‚ù§ Ô∏è= expression of gratitude or appreciation cc @mentions => if someone needs to see a message Formal ACKs In order to effectively communicate an important change to hundreds of distributed employees, we occasionally use an ACK process. To prevent overuse, this should only be used by a member of the exec team. Anyone may ask an exec to sponsor one. As a guideline, we‚Äôd expect no more than one per quarter to be sent out. Too many ACKs lose power. To initiate an ACK process: Clone the form from the ACK template and fill it out. Link to MRs and Handbook pages instead of duplicating your content in the form. Why handbook first? Ask People Ops to pull a report from Workday with the column headers First Name, Last Name, Job Title, Department, Manager, and Work Email. Double check it and turn the emails into a comma-delimited string with an excel formula like this: =TEXTJOIN(\", \", true, Sheet1!E2:E432) Send the form and expect to get 50% of the responses in the first 24 hours. To get the rest: Post in common Slack channels. Add to staff meeting agendas. Suggest to team managers to post to their team Slack channels, ask for explicit :ack: and pin to the channel until everyone responds. Lastly, reach out 1-on-1 to stragglers while being respectful of vacation time. Say thanks As we continue to build on inclusion , recognition is a key and transformative tactic. Thanking team members provides an opportunity for them to be recognized for their contributions, influences engagement behavior, and acknowledges to team members their work is seen. By saying thanks, you are contributing to and supporting the value of DIB . Thank people that did a great job in our #thanks Slack channel. Almost everyone in the company is active in this channel so please don‚Äôt be shy. Consider other channels where recognition can be acknowledged: team meetings, issues, company calls, 1-1 meetings, etc. If someone is a team member just @ -mention them, if multiple people were working on something try @ -mentioning each person. When announcing a completed project, list the key contributors. Please be as timely as possible with your recognition. If possible please include a link with your thanks that points to the subject matter that you are giving thanks for, for example a link to a merge request. Please do not mention working outside of working hours, we want to minimize the pressure to do so. Please do not celebrate GitLab contribution graphs that include working for uninterrupted weeklong cycles, as this does not foster healthy work/life harmony for all team members. While GitLab team members are free to time-shift and work weekends in place of weekdays, we discourage celebrating the absence of time away from work. Do not thank the CEO or other executives for something that the company paid for, thank GitLab instead. To thank someone who is not a team member, you can nominate them for community swag . Understand that everyone doesn‚Äôt need or want recognition. Once this is advised, please respect when they don‚Äôt. Values emoji Add Values emoji reactions to thank you messages in the #thanks slack channel or feel free to use them in GitLab.com, other slack channels and social media, when you see alignment to our values: GitLab‚Äôs values . Emoji Custom values emoji Meaning :handshake: :collaboration-value: Collaboration :chart_with_upwards_trend: :results-value: Results for Customers :stopwatch: :efficiency-value: Efficiency :globe_with_meridians: :diversity-value: Diversity Inclusion and Belonging :footprints: :iteration-value: Iteration :eye: :transparency-value: Transparency As a second iteration, we have added these custom emoji to GitLab to enable tanuki values reactions in issues, epics, and MRs within the gitlab-com and gitlab-org groups. As a later iteration, we will begin tracking the number of emoji reactions for each value through the Reacji API and update this page with our findings! Indicating availability Indicate your availability by updating your own calendar using Google‚Äôs ‚Äúout of office‚Äù feature and include the dates you plan to be away in your automated response. Note that this feature will automatically decline any meeting invitations during the time frame you select. Put your planned away time including holidays, vacation, travel time, and other leave in your own calendar. Please see Communicating your time off for more. Set your working hours in your Google Calendar settings. Utilize Time Off by Deel to keep other GitLab team members aware of your planned time away within Slack. Informal communication Informal communication is made up of interactions between co-workers that are unofficial in nature and focus on building social relationships outside of the normal hierarchy of a typical business structure. In other words, it‚Äôs what happens when we get to know each other and talk about anything other than work. Informal communication is a vital part of GitLab culture , and we‚Äôve listed 20+ ways to engage . Not sure where to go? If there is something that you want to discuss, but you do not feel that it is a reasonable option to discuss with either your manager or CEO, then you can reach out to any of the other C-level GitLab team members . Start with a Merge Request When possible, it‚Äôs best practice to start a discussion with a Merge Request (MR) instead of an issue. An MR is associated with a specific change that is proposed and transparent for everyone to review and openly discuss. The nature of MRs facilitate discussions around a proposed solution to a problem that is actionable. An MR is actionable, while an issue will take longer to take action on. Always open an MR for things you are suggesting and/or proposing. Whether something is not working right or we are iterating on a new internal process, it is worth opening a merge request with the minimal valuable change instead of opening an issue encouraging open feedback on the problem without proposing any specific change directly. Remember, an MR also invites discussion, but it‚Äôs specific to the proposed change which facilitates focused decision. Never ask someone to create an issue when they can default to the merge request. Starting with a Merge Request is part of Handbook First and helps ensure the handbook is up-to-date when a decision is made. It is also how we make it possible for Everyone to Contribute . This is true, not just for updating the handbook but for updating all things. Merge Requests, by default, are non-confidential . However, for things that are not public by default please open a confidential issue with suggestions to specific changes that you are proposing. The ability to create Confidential Merge Requests is also available. When possible, consider not including sensitive information so the wider community can contribute. Not every solution will solve the problem at hand. Keep discussions focused by defining the problem first and explaining your rationale behind the Minimal Valuable Change (MVC) proposed in the MR. Be proactive and consistent with communication on discussions that have external stakeholders such as customers. It‚Äôs important to keep communication flowing to keep everyone up to date. MRs can appear stale if there aren‚Äôt recent discussions and no clear definition on when another update will be provided, based on feedback. This leaves those subscribed in the dark, causing unnecessary surprise if something ends up delayed and suddenly jumps to the next milestone. It is important that MRs are closed in a timely manner through approving or rejecting the open requests. Have a bias for action and do not aim for consensus . Every MR is a proposal , if an MRs author isn‚Äôt responsive take ownership of it and complete it. Some improvement is better than none. Cross link issues or other MRs with related conversations. E.g. if there‚Äôs a Zendesk ticket that caused you to create a GitLab.com MR, make sure to document the MR link in the Zendesk ticket and vice versa. And when approving or rejecting the MR, include reason or response from Zendesk. Put the link at the top of each MR‚Äôs description with a short mention of the relationship (Report, Dependency, etc.) and use one as the central one and ideally close the alternate if duplicate. When providing links to specific lines of code relevant to the MR, always use a permalink (a link to a specific commit for the file). This ensures that the reference is still valid if the file changes. For more information, see Link to specific lines of code . If submitting a change for a feature, update the description with the final conclusions (Why an MR was rejected or why it was approved). This makes it much easier to see the current state of an issue for everyone involved in the implementation and prevents confusion and discussion later on. Submit the smallest viable and valuable thing . When proposing a change, submit the smallest reasonable commit, put suggestions for other enhancements in separate issues/MRs and link them. An MR can start off as only a problem description and TODO comments . If you‚Äôre new to GitLab and are writing documentation or instructions, submit your first merge request for at most 20 lines. Do not leave MRs open for a long time. MRs should be actionable ‚Äì stakeholders should have a clear understanding of what changed and what they are ultimately approving or rejecting. Make a conscious effort to prioritize your work. The priority of items depends on multiple factors: Is someone waiting for the answer? What is the impact if you delay it? How many people does it affect, etc.? This is detailed in Engineering Work flow . When submitting a MVC, ask for feedback from your peers. For example, if you‚Äôre a designer and you propose a design, ping a fellow designer to review your work. If they suggest changes, you get the opportunity to improve your design and propose an alternative MR. This promotes collaboration and advances everyone‚Äôs skills. Respond to comments within a threaded discussion . If there isn‚Äôt a discussion thread yet, you can use the Reply to comment button from the comments to create one. This will prevent comments from containing many interweaved discussions with responses that are hard to follow. If your comment or answer contains separate topics, write separate comments for each, so others can address topics independently using the Reply to comment button. If you have received any feedback or questions on your MR, try to acknowledge comments as that‚Äôs how we ensure we create an environment of belonging for all team members . Merging your MR as-is without giving an answer or any response makes the commenters feel their opinions are unheard. If you are the Directly Responsible Individual (DRI) who does not have to make a fast decision, you can choose not to change your MR, but you should acknowledge the comments or feedback, consider if they warrant a change to your MR, and say why, not just what . If there are many comments, you can choose to summarize key feedback areas and share your response at a high level. We appreciate that if you force a DRI to explain too much, you‚Äôll create incentives to ship projects under the radar. The fear of falling into a perpetual loop of explaining can derail a DRI, and cause people to defer rather than working with a bias for action . This is something we want to avoid. When fast decisions are needed, we‚Äôll have to accept that people listened to us but don‚Äôt owe us an explanation to have fast decisions based on everyone‚Äôs input . The goals are to be transparent and collaborative‚Äìnot to lose efficiency. Not everyone will agree, but we expect all people to disagree, commit, and disagree . For GitLab, the product merge request guidelines are in the Contribution guide and code review guidelines for reviewers and maintainers are described in our Code Review Guidelines . Even when something is not done, share it internally so people can comment early and prevent rework. Create a Draft merge request to prevent an accidental early merge. Only use Draft when merging it would make things worse , which should rarely be the case when contributing to the handbook. Most merge requests that are in progress don‚Äôt make things worse. In this case, do not use Draft; if someone merges it earlier than you expected just create a new merge request for additional items. Never ask someone to do a final review or merge something that still has Draft status. At that point you should be convinced it is good enough to go out. If any follow-up actions are required on the issue after the merge request is merged (like reporting back to any customers or writing documentation), avoid auto-closing the issue. If a project requires multiple approvals to accept your MR, feel free to assign multiple reviewers concurrently. This way the earliest available reviewer can start right away rather than being blocked by the preceding reviewer. If the MR involved gets a lot of comments, you can turn it into a Manager Mention MR . Consider recording a concise video or audio file outlining the merge request and uploading it to the GitLab Unfiltered channel on YouTube. This will make content more accessible, prevent future confusion, allow for multitasking (e.g. cooking dinner and listening to the video), and increase participation for folks who digest audio information better than visual. Scaling Merge Requests through ‚ÄúManager Mention MRs‚Äù (formerly Consolidated MRs) Some merge requests that involve a big decision or change tend to collect a large amount of feedback. As GitLab grows in size, it is unrealistic for a single person to respond to potentially hundreds of comments. To remain efficient in these MRs and to make it scalable, it is important for the DRI to receive a clear signal of input that is shared on the merge request. Some MRs may be marked as ‚ÄúManager Mention MRs‚Äù by clearly designating them as such at the beginning of the MR description with the following code block: ### Manager Mention MR This MR is a [Manager Mention MR](/handbook/communication/#scaling-merge-requests-through-manager-mention-mrs-formerly-consolidated-mrs). Contributors should tag their manager when adding a comment. If managers are tagged they should either respond to the question or summarize and tag their manager. Additionally, add the ~\"Manager Mention MR\" label to the merge request. This will make future analytics on Manager Mention merge requests more easily identifiable. It also enables managers to subscribe to the label to be notified when an MR has elected the Manager Mention MR designation. We tried Manager Mention MR‚Äôs for the first time in a recent announcement (2021-03-03) but this did not work well and we are working on making it better. We‚Äôre starting with a more thoughtful and transparent process in our communications cadence and approach going forward, including all directs and people managers getting a few days‚Äô notice before important company-wide changes are announced to all team members. This will allow all directs and people managers to feel more enabled and better understand the why behind big changes in order to scale communication to team members. For all managers: It is important to ground yourself in the contents of the changes before the announcement goes live to all team members. If a team member tags you in a Manager Mention MR, it is your role to respond candidly and thoughtfully to their question or comment. If the line of questioning in the Manager Mention MR gets out of your depth, ask the DRI to help answer. If a team member comments without a manager tagged, the comment will be closed with a link to this handbook section or closed without comment. In a situation where a team member leaves a wildly inappropriate comment in the Manager Mention MR, you should feel empowered to delete comment and talk to your team member 1:1. Consider subscribing to the label ~\"Manager Mention MR\" to be notified when MRs transition to this designation. What not to do: Not communicate to team members about company-wide changes. Ignoring team member questions, whether that‚Äôs in a 1:1 or Manager Mention MR. What to do: If one of your team members has a suggestion, solution or sees an issue, see if talking through the communication will answer any of their questions. Team members are also allowed to bring forward their ideas in the Manager Mention MR addressed to you, we want everyone to contribute. As a manager, you will be expected to communicate changes to your teams and also be present to answer any team member questions, whether that‚Äôs in a 1:1 or Manager Mention MR. As a manager, it is part of your role to understand and own change management for your team and properly triage the process and expectations. Consider a synchronous call with the team member for further context, make a suggestion, link to additional context, delete any unnecessary comments from their team, or escalate to the author of the MR. Ensure that the comments of your reports you interact with were made after the Manager Mention label was added. For team members: Check if the MR you are about to comment on has the ~\"Manager Mention MR\" label. Check each time as the label may have been added since you last commented. When leaving a comment in a Manager Mention MR, frame the comment as a question or suggestion to your manager directly, and not anyone else, including the DRI. We do this to scale communication, as it is unsustainable for the DRI to answer every question. What not to do: Leaving a comment and CC‚Äôing your manager at the end of your post, but not addressing your manager directly. What to do: Address your manager directly at the beginning of your message as your comments should be addressed to your manager. If you have a suggestion, solution or see an issue with a big change, you can also bring it up directly to your manager. The MR is not a poll. Give suggestions on how to improve and try to find data that helps support your argument or change in the MR. MRs should not start out as a Manager Mention MR as we prefer communication to be direct . They should only be designated as such after the number of comments on them grows to a level that is unsustainable for the DRI. An exception to this is compensation changes and other company-wide announcements that can be sensitive/contentious in nature since they have historically generated many comments. When an MR is changed to be Manager Mention , the person making this change should add a comment stating this so that everyone tracking the MR can be informed. Issues Issues are valuable when there isn‚Äôt a specific code change that is being proposed, such as: Crafting a research proposal to validate a problem or solution Ideating on designs in order to solve a particular problem Breaking down implementation tasks in order to deliver a solution iteratively Tracking progress of particular tasks, especially when an issue board is needed When utilizing issues, it is still important to maintain focus by defining a single specific topic of discussion and the desired outcome that would result in the resolution of the issue. Issues should not be open-ended or go stale due to lack of resolution. For example, a team member may open an issue to track the progress of a blog post with associated to-do items that need to be completed by a certain date (e.g. first draft, peer review, publish). Once the specific items are completed, the issue can successfully be closed. Below are a few things to remember when creating issues: When closing an issue leave a comment explaining why you are closing the issue and what the MVC outcome was of the discussion (if it was implemented or not). We keep our promises and do not make external promises without internal agreement. Be proactive and consistent with communication on discussions that have external stakeholders such as customers. It‚Äôs important to keep communication flowing to keep everyone up to date. Issues can appear stale if there aren‚Äôt recent discussions and no clear definition on when another update will be provided, based on feedback. This leaves those subscribed in the dark, causing unnecessary surprise if something ends up delayed and suddenly jumps to the next milestone. It is important that issues are closed in a timely manner. One way of doing this is having the current assignee set a due date for when they will provide another update. This can be days or weeks ahead depending on the situation, prioritization, and available capacity that we may have. Pro Tip: When creating a Merge Request you can add closes: #[insert issue number here] and when the Merge Request is merged, the issue will automatically close. You can see an example of this here . Note: Automatic issue closing is disabled on some projects. If a user suggests an enhancement, try and find an existing issue that addresses their concern, or create a new one. Ask if they‚Äôd like to elaborate on their idea in an issue to help define the first MVC via a subsequent MR. Cross link issues or MRs with related conversations. Another example is to add ‚ÄúReport: \" lines to the issue description with links to relevant issues and feature requests. When done, add a comment to relevant issues (and close them if you are responsible for reporting back, or reassign if you are not). This prevents internal confusion and us failing to report back to the reporters. When cross-linking issues or MRs, include a preview of the content you are linking, to facilitate low-context communication : Good: this would cause performance issue similar to #123456 . The reader has full information on first read and can refer to the link for more. Avoid: this would cause issue similar to #123456 . The reader needs to click the link and find the relevant information among other discussion threads, before switching back to the original discussion. When providing links to specific lines of code relevant to the issue, always use a permalink (a link to a specific commit for the file). This ensures that the reference is still valid if the file changes. For more information, see Link to specific lines of code . Prioritize your work on issues in the current milestone . Use the public issue trackers on GitLab.com for everything since we work out in the open . Issue trackers that can be found on the relevant page in the handbook and in the projects under the gitlab-com group . Assign an issue to yourself as soon as you start to work on it, but not before that time. If you complete part of an issue and need someone else to take the next step, re-assign the issue to that person. Ensure the issue title states what the desired outcome should be. For instance, for bugs make sure the issue states the desired result, not the current behavior. Regularly update the issue description with the latest information and its current status, especially when important decisions were made during the discussion. The issue description should be the single source of truth . If you want someone to review an issue, do not assign them to it. Instead, @-mention them in an issue comment. Being assigned to an issue is a signal that the assignee should or intends to work on it. So you should not assign someone to an issue and misrepresent this with a false signal. If you‚Äôd like to inform someone about an issue or assign a task to them, do so via an issue comment, not only by adding them to the description. The to-do item generated when you mention someone in an issue description provides little context for the action you‚Äôre requesting. But using a comment to explicitly inform someone of the action you‚Äôd like them to take ensures that when they read the associated to-do item they won‚Äôt need to read the entire issue to gather the context they need to complete the work. Do not close an issue until it is done . It‚Äôs okay to explicitly ask if everyone is on board and in agreement on how to move forward, whether to iterate, close the open issue, or create a subsequent MR to implement a MVC. Once a feature is done , update the description to add a link to the corresponding documentation. When using a Search Engine, issues often appear before documentation pages, which makes it harder to find the relevant information about the feature. Write issues so that they exclude private information. This way, the issue can be public. Only use confidential issues, if the issue must contain non-public information . Note: Confidential issues are accessible to all members of the project with Reporter access and above . You may consider using a Google Doc for items that require a stricter level of confidentiality. If the content within a public issue transitions to become what is deemed confidential non-public information , the issue may be made confidential. If the content of a public issue draws comments that are deemed in violation of our code of conduct the issue may be locked and may undergo moderation . How to make a company wide announcement Consider the subject and the audience. Questions you might want to ask yourself: Is this relevant to all team members globally? Is this something important, urgent and high priority? Is there a better place for this communication, such as a more informal Slack channel? Keep it simple, brief and summarize what is important. Cover the 5 W‚Äôs. What, Why, Who, When, Where (you can also add How, if required as a call to action). The majority of information should still be in the Handbook which you include links to. Common company wide announcements include (but are not limited to): organization changes, policy iterations, requests to participate in a company survey, unveiling the next GitLab Contribute location, codebase migrations, process improvement and security/safety announcements. Remember Handbook First. When you announce anything, include links to the respective Handbook pages for more information. Consider adding link to an Issue if the information is not public yet. Optional AMA. If desired and appropriate, offer a company wide Zoom call to host an AMA (Ask Me Anything). Oftentimes, questions can be managed within the Discussion tab of a GitLab Issue or Merge Request. For broad announcements, such as registration opening for GitLab Contribute, an AMA may be better suited for a large volume of inquiries. To schedule a company wide call, please make a request in the #people-connect Slack channel, and include a Google Doc in the invite for questions. Remember we are a global company with significant time-zone differences. Unless there is a reason to do otherwise, ensure any time-sensitive calls to action or announcements are made when the whole company has enough time to action. Consider different timezones, non-linear work days, and PTO. Announcements should be made ideally 72 hours (at minimum 24 hours) in advance of a due date. This is to prevent APAC/EMEA team members missing important announcements posted outside their normal working hours. Sometimes a late announcement is better than none at all, and acknowledging those who will miss it might be a kind gesture, such as ‚ÄúApologies to our APAC/EMEA friends for the late notice‚Äù. Posting in #company-fyi Our company-wide announcements channel is #company-fyi . It is an announcement only channel, meaning that communications need to be approved before they can be posted. To minimize noise, announcements made in #company-fyi should not be duplicated in #whats-happening-at-gitlab . Be mindful of the attention economy . In order to post or have a message posted in #company-fyi , please reach out to the internal communications team or your function‚Äôs executive who can approve the message and post it. Examples of what should not go in #company-fyi (as per new group guidelines): Competition prize winner announcements Org change or new team member announcements (unless they are E-group) Promotion of an optional non-company-wide internal event Announcement that directly impacts less than 75% of team members Actions required from team members is not critical or timely The above should all go in the new #whats-happening-at-GitLab channel (formerly the #company-announcement channel). graph TB everybody{{\"Do you want to reach the entire company?\"}} important{{\"How important is it?\"}} permission{{\"Do you have permission<br> to post in #company-fyi?\"}} urgent{{\"Is it urgent?\"}} reconsider{{\"Are you sure you can't reach the people you need by posting in topic channels?\"}} channel-important>\"Post in #company-fyi\"] channel-important-ask>\"Ask your function's executive<br> to post in #company-fyi\"] channel-general>\"Post in #whats-happening-at-gitlab\"] channel-topic>\"Post in the most topical channel\"] repost([\"Repost in the 1-2 most appropriate channel(s) based on your topic/audience\"]) no-repost([\"Do not repost\"]) classDef question fill: #ECECFF class everybody,important,permission,urgent,reconsider question; classDef action fill: #a2f2a9 class channel-important,channel-important-ask,channel-general,channel-topic,repost,no-repost action; classDef repost fill: #f2d3a2 class repost,no-repost repost; everybody -- Yes --> important everybody -- No --> channel-topic important -- need-to-know --> permission important -- good-to-know --> reconsider permission -- Yes --> channel-important permission -- No --> urgent reconsider -- Yes --> channel-general reconsider -- No --> channel-topic urgent -- No --> channel-important-ask urgent -- Yes --> channel-general channel-topic --> repost channel-general --> repost channel-important --> no-repost channel-important-ask --> no-repost Posting in #whats-happening-at-gitlab Due to the volume of posts in the Slack channel, we recommend that you do not use #whats-happening-at-gitlab as a sole location for important announcements as information might get lost or muted. Examples of important items include but are not limited to: Anything involving GitLab team member policy, such as changes in benefits, laws, review cycles, etc. Urgent matters that can‚Äôt wait for #company-fyi but still need to be communicated to everyone such as service outages or last minute event changes Meetings Common meeting problems Meetings are incredibly expensive since they require synchronous time. The most common meeting problems can all be addressed by following the above guidelines around scheduling meetings. Some of the most common meetings problems are outlined below: Problem Solution Present instead of Q&A Pre-record presentations on YouTube, so meetings are only Q&A Meetings set up for or default to brainstorming People should default to making thoughtful proposals async and building upon them in meetings, if needed No agenda with edit rights for everyone Ensure that every meeting has an agenda and is available for everyone to edit People are late to meetings or don‚Äôt have time to use the restroom between meetings Use Speedy Meetings to give people breathing space before their next meeting Everyone is responsible for notes If folks are involved in a meeting and have capacity to do so, they should take notes using GitLab‚Äôs Live Doc Meetings principles . This is important, because: Meetings at GitLab should have notes (for a single source of truth and to enable async participation among other reasons) In the absence of this joint commitment to note-taking, this is the type of work that is likely to fall disproportionately to underrepresented groups . This is not in line with our diversity, inclusion, and belonging value . It may look like a few people are already taking notes, do not see this as a deterrent for helping. Initial note takers may be first to show up and then see it as their responsibility to continue if no one else is stepping in. While meetings recordings are helpful, written notes are more efficient to read and offer greater opportunities for async engagement. Takes notes even when a meeting is being recorded. Engaging EBAs in note-taking GitLab Executive Business Administrators sometimes support teams by taking notes. Since note taking takes time away from their other activities and can often be done by other folks, consider the following before engaging an EBA in a meeting solely for note taking purposes. Can the folks already in this meeting cover note taking responsibilities, or is there a reason to engage an EBA in this capacity? Can other folks be identified ahead of time or at the start of the meeting to ensure adequate coverage? How does this stack against the EBAs other priorities? You can check directly with the EBA or their manager. Smart note taking in meetings Note taking helps us to work asynchronously. Team members can add thoughts to an agenda in advance of a meeting and understand what was discussed if they cannot attend. It also offers a record of discussion. Consider the following best practice when taking notes in meetings: If at the start of the meeting, it does not look like all team members will contribute to note-taking, identify a set of note-takers who will be responsible for this activity within the meeting Utilize Zoom‚Äôs AI Companion to create and/or share a meeting summary. Meeting Summary with Zoom AI Companion uses AI technology, which may include third-party models, and allows meeting hosts to initiate an AI-generated summary of their meeting. When the host enables this feature in a meeting, participants may automatically receive a summary after the meeting ends, if the host chose to share it with them. Note-taking can be a lot for a single person to stay on top of‚Äìespecially when there is a fast moving conversation with many speakers. Team members should still feel empowered to contribute by helping with notes as needed, even if there is someone assigned. Another good reference is the CEO Shadow handbook page tips section , specifically It's helpful if shadow one takes notes as the first speaker is talking, then shadow two starts when the next speaker continues the conversation. Shadow one can pick up note taking again when the next speaker contributes. By alternating this way, the shadows are better able to keep up with all the participants in the conversation. This advice can be used in general meetings as well. Ask others to scribe answers in real-time to allow the person who asked the question to focus on the answer. Touch up the answer when the conversation has moved on to something less relevant. It can be hard to keep up with the dialog and capture quality notes when there‚Äôs fast back and forth conversation. Lead by example and write when you‚Äôre not talking, expect others will write when you‚Äôre talking. Focus on noting speakers and their key points over capturing all words said. Extensive note-taking should not happen at the expense of correct note-taking. Write down your questions in the agenda before vocalizing. Always ask people to vocalize their questions to provide the most detailed context and for audio-only playbacks. Use discretion in taking notes if sensitive topics are being discussed. For example, do not takes notes on not-public information if the agenda may be available to an audience who should not be privy to this information. If someone requests folks to stop taking notes, stop for the duration of the discussion unless there is verbal confirmation that note-taking should resume. Ask for the confirmation before typing before you resume note-taking. At the end of the meeting, clearly capture key takeaways, next steps, and DRIs . If you have any questions about what may or may not be a sensitive topic, please refer to our SAFE Framework or reach out via the #safe Slack channel Few meetings with presentations Presenting during meetings requires valuable synchronous time. Instead, recorded presentations make content accessible, prevent confusion, and increase participation for team members that prefer consuming content asynchronously . Remember it is not required to have a presentation or have a pre-recorded presentation. In the video below, GitLab co-founder, Sid Sijbrandij, explains why there are no presentations in most meetings. Pre-recorded presentations enable: Allows time for Q&A, which enables attendees to have their questions answered without running out of time. Reinforces GitLab‚Äôs Bias Towards Asynchronous Communication because it allows a distributed team to consume the presentation asynchronously. Strengthens self-service and self-learning by maximizing the meeting time‚Äôs efficiency to ensure that team members have their voices heard during the Q&A. Standardizes the approach to meetings across the organization. Includes transcripts that can boost content value, help team members focus, and increase accessibility. Flexibility in viewing using rewind and playback speed adjustments. Encourages and enables greater participation from neurodiverse team members who might take added time to process and reflect before asking questions. Allows for selective watching of presentation material for a certain period. There are times when presenting during a meeting is needed. This may occur when adding more context to a specific topic on slides. If this is the case, consider the following: A presentation, with optional attendance and mandatory recording. This will allow clarifying questions to be asked and answered efficiently and enables team members to watch async. Include an async Q&A doc for team members who did not attend the presentation. Ensure the async Q&A doc is linked in the YouTube description. Best Practices for Pre-Recorded Presentations Use Zoom to create a pre-recorded video presentation. Post the recording to the GitLab Unfiltered YouTube channel and attach it to the meeting agenda. At least 24 hours in advance of the meeting, announce in Slack Channels that the meeting has a pre-recorded video, and all attendees are advised to watch beforehand. Framework for meetings with presentations While most meetings should not have presentations, there are a few exceptions. Specifically, we may use synchronous touch points in meetings with large numbers of folks. These tend to be meetings used for building team cohesion and alignment. For example, GitLab Assembly or the Functional Leaders Meeting . GitLab has the following meeting framework for determining which meetings should have presentations: Presentation Approach Types of meetings with few participants Types of meetings with many participants No presentations (async prep) Most meetings AMA Presentations These meetings should not happen Assembly and other large team meetings Meeting introduction guidelines Introductions can be helpful during some external meetings, such as executive sales calls. In those meetings, use these guidelines: Agree ahead of time to do introductions so everyone is prepared for it. Create a list of people with their roles in a shared agenda and use that for the introduction sequence. Each person should introduce themselves so that everyone can see that person on Zoom. The person introducing themselves hands it over to the next person in the agenda. Make sure you‚Äôre never screen sharing when people are introducing themselves. Scheduling meetings Every scheduled meeting should either have a Google Presentation (for example for functional updates that don‚Äôt require participation) or a Google Doc (for most meetings) linked. If it is a Google Doc it should have an agenda , including any preparation materials (can be a presentation). For a step-by-step guide on GitLab meeting best practices, visit our Live Doc Meetings page . No agenda is required for coffee chats . Note that only meetings that are primarily social in nature should be labeled as a coffee chat in the calendar invite. A suggested format for 1:1 agendas can be found on the 1:1 leadership page . For team members working in AMER timezones who regularly collaborate with EMEA team members: If all meeting attendees are located in AMER timezones, the meeting should be scheduled outside of the PST morning block . The PST morning block should be reserved for cross-regional collaboration with team members whose timezones make it harder for them to meet later in the day. For team members working in AMER timezones who regularly collaborate with APAC team members: If all meeting attendees are located in AMER timezones, the meeting should be scheduled outside of the PST afternoon block . The PST afternoon block should be reserved for cross-regional collaboration with team members whose timezones make it harder for them to meet earlier in the day. Due to the number of timezones covered in APAC, the PST afternoon block will only overlap with the Eastern most APAC countries If you want to ask GitLab team members if they are available for an event please send a calendar invite with Google Calendar using your Google GitLab account to their Google GitLab account. When you add a GitLab team member as a ‚ÄúGuest‚Äù in Google Calendar, you can click the See Guest Availability button to check availability and find a time on their calendar. These calendar invites will automatically show up on all parties calendars even when the email is not opened. It is an easier way to ensure everyone has visibility to the meeting and member‚Äôs status. Please respond quickly to invites so people can make necessary plans. If you want to check if a team member is available for an outside meeting, create a calendar appointment and invite the team member only after they respond yes. Then invite outside people. When scheduling a call with multiple people, invite them using a Google Calendar that is your own, or one specific to the people joining, so the calendar item doesn‚Äôt unnecessarily appear on other people‚Äôs calendars. If you want to move a meeting just move the calendar appointment instead of reaching out via other channels. Note the change at the top of the description. Please click ‚ÄòGuests can modify event‚Äô so people can update the time in the calendar instead of having to reach out via other channels. You can configure this to be checked by default under Event Settings .) When scheduling a meeting we value people‚Äôs time and prefer the ‚Äúspeedy meetings‚Äù setting in our Google Calendar . This gives us meetings of, for example, 25 or 50 minutes leaving some time to: Write notes and reflect Respond to urgent messages Take a bio break Stretch your legs Grab a snack When scheduling a meeting, please try to have it start at :00 (hour) or :30 (mid-hour) to leave common start times available for other meetings on your attendees‚Äô calendars. Meetings should be for the time needed, so if you need 15 minutes just book that. When creating a calendar event that will be used company wide, please place it on the GitLab Team Meetings Calendar . That way the event is easily located by all individuals. When you need to cancel a meeting, make sure to delete/decline the meeting and choose the option Delete & update guests to make sure everyone knows you can‚Äôt attend and don‚Äôt wait for you. If you want to schedule a meeting with a person not on the team please use Calendly . Use Google Calendar directly if scheduling with a GitLab team member. Materials Review are scheduled as all day not busy events as a reminder three days before the scheduled call. When scheduling recurring meetings, consider using (UTC+00:00) Coordinated Universal Time as the meeting time zone, so that the meeting time does not change for others when your local time zone changes. Cross-regional Working Hours Recommendations If you‚Äôre scheduling a meeting across multiple regions, consider using the time ranges below to respect common working hours. The suggested times are organized by the regions that you‚Äôre trying to accommodate. Each suggested window is shown in the local time zone. For example, if your meeting includes team members in EMEA and AMER, you could consider scheduling from 8:00 AM to 10:00 AM Pacific Time. Note: Time zone offsets change throughout the year due to Daylight Savings Time, Summer Time, and similar time changes, so these suggested times may be less convenient at different times of year. EMEA/AMER Timezone Start End London/Lisbon 04:00 PM 06:00 PM Paris/Rome 05:00 PM 07:00 PM Istanbul/Tel Aviv 06:00 PM 08:00 PM Abu Dhabi 07:00 PM 09:00 PM Mumbai 08:30 PM 09:30 PM Pacific Time 08:00 AM 10:00 AM Eastern Time 11:00 AM 01:00 PM APAC/AMER Timezone Start End Sydney 09:00 AM 11:00 AM Tokyo 08:00 AM 10:00 AM Hong Kong 07:00 AM 09:00 AM Ho Chi Minh 07:00 AM 08:00 AM Pacific Time 04:00 PM 06:00 PM Eastern Time 07:00 PM 09:00 PM EMEA/APAC Timezone Start End Lisbon/Dublin 08:00 AM 10:00 AM Paris/Rome 09:00 AM 11:00 AM Istanbul/Tel Aviv 10:00 AM 12:00 PM Mumbai 12:30 PM 02:30 PM Ho Chi Minh 02:00 PM 04:00 PM Hong Kong 03:00 PM 05:00 PM Sydney 05:00 PM 07:00 PM Multi-session meeting naming When scheduling meetings with two or more sessions (usually when trying ensure worldwide coverage for all team members), name them after the topic, appended with a session number based on the order they show up in the calendar. Team members will see the meeting invites in their email or calendar in relation to their local time zone and can decide for themselves which session to attend, based on their working hours. Avoid: Terms like friendly or early / late , as these terms are overly subjective. An early meeting for one team member might seem late for someone in a different time zone. Or a west coast AMER meeting might seem ‚ÄúAPAC friendly‚Äù, but not to someone in western APAC who is still asleep when the meeting starts. Using AMER , EMEA , APAC , or only unless the meeting is specifically targeting members of that time zone. These terms give the impression that only team members from those timezones are welcome, when people from any timezone with any working style are welcome. For example: Scheduled time Preferred Avoid 07:00:00 UTC ‚ÄúAll members meeting - Session 1‚Äù ‚ÄúAll members meeting - EMEA/AMER‚Äù 15:00:00 UTC ‚ÄúAll members meeting - Session 2‚Äù ‚ÄúAll members meeting - AMER/APAC friendly‚Äù 23:00:00 UTC ‚ÄúAll members meeting - Session 3‚Äù ‚ÄúAll members meeting - APAC/EMEA only‚Äù Video calls Use video calls if you find yourself going back and forth in an issue/via email or over chat. Guideline: if you have gone back and forth 3 times , it‚Äôs time for a video call. Sometimes it‚Äôs better to not have a video call. Consider these tradeoffs: It is difficult (or impossible) to multi-task in a video call. It may be more efficient to have an async conversation in an issue, depending on the topic. A video call is limited in time: A conversation in an issue can start or stop at any time, whenever there‚Äôs interest. It is async. A video call is limited in people: You can invite anybody into an async conversation at any time in an issue. You don‚Äôt have to know who the relevant parties are ahead of time. Everyone can contribute at any time. A video call is limited to invited attendees (and those who have accepted). You can easily ‚Äúpromote‚Äù an async conversation from an issue to a video call, as needed. The reverse is harder. So there is lower risk to start with an async conversation. For a newcomer to the conversation, it‚Äôs easier and more efficient to parse an issue, than read a video transcript or watch it. Conversations in issues are easily searchable. Video calls are not. Try to have your video on at all times because it‚Äôs much more engaging for participants. Do not worry if you can‚Äôt pay attention at the meeting because you‚Äôre doing something else, you are the manager of your attention. The flip-side of being the manager of your own attention is that others should not hesitate to request your attention when it is needed. During internal calls, it‚Äôs okay to eat on video if you‚Äôre hungry or the call is during your lunch time (please turn your mic off). To maintain professionalism, if you are presenting or facilitating a customer call please try to avoid eating. If eating during a customer call is unavoidable, please turn off your video and mute your mic. You should ensure that you are properly dressed for all video calls. Properly dressed means that you are wearing clothing that covers the top and bottom parts of your body. We do not have a strict dress code policy, but want to make sure that all participants on video calls feel comfortable. If you cannot be properly dressed for the entirety of the call, you should not join, but watch the recording at a later time. Having pets, children, significant others, friends, and family visible during video chats is encouraged. If they are human, ask them to wave at your remote team member to say ‚ÄúHi in your native language‚Äù . Do not feel forced to have your video on, use your best judgement. Additional points for video calls with customers or partners: Results come first. Your appearance, location and background is less important than making customers successful so don‚Äôt wait for the perfect time / place when you can engage a customer right away. Communicating that GitLab is an enterprise grade product and service provider is supported by the way you present yourself. Most of the time, if you would not wear something or present yourself in a certain way at a customer‚Äôs office, candidate interview, or partner meeting in person then it‚Äôs probably not the right choice on a video call with them either. Green screens are a great background solution. It‚Äôs great to work in your garage or basement! Just get a green screen behind you and put up a professional background image to present well externally and still use the rest of the room how you want! We prefer Zoom . Google Calendar also has a Zoom plugin where you can easily add a Zoom link for a video call to the invite. For meetings that are scheduled with Zoom: After reviewing our Zoom handbook page, if you have additional questions, please contact IT in the #it_help Slack channel. Note that if you select to record meetings to the cloud (setting within Zoom), you must include the text [REC] in the meeting title if you want them to be automatically placed in the GitLab Videos Recorded folder in Google Drive on an hourly basis via a scheduled pipeline . You can find these videos in Google Drive by looking under Shared drives and GitLab Videos Recorded . If you do not have access to this drive, contact IT Ops . The script for syncing the files is here . Note also that after a meeting ends, Zoom may take some time to process the recording before it is actually available. The sync to Google Drive happens on the hour mark, so if the recording is not available, it may take another hour to be transferred. Consider using a utility to easily mute/unmute yourself, see Shush in the tools section. Hybrid calls are annoying . Always be sure to advise participants to mute their mics if there is unnecessary background noise to ensure the speaker is able to be heard by all attendees. We start on time and do not wait for people. People are expected to join no later than the scheduled minute of the meeting (before :01 if it is scheduled for :00). The question ‚Äòis everyone here‚Äô is not needed. It feels rude in video calls to interrupt people. This is a situation where we have to do something counter intuitive to make all-remote meetings work. In GitLab, everyone is encouraged to interrupt the speaker in a video call to ask a question or offer context. We want everyone to contribute instead of a monologue. Interrupting can be done by clicking ‚ÄúRaise Hand‚Äù in Zoom, by physically raising your hand on video, or by interrupting verbally. As a speaker, allow yourself to be interrupted. As a listener, advocate (verbally if necessary) for those who have raised their hand. Just like in-person meetings be cognizant of when, who, and how you interrupt, we don‚Äôt want manterrupting . We end on the scheduled time. It might feel rude to end a meeting, but you‚Äôre actually allowing all attendees to be on time for their next meeting. Do not use the chat of products like Zoom to communicate during the call, use the linked document instead. Zoom Chat has been configured for a 30 day retention. This allows everyone to contribute additional questions, answers, and links in the relevant place. It also makes it easier for people in conflicting timezones to contribute questions before the call and makes it easier to review questions and answers after the call, which can be before watching the recording. You do not need to remind other people to vocalize their questions. Just say their name and a keyword of the question, e.g. ‚ÄòJay about credit-cards‚Äô. Every comment is document worthy, even small support comments such as +1 or Very Cool! . We encourage the recording and sharing of everything to our YouTube Unfiltered channel . It is unusual to smoke in an open office or video conference, vaping is associated with this. For this reason we ask that you don‚Äôt vape during calls, and if you absolutely have to, kindly switch your camera off. Speak up when you notice something is not working. If you notice someone‚Äôs microphone, web cam or latency is causing issues for them it is good to speak up. On a video call it can be harder for the speaker to notice that they aren‚Äôt being understood compared to a face to face conversation. As such you will be doing them a favour by speaking up early to let them know that they are having a problem. Also see Hear nothing say something for further explanation. You are the manager of your attention You are the manager of your attention, and you decide when you do or don‚Äôt pay attention in a meeting. You will always have more work than time in your life. If you get invited to a meeting you don‚Äôt think you should go to, you should decline the meeting. It is better to cancel than to show up and not pay attention. On the other hand, not every part of a meeting is relevant, but it can sometimes be helpful to have more people in a call. If you only have one discussion point, if possible, try to reorder the meeting agenda to have your point first and then drop from the call. If you get asked a question when you‚Äôre not paying attention, it is an okay use of time to repeat a question every now and then. If training is required for one‚Äôs role, team members should plan to give the training full attention‚Äìespecially if engagement in discussions or breakout rooms is required. If training is ‚Äônice to learn‚Äô or ‚Äòoptional‚Äô for team members, multi-tasking can be done at the team members discretion. We don‚Äôt use the first 15 minutes of a meeting to read the materials like they do at Amazon . You can use the start of a meeting to review the materials for the meeting if you need to, given you do not have to be paying attention, but that should not delay the start of the meeting for the people that already have questions based on the materials. Meetings start on time at GitLab. Do not use your camera to signal you‚Äôre not paying attention; cameras should always be on . Do not ask meeting attendees to pay attention There are too few hours in a week, so we expect each team member to manage their attention . If you‚Äôre hosting a meeting, don‚Äôt tell people to give you their attention or stop multi-tasking. Respect each team member‚Äôs agency over their time. Instead of demanding attention, earn participants‚Äô attention by organizing and facilitating meetings so they are compelling to attendees. First post is a badge of honor You should take pride in being the first person to add a question to a meeting agenda, however unlike the First post meme we do want the first post to be more than just ‚ÄúFirst!‚Äù. The meeting DRI will be happy to see there is a question ready before to kick off the meeting. The Meeting DRI should remember to thank the person for asking the first question. Do not do a countdown before ending a call Never do a countdown or say something like. ‚ÄúI‚Äôll give it x seconds‚Äù, people are very unlikely to ask a question if you do that. Either ask for a question, wait for a question, or end the call. Hybrid calls are annoying In calls that have remote participants everyone should use their own equipment (camera, headset, screen). When multiple people share equipment the following problems arise for remote participants : Can‚Äôt hear the sharing people well Background noise since the microphone of the sharing people is on all the time Can‚Äôt clearly see facial expressions since each face takes up only a small part of the screen Can‚Äôt easily see who is talking since the screen shows multiple people Hard getting a word in since their delay is longer than for the sharing people The people sharing equipment also have problems because they don‚Äôt have their own equipment: Can‚Äôt easily screen share something themselves Trouble seeing details in screen sharing since the screen is further away from them Can‚Äôt scroll through a slide deck at their own pace Sharing people can‚Äôt easily participate (view or type) in a shared document with the agenda and meeting notes. The disadvantages for remote people are much greater than for the sharing people and hard to notice for the sharing people. The disadvantages cause previously remote participants to travel to the meeting to be in person for a better experience. The extra travel is inefficient since it is time consuming, expensive, bad for the environment, and unhealthy. Theoretically you can have multiple people in a room with their own equipment but in practice it is much better to be in separate rooms: It is annoying to first hear someone talk in the room and then hear it over audio with a delay. It is hard to consistently mute yourself when not talking to prevent someone else‚Äôs voice coming through your microphone as well. Types of meetings Ask Me Anything meetings Ask Me Anything meetings can be a useful opportunity for team members to meet a new leader, learn more about an existing team member, or gain clarity on a recent change. Format: AMAs use the whole meeting time for questions from attendees, answered by the host. Fireside Chats Fireside chats are informal conversations between a host and a guest. The guest is typically a new leader, board member, or guest speaker. They are a useful opportunity to learn specific information about these individuals and their professional careers and personal interests. Fireside chats allow the audience to learn more about the guests in a casual and approachable setting. Format: In advance of the call, the host will prepare questions and share them with the guest. During the call, the host will moderate the conversation with the guest, by verbalizing the prepared questions. There is specific amount of time reserved at the end of the agenda for questions from attendees. Walk and Talk calls A Walk and Talk call is when team members step away from their computers and get outside for a meeting. The difference between a coffee chat and a Walk and Talk call is that a Walk and Talk call be held with people that you interact with frequently at GitLab. It could be social in nature or focused on a specific problem/topic that needs to be discussed. If it‚Äôs a problem-solving focused discussion, the outcome should be captured in a merge request. It should not be used if the problem being discussed requires screen sharing or detailed note taking. There are great physical and mental health benefits to a walk and talk call. There are also benefits with increased focus and creativity . A Walk and Talk can also help prevent Zoom fatigue . The team members can use Zoom on their mobile device with the audio only function, or call one another from their preferred mobile device. A walk and talk call should be agreed to in advance to ensure that the local weather is compatible for a walk in both locations and that the walk and talk call fits into both team members‚Äô schedules. We‚Äôve created a Slack channel #walk-and-talk-meetings where, if you‚Äôd like, you can share pictures from your walking meetings. Release retrospectives and kickoffs After GitLab releases a new version every month , we have a 30-minute call a few days later reflecting on what could have been better: What went well this month? What went wrong this month? What could we have done better? We spend the first part of the retrospective meeting reviewing the action items from the previous month. On the 8th of each month (or the next business day), we have a kickoff meeting for the version that will be released in the following month. The product team and other leads will have already had discussions on what should be prioritized for that release. The purpose of this kickoff is to get everyone on the same page and to invite comments. Both the retrospectives and kickoffs are live streamed to our GitLab Unfiltered YouTube channel and posted to our Unfiltered YouTube channel . Deep Dives As GitLab continues to grow, sharing knowledge across the community becomes even more important. The Deep Dives page describes initiatives we are trying to encourage. This aligns with how we work since everything at GitLab is public by default . Daily Sync Escalation Process GitLab has a specific process to follow in crisis situations to ensure effective communications. Details can be found in the internal handbook . Presentations All presentations are made in Google Slides using our templates . Please allow anyone at GitLab to edit the presentation (preferred) or at least comment on the presentation. If the content can be public use File > Publish to the web > Publish to get a URL and paste that in the speaker notes of the first slide (commonly the title slide). The title of every slide should be the message you want the audience to take away, not the subject matter. So use ‚ÄòOur revenue more than doubled‚Äô instead of ‚ÄòRevenue growth‚Äô. Slide titles should not be more than one line. Be concise in highlighting the key point that you want to make. Do not add a period at the end of a title. During introductions, make sure that nobody is presenting. We remember people better and have more empathy when we clearly see peoples faces and expressions. At the end of the presentation, when you go to Q&A, stop presenting in Zoom. This way the other people can see the person who is speaking much better. All presentations at GitLab should be based on screenshots of the handbook, issues, merge requests, review apps, and data from GitLab Insights and Sisense charts. In most cases it shouldn‚Äôt be needed to make content uniquely for the presentation. If you need something that doesn‚Äôt exist yet add it to the place it belongs and then copy it into the presentation. This way we can have a Single Source of Truth for everything we do. By using screenshots you indicate to people you did the right thing and they can find the canonical source in the appropriate place. Having to find information by digging through old presentations doesn‚Äôt scale. Consider linking the screenshot to the original source. Do not use cumulative graphs internally. For example total ARR, total user, total contributors, or total Merge Requests. Instead use IACV per dollar spend, users added per month, contributions per month, or MR rate . Cumulative graphs can hide trends and are far more likely to be misinterpreted . The only acceptable use of cumulative graphs is for external presentations where they are expected by the audience and commonly used. When your presentation includes graphs or other data, make sure your graphs have clear titles and dimensions. Make sure your data has significant figures and labels. For example, use ‚ÄòJanuary: 1.95M projects‚Äô instead of ‚ÄòJanuary: 1.95M‚Äô. Keep in mind that your audience may not have the full context, especially if they are reading the presentation asynchronously. When giving a presentation, your commentary should not be a regurgitation of the words in the slide. The audience can read the slide for themselves; your commentary should focus on the most important takeaways. Video and presentation tips with Lorraine Lee On 2022-01-20, the L&D team hosted Lorraine Lee for a live speaker series on video and presentation techniques in an all-remote workspace. Key points addressed in the training include: Increase your confidence on video using lighting, visuals, and curating your environment Keep your audience engaged with movement, power words, and the think/do/feel matrix Stay connected with your audience by smiling, making eye contact, and framing yourself in video Insert energy by standing up, projecting, and using hand gestures Watch the replay below: Writing style guidelines As you‚Äôre creating external or business content for GitLab, please refer to the GitLab Content Style Guide . For technical content, you can reference this word list . This list offers additional guidance for written communication at GitLab: Do not use rich text, it makes it hard to copy/paste. Use Markdown to format text that is stored in a Git repository. In Google Docs, use ‚ÄúNormal text‚Äù using the style/heading/formatting dropdown and paste without formatting. Read our Markdown Style Guide for more information when using Markdown. Do not use ALL CAPS because it feels like shouting . However, there is the #all-caps Slack channel for your good-natured shouting needs. We use Unix style ( lf ) line endings, not Windows style ( crlf ), please ensure *.md text eol=lf is set in the repository‚Äôs .gitattributes and run git config --global core.autocrlf input on your client. When specifying measurements, please include both Metric and Imperial equivalents. When mentioning currency amounts that team members may need to convert to their local currency (e.g. benefits, expenses, or bonuses), link those amounts to our Exchange Rates section (e.g. 500 USD ). Monetary amounts shouldn‚Äôt have one digit, so prefer $19.90 to $19.9. GitLab is an internationally diverse company. US-based team members should not refer to team members outside the US as ‚Äúinternational‚Äù. Instead, use ‚Äúnon-US‚Äù. Please also avoid the use of ‚Äúoffshore/overseas‚Äù to refer to non-American continents. If you have multiple points in a comment or email, please number them. Numbered lists are easier to reference during a discussion over bulleted lists. When you reference an issue, merge request, comment, commit, page, doc, etc. and you have the URL available, please include it. In making URLs, always prefer hyphens to underscores, and always use lowercase. The community includes users, contributors, core team members, customers, people working for GitLab Inc., and friends of GitLab. If you want to refer to ‚Äúpeople not working for GitLab Inc.‚Äù, just say that, and don‚Äôt use the word ‚Äúcommunity‚Äù. If you want to refer to people working for GitLab Inc., you can also use ‚Äúthe GitLab Inc. team‚Äù, but don‚Äôt use ‚ÄúGitLab Inc. employees‚Äù. When we refer to the GitLab community (excluding GitLab team members), please say ‚Äúwider community‚Äù instead of ‚Äúcommunity‚Äù. All people working for GitLab (the company) are the GitLab team . We also have the Core team that consists of volunteers. Please always refer to GitLab Inc. people as GitLab team members, not employees. Use inclusive and gender-neutral language in all writing. Always write ‚ÄúGitLab‚Äù with ‚ÄúG‚Äù and ‚ÄúL‚Äù capitalized, even when writing ‚ÄúGitLab.com‚Äù, except within URLs. When ‚Äúgitlab.com‚Äù is part of a URL, it should be lowercase. Do not use a hyphen when writing the term ‚Äúopen source‚Äù except where doing so eliminates ambiguity or clumsiness. If an email needs a response, write the answer at the top of it. Use the future version of words, just like we don‚Äôt write internet with a capital letter anymore. We write frontend and webhook without a hyphen or space. Our homepage is https://about.gitlab.com/ (with the about. and with https ). If you use headers, properly format them ( ## in Markdown, ‚ÄúHeading 2‚Äù in Google Docs); start at the second header level because header level 1 is for titles. Do not end headers with a colon. Do not use emoji in headers as these cause links to have strange characters. Do not use acronyms when you can avoid them. Acronyms have the effect of excluding people from the conversation if they are not familiar with a particular term. Example: instead of MR , write merge request (MR) . If acronyms are used, expand them at least once in the conversation or document and define them in the document using Kramdown abbreviation syntax . Alternatively, link to the definition. If you don‚Äôt know the meaning of an acronym, ask. It‚Äôs always ok to speak up . Communicating dates and time For external content, refer to the guidance in the GitLab Content Style Guide . For internal content, use ISO dates: yyyy-mm-dd For months, use yyyy-mm , so 2018-01 for January. Refer to a year with CY18 (never with 2018) and a quarter with CY18-Q1 to prevent confusion with fiscal years and quarters. If the year is obvious from the context it is OK to use Dec 4, but not 12/4. GitLab operates on a Fiscal Year offset from the calendar year. When referring to a fiscal year or quarter, please use the following abbreviations: ‚ÄúFY20‚Äù is the preferred format and means: Fiscal Year 2020, the period running from February 1, 2019 through January 31, 2020 ‚ÄúQ1‚Äù = the first quarter of the current Fiscal Year, so on Feb 1, 2020, ‚ÄúQ1‚Äù is the period from Feb. 1, 2020 through April 30, 2020. Note that Epics in GitLab follow Calendar Years and Quarters. When referring to a quarter in a future or past year, combine the two above: ‚ÄúFY21-Q1‚Äù When financial data is presented, include a note to indicate fiscal year (e.g. ‚ÄúFiscal Year ending January, 31 ‚ÄòYYYY‚Äù) For time formatting guidelines, refer to the GitLab Content Style Guide . Please remember that not everyone is working in the same timezone; what may be morning for you is evening for someone else. Try to say 3 hours ago or 4 hours from now, or use a timestamp, including a timezone reference. Don‚Äôt use ‚ÄúEOD‚Äù or ‚Äúend of day‚Äù (‚ÄúCOB‚Äù or ‚Äúclose of business‚Äù, ‚ÄúEOB‚Äù or ‚Äúend of business‚Äù), unless you are okay with a deliverable being due at the end of anywhere on earth . Team members communicate across timezones, where ‚Äúend of day‚Äù does not specify the exact date and time. When you want something due at a specific time, communicate the date and time by when the request should be done, for example: Please review before 2023-06-10 5PM PT . Visuals Many times an explanation can be aided by a visual. Whenever presenting a diagram, we should still allow everyone to contribute. Where possible, take advantage of the handbook‚Äôs support for Mermaid . If you are new to using Mermaid or need help troubleshooting errors in your Mermaid code, the Mermaid Live Editor can be a helpful tool. Where taking advantage of Mermaid isn‚Äôt possible, link to the original in our Google Drive so that the diagram can be edited by anyone. Ubiquitous language At GitLab we use ubiquitous language to increase communication efficiency. This is defined in Domain-driven design as: ‚ÄúA language structured around the domain model and used by all team members to connect all the activities of the team with the software.‚Äù We use it for activities in GitLab, even ones not implemented in software. By having ubiquitous words to identify concepts we prevent confusion over what is meant, for example we refer to parts of our organization as a function, department, or group depending on exactly what is meant. Make sure that domains don‚Äôt overlap, for example organization size and deal size don‚Äôt reuse words to prevent overlap. If a term is ambiguous don‚Äôt use it, for example our hiring team uses the terms roles and vacancies , but avoid the ambiguous word job . Make sure that projects and working groups have clear and direct names. Prefer ‚ÄúCI Spend Reduction Working Group‚Äù to ‚ÄúProject Raven Working Group‚Äù. Make sure that people can infer as much as possible from the word, for example our subscription options allow you to know if someone is using self-managed or GitLab.com. Make sure terms don‚Äôt overlap without clearly defining how and why, for example see our tier definitions . Keep terms to one or at most two words to prevent people from introducing ambiguity by shortening a term. When using two words make the first word unique because people tend to drop the second word more often. MECEFU terms MECEFU is an acronym for Mutually Exclusive Collectively Exhaustive Few words Ubiquitous-language. You pronounce it: MessiFu. Think of the great soccer player Lionel Messi and his kung fu or soccer fu skills. We want to use MECEFU terms to describe a domain to ensure efficient communication. MECEFU terms have 4 characteristics that help with efficiency: Mutually Exclusive: nothing is referenced by more than one term Collectively Exhaustive: everything is covered by one of the terms Few words: the longer terms are the more likely it is people will not use all of them and cause confusion, therefore consider two words as the upper limit for a single term. Avoid acronyms because they are hard to remember (we‚Äôre open to a few words to replace MECEFU as an acronym :) Ubiquitous language: defined above An example of a MECEFU term is our sales segmentation : Mutually Exclusive: There is no overlap between the numbers and there is a single dimension. Collectively Exhaustive: Everything for 0 to infinite employees is covered. Few words: Mid-market is a natural combination and SMB is abbreviated. Ubiquitous language: We‚Äôre not using the word ‚ÄòEnterprise‚Äô which already can refer to our Enterprise Edition distribution. One nit-pick is that the Medium of SMB and Mid of Mid-Market sound very similar. Simple language Simple Language is meant to encourage everyone at GitLab to simplify the language we use. We should always use the most clear, straightforward, and meaningful words possible in every conversation. Avoid using ‚Äúfluff‚Äù words, jargon, or ‚Äúcorporate-speak‚Äù phrases that don‚Äôt add value. When you don‚Äôt use Simple Language, you: Confuse people and create a barrier for participants of your conversation. Cause others to not speak up in a meeting because they don‚Äôt understand what you‚Äôre saying. Are not inclusive of those whose first language is not English. Do not add value with your words. When you do use Simple Language, you: Get work done more efficiently. Build credibility with your audience (your team, coworker, customer, etc.). Keep people‚Äôs attention while you‚Äôre speaking. Come across more confident and knowledgeable. Here‚Äôs an example: Original sentence We‚Äôre now launching an optimization of our approach leveraging key learnings from the project‚Äôs postmortem. A Simple Language sentence We‚Äôre creating a new plan based on what we learned from this project. Simple Language is important both when we‚Äôre speaking to other team members and when we‚Äôre representing GitLab to people outside the company. Be sure to use Simple Language in written communications as well. Our handbook, website, docs, marketing materials, and candidate or customer emails should be clear, concise, and effective. Corporate marketing maintains guidelines on GitLab‚Äôs tone of voice . Instead of‚Ä¶ Try‚Ä¶ Getting buy-in/Getting alignment Asking for feedback since DRIs make decisions Synergy Effective Collaboration Get all your ducks in a row Be organized Do not let the grass grow too long Work quickly Leverage Use more explicit phrasing- debt, etc. Send it over the wall Share it with a customer Boil the ocean Waste time Punt Make less of a priority Helicopter view/100 foot view A broad view of the business Turtles all the way down Cascade through the organization When someone has spare/extra cycles When someone is available Inefficient things shouldn‚Äôt sound positive For example, do not suggest that you‚Äôre ‚Äúworking in real-time‚Äù when a matter is in disarray. Convey that a lack of organization is hampering a result, and provide feedback and clear steps on resolving. Do not use a cool term such as ‚Äútiger team‚Äù when the existing term of ‚Äúworking group‚Äù is more exact. While cool terms such as these may be useful for persuading colleagues to join you in working towards a solution, the right way isn‚Äôt to use flowery language. The last example is when we used ‚ÄòPrioritizing for Global Optimization‚Äô for what we renamed to headcount reset. When we renamed it we saw a good reduction in the use of this disruptive practice of moving people around. Using additional languages Using American English as our standard language supports our values such as efficiency, results, and transparency. Careful use of another person‚Äôs language can be a celebration of diversity and build an atmosphere of inclusion. The guidance in this section applies to written one-to-one communication, for example, merge request comments between an author and reviewer, not merge request descriptions or commit messages. Also keep the following in mind: Use of an additional language is optional. Stick to the few simple phrases in the table below. Always include the language used and a translation to English. Team members can choose to indicate the languages they speak in their Slack profile. When in doubt, use American English. Here‚Äôs an example: Hey @nmalcolm, I left some suggestions for your merge request. Ka mau te wehi! (Te Reo MƒÅori: great work / well done!) „ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô (Japanese: thank you very much) for the review @cynthia! Language Hello Thank you Great work / well done Croatian Hvala Japanese „ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô Te Reo MƒÅori Kia ora NgƒÅ mihi Ka mau te wehi! Avoid using Git in Project Names Avoid using Git in the naming of internal and external company related programs (BagGit, GitFit, Gitty, GitIt, etc.). Referencing Git creates an inaccurate perception that GitLab has a narrow focus. While GitLab started as a source control platform, it has become The DevOps Platform . Email We have a low internal email culture, as we see greater efficiency in other forms of communication (e.g. Slack). If you are emailing, please use the following guidelines: Send one email per subject as multiple items in one email will cause delays (have to respond to everything) or misses (forgot one of the items). Always reply to emails by replying to all, even when no action is needed. This lets the other person know that you received it. A thread is done when there is a single word reply, such as OK, thanks, or done. If you‚Äôre sending an email to a large group of people (or a distribution list), put those recipients in BCC (rather than in the ‚ÄúTo‚Äù field) so that a reply all won‚Äôt ping hundreds of people. If you forward an email without other comments please add FYI (for your information), FYA (for your action), or FYC (for your consideration). If you forward an external request with FYC it just means the person who forwarded it will not follow up on the request and expects you to decide if you should follow up or not, the terms comes from movie promotion to voters . Email forwarding rules are specified in the shared Email, Slack, and GitLab Groups and Aliases Google Doc accessible only to people in the company. If you want to be added or removed from an internal alias, change a rule, or add a forwarding email alias, please suggest an edit in the doc and submit a new access request . Only Google Workspace domain admins are allowed to provision Google Groups and email distributions. Emails are asynchronous, for example, if your manager emails you on a weekend it is fine to reply during the workweek. If an email is or has become urgent feel free to ping people via chat referencing the subject of the email. If you or your team needs to send an email to a group of team members, not grouped in a current Google email group , and specifically related to personally identifiable information (location, state, country, etc.) please contact a Total Rewards Analyst at total-rewards@gitlab who can create an email list from Workday data, with approval. Where appropriate, consider using professional salutations including Hi or Hello and avoid colloquial expressions such as Hey, Oh, or Sup. Sometimes only the person‚Äôs name is suitable. The level of formality should often mirror the formality from previous messages when communicating with internal team members as well as external persons. Try to always use a person‚Äôs name when starting or responding to a message, especially if there are multiple persons cc‚Äôd, so that the addressee knows you are addressing them. Make sure all relevant letters and words that need capitalization are capitalized, such as the start of sentences or the word ‚ÄúI‚Äù. Proofread your messages so that sentences are punctuated correctly, typos are fixed, and grammar is corrected. Consider using the really helpful Grammarly tool - this tool is great for both native English speakers and for those who use English as an additional language. All messages and replies are signed with a professional send-off (ex. Best regards), your name, and your signature block. Slack Slack is used for: Internal-only communication and announcements impacting all team members Linking a GitLab Issue or Merge Request (confidential if necessary) where discussion can take place is encouraged when sharing announcements on Slack Consider creating a Manager Mention MR , so that we can collaborate with Efficiency and Transparency across threads Company newsletters and team updates Asynchronous team standups, questions, and quick collaboration Informal communication Use a bias for action to quickly move conversations that require collaboration and action out of Slack and into an issue. Only 90 days of Slack activity will be retained, so Slack should specifically NOT be used for: Obtaining approvals Documenting decisions Storing official company records or documents Sharing personal or sensitive information regarding any individuals Internal Slack messages between team members are still considered professional communication. Please do not use or add emoji‚Äôs to Slack that are of a political, religious or of a sexual nature. You can refer to the Religion and politics at work section of the handbook. When in doubt do not use or add the emoji. If you have any concerns about an emoji that was used, please reach out to the author or if you are not comfortable doing so please reach out to your People Business Partner . There is a lot of information pertaining to Slack, as it is a critical part of GitLab‚Äôs communication. See the Slack tools and tips page . General guidelines Everyone can contribute, and while opinions are important to provide perspective, we value proposals and iteration . If the subject is of value to the wider community, consider commenting on an existing issue or opening a new merge request instead. Use the :white_check_mark: emoji or similar to indicate an inquiry has been answered. Anyone can add the emoji. If you‚Äôre not sure, then feel free to leave it up to the person who asked. An emoji indicator is particularly helpful in channels where lots of questions are posted, such as #questions , and #git-help . In general, you can think of emoji reactions as equivalent to body-language responses we use in real-life conversations, such as nodding your head as encouragement when a verbal (or in Slack, written) response might be too much. However, please be aware that use and understanding of emoji, like body-language, is not universal. Others may not communicate via those means the same way that you do, particularly those who are Autistic or otherwise neurodivergent. If in doubt, you can use text to clarify. In both public and private channels, threads are valuable for keeping conversations together. If you want to respond to a question or comment in a channel, please start a thread instead of responding below them in the channel. This helps to keep the discussion in one place where it is easy to follow, and reduces noise as each message in a thread does not result in an unread message for everyone in the channel. Unless you‚Äôre in an active chat, don‚Äôt break up a topic into multiple messages as each one will result in a notification which can be disruptive. Use threads if you want to provide extra info to the question/comment you posted. If you are having a hard time keeping up with messages, you can update your preferences to have Slack email you all notifications. To change the setting, go to Preferences > Notifications > When I'm not active on desktop... and ‚Äúsend me email notifications.‚Äù If you agree in a message to start a video call (typically by asking ‚ÄúCall?‚Äù) the person that didn‚Äôt leave the last comment starts the call. So either respond to the ‚ÄúCall?‚Äù request with a video link or say ‚ÄúYes‚Äù and let the other person start it. Do not say ‚ÄúYes‚Äù and start a call 5 seconds later since it is likely you‚Äôll both be creating a video call link at the same time. As an admin of the Slack workspace, if given the option to ‚ÄúDisable future attachments from this website‚Äù when removing an attachment from a message this will block the link/domain from unfurling in the entire Slack workspace . Be careful and deliberate when choosing this option as it will impact every user in the workspace. When referencing a Slack thread in a GitLab.com issue, don‚Äôt only link to the thread. Not only will people outside of the GitLab organization be unable to access the content, but the link will expire after the Slack retention period expires. Instead: Review the contents for confidentiality of users, customers, or any other sensitive information before posting. Copy and paste the relevant parts of the thread into the issue using blockquote formatting. Link to the Slack thread and include (internal) after the link. For example: https://gitlab.slack.com/archives/C0AR2KW4B/p1555347101079800 (internal) Post a link to the issue note in the Slack thread to let others know that discussion has moved to the issue. When selecting your Slack display name, please do not have your name in all capital letters as this is often associated as shouting in written communications. Avoid direct messages Note: We don‚Äôt use the term private message , because these direct messages are not inherently private like a phone call or private letter. The messages are potentially accessible by Workspace admins or via Backups. Slack refers to these types of messages as direct messages themselves . When using Slack for work-related purposes, please avoid direct messages. Direct messages discourage collaboration . You might actually be contacting the wrong person, and they cannot easily redirect you to the right person. If the person is unavailable at the moment, it is less efficient because other people cannot jump in and help. Use a public channel and mention the person or group you want to reach. This ensures it is easy for other people to chime in, involve other people if needed, and learn from whatever is discussed. If someone sends you a work-related direct message, it is okay to let them know you‚Äôd like to take the conversation to a public channel, linking to this section of the handbook. The process might look something like: In the direct message: Thanks for reaching out, that's a great question/idea I think the rest of the team could benefit from. I'm going to move this to #public-channel based on [our desire to avoid direct messages](/handbook/communication/#avoid-direct-messages) In the appropriate public channel: @Person asked \"question\" in a DM, pulling that out here if anyone else has input. Answer the question in a thread on that channel message, allowing others to benefit. If you find yourself getting a lot of direct messages that should go in a public channel, consider changing your Slack status to an attention grabbing emoji and set it to something like: Please consider posting in a public channel before direct messaging Why direct message me when you can post in a public channel? If you must send a work-related direct message, don‚Äôt start a conversation with ‚ÄúHi‚Äù or ‚ÄúHey‚Äù as that interrupts their work without communicating anything. If you have a quick question, just ask the question directly, and the person will respond asynchronously. If you truly need to have a synchronous communication, then start by asking for that explicitly, while mentioning the subject. e.g., ‚ÄúI‚Äôm having trouble understanding issue #x, can we talk about it quickly?‚Äù. Do not use group direct messages Use private channels instead of group direct messages. Group direct messages are very hard to maintain, track, and respond to. They also have a key limitation in that you can‚Äôt add people to the conversation. This is a hindrance to collaboration and transparency. Consider whether the conversation can take place in a public channel. If not, please use a private channel instead. This channel may have a short-term purpose. It is acceptable to leave the channel and/or archive it if you are no longer an active participant or the channel is no longer in use. As we grow headcount, we exponentially increase the lines of communication- 3 people have 3 communication lines, 4 have 6, and 41 have 820. As a result, there is a natural tendency for people to prefer private channels of communication. The intentions are good, as people are looking to reduce noise for others, but this can lead to the same problems as described elsewhere on this page, notably: Communication is siloed. As we grow, people may be reaching out to the wrong person. If you have a question, other people might have it too. Slack is our primary source of chat communication and is where many personal interactions happen. We want to continue to encourage folks to build personal relationships with one another which will often happen over DMs. Use public channels If you use Slack and plan to message 3 or more people, we recommend a channel for customer/issue/project/problem/partnership. Learn about common channels and channel-naming conventions . If something is important but not urgent - like complimenting or encouraging the entire team - use email or post in the channel without @ -mentioning the team. It‚Äôs not rude to leave a channel. When you‚Äôve had your questions answered or are no longer interested, feel free to leave the channel so it won‚Äôt distract you anymore. The usage of ChatBots for integrations can sometimes depend upon the name of the channel. You should consult the channel about such integrations before changing the name of commonly used/popular channels to avoid inadvertently breaking integrations. Be respectful of others‚Äô time Start by understanding what we mean by respecting time. We should err toward putting material into channels over DMs and public channels over private channels even though we understand that this will generate more messages that can be read by more people. Respecting time is not about reducing the overall volume of channel messages that team members receive. It‚Äôs about making sure that messages are targeted, expectations for asynchronous responses are clear, and we are communicating with consideration. The following tips provide ways to work respectfully with others given this context, though is not an exhaustive list: If you‚Äôre only referring to someone, but don‚Äôt actually need their attention, and want to spare them from getting notified, spell out their name normally without @ mentioning them. You also do not need to @ mention someone if they are part of a Slack thread unless you need their attention (for them to review, respond, etc.), since Slack has a dedicated view for threads. Slack messages should be considered asynchronous communication, and you should not expect an instantaneous response; you have no idea what the other person is doing. Do not feel obligated to respond to Slack messages when you are not working. Feel free to send a colleague a link to these guidelines if the communication in Slack should be done asynchronously . Please avoid using @here or @channel unless this is about something urgent and important. In chat, try to keep the use of keywords that mention the whole channel to a minimum. They should only be used for pings that are both urgent and important, not just important. By overusing channel mentions, you make it harder to respond to personal mentions promptly since people get pinged too frequently. Additionally, if you are planning to @mention a specific team ( Slack User Group ), consider the size of the group you are mentioning ( see group membership ) and the impact of pinging all of these people for the particular situation. If something is urgent and important: Use @here to notify all currently active members in the room. Please only use @here if the message is important and urgent. Use @channel to notify ALL members in the room, irrespective of away status. Please only use @channel if the message is important and urgent. If you are aware that your teammate is on vacation, avoid mentioning them in a high volume channel. It will be difficult to find the information or question when they return. If you need to ensure they refer back to the thread, ensure to send them a link to the relevant Slack message through a direct message. Questions If you have a question that you can‚Äôt find the answer to in our handbook (or you need help finding something in the handbook) team members across the company are here to help. Go directly to the subject matter experts/source in the designated slack channel to ensure your question is addressed. If your question doesn‚Äôt relate to any of the existing topics: Ask it in the #questions Slack channel Once you receive an answer, document it in the handbook and post the MR link in your question thread ‚úîÔ∏è once you‚Äôve been helped When would GitLab use Corporate Export? The times this feature would be used would be to comply with certain obligations. Corporate Export must be enabled by Slack in accordance with Slack‚Äôs policy, which can be found here . Examples of instances where GitLab may need to use this feature may include, but are not limited to, those situations listed in Slack‚Äôs documentation . Are my direct messages and private channel conversations completely private? No. The Slack Workspace Owner has the ability to export data from all direct messages and private channel conversations for the maximum retention period set by GitLab, which is currently set for 90-days. All messages that are older than 90-days cannot be exported by the Workspace Owner or any other Team Member at GitLab. While messages are not actively monitored, GitLab reserves the right to monitor its software for the reasons stated in its Employee Privacy Policy , including, but not limited to, the safety and protection of our Team Members, the protection of our intellectual property, and the exercise or defense of legal claims. Please keep GitLab values in mind when communicating directly with other team members. If you have a confidential personal issue that you do not feel comfortable discussing via a business-provided internal communications tool, it is recommended to use a personal form of communication such as a text message or phone call. For additional questions, please address in the issue . Emergency chat Slack is down To use the ‚ÄúSlack Down!‚Äù group chat on Zoom: In the Zoom desktop app go to the Team Chat tab Click + Click Join a Channel Search Slack down! Click Join Once service is restored, go back to Slack. Zoom is down To use Slack Huddle: Navigate to the appropriate Slack channel or direct message. Use /huddle to trigger a huddle, which supports both audio and video calls. You may need to give permissions if it‚Äôs the first time you are using Slack calls. Once service is restored, go back to Zoom. Slack and Zoom are down Join the Slack Down! room on Hangouts Chat. Once service is restored, go back to Slack and Zoom. Types of documents Google Docs Never use a Google Doc / Presentations for something non-confidential that has to end up on the website or the handbook . Work on these edits via commits to a merge request. Then link to the merge request or diff to present the change to people. This prevents a duplication of effort and/or an out of date handbook. Google Docs can be useful when rapidly iterating /commenting/suggesting on the content, but if the content is meant to be long lived it should be moved to the handbook as an SSOT and deprecated with a link to the handbook page. If the content is short lived, e.g. one-time report that won‚Äôt be referred to beyond 2-3 weeks, it can remain in a Google Doc or presentation . Pageless is the GitLab preferred format Google Docs Pageless format is the preferred format for company documents that won‚Äôt be printed. If you set your default to Pageless then this will be applied to all future documents as well. If a document is likely going to be printed (for example, a contract) the older paged style is acceptable. See Good practices and helpful tips for help navigating the pageless format. Link sharing If you do need a Google Doc, create one with your company Google Workspace (formerly G Suite) account and set the visibility, access controls and searchable flag according to the following guidelines. The recommended defaults when sharing a document for GitLab internal purposes is setting visibility to GitLab , access to Editor and searchable Can find in search results to ensure everyone can contribute! Note: To our knowledge, it is not possible to set the default to Can Edit and you have to change the permissions from View manually. We hope that Google adds this capability in the future. Visibility Setting Use Cases Anyone with the link Avoid this setting. Instead, choose GitLab , then explicitly share the document with desired external individuals. Only use this if you want the document to be public but not indexed by Google. GitLab (Recommended Default) This is the recommended default as it allows anyone within GitLab to easily discover documents via searching for their name within Drive. Restricted When the document contains highly sensitive or private information such as 1:1s with direct reports Searchable Setting Effect ‚Äî‚Äî‚Äî‚Äî‚Äì ‚Äî‚Äî‚Äî Can find in search results. makes the file available to anyone with a PeppGitLaberdine Google account and discoverable within GitLab Google Drive‚Äôs search feature. Must have link to access makes the file available to anyone with a GitLab Google account who has the link. Access Setting Use Cases ‚Äî‚Äî‚Äî‚Äî‚Äì ‚Äî‚Äî‚Äî Editor Anyone that can view the document can edit it. This is the recommended setting when On - GitLab is enabled for the document Commenter Anyone that can view the document can add a comment but cannot edit the document. This is ideal if you want to provide visibility but retain more fine-grained control of document editing. Viewer Individuals with access to the document will only be able to view it. Reference Google‚Äôs documentation on Link Sharing to learn more. Good practices & helpful tips If you have content in a Google Doc that is later moved to the website or handbook, deprecate the Google Doc . When referring to a Google Doc or folder on the Google Drive in the handbook, refrain from directly linking it. Instead, indicate the name of the doc. If you link the URL people from outside the organization can request access, creating workload and the potential for mistakes. (In the past, linking a Google Doc has led to inadvertently opening the sharing settings beyond what was intended.) This also helps prevent spam from people outside GitLab requesting access to a doc when clicking its link. To save people time you can also link to the search results page which allows people to quickly get to the doc without anyone being able to request access. If there are multiple documents showing up in the search, you may filter your search link by adding the owner. If you are having trouble finding a shared Google Doc, make sure you Search <your domain> in Google Drive. In our handbook, if you find yourself wondering whether it is better to provide a public link to a Google Doc vs. writing out the content on the website, use the following guideline: Is this document frequently adapted / customized? If yes, then provide a link, making sure that the document can be commented on by anyone with the link. For instance, this is how we share our employment contracts . If the document is rarely customized, then provide the content directly on the site and deprecate the Google Doc. If you want to quickly find where a team member‚Äôs cursor is in a Google Doc, click their icon at the top of the document and the app will jump you to the current location. This works in Sheets and Presentations as well. You can set the notifications on a Google Doc so you only get emailed when someone tags you directly instead of getting emails for every comment. Click on ‚Äúnotifications‚Äù and select ‚ÄúOnly yours‚Äù. By the way, when you create the doc, it defaults to All, but when you are just shared with it, it defaults to Only yours. There is no global default . You can find a template of the GitLab letterhead on the shared Google Drive. Please be sure to make a copy of the document to your Google Drive before customizing the template for your use. If you want to have the Google Doc be readable to the public, do not change the sharing settings from ‚ÄòEditable by Everyone at GitLab‚Äô, publish the document instead. In all cases, the sharing settings (who a document is shared with, if it is visible to the whole company, etc.) on a Google Doc should be the single source of truth for the confidentiality of the document. Avoid using your initials when adding content to Google Docs or referring to someone else. Use your full name, as Google Docs Smart Compose will auto-complete names for you, and display information about the GitLab team member on hover. It makes documents more readable and consumable, especially for people outside your team/department. When there is a synchronous discussion about an issue or MR captured in a Google Doc, be sure to summarize the discussion into the issue or MR and link to the agenda item where it was discussed with a bookmark . If the notes are limited access or no notes were taken, please say so. This will ensure that interested GitLab Team Members can see both the summary and context of the discussion. In the pageless format you can use COMMAND+OPTION+SHIFT+J or View‚Äì>Hide Comments to quickly hide comments that reduce document width. When using Google Docs, paste full URLs rather than linking text. Chips are the one acceptable alternative when linking to another Google document. Advantages for using URLs rather than hyperlinks include: Greater visibility when it is a long URL and specific. Links are important but easy to miss otherwise (short and only a different color and/or underlined). Ability to see what the content is without hovering over (which isn‚Äôt quick on mobile). Makes it easier to paste the content as formatting free text (not rich text), which we prefer and is sometimes the only option. How to deprecate a Google Doc Add ‚ÄòDeprecated: ‚Äô to the start of the title. Remove the content you moved. Add a link to the new location at the beginning of the doc/first slide/first tab. Add a link to the merge request or commit that moved it (if applicable). Handbook page Pages like this are part of the handbook . The GitLab handbook is the central repository for how we run the company. Product documentation GitLab Docs - docs.gitlab.com is where you can find documentation on GitLab, the product. GitLab repositories repository / repositories are where files are kept under source code management . In most cases, requires MRs to merge. The Handbooks are in a repository, our code is in a repository, etc. READMEs README - README.md files are what are shown by default when you browse a repository. Contains useful information to give context on what the project/repository are for. These can also be used for user profiles as personal READMEs. Google Calendar We recommend you set your Google Calendar access permissions to ‚ÄòMake available for GitLab - See all event details‚Äô. Consider marking the following appointments as ‚ÄòPrivate‚Äô: Personal appointments Confidential & sensitive meetings with third-parties outside of GitLab 1-1 performance or evaluation meetings Meetings on organizational changes There are several benefits and reasons to sharing your calendar with everyone at GitLab: Transparency is one of our values and sharing what you work on is in line with our message of ‚Äúbe open about as many things as possible‚Äù. Due to our timezone differences, there are small windows of time when our availabilities overlap. If other members need to schedule a new meeting, seeing the details of recurring meetings (such as 1-1s) will allow for more flexibility in scheduling without needing to wait for a confirmation from the team member. This speaks to our value to be more efficient. If you add blocks of time spent on recurring tasks to your Google Calendar to remind yourself to do things (e.g. ‚ÄúCheck Google Analytics‚Äù), consider marking yourself ‚ÄúFree‚Äù for those events so that coworkers know they may schedule a meeting during that time if they can‚Äôt find another convenient time. Google Calendar Appointment Scheduling This feature allows you to create a link to an availability schedule that you can send to your customers or coworkers for them to schedule a call according to your availability. This allows you to only show available spots while keeping your other calls private. This also avoids having to go back and forth between you and other person figuring out what day and time works best for both of you. Since this is a native Google Calendar functionality, there is no need to set up integrations with your calendar like other scheduling tools. A member of our Customer Success team created a demo video of how to use this feature . External communication Key practices to consider during any meeting are listed below. Video Calls - If this is your first time meeting a customer/prospect/partner/etc., turn on your camera when you login to Zoom. This will help to make the customer/prospect feel more comfortable as they are certain your undivided attention is geared towards them. ‚ÄúNo agenda, no attenda‚Äù - Always have an agenda prepped and ready to go , with the exception of coffee chats . Share this with your audience. Make sure that everything on the agenda is accurate and ask if there‚Äôs anything missing that needs to be addressed during this call or for the future. When there is no agenda, it translates to you not caring. When sharing agendas with customers and partners it should be called ‚ÄúGitLab + Name Shared Collaboration & Agenda‚Äù, not ‚ÄúExternal Agenda‚Äù as that implies there is something the parties are not seeing. 70/30 Rule - Ask open ended questions that leave the audience talking 70% of the time, while you are talking 30% of the time. Please note that this varies based on the type of meeting that you are conducting. Be conscious of what questions need to be asked and to capture those items. Take Notes - Effective note-taking is a valuable skill that will help you retain and recall any important details. Be the person who remembers all the details of your audience‚Äôs needs. Adapt to Audience Tone - Before going into the business portion of your meeting, evaluate first the tone of the audience. Adapt your tone accordingly in order to appeal to various types of personalities. Mid-call - Half-way through the meeting, check in with your audience. Ask them what their thoughts are on the progression of this meeting and if what you‚Äôre presenting is on the right track. This helps both you and the audience by re-aligning expectations and making sure the meeting is going the right direction. Pre-Close Summary - 10 Minutes (1-hour meetings) or 5 minutes (30 minute meetings) prior to ending the call, ask the audience to build out an agenda for the next step or meeting. This helps to secure next steps and to ensure there are no balls dropped. Post Meeting Action - Immediately write down notes and next steps and input into the proper directory (Google Drive, Salesforce, etc.). Two Block Rule - For in person meetings with external parties you should wait until you‚Äôre more than two blocks from the meeting before discussing the results of the meeting. Nobody wants to hear themselves being discussed in the bathroom. Communicating with media and industry analysts GitLab team members are not authorized to speak with the media or analysts on behalf of our company unless authorized by our Marketing department. Unless authorized, do not give the impression that you are speaking on behalf of GitLab in any communication that may become public. This includes posts to online forums, social media sites, blogs, chat rooms, and bulletin boards. This policy also applies to comments to journalists about specific matters that relate to our businesses, as well as letters to the editor and endorsements of products or services. For more, please visit the Corporate Communications handbook section . Paid external speaking requests GitLab as the leader in all remote work creates opportunities for our team members to receive requests from external 3rd parties to participate on panels, blogs or news publication or articles. Recently our team members have been approached by external 3rd parties looking to pay or compensate GitLab team members for their time to discuss GitLab remote practice to help them guide a client. Other third parties may contact GitLab team members to provide subject matter expertise that they may have by virtue of their role at GitLab. As in any request we ask that team members verify who they are speaking with to make sure the source is indeed a valid and legitimate request. Always remember that you represent GitLab and if any question makes you uncomfortable or gives you a pause on whether you should answer then we recommend that you do not answer. A third party‚Äôs questions regarding GitLab financials, sales, compliance, executives or specifically where the company is heading should be treated with the most caution. We want and encourage all team members to be remote evangelists and this can be done without giving very specific information about GitLab. If you have any concern about a request please reach out on slack to #external-comms Social media Please see our team member social media policy . Posting or streaming to YouTube See the YouTube page for options and instructions for posting recordings and live streaming to our YouTube channels. Guidelines for vendor meetings We request external vendor meetings to use our video conferencing tool so we can quickly join the call and record the session if we need to. Confirm with vendor that they agree we can record the call. The DRI for the vendor meeting will generate the zoom link and share with the vendor. Decide ahead of the meeting who should be invited, i.e. those likely to get the most out of it. Ahead of the meeting, we should agree internal agenda items/requirements/priorities and provide to the external provider. In order to make the best use of time, we wish to avoid team introductions on the call, particularly where there are a number of us attending. We can include a list of attendees with the agenda and give it to the vendor before or after the meeting. Introductions can be helpful in some external calls. In those meetings, use these guidelines . When a question or issue is raised on the agenda, if the person who raised it is present they will verbalize it live on the call; or if they are not present, then someone will raise it for them. This is a common GitLab practice. Where possible, we request that the vendor provides their slides / presentation materials and any other related information after the meeting. Do not demo your tool live, create a pre-recorded walk-through of the tool and make it available to GitLab before the meeting so we can ask questions if needed. Be cognizant of using inclusive language. We respectfully request that everyone is mindful of the time available, to help manage the call objectives effectively. User communication guidelines Keep conversations positive, friendly, real, and productive while adding value. If you make a mistake, admit it. Be upfront and be quick with your correction. If you‚Äôre posting to a blog, you may choose to modify an earlier post. Just make it clear that you have done so. There can be a fine line between healthy debate and incendiary reaction. Try to frame what you write to invite differing points of view without inflaming others. You don‚Äôt need to respond to every criticism or barb. Be careful and considerate. Assume positive intent and explicitly state the strongest plausible interpretation of what someone says before you respond, not a weaker one that‚Äôs easier to criticize. Rapoport‚Äôs Rules also implores you to list points of agreement and mention anything you learned. Answer questions, thank people even if it‚Äôs just a few words. Make it a two way conversation. Appreciate suggestions and feedback. Do not make promises that you can‚Äôt keep. Do not offer platitudes . Be direct and respectful. For example - we don‚Äôt need to suggest that our actions are because we ‚Äúheard feedback‚Äù when they are really done for other reasons. Guide users who ask for help or give a suggestion and share links. Improving Open Development for Everyone , Types of requests . When facing negative comments, respond patiently and treat every user as an individual, people with the strongest opinions can turn into the strongest supporters . By default, discussions in issues and MRs are public and could include participation of wider community members. It is important to make the wider community members feel welcome participating in discussions and sharing their view. Wider community members also submit MRs to help improve our website/handbook and this is often their first contribution to GitLab. We want to make sure that we are responsive to their contributions and thank them for helping improve GitLab. Adhere to the Code of Conduct in all communication. Similarly, expect users to adhere to the same code when communicating with the GitLab team and the rest of the GitLab community. No one should accept being mistreated. Company phone number If you need to provide the details of GitLab‚Äôs contact information you can take the address from the visiting page for reference; or the mailing address of the office in the Netherlands if that is more applicable. If a phone number is required, leave this field empty by default. If that is not possible, then use the general number (+1-415-761-1791), but be aware that this number simply guides to a voice message that refers the caller back to contacting us via email. Effective communication competency Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. In an all-remote organization effective communication is key to exchanging knowledge, ideas, and information. Effective communication at GitLab: Uses asynchronous communication as the starting point and stays as open and transparent as we can by communicating via text through public issues, merge requests, and Slack channels (over DMs). Places an emphasis on ensuring that conclusions of offline conversations are written down ensuring a single source of truth . Produces video when necessary. If you would like to improve your skills or expand your knowledge on topics relating to Communication at GitLab, check out our resources: Communicating effectively and responsibly through text Embracing asynchronous communication Skills and behavior of applying effective communication as a Team Member : Effectively practices communication via text. Uses asynchronous communication when possible: merge requests (preferred) or issues . Directs all communication to the appropriate channels (Slack, GitLab, email). Recognises when synchronous communication is the more appropriate option. Directs all decisions and discussions to the Handbook as a single source of truth. Records videos to communicate information when that is the most efficient and effective way to consume the content. Employs multimodal communication to broadcast important decisions. Practices low context communication and provides as much background as possible when communicating via text to avoid confusion. Skills and behavior of applying effective communication as a People Manager : Implements working asynchronously across teams, departments or across the company. Drives communication where possible to asynchronous channels. Holds team members accountable for effectively communicating via text. Fosters an environment across teams, departments or divisions where asynchronous communication is the starting point. Guides team members on when producing video is appropriate. Implements interactive communication tools across their team, department or the company depending on level. Drives and funnels conversations to the right channels across teams, divisions and the company. Ally Resources What is an ally? A diversity, inclusion and belonging ‚Äúally‚Äù is someone who is willing ‚Ä¶ Ask Me Anything Learn and ask questions at GitLab's Ask Me Anything (AMA) meetings Confidentiality levels At GitLab, we are public by default, but some information is classified as internal or limited access. This page provides details on confidentiality levels. Deep Dives The goal of a Deep Dive session is to share knowledge about a particular topic, with the assumption that recipients already have some basic understanding or aptitude for the given subject. GitLab Communication ‚Äî Zoom Zoom-specific communication guides GitLab uses Zoom as the primary video collaboration platform for ‚Ä¶ GitLab Communication Chat Introduction At GitLab, Slack is critical to our communication with each other. While it enables ‚Ä¶ GitLab Video Playbook GitLab Video Playbook The purpose of this playbook is to help those who are looking to create video ‚Ä¶ Power of the Pause Power of the Pause There are times in everyone‚Äôs life when you can feel overwhelmed, anxious, ‚Ä¶ Top Misused Terms - GitLab Communication List of Top Misused Terms Below are terms people frequently use when they should use another term. ‚Ä¶ Last modified July 9, 2025: Update file _index.md ( 2a31acb0 ) View page source -  - please contribute .",
    "headings": [
      "GitLab Communication",
      "Effective & Responsible Communication Guidelines",
      "Everyone is a moderator",
      "Asynchronous communication",
      "Communicate directly",
      "Communicating Potentially GitLab Sensitive Topics",
      "Confidentiality levels",
      "Examples of Potentially GitLab Sensitive Topics",
      "What are the risks?",
      "Determining Which Communication Forum To Use",
      "Organization code names",
      "Internal communication",
      "Top tips and best practices",
      "Internal Communication Channel Guidance",
      "Structure content instead of using FAQs",
      "Multimodal communication",
      "Start with a Merge Request",
      "Issues",
      "How to make a company wide announcement",
      "Meetings",
      "Common meeting problems",
      "Everyone is responsible for notes",
      "Smart note taking in meetings",
      "Few meetings with presentations",
      "Meeting introduction guidelines",
      "Scheduling meetings",
      "Video calls",
      "Types of meetings",
      "Presentations",
      "Video and presentation tips with Lorraine Lee",
      "Writing style guidelines",
      "Communicating dates and time",
      "Visuals",
      "Ubiquitous language",
      "MECEFU terms",
      "Simple language",
      "Using additional languages",
      "Avoid using Git in Project Names",
      "Email",
      "Slack",
      "General guidelines",
      "Avoid direct messages",
      "Use public channels",
      "Be respectful of others‚Äô time",
      "Are my direct messages and private channel conversations completely private?",
      "Emergency chat",
      "Types of documents",
      "Google Docs",
      "Handbook page",
      "Product documentation",
      "GitLab repositories",
      "READMEs",
      "Google Calendar",
      "Google Calendar Appointment Scheduling",
      "External communication",
      "Communicating with media and industry analysts",
      "Paid external speaking requests",
      "Social media",
      "Posting or streaming to YouTube",
      "Guidelines for vendor meetings",
      "User communication guidelines",
      "Company phone number",
      "Effective communication competency"
    ],
    "word_count": 23031,
    "extracted_at": "2025-07-21 20:12:34"
  },
  {
    "document_id": "gitlab-handbook-91281",
    "url": "https://handbook.gitlab.com/handbook/company/culture/",
    "title": "Culture",
    "category": "Company",
    "content": "GitLab Culture Here‚Äôs a look at what you can expect from our culture and all-remote environment. Introduction Please see our company page for more general information about GitLab. Life at GitLab At GitLab, our mission is simple: to enable everyone to contribute to and co-create the software that powers our world. Our platform doesn‚Äôt just bring people together‚Äîit unites teams and organizations, breaking down barriers and redefining what‚Äôs possible in software development. Here, you‚Äôre not just contributing to a tool, you‚Äôre shaping the future of secure, scalable software delivery. Our high-performance culture values collaboration, ownership, and impact, accelerating careers while driving global innovation. This is more than a job, it‚Äôs your opportunity to build something that matters. Everyone can contribute Our size and our mission (enable everyone to contribute to and co-create the software that powers our world.) mean that our team members can ‚Äî and are expected to ‚Äî make an impact across the company. Because we all use our product internally, you don‚Äôt have to be a developer to learn to collaborate in the GitLab tool. From your very first week, no matter your role, you‚Äôll gain the technical skills needed to access, question, and contribute to projects far beyond your job description. This unique approach works because we‚Äôre a team of helpful, passionate people who want to see each other, the company, and the broader GitLab community succeed. We learn from each other, challenge each other, and thank each other. Come prepared to do meaningful work that will help shape the future of the company. While the opportunities to contribute are boundless in a growing organization like GitLab, they may not be clearly defined. You‚Äôll need to think creatively, speak up to see how you can help, and be willing to try something new. Freedom to iterate At GitLab, our value of iteration has a unique impact on the way we operate and get things done. Working this way means our team members are expected to quickly deliver the minimal valuable change in their work instead of waiting to produce a polished, completed product. While this can be a challenging practice to adopt at first, it‚Äôs liberating to be able to make mistakes, get feedback quickly, and course correct to reach a better outcome, faster. As our company and the industry continue to grow, you‚Äôll have the freedom to change and constantly evolve everything from your schedule and your workspace to your job description and your skills. Culture at GitLab Culture at GitLab is composed of three things. GitLab Values Camaraderie (mutual trust and friendship). This is created and maintained by informal communication . We also build trust by effectively collaborating with others. Work style (how we work). This is defined and articulated in our communication guide and handbook usage guide . Other pages related to culture Diversity, Inclusion and Belonging Talent Brand All Remote GitLab is one of the world's largest all-remote companies Cross-Culture Collaboration Guide This guide will help GitLab team members in effective and inclusive communication and cross-cultural collaboration globally Diversity, Inclusion & Belonging Diversity, Inclusion & Belonging is fundamental to the success of GitLab. We include it in every way possible and in all that we do. GitLab CEO 101 There is a monthly GitLab CEO 101 call with new hires and the CEO. GitLab Events Code of Conduct GitLab is dedicated to providing a harassment-free and inclusive event experience for everyone! GitLab Songbook The GitLab Songbook contains popular songs that have been adapted and arranged by GitLab team members. GitLab Summit Over the years, GitLab has hosted GitLab Summits, global team member events. In the past, these ‚Ä¶ GitLab Top Team Member A Top Team Member (T2M) exemplifies the GitLab Values beyond of the team of people they directly work with. Last modified July 17, 2025: Removes outdated strategy page ( 387298cd ) View page source -  - please contribute .",
    "headings": [
      "GitLab Culture",
      "Introduction",
      "Life at GitLab",
      "Everyone can contribute",
      "Freedom to iterate",
      "Culture at GitLab",
      "Other pages related to culture"
    ],
    "word_count": 649,
    "extracted_at": "2025-07-21 20:12:35"
  },
  {
    "document_id": "gitlab-handbook-646366",
    "url": "https://handbook.gitlab.com/handbook/teamops/",
    "title": "TeamOps",
    "category": "Company",
    "content": "TeamOps - Redefining Teamwork for the Modern Era Getting to know GitLab‚Äôs virtual-first operating model Organizations need people and teams ‚Äî their creativity, perspectives, and humanity. That need will only grow as we move towards a future with bigger problems to solve, and as AI displaces every variety of rules-based knowledge work which can be automated. Tomorrow‚Äôs winners will be determined by how they bring teams together, and how well they‚Äôre able to get every person on those teams to contribute to their mission. Up to this point, teams, and the ways the people on them work, have been treated in a profoundly subjective manner: ad hoc, DIY, left up to whims of the individual manager and the quirks of a given corporate culture. It‚Äôs viewed as a soft problem, mixing 20th century management philosophies with pop psychology. Grounded in opinion, not reality. Feelings, not behaviors. Meanwhile, other critical areas of business have been studied, made objective, codified, and operationalized. Why not so with our most valuable resource: teams? What is TeamOps? Simply put, TeamOps is an organizational operating model that helps teams maximize productivity, flexibility, and autonomy by managing information more efficiently. This virtual-first approach is designed to optimize team dynamics, streamline decision-making, and increase an organization‚Äôs output. Developed, practiced, and refined by GitLab, it‚Äôs a framework grounded in actionable principles that transform how teams work and relate. TeamOps differentiates itself from other management philosophies and people practices by consciously enabling decentralized decision making at a centralized (organizational) level. While guiding principles exist, TeamOps is not static. It is designed to be iterated on and evolved by everyone. This system is designed to apply to all work environments, from no remote to strictly remote . By implementing TeamOps at an organizational level, individuals within the organization are less constrained. Each team member receives greater agency to exert self-leadership. Collectively, we believe this atmosphere allows for more informed decisions, made quicker, more frequently, and with a higher likelihood of successful execution. TeamOps Principles and Tenets TeamOps is comprised of four principles, each with six tenets that outline group member behaviors and guidelines. Shared Reality Equal Contributions Decision Velocity Measurement Clarity Single Source of Truth Asynchronous Workflows Documented Workflows Transparent Measurements Public by Default Directly Responsible Individuals Give Agency Measure Impact, Not Activity Collaboration Guidelines Well-Managed Meetings Push Decisions to the Lowest Level Definition of Done Shared Values Cross-Functional Collaboration Bias for Action Prioritize Due Dates Inclusivity Tool Prioritization Low-Context Communication Transparent Feedback Informal Communication Psychological Safety Operational Transparency Cadence Prerequisites for TeamOps There are five foundational elements that should already be in place in an organization in order to support the adoption of TeamOps. These prerequisites relate to the company processes, digital infrastructure, and culture that create an ideal environment to implement TeamOps tenets. Digital Infrastructure. Before we can teach you how to work in a virtual-first way, we need to make sure that your team has the correct tech stack to enable digital collaboration. Every infrastructure is different, but at a minimum, all should include one tool from the following categories: Group communication (eg: Slack) File storage (eg: Google Drive) Knowledge management (eg: GitLab, Almanac) Project management (eg: GitLab, Asana) HR management (eg: Workday) Financial management (eg: Quickbooks) Calendars and scheduling (eg: Google Calendar) Company Handbook. TeamOps relies heavily on knowledge sharing through documentation and asynchronous communication. If you don‚Äôt already have some kind of knowledge management system to host this information sharing-such as a wiki or handbook- you‚Äôll want to create one before starting the courses and certifications. But don‚Äôt worry, you only have to get it started, because the TeamOps Practitioner Certification will guide you through the process of using this resource as a Single Source of Truth and populating the content for your team to use. Shared set of values. Your core values must be more than words on a page. They should be actionable, reinforced in everything you do as a team, and act as a filter for hiring to ensure you continue to grow the team with people who are committed to living out these values in their work. Team trust and inclusion. Implementing new management and operating techniques can be uncomfortable at first. A baseline of trust and inclusivity across the organization will better enable the team to embrace change and assume positive intent along the way. Focus on results. Measuring output instead of input is foundational to managing a virtual-first team. This means establishing clear, transparent goals so that team members at all levels of the organization can see and take ownership for how their work is contributing to the team, department, and company‚Äôs success. If your organization is missing some of these building blocks, consider this an opportunity to invest in your team. A variety of TeamOps Partners have been recruited to support you through the change management process. TeamOps Tips While exploring and adopting TeamOps as an operational model, it‚Äôs important to remember a few things: TeamOps describes an ideal state . In management, it is not possible to remain in an ideal state in perpetuity. Competing priorities, conflict tradeoffs, and coordination headwinds will be present at varying times. When applying TeamOps, resist the urge to take a binary approach. Rather than asking, ‚ÄúHave we completely achieved TeamOps in our team or company?,‚Äù leverage TeamOps principles to navigate with more information and greater velocity . TeamOps is for individual contributors and people managers. TeamOps empowers individual contributors to be better stewards of their own time and attention. Concurrently, it empowers people managers to lead with deeper conviction while creating more space for their direct reports to grow, develop, and contribute. TeamOps Direction TeamOps' general timeline, OKRs, and plans. TeamOps Growth How to become a TeamOps expert TeamOps Partners Resources for change management support Last modified December 9, 2024: Updating to impact, not activity ( 6a91ed4a ) View page source -  - please contribute .",
    "headings": [
      "TeamOps - Redefining Teamwork for the Modern Era",
      "What is TeamOps?",
      "TeamOps Principles and Tenets",
      "Prerequisites for TeamOps",
      "TeamOps Tips"
    ],
    "word_count": 984,
    "extracted_at": "2025-07-21 20:12:37"
  },
  {
    "document_id": "gitlab-handbook-663933",
    "url": "https://handbook.gitlab.com/handbook/ceo/",
    "title": "CEO Readme",
    "category": "Company",
    "content": "CEO This page details processes specific to Bill Staples, CEO of GitLab. Why I‚Äôm at GitLab I love software. I love developers. In my lifetime, I‚Äôve seen software change every aspect of modern life. I believe we‚Äôre still in the early stages of software transformation, and AI will accelerate how software changes the human experience in the coming decade. There has never been a better time in history to be in the software business and serving developers. GitLab is a strategic asset for the companies we serve because we provide the platform they use to create software experiences for their customers. As we serve developers and improve their work and lives, our positive impact is amplified through them, ultimately reaching billions of people around the world in profound ways. I am honored to lead GitLab as CEO. It is the climax of my career after nearly 30 years of serving developers. I am committed to maximizing our impact in service of customers, shareholders, and team members. I am competitive, and I want to win. Winning begins with delivering software to our customers, creating positive results they can‚Äôt get any other way, and continuing to do that in a rapidly expanding and evolving market. That means innovation. It also means driving results for customers as our first priority. It means continuing to focus on responsible growth and performing in an elite class, one of the very few who are the very best in the world for the categories we compete in. This README is meant to help anyone who needs to work with me by providing a brief overview of what is important to me. My Personal Values Integrity: Trust is the most important thing in any relationship. Trust is knowing you can count on me to say what I mean and do what I say. I try to live my life in strict adherence to this value, and when I fall short, I try to proactively and openly acknowledge and recommit. My single biggest ‚Äòhot button‚Äô issue is when someone does not follow through on something they said they would do. Curious: I try to live what many call the ‚Äúgrowth mindset,‚Äù which means that I‚Äôm always learning, striving to improve, and iterating to be better. I feel very imperfect and self-critical on the inside, and I constantly strive to learn as much as I can while appreciating that I can‚Äôt know it all. I‚Äôm open and accept constructive feedback from anyone, anytime. Results: Good ideas, hard work, and fun on the job are all important, but ultimately, our results are what matters. I care far more about outcomes than effort. I strive to do everything at a high standard of excellence, and I‚Äôm never satisfied with the status quo. I seek people who are equally committed to being world-class. My Super Powers - how you can get the best from me Passionate - I work for causes and missions and pour my heart into them. My brain is highly analytical, detail-oriented, and (usually) pretty fast, but my heart is equally important to understand me: I feel things deeply and try to help others around me both see the possibilities and feel motivated and inspired to strive toward what others may not think possible. I am passionate about my work. It is not just a job for me. It is where I find meaning, purpose, value, and how I contribute to the world. Curiosity - I ask a lot of questions and like to absorb information quickly. I like being surrounded by people I can learn from and collaborate with. I often see patterns and synthesize disparate points of information to help others make sense of the work and align on a direction. Work Ethic - From my early life, I have always worked very hard and enjoyed it (most of the time). I especially enjoy ‚Äúthe struggle,‚Äù solving complex problems, grinding on hard issues, and rising above roadblocks. George Bernard Shaw once wrote, ‚ÄúI want to be thoroughly used up when I die, for the harder I work, the more I live.‚Äù My Weaknesses - double-edged swords are real Passionate ‚Äî I sometimes come across as emotionally charged, overly critical when we fall short of goals, or emotional when something touches my heart. I don‚Äôt smile enough on the outside (even though I‚Äôm generally pretty happy on the inside‚Äîbecause solving problems is fun to me!). How to help me manage this: It depends on the situation. There is a time to be serious, but it is also possible to overdo it. Try smiling to remind me that I can lighten the mood. A well-timed joke is always helpful, and feel free to ask with a smile, ‚ÄúAre we having fun yet?‚Äù to make me think. Curiosity - I sometimes exhaust people with my many questions and drill-in tendencies. As I‚Äôm a genuinely curious person and care about all parts of the business, I regularly do this, and it is not always an indication that something is off. How to help me manage this: Come prepared for meetings. If you don‚Äôt know the answer, let me know and be clear on when you will follow up. If you have concerns about whether my drilling affects your performance, let me know so we can discuss it. Work Ethic - Occasionally, people struggle to keep pace with my style of work. How to help me manage this: let me know if you are struggling so we can discuss it. Suggestion: If I am negatively impacting you, I welcome constructive feedback and will do my best to moderate my approach. My Expectations of Everyone (including myself) Collaborate - By default, I expect everyone to actively work with their teams, peers, and leaders, as well as customers, partners, and investors (as applicable), to identify the ‚Äúabsolute best‚Äù ideas, no matter where they come from. I hire and retain leaders who I believe are experts in their functions and whom I feel personally excited to work with and learn from. Still, I also believe the best leaders actively learn from and incorporate good ideas from everywhere. I expect E-Group members to have similarly high expectations for team members. Accountability - By default, you are trusted to do your job, and I believe part of everyone‚Äôs job is to communicate expectations, set metrics and targets, and meet them. Along the way, the single most powerful way to ensure expectations are managed and met is to discuss or ‚Äúinspect‚Äù the work regularly. This powerful tool does not represent a lack of trust or micromanagement; when done right, it ensures the best ideas are being pursued, surprises and roadblocks are rapidly identified and removed, and outcomes are maximized. I like creating operating rhythms that enable automated inspection and collaboration opportunities for every mission-critical initiative on a regular basis. Selfless ‚Äî The very best leaders I know are smart and driven, and they motivate and inspire others to do their best work. Careful observation of these leaders also reveals that they check their egos at the door and focus on what is best for the company and customers first. They serve others around them and act selflessly for the greater good. My Role I am the CEO of GitLab. Here is what I do in 12 words or less that is unique to my role: Lead the team that defines and drives GitLab‚Äôs strategy & execution. Communication Preferences I prefer Slack to email. I try to respond to every Slack message I get every day. Keep them concise. If you need me in near real-time, text or call my phone. My EBA can help to get you in touch if you don‚Äôt have this information and it is urgent. If you have a complex question or need a discussion on something async that will require more than a few sentences for me to reply, put it into a document and share it with me with comments. I read fast and am pretty efficient at giving feedback this way. Use email when it is an external-facing communication, but don‚Äôt expect me to respond in < 1 week unless you ask me to look at it sooner over Slack or it is regarding a critical external matter. Expectations for leadership What I need from you. What you will get from me. If you tell me you will do something, I expect you to do it to the very best of your ability on time. I will, too. If you fail at something, I expect you to own it and not make excuses. I will, too. If you succeed at something, I expect you to give all the credit to your team. I will, too. I want to be part of a world-class company that is respected for being ‚Äòexcellent‚Äô and unrivaled in our category. I expect you to constantly strive to increase your team‚Äôs output quality and volume through greater alignment and efficiency. I can‚Äôt judge your personal or team capacity, so I will push work until you set my expectations on what is achievable and by when. I expect you to actively manage expectations and hold yourself accountable. When E-Group members disagree with each other, I expect them to jointly escalate it to me in a timely fashion so I can help break the tie. I have a similar expectation for other team members. Escalation is not a failure. I want a team that is pushing passionately, and it is normal to have conflict. Disagree, commit, and advocate. Be a gracious winner. Own decisions either way 100% with your team. Frequently asked questions from prior roles Why do you ask so many questions? What are you looking for? I do like to ask a lot of questions. I care about the details, and I really like to learn. I can tell when someone really knows the area by how easily and completely they can answer my questions. When I see that someone understands their area very well and has confidence in their area, I shift from probing to generative questions and sometimes ideas with the intention of contributing. When I see that someone lacks command of their area, I shift to the Socratic method to understand shared beliefs and assumptions and help guide people/teams to an answer we can align on. If this fails or isn‚Äôt converging, I put forward my hypothesis/ideas as a starting point. If you find meetings/discussions ending frequently with my hypothesis as the next step, that may be a sign that we aren‚Äôt well aligned. If in doubt, ask me! Why do you want to inspect my work so frequently? Do you not trust me? I like to meet regularly (weekly) to talk about top priorities and our progress on key metrics. These meetings normally have nothing to do with trust. Past experience has taught me that monthly updates are not frequent enough to ensure that most bold, ambitious, impactful initiatives are delivered as efficiently as possible, on time, and with high quality. It truly ‚Äòtakes a village‚Äô to make that happen. Operating meetings help me learn the realities of the work, stay in touch with real roadblocks and challenges that sometimes only I can resolve, contribute ideas, and help align functions across the company to ensure that we meet our most important goals. You seem to work a lot of hours and around the clock. Do you expect the same from me? No I expect you to manage your own work/life balance; no one else can do it for you. Everyone‚Äôs needs are unique, so managers can‚Äôt really prescribe how to achieve a balance that is right for you. Managers should measure whether their reports‚Äô work meets business needs and tell them if they see misalignment. This is part of my job as manager of E-Group. Work is by nature a competitive task, and there will always be someone smarter, who works harder or is more skilled than oneself. Some jobs are more complicated and demand more than others. In some periods of life, one may have more or less to give than others. Finding balance is difficult and requires constant management. My advice: Be honest with yourself about who you are and what you need, then give it your best and keep an open dialogue with your manager. Good managers care about and flex with the people they manage to find a win/win for the company and individual. Can you share a bit more about your personal life? What do you do outside of work? My family is my #1 priority in life, and I give extreme attention to their needs. My sons are both out of the house on their own, leaving just my wife and me at home. They support me in giving my best to GitLab. I really do enjoy work. I‚Äôve had the fortune to take some extended time off in my career, and every time I do, I am reminded that work is so much more than a paycheck. It is something I love and how I find purpose. When I have free time, my #1 hobby is cycling with my wife. We have cycled in different parts of the world and always strive to see new places by bike. I often couple my #2 hobby, photography, with my work and personal travel. I love taking photos because it encourages me to ‚Äúsee‚Äù the world in non-obvious ways to create interesting photos, which is also helpful in life and business. I like the blend of science and art skills that photography demands. CEO Scam See CEO and executive fraud in the security practices section of the handbook. Meeting request requirements For scheduling a video call or meeting with me or other execs, please see the EBA handbook page . CEO Meeting Cadence As part of my role, I participate in a variety of meetings both internal and external. Monthly Meetings Monthly CEO AMA, agenda in Gdrive (internal). CEO Shadow Program At GitLab, being a CEO Shadow is not a job title, but a temporary assignment to shadow the CEO Office of the CEO Details about Office of the CEO (OCEO) at GitLab Last modified April 9, 2025: Fixed a minor spelling error ( e34fa8a4 ) View page source -  - please contribute .",
    "headings": [
      "CEO",
      "Why I‚Äôm at GitLab",
      "My Personal Values",
      "My Super Powers - how you can get the best from me",
      "My Weaknesses - double-edged swords are real",
      "My Expectations of Everyone (including myself)",
      "My Role",
      "Communication Preferences",
      "Expectations for leadership",
      "Frequently asked questions from prior roles",
      "CEO Scam",
      "Meeting request requirements",
      "CEO Meeting Cadence",
      "Monthly Meetings"
    ],
    "word_count": 2384,
    "extracted_at": "2025-07-21 20:12:39"
  },
  {
    "document_id": "gitlab-handbook-641959",
    "url": "https://handbook.gitlab.com/handbook/",
    "title": "About the Handbook",
    "category": "Handbook",
    "content": "The Handbook Introduction The GitLab team handbook is the central repository for how we run the company. Printed, it consists of over 2,000 pages of text . As part of our value of being transparent the handbook is open to the world , and we welcome feedback. Please make a merge request to suggest improvements or add clarifications. Please use issues to ask questions. For a very specific set of internal information we also maintain an Internal Handbook Handbook Contents Company Company About GitLab History Values Mission Vision Communication YouTube Zoom Webinars Culture All-Remote Life at GitLab GitLab Contribute Team Only healthy constraints TeamOps CEO Readme CEO Shadow Program Cadence E-Group Offsite KPIs Pricing Model Office of the CEO E-Group Weekly Environmental, Social, and Governance Handbook Handbook About the Handbook Handbook Changelog Handbook Escalation Handbook Usage Contribution Guide Editing the handbook Handbook Style Guide Handbook maintenance People Group People Group Anti-Harassment Policy Global Volunteer Month Hiring Greenhouse Interviewing Jobs FAQ Inclusion & Diversity Ally Resources Gender and Sexual Orientation Identity Definitions and FAQ Unconscious Bias Labor and Employment Notices Leadership Learning & Development Onboarding Offboarding Spending Company Money Travel Visas Talent Assessment Team Member Relations Philosophy Total Rewards Benefits Incentives Paid time off Compensation Equity Compensation Tools and Tips Searching the GitLab Website Like a Pro Engineering Engineering Customer Support Department Development Department Dev Sub-department Fulfillment Sub-department Ops Sub-department Software Supply Chain Security Sub-department Secure Sub-department Infrastructure Department Developer Experience Engineering Productivity Security Practices Open Source Security Security Security Standards Product Security Security Operations Threat Management Security Assurance Marketing Marketing Team Member Social Media Policy Blog Brand and Product Marketing Brand Merchandise Handling (Swag) Product and Solution Marketing Demos Core Product Marketing Competitive intelligence Customer Advocacy Design Content Enterprise Data Integrated Marketing Field Marketing Channel & Alliances Marketing Corporate Events Account Based Marketing Campaigns Lifecycle Marketing Digital Strategy Digital Experience Sales Development Marketing Operations and Analytics Marketing Operations Marketing Strategy & Analytics Growth Developer Relations Community Programs Developer Advocacy Contributor Success Corporate Communications Analyst Relations Speaking Resources Incident Communications Plan Sales Sales Alliances Commercial Customer Success Customer Success Management Reseller Channels Field Operations Sales Operations Deal Desk Data Intelligence Field Enablement Sales Strategy Sales Systems Reporting Solutions Architecture Finance Finance Accounts Payable Accounts Receivable Business Technology Expenses Financial Planning & Analysis Payroll Procurement Tax Board meetings Internal Audit Sarbanes-Oxley (SOX) Compliance Equity Compensation Product Product Release posts About the GitLab Product Being a Product Manager at GitLab Product Principles Product Processes Product sections, stages, groups, and categories Product Development Flow Product Development Timeline Data for Product Managers Product Pricing Model Corporate Development / Acquisitions UX Department Technical Writing UX Research Product Design Legal and Corporate Affairs Legal and Corporate Affairs Commercial Corporate Corporate Development Employment Environment, Social, and Governance (ESG) Operations Privacy Product Risk Management and Dispute Resolution Trade Compliance Take GitLab for a spin See what your team could do with The DevSecOps Platform. Get free trial Have a question? We're here to help. Talk to an Expert Last modified April 10, 2025: Fix broken links ( 7fbeab40 ) View page source -  - please contribute .",
    "headings": [
      "The Handbook",
      "Introduction",
      "Handbook Contents",
      "Company",
      "Handbook",
      "People Group",
      "Engineering",
      "Security",
      "Marketing",
      "Sales",
      "Finance",
      "Product",
      "Legal and Corporate Affairs"
    ],
    "word_count": 518,
    "extracted_at": "2025-07-21 20:12:46"
  },
  {
    "document_id": "gitlab-handbook-1577",
    "url": "https://handbook.gitlab.com/handbook/people-group/anti-harassment/",
    "title": "Anti-Harassment Policy",
    "category": "People Group",
    "content": "Anti-Harassment Policy Everyone at GitLab has a responsibility to prevent and stop harassment. Learn more about our Anti-harassment policy. This is a Secure Document Per the stated Roles & Responsibilities , changes to this page must be approved or merged by a code owner. All contributions are welcome and encouraged. Introduction Everyone at GitLab has a responsibility to prevent and stop harassment. Working remotely means that the majority of our interactions are by video call or written communication, such as email or shared documents. The exceptions to this are team summits, attending conferences together, and local team meetups. No matter the method of communication, it is expected that everyone will contribute to an inclusive and collaborative working environment and respect each other at all times. Team member behavior is not limited to internal interactions with each other. Our Anti-harassment policy applies to GitLab team members interaction with customers, vendors and community members. Should you become aware of or witness any form of harassment or behavior that violates this policy or our company values , please report the incident directly to the Chief People Officer, Team Member Relations , or a People Business Partner immediately for thorough investigation. Perspective GitLab is a global organization and our team is distributed all over the world, so we strive to ensure our team is fully aligned with GitLab‚Äôs no tolerance harassment policy despite their location. We want everyone to feel confident and comfortable communicating concerns. GitLab respects, appreciates, understands and supports every aspect of diversity. We aim to continuously foster a globally aware team. Scope This policy applies to all team members of GitLab, whether contractor or employee, in all locations. There are local labor laws in every country and in the case of the United States, state laws, that must be followed when handling, reporting and investigating incidents of harassment. The People Business Partner team and legal counsel, if required, in each of those countries will be called upon to ensure compliance and the appropriate legal processes and procedures are followed. Specific country requirements for employees (subject to changes in employment law) are listed in the Country & US State-Specific Requirements section and will be updated regularly. All individual contributors, managers, and leaders will be subject to disciplinary action, up to and including termination, for any act of harassment they commit. Roles and Responsibilities Role Responsibility GitLab Team Members Responsible for following the requirements in these policies People Ops Responsible for implementing and executing these policies Legal & People Ops Management (Code Owners) Responsible for approving significant changes and exceptions to these policies Ethics & Compliance, Legal Ops Responsible for administrating related training Types of Harassment The following are considered forms of harassment and will not be tolerated by GitLab: Sexual Harassment Sexual harassment is considered unwelcome conduct of a sexual nature that is sufficiently persistent or offensive enough to interfere with the receiver‚Äôs job performance or create an intimidating, hostile or offensive working environment. Sexual harassment encompasses a wide range of conduct. Examples of misconduct include, but may not be limited to, the following actions: Physical assaults or the attempt to commit an assault of a sexual nature. This physical conduct can include touching, pinching, patting, grabbing, brushing against or poking another team member‚Äôs body. Unwelcome sexual advances, propositions or other sexual comments, such as sexually oriented gestures, noises, remarks, jokes, or comments about a person‚Äôs sexuality or sexual experience. Preferential treatment or promises of preferential treatment to a team member for submitting to sexual conduct, including soliciting or attempting to solicit any team member to engage in sexual activity for compensation or reward. Subjecting, or threats of subjecting a team member to unwelcome sexual attention or conduct or intentionally making performance of the team member‚Äôs role more difficult because of that team member‚Äôs sex. Creating displays, communications, or publications that include content of a sexually offensive nature. Purposely misgendering people, such as consistently referring to someone as ‚Äòhe‚Äô after repeated requests to use ‚Äòshe‚Äô or vice versa. Sexual harassment is unlawful and is considered a form of team member misconduct. Sanctions will be enforced against individuals engaging in sexual harassment and against supervisory and managerial personnel who knowingly allow such behavior to continue. Any retaliation against an individual who complains of sexual harassment or who testifies or assists in any proceeding under the law is unlawful. Discrimination Having a diverse workforce, made up of team members who bring a wide variety of skills, abilities, experiences and perspectives, is essential to our success. We are committed to the principles of equal opportunity, inclusion, and respect. All employment-related decisions must be based on company needs, job requirements, and individual qualifications. Always take full advantage of what our team members have to offer; listen and be inclusive. We do not tolerate discrimination against anyone, including team members, customers, business partners, or other stakeholders. Any form of discrimination towards an individual is strictly prohibited, including: On the basis of race (includes national origin or ancestry, ethnicity, national origin or ethnic characteristics; interracial marriage or association; traits historically associated with race, including hair texture, protective hairstyles, and any other national origin or ancestry ‚Äúas specified by a complainant in a complaint‚Äù), color, religion (including all aspects of religious observance and practice, as well as belief or lack of religious belief), sex (including pregnancy, childbirth and related medical conditions; breastfeeding; sex assigned at birth; gender identity or gender expression; affectional or sexual orientation, including heterosexuality, homosexuality, bisexuality, and asexuality; and differences of sex development, variations of sex characteristics, or other intersex characteristics), age, disability, HIV status, marital status, past or present military service, life expectancy, or any other status protected by the laws or regulations in the locations where we operate. We comply with laws regarding employment of immigrants and non-citizens and provide equal employment opportunity to everyone who is legally authorized to work in the applicable country. We provide reasonable accommodations to individuals with disabilities and remove any artificial barriers to success. Report suspected discrimination right away and never retaliate against anyone who raises a good faith belief that unlawful discrimination has occurred. If you believe you have been discriminated against or witnessed discriminatory practices, please contact the Chief People Officer, a People Business Partner , or the Team Member Relations Specialist to initiate an investigation into the behavior. GitLab has also engaged Lighthouse Services to provide anonymous reporting methods, as described in the How to Report Violations section. Bullying / Workplace Violence GitLab does not tolerate violent acts or threats of violence. The company will not tolerate fighting, bullying, coercion, or use of abusive or threatening words directed to, about, or against a co-worker, lead, manager, executive, candidate, client/customer, vendor, contributor, or any other person. No individual employed by GitLab should commit or threaten to commit any violent act or discuss committing such offenses, even in a joking manner. Retaliation Retaliation of any sort for filing a claim of harassment will not be tolerated. If you believe you have been retaliated against, please contact the Chief People Officer, Team Member Relations or a People Business Partner to initiate an investigation. Speaking up during a public situation If someone messes up, people are encouraged to speak up publicly and within the moment, in order to let that person and others know that what happened was not inclusive behavior. This makes for a situation from which all parties can learn, and is one which promotes understanding. Additionally it makes it possible for that person to de-escalate the situation by correcting themselves and apologizing. This does not ensure there will be no consequences. However, it will greatly reduce the chance of escalation and has the potential to help a situation become comfortable and inclusive again. Reporting a Physical Threat If a threat is made against you or someone else that makes you or another team member question their safety due to an issue, merge request, email or other work related matters do not hesitate to initiate the following process: Contact local law enforcement. Note the proper number to contact in your locality and whether the emergency, or non-emergency number should be called. Notify the People Operations Team via a HelpLab request. A private slack channel may then be opened with your People Business Partner, People Operations Team member, Team Member Relations, Manager, and the security team helping with the situation. The following steps may be taken based on the threat: Internal threat assessment Temporary accommodation (friends, family, hotel, etc.) Transportation to alternate location (stay with family/friends for example) Time off from work/LOA Personal Security Detail The above can be triggered by the People Operations Team, Manager, Team Member Relations, or People Business Partner based on their knowledge of the threat. Whenever it is safe to do so, please go through the normal permissions work flow, however if a threat is credible and potentially imminent, immediate action may be taken before the approvals have been put in place. The Sr. Director of Security will advise when it is best to halt any of the above tasks. Reporting Alleged Harassment Any individual who believes they have been the target of harassment of any kind is encouraged to immediately and directly address the harasser, letting them know that their behavior is unwelcome, offensive, and must stop immediately. If they do not wish to address the harasser directly or the behavior doesn‚Äôt cease, they should report the misconduct to the Chief People Officer, Team Member Relations or a People Business Partner . Once reported, an impartial investigation will be conducted by a People Business Partner or by an independent third party, depending on the severity and circumstances of the complaint. Individual(s) reporting an incident or pattern of behavior will be asked to provide a written account, including any action(s) causing concern, the dates and times such actions occurred, and the names of anyone involved, including the participants and witnesses. All complaints or concerns of alleged harassment or discrimination will be taken seriously and handled confidentially. The Role of Managers If managers become aware of misconduct, they must deal with any allegations expeditiously, seriously, confidentially, and fairly, whether or not there has been a written or formal complaint made to People Business partner. Informed managers are expected to: Take all complaints or concerns of alleged harassment seriously no matter how minor or who is involved. Ensure that any form of harassment or misconduct is immediately reported to People Business Partner. Take appropriate action to prevent retaliation, or the alleged misconduct from recurring, during and after an investigation. Managers who knowingly allow or tolerate any form of harassment or retaliation, including the failure to immediately report such misconduct to People Business Partner, are in violation of this policy and subject to disciplinary action, including termination. The Role of Individual Contributors All employees have the responsibility to help create and maintain a work environment free of bullying and harassment and can help by: Being aware of how their own behavior may affect others, and changing it if necessary. Treating their colleagues with dignity and respect. Taking a stand if they think inappropriate jokes or comments are being made to others. Making it clear to others where they find their behavior unacceptable. Intervening, if possible, to stop harassment or bullying from occurring. Reporting promptly to their manager or the People Business Partner any incident of bullying or harassment witnessed by them. The Role of People Business Partners The Chief People Officer and People Business Partners are responsible for: Ensuring that any individual filing a complaint and any accused individual(s) are made aware of the seriousness of misconduct. Explaining GitLab‚Äôs no tolerance harassment policy and investigation procedures to all individuals included in a complaint. Arranging for an immediate investigation of alleged misconduct and the preparation of a written report summarizing the results of the investigation and making recommendations for remediation to designated company officials. Notifying appropriate authorities (police, FBI, country specific bureaus) when criminal activities are alleged. Exploring informal means of resolving potential harassment if a written (formal) complaint is not made when verbal allegations are shared. Classification of disciplinary action All individual team members, managers, and leaders will be subject to disciplinary action, up to and including termination, for any act of harassment they commit. Although disciplinary action will be specific to each case, it can generally be classified into 4 levels: Level 1 First time occurrences of inappropriate behavior. An act out of character. After formal investigation, coworkers still feel comfortable working with the offender. Suspension (Paid/Unpaid based on country) Formal apology towards inflicted parties Level 2 Recurring socially inappropriate behavior. Suspension (Paid/Unpaid based on country) Mandatory course on Inclusivity Formal apology towards inflicted parties Written admonition Potential transfer to another team Potential of termination Level 3 Major infraction, including retaliation, or recurring socially inappropriate behavior after a written admonition. Termination of employment Level 4 Serious cases, including any criminal offence. Termination of employment Reported to the Police/Authorities Training & Guidance Training and guidance on understanding, preventing, and dealing with discrimination and sexual harassment will be provided to both managers and individual team members. The courses and the related enrollment logic can be found here . This training will be provided on a regular cadence, consistent with local requirements, and/or when new legal requirements are introduced. Country & US State-Specific Requirements GitLab BV (The Netherlands) Complaint Procedure If attempts to resolve the problem in an informal manner prove insufficient or if these attempts were refused or proved to be ineffective, the victim may follow the procedure below: Write a formal complaint and send it to the Chief People Officer or the People Business Partner. When the Chief People Officer or the People Business Partner receives the complaint, they must immediately handle the written complaint. The Chief People Officer or the People Business Partner shall ensure that the complaint is included in a dated document within a reasonable period of time, and includes the statements of the victim and any witnesses, as well as the outcome of any mediation. The victim and the witnesses receive a copy of their statement. A copy of the complaint will immediately be handed over to the responsible person within GitLab. After submission of the complaint to the responsible person within GitLab, an investigation will be initiated. This investigation may be conducted by a third (independent) party, depending on the complaint itself. After the investigation, the conclusion and a proposal for appropriate measures will be handed over to the responsible person within GitLab. GitLab will take the appropriate measures. Sanctions Without prejudice to the provisions that may arise from a judicial process instituted by the victim, one or more of the following sanctions shall be imposed on the person guilty of undesirable conduct: A written admonition. Transfer to another department. Termination of the agreement. GitLab shall impose, by registered letter and within five working days, the sanctions imposed upon the person who has been guilty of undesirable behavior. In case an employee abuses this complaint procedure, the above sanctions may also apply for the employee. GitLab BV (Belgium) Psychosocial Intervention GitLab has engaged with an external health and safety service called Mensura who are responsible for handling any complaints of harassment that are received but can not be resolved informally and internally. Team members in Belgium may contact this service if they wish and make a request for an informal or formal psychosocial intervention. A request for a formal intervention should include the following: a precise description of the constituent facts of violence, or psychological or sexual harassment at work, according to the Employee, when and where each of the events took place, the identity of the person(s) involved, the request to the Employer to take appropriate measures to put an end to the events. The psychosocial intervention advisor will investigate further and provide a report to the employee and People Business Partner with a recommended course of action. GitLab GK (Japan) Protection from Power Harassment ‚ÄúPower harassment‚Äù is defined as any act by a person using his/her authority in the workplace, such as job position or human relationship with a team member, beyond the appropriate scope of business conduct, which causes such team member mental distress or physical pain or degradation of the working environment. The law defines power harassment as ‚Äúremarks or behaviour by people taking advantage of their superior position that go beyond business necessity, thereby harming the workplace environment. GitLab expressly prohibits any behaviour toward team members that falls within the definition of power harassment. Depending on the individual, a person may feel dissatisfaction when given the instructions, advice, or guidance necessary in the ordinary course of business. In such cases where the actions are conducted within the scope of appropriate business practice, they should not fall under the category of power harassment. Examples of power harassment include, but may not be limited to: assault or injury (physical abuse) threats, defamation, insult or slander (mental abuse) isolation, ostracization or neglect (cutting them off from human relationships) forcing a team member to perform certain tasks, which are clearly unnecessary for the business or impossible to be performed or interrupting their normal duties (excessive work demands) ordering a team member to perform menial tasks which are far below the team member‚Äôs ability or experience and do not provide any work at all for the team member relevant to the business (insufficient work demands) excessively inquiring into the private affairs of a team member (invasion of privacy) Team members who feel that they may have been subjected to power harassment may bring their complaints to their People Business Partner, who will engage the appropriate internal consultation services and respond to claims. GitLab is prohibited from dismissing or treating unfairly any team members who report harassment cases or cooperate in an investigation or consultation process. Prohibition of Sexual Harassment Team members are prohibited from any activities that cause disadvantage or discomfort to other employees or that are damaging to the work environment by way of speech or behaviour of a sexual nature. GitLab shall take all necessary measures in managing employment to prevent sexual harassment at the workplace. Prohibition of Harassment Due to Pregnancy, Childbirth, Child Care Leave, or Family Care Leave Team members are prohibited from any activities that are damaging to the work environment of other employees by way of speech or behaviour related to pregnancy, childbirth, etc., or use of systems or measures related to pregnancy, childbirth, child care, family care, etc. GitLab shall take necessary measures in managing employment to prevent harassment due to pregnancy, childbirth, child care leave, family care leave, etc. at the workplace. Prohibition of Any Other Forms of Harassment In addition to the prohibitions listed above, team members are prohibited from any other forms of harassment at the workplace that are damaging to the work environment of other team members such as by way of speech or behaviours related to sexual orientation or gender identification. GitLab LTD (The UK) Complaint Procedure If the employee does not wish to address the harasser directly, or the behavior does not cease, then the employee (accompanied by a colleague/union representative if they wish) should report the misconduct to their line manager or a member of the People Business Partner. Wherever appropriate the line manager and or the People Business Partner may attempt to resolve the situation on an informal basis. If the informal approach does not resolve matters or the situation is too serious to be dealt with informally, the employee will need to make a formal complaint to the line manager and/or the People Business Partner. Once reported, a formal investigation will be conducted impartially by People Business Partner or by an independent third party, depending on the severity and circumstances of the complaint. Individual(s) reporting an incident or pattern of behavior will be asked to provide a written account of any action(s) causing concern, dates and times such actions occurred, and names of anyone involved, including participants and witnesses. All complaints or concerns of alleged harassment or discrimination will be taken seriously and handled promptly, sensitively and confidentially. Wherever possible the Company will try to ensure that the employee and the alleged harasser are not required to work together while the complaint is being investigated. This may involve the alleged harasser being suspended or transferred to another work area. In very serious cases, a criminal offence may have been committed and the employee may wish to report the matter to the police/authorities. Employees will be kept informed of the general progress of the investigation and the outcome of any disciplinary proceeding. If, following investigation, the complaint is upheld, appropriate disciplinary proceedings will be brought against the alleged harasser up to and including dismissal for gross misconduct. GitLab will work to prevent recurrence of the behavior. If, following investigation, the complaint is not upheld, then the company will support both the employee and the alleged harasser in rebuilding their working relationship and may consider making arrangements to avoid the employee and the alleged harasser working together. Where the employee is unhappy with the outcome of the formal investigation, they have the right to appeal against the outcome if they can demonstrate why they believe a particular aspect of the investigation has materially affected the outcome. Appeals must be submitted within 10 working days of receiving the outcome of the complaint. If an appeal is submitted, the People Business Partner will arrange a meeting to take place with the appeal chair within a reasonable time period. The appeal chair‚Äôs decision will be final and there is no further right of appeal. The appeal chair will be independent of the investigation. GitLab Ireland Ltd Complaint Procedure and Contacts The Company is aware of and recognises the effect that bullying, harassment and sexual harassment can have on its team members. ‚ÄúContact Person‚Äù ‚Äì Team Member Relations: teammemberrelations@gitlab.com ‚ÄúDesignated Person‚Äù - For each formal complaint that is reported through Lighthouse, a Designated Person will be appointed by the Company to deal with the specific issue. Informal Procedure The Company is of the view that an informal approach to solving matters can often be effective. In the first instance, an attempt should be made to address an allegation of bullying, harassment and sexual harassment on an informal basis through the procedure set out below. If you believe you are being bullied, harassed or sexually harassed you should explain clearly to the alleged perpetrator(s) that you find the behaviour in question to be unacceptable. If you would find it difficult to approach the alleged perpetrator(s) directly, then you may seek the advice or assistance of Team Member Relations. You may then request the assistance of Team Member Relations in raising the issue with the alleged perpetrator(s). Any approach made by Team Member Relations on your behalf to the alleged perpetrator(s) will be on a confidential, non-confrontational basis and will seek to resolve the issue in an informal low-key manner. If you decide that it would not be appropriate for the Company to deal with your complaint under the informal procedure, or having done so you are not satisfied with the outcome, you should proceed to the Formal Procedure. Formal procedure To begin with, you should make a formal complaint in writing via Lighthouse, giving concrete examples of the alleged bullying, harassment and/or sexual harassment, the dates of any such incidents and details of witnesses, where possible. You may make your complaint anonymously if you wish. The alleged perpetrator(s) will then be notified in writing that an allegation of bullying, harassment and/or sexual harassment has been made against them. A meeting will be arranged at which the alleged perpetrator(s) will be told that they will be given a fair opportunity to respond to each and every allegation of bullying, harassment and/or sexual harassment and they will be given a copy of your written complaint together with a copy of this policy. A copy of this policy will also be provided to the complainant. One or more designated members of the People Group (the Designated Person) will be responsible for carrying out an initial investigation into your complaint. The investigator may agree on terms of reference of the investigation with both you and the alleged perpetrator(s) in advance, and you and the alleged perpetrator(s) will be notified of the likely timescale for completion. This initial meeting will take place as soon as reasonably practicable following receipt of your complaint. If the Company considers it appropriate to do so, the Company reserves the right, at its discretion, to appoint or engage an external third party to conduct the investigation. Where the allegations made are of a severe nature, the Company reserves the right to suspend the alleged perpetrator(s) on full pay pending an investigation. The investigator will meet you, the alleged perpetrator(s) and any witnesses or other relevant persons on an individual basis to gather information surrounding the allegation. You and the alleged perpetrator(s) may be accompanied to such meeting by a colleague. The Company reserves the right to refuse your chosen representative attendance at the meeting where appropriate. You will be given the opportunity to change your chosen representative. Every effort will be made to carry out and complete the investigation as quickly as possible and preferably within the agreed timeframe. Once the investigation is complete, the investigator will present a written report to management. Both the complainant and the alleged perpetrator(s) will be informed in writing of the investigator‚Äôs report and both parties will be given the opportunity to comment on the report before any action is decided on by the Company. If, on foot of the report, the Company decides that it is appropriate, a People group representative and applicable manager will meet formally with the alleged perpetrator(s) to determine an appropriate course of action. This may include counselling, monitoring, mediation and/or invoking the disciplinary procedure. If the investigation concludes that based on the evidence, bullying, harassment or sexual harassment may have been perpetrated by an individual who is not a team member of the Company, the Company will decide what appropriate actions should be taken against such individuals including exclusion from Company premises or systems, suspension or termination of service/contract etc. If the Company decides that the complaint is not well founded, a People group representative and applicable manager will formally meet with the complainant, again to determine an appropriate course of action. It may be that some kind of counselling or mediation session(s) is required between the complainant and the alleged perpetrator(s). Either party may appeal the findings of an investigation under this procedure by submitting, in writing, within 5 working days of the Company‚Äôs decision in respect of the complaint outlining the reasons for the appeal. The appeal will be heard on the points raised and will not involve reinvestigation of the complaint. Mediation Mediation is an alternative method of resolving issues relating to bullying, harassment and sexual harassment. Mediation involves the parties seeking to arrive at a solution through mutual agreement, rather than through an investigation and decision. Mediation provides a confidential opportunity for the person who feels that they have been bullied, harassed or sexually harassed and the person(s) accused of carrying out this inappropriate behaviour to discuss the matter and to reach an agreement on their continuing working relationship. Mediation is conducted in private, and is directly between the parties concerned, with the support of a mediator, who will act as an independent facilitator. Either party may withdraw from the process at any time by notifying the mediator, in writing, that they wish to do so. If both parties agree to resolve the issue by mediation, the Company will arrange the mediation process. An appropriate person, acceptable to both parties, from within or outside the Company will be assigned as mediator. The Team Member Relations specialist may serve as the internal mediator, if acceptable to both parties. If the mediation process results in an agreement acceptable to both parties, the mediator will draw up a written record of the terms of the settlement for signature by both parties. If mediation breaks down or fails to achieve its goal, the matter can be processed through the other stages of this procedure. The person involved in the mediation process will not be involved in the investigation process. GitLab Inc and GitLab Federal LLC In addition to EthicsPoint and Lighthouse , please review the Team Member Relations Specialist section. GitLab also offers a Harassment Complaint Form that any team member may use to document any instance of any type of workplace harassment. Simply copy the form, fill it out with your information and send it to our Team Member Relations Specialist at teammemberrelations@gitlab.com . California Law Requirements Every team member located in the state of California will be required to read, review, and understand the following three documents during their onboarding: State requirements policy California Law Prohibits Workplace Discrimination & Harassment Sexual Harassment & Civil Remedies Connecticut Law Requirements Every team member located in the state of Connecticut is required to take the 2 hour Anti Harassment Training for Supervisors. This training is to be completed by all individual contributors as well as managers. Maine Law Requirements Team members who reside in Maine have the right to file a complaint through the Maine Human Rights Commission within 300 days of the date of the alleged discrimination. You may contact the Commission by phone at (207) 624-6290, TTY Maine Relay 711, or by visiting the office located at 51 State House Station, August Maine, 04333-0051. It is unlawful under the Maine Human Rights Act for an employer to retaliate against you because you filed a complaint of discrimination or because you aided in an investigation. Massachusetts Law Requirements Team members who reside in Massachusetts have the right to file a complaint to the Massachusetts Commission Against Discrimination (MCAD) : 1 Ashburton Place, Suite 601, Boston, MA 02108, tel: (617) 994-6000, TTY:(617) 994-6196. Oregon Law Requirements Nondisclosure or Nondisparagement Agreements Under this policy, a nondisclosure agreement is any agreement by which one or more parties agree not to discuss or disclose information regarding any complaint of work-related harassment, discrimination, or sexual assault. A nondisparagement agreement is any agreement by which one or more parties agree not to discredit or make negative or disparaging written or oral statements about any other party or the company. A no-rehire provision is an agreement that prohibits a team member from seeking reemployment with the company and allows a company to not rehire that individual in the future. The company will not require a team member to enter into any agreement if the purpose or effect of the agreement prevents the employee from disclosing or discussing conduct constituting discrimination, harassment, or sexual assault. A team member claiming to be aggrieved by discrimination, harassment, or sexual assault may, however, voluntarily request to enter into a settlement, separation, or severance agreement which contains a nondisclosure, nondisparagement, or no-rehire provision and will have at least seven days to revoke any such agreement. Time Limitations Nothing in this policy precludes any person from filing a formal grievance in accordance with a collective bargaining agreement [if applicable], the Bureau of Labor and Industries‚Äô Civil Rights Division 800 NE Oregon St., Suite 1045 Portland, OR 97232, tel: (971) 673-0761, TTY Relay 711, or the Equal Employment Opportunity Commission. Note that Oregon state law requires that any legal action taken on alleged discriminatory conduct (specifically that prohibited by ORS 659A.030, 659A.082 or 659A.112) commence no later than five years after the occurrence of the violation. Other applicable laws may have a shorter time limitation on filing. Rhode Island Law Requirements Team members who reside in Rhode Island have the right to file a complaint with the Rhode Island Commission for Human Rights located at 180 Westminster St., 3rd Floor, Providence, RI 02903. Phone: (401) 222-2661, Voice Relay: 7-1-1. Vermont Law Requirements If the a team member who resides in Vermont is dissatisfied with this employer‚Äôs action, or is otherwise interested in doing so, they may file a complaint by writing or calling the Vermont Attorney General‚Äôs Office, Civil Rights Unit, 109 State Street, Montpelier, VT 05609, ago.civilrights@vermont.gov , tel:(888)745-9195 (Toll Free VT) or (802)828-3657 (voice/TDD). Complaints should be filed within 360 days of the adverse action. Resources We are continuously gathering country specific references to review regulation and obtain guidance on the management of harassment or misconduct at work. Here are a few authorities we referred to in the creation of this policy: Equal Employer Opportunity Commission (EEOC) Contact EEOC : John F. Kennedy Federal Building, 475 Government Center, Boston, MA 02203, , tel:1-800-669-4000 (voice), 1-800-669-6820 (TDD). Complaints must be filed within 300 days of the adverse action. Society of Human Resource Management (SHRM) Further Guidance (Country-Specific) UK: Acas (advisory service for employees and employers) The Netherlands: Inspectorate SZW Belgium: Unia: For equality, against discrimination Last modified July 8, 2025: People Connect to People Operations Updates ( facc4002 ) View page source -  - please contribute .",
    "headings": [
      "Anti-Harassment Policy",
      "Introduction",
      "Perspective",
      "Scope",
      "Roles and Responsibilities",
      "Types of Harassment",
      "Sexual Harassment",
      "Discrimination",
      "Bullying / Workplace Violence",
      "Retaliation",
      "Speaking up during a public situation",
      "Reporting a Physical Threat",
      "Reporting Alleged Harassment",
      "The Role of Managers",
      "The Role of Individual Contributors",
      "The Role of People Business Partners",
      "Classification of disciplinary action",
      "Level 1",
      "Level 2",
      "Level 3",
      "Level 4",
      "Training & Guidance",
      "Country & US State-Specific Requirements",
      "GitLab BV (The Netherlands)",
      "GitLab BV (Belgium)",
      "GitLab GK (Japan)",
      "GitLab LTD (The UK)",
      "GitLab Ireland Ltd",
      "GitLab Inc and GitLab Federal LLC",
      "California Law Requirements",
      "Connecticut Law Requirements",
      "Maine Law Requirements",
      "Massachusetts Law Requirements",
      "Oregon Law Requirements",
      "Rhode Island Law Requirements",
      "Vermont Law Requirements",
      "Resources",
      "Further Guidance (Country-Specific)"
    ],
    "word_count": 5494,
    "extracted_at": "2025-07-21 20:12:55"
  },
  {
    "document_id": "gitlab-handbook-640282",
    "url": "https://handbook.gitlab.com/handbook/hiring/",
    "title": "Hiring",
    "category": "People Group",
    "content": "Hiring & Talent Acquisition Handbook Landing page for many of the handbook pages the talent acquisition team at GitLab uses. At the core of our team‚Äôs vision, mission, and strategy is our ability to impact GitLab‚Äôs overarching mission : to make it so that everyone can contribute to and co-create the software that powers our world . When everyone can contribute , users become contributors and we greatly increase the rate of innovation. As a Talent Acquisition team, we have an outsized impact on GitLab‚Äôs ability to make this mission a reality, by connecting top talent to profound careers from wherever they are in a truly distributed, remote workforce. Talent Acquisition Vision Statement To create globally inclusive access to opportunities so that everyone can contribute to and co-create the software that powers our world . Talent Acquisition Mission Statement It is the Talent Acquisition Team‚Äôs mission to predictably build distributed, representative teams that enable team members to co-create the future of software. Our Guiding Principles As we set out to achieve this vision, we will continue to rely on core guiding principles to define how we build toward the future. Experience : Stakeholder experience is central to our craft. We are a partner, an advisor, and an essential component to building high performing teams and culture at GitLab. Inclusivity : We design fair and equitable processes into the fabric of what we do. We believe Talent Acquisition has an outsized impact on the make-up of our teams, and we strive to continue to build them with inclusivity as a integral piece of our craft. Predictability : Our ability to have the right team members, in the right roles, at the right time is imperative to execute on our commitments and plans as an organization. We strive for predictability: to build accuracy in our forecasts and enable the business to look around corners through strong relationships and data driven decision making. Our Objectives and Roadmap We strive to be as transparent as possible, but these sections are only available for our GitLab team members. Talent Acquisition Strategy Talent Acquisition Pages and Processes Team Process Pages Talent Acquisition Productivity Talent Acquisition Alignment Triad Process Quarterly Updates Note: Internal only Shared Definitions Job: A job refers to the job title (ex: Customer Support Specialist). This will also be what appears on external job boards. In the case there are multiple positions open that are the same, and we only want to list once, we can have multiple ‚Äòopenings‚Äô (see next section) opened within one ‚ÄòJob‚Äô. Each job will have a unique identifier called a Requisition ID (example- 1001). Opening: A job can have multiple openings attached to it (ex: you are hiring 3 Customer Support Specialists. You would then have 1 ‚ÄòJob‚Äô and 3 ‚Äòopenings‚Äô against that job). A job can have multiple openings against it, but an opening can not be associated with multiple jobs. Each opening will have a unique identifier called an Opening ID (example- 1001-1, 1001-2, 1001-3). GHPiD: GHP ID is the link between Adaptive (what we use to track our operating plan) and Greenhouse (our ATS). A GHP ID has a one to one relationship with an Opening ID. It is the key interlock between our hiring plans and our Talent Acquisition activity. This is a custom field in Greenhouse. Team Playbooks Recruiter Playbook Hiring Manager Playbook (coming soon) Interviewer Playbook (coming soon) Candidate Handbook Pages Please find pages for potential and active applicants below. Candidate Handbook Page Talent Acquisition Privacy Policy Interviewer Processes Interviewer Prep Requirements Conducting a GitLab Interview Greenhouse for Interviewers Hiring Manager Processes Hiring Manager Processes Conducting a GitLab Interview Greenhouse for Hiring Managers Candidate Experience Specialist Processes Candidate Experience Specialist Responsibilities ModernLoop How to Complete a Contract - CES Process Recruiters and Sourcers Opening a job Get your headcount assignments How to open headcount on R&D How to open headcount on Sales and G&A Open a req in Greenhouse Instructions here Open a kickoff session Evergreen requisitions Creating an evergreen req Evergreen req guide An Evergreen Job is a requisition that is ‚Äòalways open‚Äô. More specifically, it is used when we have at least 3 openings for a particular job repeated each quarter. There is then one Evergreen job posted for internal, external and passive candidates. It is important that no candidate is hired to an Evergreen job, and instead is moved to an approved opening (aka an opening with a single corresponding GHPiD). TA Leadership will open EVG roles at the start of a fiscal year, with a quarterly review cadence, by leveraging the hiring plan and attrition assumptions. See the pages above for more information. Tips and Tricks Know your department before you open your req. If you need to change the department name later, the approval chain will not automatically update. If this happens to you, please contact Enablement. We do not re-open jobs after they have been closed. This is because permissions and approvers may have changed in the time since the job was first closed. Post a job in Greenhouse Post an internal job Post an external job Using Rules Auto-tags Tips and Tricks Salary transparency: In select US states, GitLab discloses salaries in job descriptions in accordance with local laws. Total Rewards will add this information to the job‚Äôs approvals page. When you create your external job post, utilize Pay Transparency Rules and select Hiring in the USA. If the job will not be posted in the US, select N/A. EEOC questions should be checked off in the US only Click here for more information on selecting the correct location for your job. This will help ensure that your LinkedIn listings are posted in the correct countries. Our jobs are now set up to automatically go to Indeed and Glassdoor and be posted as remote roles on both sites. Recruiters should unselect or leave unselected the option in Greenhouse to ‚Äúpublish to free job boards‚Äù as this requires us to input city, state, and country data that overrides the remote job listing. There is an automation in place to automatically send jobs to Indeed and Glassdoor. Req access and permissions As a member of the Talent Acquisition team, you have the ability to add team members to view your job with differing layers of access. By default, all team members can access the interview kit & scorecard of someone they‚Äôre interviewing and this access does not need to be granted. For team members who require additional access, such as a Hiring Manager or their EBA, you will need to grant that access where appropriate. You can use this guide to help determine the appropriate access. As you are deciding what access level someone should have, default to the setting that allows the most confidentiality for a candidate. If a team member does not need access to scorecards, for example, we should be choosing an access level that does not allow them to see them. A job admin (someone with higher level permissions) typically should not be at the same level or a direct report of a job they have access to. Recruiters typically grant only Hiring Manager access - interviewers do not need special access and cannot access scorecards or candidate profiles through Greenhouse. To add or remove access in a job, go to ‚Äòjob setup‚Äô and click ‚Äòhiring team‚Äô. Add or remove access under ‚ÄúWho can see this job?‚Äù. Unfortunately, there is no way to bulk add or remove access. You can also add and remove access when creating your job from a template. If you are searching for a team member and cannot find their name, ensure that you do not have filters activated. Do not grant admin access through templates, because this could create problems in the future. Set up scorecards and interview plans There are two elements of a scorecard: the Scorecard section and the Interview Plan section. Both are accessible through Job Setup. Scorecard Depending on your department, you may have a lot of your scorecard options pre-filled. R&D scorecards are always set up for you, and may only require small tweaks depending on technical language or job grade. Interview Plan Tips and Tricks Name your interviews in a way that will help your Candidate Experience Specialist partner schedule your interview. We recommend ‚ÄòTopic - Interviewer - Time‚Äô i.e. ‚ÄòValues Interview - Beyonce Knowles - 45 min‚Äô. If you are pulling from a large interviewer pool, you can discuss with your Candidate Experience Specialist partner if it makes sense to create a Prelude interviewer pool that will help with scheduling. Once you have set up the stages and interview names, add the specific interview questions asked into the ‚ÄúInterview Questions‚Äù section of the Interview Plan. If you need to make bulk changes to a large number of jobs‚Äô scorecards at once, Enablement has the ability to make bulk changes. Please contact them for assistance. Recruiters don‚Äôt need to be the only ones adding interview questions to the interview plan. Invite your Hiring Manager to complete this task alongside you. Interview Stages Stages Overview Please note that the names of stages is important, and we should only have stages with the names listed below. Anything outside of these stages will not appear on reporting. Scorecards are required in all stages that require interviews. Confidential, personal information and disclosures about being part of a protected class are never to be written in scorecards. Recruiters can add salary information into Private Notes outside of the scorecard to maintain confidentiality. Get to Know Us: This is an application review stage. Qualified: This is the stage where positive applications will be triaged. Candidates can wait here to be scheduled for interviews, to ensure the right mix of well-qualified candidates are screened at the right times. Screening: Phone or video interview with a recruiter, scheduled through Calendly. Assessment: This is an optional stage where written assignments can be submitted. Learn more here . Initial Interview: This is the first video interview with a member of the team, which helps determine if they will move forward to additional interviews. This stage ensures we are utilizing the interviewers‚Äô and candidates‚Äô time thoughtfully, and is typically either a Hiring Manager or Technical interview. Team Interview: All other team interviews live here. Debrief: This will come after the reference check stage for Engineering requisitions, because the reference checks will be initiated as the Justification (R&D‚Äôs process for the Debrief stage) is initiated. For non-Engineering departments, this will be a holding stage where candidates wait until a decision is made, to track the time it takes for us to reach a decision on a candidate who has completed their interviews. See the Engineering‚Äôs Justification process . Reference Check: The reference check stage can sometimes be done in tandem with the Debrief and Background Check and Offer stages. They can be completed by the Hiring Manager or Recruiter. Background Check and Offer: Recruiters move candidates into this stage once they‚Äôre ready to receive their verbal offer. Before that time, this stage is where an offer is prepared and goes through approvals. This is the final stage in the process. Scheduling tools in Greenhouse Candidate Experience Specialists use Modernloop to schedule. Greenhouse for internal candidates There are a few elements of Greenhouse that are different for internal candidates. Please note that internal candidates refer to current, full time team members. Interns converting to full time, contractors, or rehires are not considered internal candidates. Interviews will always be scheduled as ‚Äúprivate‚Äù events to ensure the candidate‚Äôs privacy. Interviews will show up as ‚Äúbusy‚Äù events on candidate and interviewers calendars rather than showing as interviews. If internal applicants apply via our internal job board, the yellow ‚Äúinternal applicant‚Äù tag will automatically show in the GH profile. If you don‚Äôt see this tag, you can add it by navigating to the ‚ÄúDetails‚Äù tab in GH and scroll down to ‚ÄúSource & Responsibility‚Äù. Click the pencil next to Source and select Internal Applicant from the drop down. CES will use the internal applicant‚Äôs Google Calendar to find an appropriate time for them to meet, and do not need to be sent an availability email. Former GitLab team members who re-apply are not considered internal candidates. Their source should be whatever they used to apply (ie application), and you should add a ‚ÄúFormer Team Member‚Äù tag to their profile. Candidate Hygiene Merging candidates Recruiters should merge applicant profiles whenever you see the opportunity and can verify that the candidates are the same. Merging applicant profiles allows you to keep data up to date, and also ensures that you know the full application history of anyone who applies. Aside from Internal candidates who should be merged right before hiring, you can merge candidates at any stage of the process. All of Talent Acquisition has access to merge profiles. You can merge candidate profiles by viewing the right hand toolbar on an applicant profile, and clicking on either the alert that appears at the top of the toolbar or ‚ÄòSee More‚Äô in the ‚ÄòTools‚Äô section.Before beginning, please ensure that the profiles are a match for each other by verifying that their emails, phone numbers, and/or resumes are the same. When selecting which profile is Primary (right side), consider the following: As a default, the most recent applicant profile should most likely be the Primary one, unless the most recent is a Prospect. If this is an internal candidate, the most recent profile should always be Primary, but should not be merged until the candidate has accepted their offer to minimize the number of people with access to this information. After merging, check the Activity Feed and Details tabs to see what information was removed from old profiles and ensure that you have the most accurate Recruiter, Coordinator, and Source. If you have any questions, please contact the Enablement Manager because profile merges cannot be undone. Adding or transferring candidates between jobs If a candidate is in one job and needs to move to another, it‚Äôs important to correctly determine whether they should be added or transferred. Both are accessible by clicking the ‚ÄòAdd, Transfer, or Remove Candidate‚Äôs Jobs‚Äô button on the bottom right corner of your candidate profile. Before making any moves, always ensure the candidate does not have any interviews scheduled. Transferring will automatically remove scheduled interviews and make them invisible on the candidates‚Äô Guide, but will not cancel the interview from the interviewers‚Äô calendar or inform the candidate of what is happening. Always wait until the interview has been completed, or fully cancel the interview and reschedule under the new req. When you add a candidate to a new job, the candidate starts the new job with a clean slate. There will be no scorecards or forms from any other position. This should be chosen when you are starting a brand new hiring process and will not be considering scorecards from any other job, and want their application date to be the date that you add them. When you transfer a candidate from one job to another, most of their data before the reference check stage moves with them. Scorecards will be visible in the ‚ÄúScorecards‚Äù tab and their original application date will remain. Scorecards that have not been submitted cannot be submitted after transfer, so make sure you collect those before you make your move. Offers and forms are also not transferable, so it‚Äôs important to transfer before a candidate hits the Reference Check stage. When you are moving someone from an Evergreen req into the role they will be hired into, you should always transfer. There will be no record of the previous job in any reporting. Sometimes, deciding whether to add or transfer can be tricky. If a candidate interviewed for a role that was filled by someone else, and you get a new headcount a few months later, should you transfer them into the new job or add them and start over? One thing to consider is the implication your choice will have on the data. In this case, a candidate who transfers will appear to have been in the hiring process for months, when you‚Äôve actually only been talking to them about this opening for a few days. At the same time, you want to save their scorecards because they‚Äôll be relevant for the new job. In another situation, you could have an applicant who was being considered for the role, was rejected by the Hiring Manager, but contacted a few months later when the scope of the role changed and they were now considered a good fit. The key to knowing when to transfer is understanding what impact it would have on our data, and what solution would paint the most accurate picture. If you‚Äôre not sure whether to add or transfer, you should check in with Enablement to get another opinion. Rejecting candidates When rejecting candidates, it‚Äôs important to carefully review all rejection reasons and pick the one that most accurately describes why a candidate is being rejected. This is because data is analyzed on a quarterly basis by the Talent Acquisition Leadership team, People Leadership Team, and E-Group. Once you‚Äôve clicked the most detailed reason, include detailed context on the reason in the ‚ÄúRejection Notes‚Äù box. Please be as specific as possible. For example, instead of writing ‚Äúthe candidate rejected because of compensation‚Äù, write ‚Äúthe candidate rejected because the salary and equity that we offered was much lower than a competing offer.‚Äù Please note that you cannot submit scorecards after rejecting a candidate. We will not cancel an interview within less than 24 hours‚Äô notice if the candidate is being rejected. The recruiter will notify the candidate that they are no longer in consideration for the role and present them with the option to continue with the scheduled interview slot. The interviewer must be informed, and will not discuss the feedback that led to the decline. The conversation will pivot to general opportunities at GitLab and answering any questions about the company and team that the candidate may have. If the candidate‚Äôs interview is outside 24 hours, the interview should be deleted in Greenhouse before the candidate is rejected and notified. The candidate should always be notified if they‚Äôve been rejected, and the recruiter is responsible for declining the candidate. Any interviews scheduled will also not be automatically canceled, so you‚Äôll need to ensure this happens first. If the candidate does not join the interview room within 10 minutes or fails to complete their MR within the specified time before the interview, the interview will be cancelled and the recruiter will get in touch with the candidate and not schedule further interviews. If the candidate notifies us that they are unable to attend the interview before the scheduled time, CES can automatically reschedule using the candidates‚Äô current availability or by requesting fresh availability. If we have rescheduled at the request of the candidate and the candidate requests to move the interview again without reasonable explanation, the recruiter will automatically reject the candidate. We understand that there may be extenuating circumstances leading to the above situations where a candidate is unavailable or unprepared. It is at the recruiter‚Äôs discretion to reengage or choose to reschedule. Offers and Closing Reqs Reference Checks Reference check information Reference check forms are mandatory. If you receive reference check information outside of the form and don‚Äôt want a candidate to fill it out again, Enablement can help you adjust the form to collect the remaining information. These forms are important because they provide necessary information for the accuracy and completion of a contract. Tips and Tricks These forms, just like an offer in Greenhouse, do not transfer when you move a candidate from one job to another. Ensure that your candidate is in the role they‚Äôll be hired for before sending. Completed forms live in a candidate‚Äôs ‚Äúapplication‚Äù tab. If you can‚Äôt find the form, it‚Äôs likely there! While nicknames, preferred last names, and PIAA details will save to the details page automatically, legal name will not. Please ensure the legal first and last name is set as the candidates‚Äô name before sending contracts. If you have a candidate in the Netherlands, they are required to provide their BSN and date of birth. Recruiters should add those fields into the offer. Offers Creating an offer in Greenhouse Common approval challenges Offer stuck in approvals: If the offer is stuck in the approvals chain because someone is out of office, the recruiter can talk to the approver‚Äôs manager about an appropriate temporary adjustment and recommend this to the Enablement team. Recruiters should be proactive in reaching out to approvers if an offer is urgent or a candidate is being inconvenienced by a long wait time. If there is a known OOO, this discussion should happen before there‚Äôs an offer waiting for approval. Enablement can help with any changes needed. Offer approvals chain is incorrect: If approvers are missing or incorrect, the Recruiter should contact a member of the Enablement team to adjust. The only people with access to make approvers changes are Enablement and Director, Executive Recruiting, who change approval chains to maintain confidentiality for executive positions. Often, approval chains are incorrect because you have chosen the wrong department, so it‚Äôs important to choose the right one before opening your req. Verbal offer information Declined offer steps Background screens Contact the Senior Background Check Specialist at backgroundchecks@gitlab.com with any questions or requests for status updates. The most commonly asked question for candidates outside the US is, ‚ÄúWhy can‚Äôt I enter more than one past employer?‚Äù Outside of ‚Äãthe US, candidates will only submit one former employer and Sterling is working as expected. Sourcing at GitLab Sourcing overview Identifying prospects Notifications There are no perfect or required ways to set up your Greenhouse notifications, but these are some of our recommendations. Slack To set up Slack to notify you when you‚Äôre tagged in candidate notes, select your initials in the upper right hand corner of Greenhouse. From there, you can activate your Slack integration. Toggle the button to send @mentions to Slack. This is also a great button to point out to Hiring Managers so they are easier for the team to reach. Additionally, you will see a section for ‚ÄúNotification Preferences‚Äù. Most recruiters will set these up, but they are optional if you prefer to only receive notifications by email. Email notifications There are two ways to set up your email notifications. The first is to select your initials in the top right corner of Greenhouse, and under ‚Äúnotification preferences‚Äù, select where you would like to receive notifications about jobs. This is an easy way for Hiring Managers to set up their preferences for all jobs at once, but may not be as easy for the Talent Acquisition team to remember to update. Instead, we would recommend setting your reminders either during your job setup process or after, by clicking into your Notifications tab of an individual job‚Äôs Job Setup. Here, we recommend that you stay in the loop on your candidates by electing to receive emails every time a scorecard is submitted, an internal candidate applies, a referral is submitted, and an offer is fully approved. You can choose your name or ‚ÄúCandidate‚Äôs Recruiter‚Äù, but you‚Äôll want to be sure that you‚Äôre listed as the recruiter on the role to make this work. Recruiters should double check during this time that no one is receiving notifications that should not (ie an interviewer receiving offer notifications) and adjust privacy settings accordingly. You can sync your emails between Greenhouse and Gmail. Greenhouse has a Gmail add-on that can help with syncing communications. You can learn more about it by going here . Talent Acquisition Programs Referrals Referral Operations Referral Process Details on who is eligible for referrals Acquisitions Acquisitions Internal Mobility Internal Hiring Process Posting a job internally In the offer process Emerging Talent Emerging Talent Associate Engineer Development Global Hiring Resources Global hiring links The ‚Äúcountry hiring status‚Äù section within the compensation calculator is the best place to look for a list of current countries available for hiring. This country list , maintained by and accessible to recruiters, details specific information about each country that can help you answer candidate questions and prepare for potential hiring delays. For general questions about specific policies or whether we support certain types of visas or sponsorship, message #people-group-confidential. If the request is more involved, or requires a conversation, you can slack Harley Devlin. PEO information and timelines For candidates who are located in Countries where we do not have an entity, we use a PEO (Professional Employment Organization). The actual employment contracts will be sent and issued by the PEO who also handles the processing and payment of payroll and associated taxes and compliance in each of the countries on behalf of GitLab. The contracts themselves are between the individual and the PEO. GitLab is currently hiring into three PEOs Remote.com Global Upside Papaya Global Expansion The following timelines to onboarding are advised: Remote.com: remote.com onboarding timeline Country Working days Denmark 3 Hungary 4 Italy 3 Sweden 3 Luxembourg 4 Switzerland 8 Global Expansion: Processing contracts for candidates hired via Global Expansion could take up to 10 bueisness days. Country Working days Austria 10 business days Chile 10 business days Costa Rica 10 business days Kenya 10 business days Latvia 10 business days Mexico 10 business days Philippines 10 business days South Africa 10 business days UAE 10 business days Global Upside: Country Working days India 10-14 business days Papaya Processing for Italy (Dirigenti) could take up to a month, so we recommend start dates at least 6 weeks after the offer is generated. Other Hiring Pages Greenhouse Talent Acquisition Process Framework Additional Resources Overview of Job Families Background checks Benefits Compensation Contracts GitLab talent ambassador Onboarding Stock options Visas Candidate Handbook Page This page outlines what hiring looks like at GitLab. We share the latest information about our processes and practices to ensure you have the information you need to feel confident during the interview process. Conducting a GitLab Interview Helpful information about how to prepare and conduct interviews for GitLab Contractor Conversions How to convert a contractor to a full time team member Emerging Talent @ GitLab Overview of Emerging Talent @ GitLab GitLab talent ambassador Keeping with our mission that everyone can contribute, we want all GitLab team members to feel encouraged and equipped to take part in helping us find great talent and act as ambassadors for the company and our talent brand. Greenhouse Greenhouse is GitLab's ATS (Applicant Tracking System). All Hiring Managers and Interviewers will use Greenhouse to review resumes, provide feedback, communicate with candidates, and more. Interviewer Prep Requirements Learn more about the tools required to prepare you for interviewing at GitLab Job Families Job families are organized by function at GitLab and we use them to inform candidates of roles and current team members to evaluate their performance. MERGE: Ongoing Development for Associate Engineers Congratulations and welcome to the GitLab team! We‚Äôre excited to have you on board as you ‚Ä¶ Referral Operations This page is for information regarding the backend process of the Referral Process. Referral Program and Process While GitLab‚Äôs Referral program is fairly straight-forward, there are some nuances to be mindful of. Please take a moment to review the program rules outlined below before submitting a referral through Greenhouse to ensure eligibility. Sourcing Sourcing has proved itself to be a great channel for attracting the best talent, this page details how we source talent at GitLab. Talent Acquisition Alignment This page is an overview of the search team alignment and the talent acquisition platform directly responsible individual in talent acquisition operations and talent brand. Talent Acquisition Process Framework This page is an overview of the processes each party of the search team is responsible for. It links each party or process. Talent Acquisition Productivity Talent Acquisition team and individual productivity metrics. Last modified May 26, 2025: Add playbook links to hiring page ( 81cd8e8e ) View page source -  - please contribute .",
    "headings": [
      "Hiring & Talent Acquisition Handbook",
      "Talent Acquisition Vision Statement",
      "Talent Acquisition Mission Statement",
      "Our Guiding Principles",
      "Our Objectives and Roadmap",
      "Talent Acquisition Pages and Processes",
      "Team Process Pages",
      "Team Playbooks",
      "Candidate Handbook Pages",
      "Interviewer Processes",
      "Hiring Manager Processes",
      "Candidate Experience Specialist Processes",
      "Recruiters and Sourcers",
      "Talent Acquisition Programs",
      "Referrals",
      "Acquisitions",
      "Internal Mobility",
      "Emerging Talent",
      "Global Hiring Resources",
      "Other Hiring Pages",
      "Additional Resources"
    ],
    "word_count": 4682,
    "extracted_at": "2025-07-21 20:12:59"
  },
  {
    "document_id": "gitlab-handbook-102842",
    "url": "https://handbook.gitlab.com/handbook/leadership/",
    "title": "Leadership",
    "category": "People Group",
    "content": "Leadership This page contains leadership pointers. The first couple of headers indicate which group they apply to, using the groupings defined on our team structure page . Managers of One In an all-remote organization, we want each team member to be a manager of one . A manager of one is an attribute associated with our Efficiency value . To be successful at GitLab, team members need to develop their daily priorities to achieve goals. Managers of one set the tone for their work, assign items and determine what needs to get done. No matter what role you serve, self-leadership is an essential skill needed to be successful as a manager of one. At GitLab, leadership is requested from everyone, whether an individual contributor or member of the leadership team. As a leader, GitLab team members will follow your behavior, so always do the right thing. Lead by example with effort. Everyone who joins GitLab should consider themselves ambassadors of our values and protectors of our culture . Behavior should be consistent inside and outside the company. We do the right thing outside the company, too. GitLab respects your judgment of what is best for you, since you know yourself best. If you have a better opportunity somewhere else don‚Äôt stay at GitLab out of a sense of loyalty to the company. In tough times people will put in their best effort when they are doing it for each other. We work asynchronously . Lead by example and make sure people understand that things need to be written down in issues as they happen . Hold your team accountable with documentation. We are not a democratic or consensus driven company. People are encouraged to give their comments and opinions, but in the end one person decides the matter after they have listened to all the feedback. It is encouraged to disagree and have constructive debates but please argue intelligently . We value truth seeking over cohesion. We avoid meetings , when possible, because they don‚Äôt support the asynchronous work flow and are hard to conduct due to timezone differences. Start meetings on time, be on time yourself, don‚Äôt ask if everyone is there, and don‚Äôt punish people that have shown up on time by waiting for people or repeating things for those that come late. When a meeting unblocks a process or decision, don‚Äôt celebrate that but instead address the question: How can we unblock in the future without needing a meeting? Be intentional in how you prepare for and participate in meetings. Async communication works best when folks review their calendars and prepare in advance of meetings . We give feedback , lots of it. Don‚Äôt hold back on suggestions for improvements, this helps us grow. Take pride in helping others through feedback. Focus on improvement . If you meet external people, always ask what they think we should improve. Following from Paul Graham‚Äôs advice : Strive to make the organization simpler. Saying something to the effect of ‚Äúas you might have heard‚Äù, ‚Äúunless you‚Äôve been living in a cage you know‚Äù, ‚Äúas everyone knows‚Äù, or ‚Äúas you might know‚Äù is toxic. The people that know don‚Äôt need it to be said. The people that don‚Äôt know feel like they missed something and might be afraid to ask about the context. Don‚Äôt use someone else‚Äôs name , remind people of your title, or otherwise ‚Äúpull rank‚Äù to get things done. Act as a CEO of yourself and your role by taking responsibility to set goals and appropriate timelines. Prioritize your contributions and know it‚Äôs impossible to know everything . Communicate clearly with your team and people leader on the status of your goals. Act quickly to address areas that pose a challenge or to reassess goals that cannot be reached in an alloted timeframe. Examples of actions from managers of one at GitLab When asked to attend a synchronous brainstorming call, a team member instead opens an issue and requests for their team‚Äôs ideas asynchronously . A people leader champions our value of Diversity, Inclusion and Belonging by becoming a mentor . A team member blocks out dedicated time for learning and development to implement a regular practice of self-serving and self-learning . A team member in a new role finds an inefficiency in a process they are learning. Without being asked or supervised, they open a merge request (MR) proposing a change and assign it to their manager for review. When a scheduled meeting agenda is complete 10 minutes before the call is set to end, an attendee ends the call early. A people leader hires a new team member that demonstrates our CREDIT values . Before asking for others‚Äô time to discuss a topic, they dedicate time to process their thoughts and make a proposal . A manager of one prioritizes well-being by blocking their calendars for fitness, meals, paid time off , and personal appointments. A team member surfaces blockers as opposed to assuming their manager or team is already aware, and simultaneously works to unblock others by working in public and with a low level of shame . Interim and Acting Leadership In some cases, a individual in the Management group , Director group , S-group , or even E-group may have an ‚ÄúInterim‚Äù or ‚ÄúActing‚Äù title. Acting means that someone is occupying this role temporarily and will move back to their original role after a set amount of time or other conditions, such as an external hire. Interim means the individual is working on a promotion into the role. In either case, they will be fulfilling the full responsibilities of the role. If you have any questions, about the future of the role, please ask them or their manager. Individual departments will have their own criteria for who is eligible to occupy these roles, so please check the career development page for your department. Making decisions Please see the Making Decisions Leadership page. Communication should be direct, not hierarchical Most companies communicate from top to bottom through a chain of command. This communication flow often empowers managers, but it also introduces inefficiency as team members are not able to connect directly with the people they need to communicate with in order to get their work done. At GitLab, every team member is encouraged to reach out to whoever is the correct person (or people) to quickly unblock issues, solve problems or support in other ways. Do be courteous of your direct manager and copy them on the request. We don‚Äôt encourage unnecessary friction in asking team members to escalate through managers and wait for responses to come back. What matters is efficiency in getting to results. Slack the CEO, Slack a VP, or Slack a peer. Do what you need to do to make GitLab successful. Managers should not be bottlenecks or silos for communication. Anyone should feel comfortable reaching out to anyone else with the best information they can to solve a problem. This is a more efficient , transparent , and collaborative way to work. Giving Feedback Giving regular feedback is extremely important for both managers and team members. Feedback can take the form of coaching sessions, separate from 1-to-1 meetings . Giving feedback is also about being prepared and, depending on the situation, you should create separate agendas and structure them as follows: Provide context . Use a framework for your feedback. Our recommended framework is Crucial Conversations ‚Äì we offer a training course , and the book is part of our recommended reading for leaders . Ask yourself, is this: Actionable Specific Kind (Does the feedback help the person? Note: Being kind is not the same as being nice.) Objective (similar to Fair) Relevant to the job role and compa ratio Identifying root causes Sometimes when performance dips, the best way to tackle it is to try to determine the root cause. This is easier said than done. There is a great tool that CEB (now Gartner) created to help with this called performance issue root cause diagnostic . It may not always be possible or appropriate to determine the root cause, so the underperformance process should be followed. Responding to Negative Feedback As a leader, the way you respond to negative feedback makes a significant impact on your team. Remember that it can be difficult for people to approach someone in authority with concerns and respond with sensitivity and appreciation. In particular, we recommend that you keep the following in mind: Don‚Äôt argue or get defensive. Accept the feedback for what it is: an attempt to help you improve your work or your professional relationships. If you do have to explain yourself, try to remain empathetic. It‚Äôs fine (even preferable) to defer action. When presented with negative feedback, we often feel like we have to either justify our actions or promise change, and since change isn‚Äôt always easy when you‚Äôre responsible for a large team, justification becomes the default. It‚Äôs OK to say you need time to evaluate the feedback and decide how to proceed. The Right Way to Respond to Negative Feedback If a team member from your department or another part of the org comes to you and says they do not feel like they or their reports‚Äô contributions are valued by your reports, the manager should try to resolve this. Research shows that this is more likely to happen to underrepresented minorities. Please note that DRIs are free to ignore feedback without acknowledging it and that valuing contributions isn‚Äôt the same as agreeing with them . This is about co-opting someone else‚Äôs idea without attribution and/or dismissing an idea with an ad-hominem remark. 1-to-1 Please see 1-1 . Skip level interactions Please see skip-levels . Your Individual README A team member‚Äôs README page is intended to help others understand what it might be like to work with them, especially people who haven‚Äôt worked with them before. It‚Äôs also a well-intentioned effort at building some trust by being intentionally vulnerable, and to share your ideas of a good working relationship, to reduce the anxiety of people who may be on your team, now or in the future. READMEs provide a genuine report on how a person works, reducing bias/assumption and enabling people to work together based on a common framework. As part of GitLab‚Äôs transparency value, we encourage each GitLab team member to consider creating their own README. READMEs by Division GitLab division README pages are linked below for context. Reading other READMEs is an important way to get ideas on what you can include in yours. Let these serve as a guide and inspiration to you. Engineering READMEs Marketing Team READMEs Product READMEs UX Department READMEs Sales Team READMEs People Group READMEs Finance Team READMEs Legal Team READMEs Office of the CEO READMEs Creating Your README Copy the README-template and paste into your favorite Markdown editor. If you do not have a Markdown editor, Typora and Bear are recommended. Fill out the recommended sections. Note that each section is optional . You can remove those you aren‚Äôt comfortable filling out, and add sections that are interesting or important to you. Once complete, you‚Äôll need to create an issue with the Digital Experience team to add a page to GitLab‚Äôs website. If your division already has a page to host READMEs (see above), follow the guidelines to add a new page within that directory (e.g. Darren M. , a member of the marketing team, would add a new directory and page within /handbook/marketing/readmes , creating /handbook/marketing/readmes/dmurph ) If your division does not yet have a holding page for READMEs, follow the guidelines to add a new page ( readmes ) within your division‚Äôs handbook section first , then create your username directory within readmes . Bonus points if you add your README & yourselves as codeowner to the .gitlab/CODEOWNERS file. Alternatively you can create your README dogfooding GitLab‚Äôs README profile customization feature. Follow documentation on how to add details to your GitLab profile with a README. Do not forget to add your profile‚Äôs link to you division‚Äôs holding page. Advertising Your README Once your README is created, consider adding a link to it from following places: Google Doc agendas or calendar invites Your GitLab.com profile Your Slack profile Your Email signature This provides maximum visibility to others, so that they may read your README in advance of working with you. This allows them to take your working style and communication preferences into account, ideally increasing the overall level of empathy expressed. READMEs are particularly powerful when working with those outside of GitLab, who may be unfamiliar with our values . A README is a beacon of transparency , and helps set the tone for any working relationship. Coaching What is coaching? Coaching is about helping others help themselves. It is not about giving advice, instruction, or telling someone what to do. Coaching is about focusing on the future and identifying where the coachee wants to be and what they want to achieve. At GitLab, we‚Äôve defined coaching as a conversation that helps people think for themselves, find their own answers, and commit to action they design. As a coach, your role is to clarify the pathway from the current state to the future. Coaches do this by enabling the coachee to make informed choices based on deeper insight. No matrix organization Please see no-matrix-organization Stable counterparts We want to promote organic cross-functional collaboration by giving people stable counterparts for other functions they need to work with. For example, each Strategic Account Executive (SAE) works with one Sales Development Representative (SDR). With our categories every backend team of developers maps to a Product Manager (PM) and a frontend team . Giving people a stable counterpart allows for more social trust and familiarity, which speeds up decision making, prevents communication problems, and reduces the risk of conflicts. This way we can work effectively cross functionally without the downsides of a matrix organization . Factory vs. studio We want the best combination of a factory and a studio . The studio element means anyone can chime in about anything, from a user to the CEO. You can step outside your work area and contribute. The factory element means everyone has a clearly assigned task and authority. Effective escalations Team members should feel comfortable escalating issues when help is needed to resolve unexpected challenges. Effective escalations are good, because they speed up decision making. When team members escalate an issue, another person is brought in as a decision maker or adviser as other team members disagree or need help with alignment or a serious trade-off is needed. Escalation can offer clarity and a path forward, and can be a sign of seniority for the person initiating the escalation when they know what, how, and when to escalate. As noted in this medium article , explicit esclatation should answer these four questions: Why is this important to the person/team I‚Äôm escalating to? What are the relevant details of the challenge? What have you tried? What do you need? Folks who are escalating an issue should avoid surprising folks in the management chain. This means that other relevant team members should be aware that an escalation is occurring. For example, in E-Group, members agree that they will not go to the CEO with an escalation without first notifying other relevant members that this is happening. There may be some exceptions to first notifying managers or peers. For example, a team member feels unsafe in voicing a concern to a manager or their peers and feels that they can‚Äôt effectively escalate with standard notification without retribution. While exceptions may be appropriate, they should be rare. After a team member escalates an issue, it is OK if they disagree, commit, and advocate with the decisions made by the person they escalated to. Process gets a bad rep Process has a bad reputation. It has that reputation for things that we try to avoid doing at GitLab. When you have processes that are not needed it turns into a bureaucracy. A good example are approval processes. We should keep approval processes to a minimum, by both giving people the authority to make decisions by themselves and by having a quick lightweight approval process where needed. But process also has good aspects. Having a documented process for how to communicate within the company greatly reduces time spend on on-boarding, increases speed, and prevents mistakes. A counterintuitive effect is that it also makes it easier to change processes. It is really hard to change a process that doesn‚Äôt have a name or location and lives in different versions in the heads of people. Changing a written process and distributing the diff is much easier. Talent Acquisition and retention Managers have an tremendous responsibility around talent acquisition and retention of team members. Voluntary departures should be low, especially unexpected ones. The most common reasons for resignations can be tied back to the manager. We want few candidates to decline an offer, especially when the reason isn‚Äôt compensation. We need adequate candidate pipeline volume and quality, especially for crucial positions. Candidates that have a proposed offer should meet the bar, especially for more senior positions. Build a global team . Unless shown with a business case, ‚Äúwe can‚Äôt find the talent out of the bay‚Äù goes against our diversity, inclusion and belonging mission and the Location Factor KPI . High Output Management GitLab leadership and management approach was built using principles covered in the book ‚Äú High Output Management .‚Äù Please see High Output Management to learn more. Building High Performing Teams Building a team to deliver results is a very important aspect of improving efficiency and iteration . A high-performing team will always deliver results. As a leader at GitLab, your role is to develop a high-performing team to reach the desired level of performance and productivity. There are certain traits that high-performing teams display at GitLab: Have a clear vision of their objectives and goals Stay committed to achieving their goals Manage conflicts Maintain effective communication and a healthy relationship with each other Make unanimous decisions as a team Watch the replay of our conversation with Jeb Hurley, Co-founder and Managing Partner Brainware Partners where we discussed: Managing trust, productivity, and well-being on remote teams Behavior, biochemistry, and dynamics of trust The value of measuring and reporting on impacts of building trust Skills and behavior of building high performing teams competency for Managers : Models and encourages teamwork by fostering collaboration, communication, trust , shared goals, mutual accountability and support Fosters an environment where results are balanced with time management of multiple assignments and Direct Responsible Individuals (DRI‚Äôs) on important topics Empowers team members to be a Manager of One and gives them the tools to grow professionally in their careers Attracts and retains top talent by creating an inclusive environment built on trust , delegation, accountability, and teachability Strategies to Build High Performing Teams The Drexler-Sibbet Team Performance Model is an excellent tool to help build high performing teams at GitLab. The model provides a roadmap for a team and a common language. It is a simplified description of how a team works together that highlights the most important things the team needs to focus on to reach high performance. At GitLab, we can use it as a frame of reference to developing high performing teams. It can help Managers ensure new and existing team members know the mission and direction of the team by the following: To form your team To guide what your team does To monitor how well your team is doing To diagnose where your team may be struggling or identify the keys to your team‚Äôs success. 7 Stages to developing high performing teams: Orientation - Why are we here? Team members need to see a sense of team identity and how individual team members fit in. Trust Building - Who are you? Team members share mutual regard for each other and are open and supportive of trust-based relationships. Goal Clarification - What are we doing? Assumptions are made clear; individual assumptions are made known with a clear vision of the end state. Commitment - How will we do it? Team members understand how it will make decisions and do the work. Implementation - Who does what, when, where? Team members have a sense of clarity and can operate effectively due to the alignment of shared goals. High Performance - Wow! The team is accomplishing more than it expected. The team has taken off, creativity is fostered and goals are surpassed. Renewal - Why continue? The team is given recognition and celebrates achievements of individuals that produce valuable work. Reflect on lessons learned and reassess for the future. Manager Resource: Identifying & Addressing Burnout Building and maintaining high performance includes staying mindful of team well-being and potential burnout. With GitLab‚Äôs results-driven culture, the demands of product innovation around AI, the fast-paced and ever-evolving business environment, our organization recognizes the crucial balance between achieving ambitious goals and maintaining the well-being of our team members. Everyone can access this handbook resource designed for managers to identify & address burnout . This has an ongoing impact on team performance. Manager M-Team Groups M-teams are management support groups made up of 3 to 6 managers who are in timezones that allow for sync meetings among members. M-teams should set up a regular meeting on a cadence agreed by the members with the agenda being ‚Äúwhat‚Äôs challenging this week?‚Äù. Decide who will facilitate and each person will get a chance to have their challenge discussed in the meeting. When it‚Äôs your turn, you talk a little about what you‚Äôre struggling with. M-groups agree to a level of confidentiality so that group members are willing to be vulnerable; vulnerability leads to trust and better outcomes for the group. If you‚Äôre interested in starting or joining an m-team meeting, reach out to other managers in the #managers Slack channel. Articles Carta‚Äôs Manager‚Äôs FAQ Carta‚Äôs How to hire How Facebook Tries to Prevent Office Politics The Management Myth Later Stage Advice for Startups Mental Models I Find Repeatedly Useful This Is The Most Difficult Skill For CEOs To Learn Great article about how to think about PIPs , although our time scales are shorter. Impraise Blog: 1-on-1s for Engaged Employees Mind Tools: Giving Feedback: Keeping Team Member Performance High, and Well Integrated Remote.Co: 5 Tips for Providing Feedback to Remote Workers Really interesting blog post from Hanno on remote team feedback 51 questions to ask in one-on-ones with a manager HBR: The rise of data driven decision making is real but uneven Forbes: 6 Tips for Making Better Decisions Books Books in this section can be expensed . Notable books from the E-Group Offsite Book Selections may be added to the list below. We sometimes self-organize book clubs to read through these books as a group. High Output Management - Andrew Grove Top 10 quotes Book club The Hard Thing About Hard Things: Building a Business When There Are No Easy Answers - Ben Horowitz Chase Wright‚Äôs notes Crucial Conversations: Tools for Talking When Stakes Are High - Kerry Patterson Notes from the E-group reading: Virtual teams are much more likely to fail on crucial conversations than colocated teams We need to develop the skill of sensing the tone of a-sync conversations to uncover potential issues We need to find a way to create psychological safety for people in official channels Starting with empathy is a great way to gather the context needed in a tense situation - this is hard a-sync, but more important Consider getting context 1-on-1 (through Slack) before posting a comment in an issue that you might regret later As leaders, we need to give context as well. A good question is: ‚ÄúWhat would have to change for us to get X prioritized‚Ä¶‚Äù Documenting something is not a replacement for having the hard conversation Book club Crucial Conversations Handbook Page Email Lists Software Lead Weekly Training When you give leadership training please screen share the handbook instead of creating a presentation . Leadership Development Opportunities Managers can participate in our Elevate program , focused on developing management skills to lead all-remote teams. Leadership development coaching with the growth & development benefit . More details about a formal GitLab coaching program to come. Self-led opportunities to be a mentor - keep an eye out for a company-wide mentorship program with applications opening at the end of January 2022. Join the women‚Äôs TMRG mentorship group to either be a mentor to practice leadership or get paired with a leader to learn from. Sign up for Crucial Conversations training Explore opportunities to join the CEO Shadow program or other division specific shadow programs with the Chief of Staff , and Security . Explore the skills needed to successfully transistion from IC to Manager in GitLab Learn . Explore leadership and management courses on LinkedIn Learning Learning and Development is developing several programs in FY23 to include a Managing at GitLab Course , New Manager Bootcamp , LifeLabs Learning Pilot and Launch , coaching program , and much more! People Group Feel free to reach out to anyone in the People Group for further support on leadership development topics. You can find us on the team page , using the People Group dropdown. The team may also be reached via HelpLab. Being a public company Learn more on GitLab‚Äôs view of being a public company . Mitigating Concerns We have a page which documents our Mitigating Concerns . Many of our values help to mitigate some of these concerns. 1-1 Maintaining an effective and efficient agenda is important to get the best out of the 1-1 (read as: ‚Ä¶ Biggest Tailwinds We believe that the market opportunity for a complete DevSecOps platform designed as a single ‚Ä¶ Book clubs From time to time, we run internal book clubs on a book from one of our resource lists. All are ‚Ä¶ Building Trust at GitLab On this page, GitLab details considerations for building trust in remote teams. Learn more! Coaching Coaching at GitLab At GitLab, we use coaching to: Provide opportunity for self reflection, ‚Ä¶ Compensation Review Conversations Compensation Review Conversations Conversations with regards to compensation are an important part ‚Ä¶ Crucial Conversations GitLab's strategies for being an effective leader during crucial conversations with team members Effective Delegation Effective Delegation The purpose of this section is to give you the following: An appreciation for ‚Ä¶ Emotional Intelligence Introduction At GitLab, we place a high level of importance on interpersonal skills for workplace ‚Ä¶ GitLab Onsites - Getting your team together in person GitLab Onsites GitLab Onsites noun Dedicated time for all-remote teams to come together in person to ‚Ä¶ High Output Management Introduction At GitLab, one of our favorite books is, ‚ÄúHigh Output Management‚Äù by Andrew ‚Ä¶ Identifying & Addressing Burnout Manager Guide: Identifying & Addressing Burnout With GitLab‚Äôs results-driven culture, the ‚Ä¶ Making Decisions Intro to making decisions On this page, we have outlined how we make decisions at GitLab. Making ‚Ä¶ Managing Conflict Managing conflict In this section, we will review the definition of conflict, the different causes ‚Ä¶ No Matrix Organization No matrix organization introduction On this page, we will give an overview of how GitLab operates as ‚Ä¶ Skip Level Meetings - Overview Purpose and Benefits of Skip-Levels A skip-level meeting is a meeting during which a manager‚Äôs ‚Ä¶ Underperformance We want team members to be successful and should offer every opportunity for them to work effectively. Workforce Planning Workforce planning and SWOT analysis Last modified June 3, 2025: Fix broken links ( d7547623 ) View page source -  - please contribute .",
    "headings": [
      "Leadership",
      "Managers of One",
      "Examples of actions from managers of one at GitLab",
      "Interim and Acting Leadership",
      "Making decisions",
      "Communication should be direct, not hierarchical",
      "Giving Feedback",
      "Identifying root causes",
      "Responding to Negative Feedback",
      "1-to-1",
      "Skip level interactions",
      "Your Individual README",
      "READMEs by Division",
      "Creating Your README",
      "Advertising Your README",
      "Coaching",
      "What is coaching?",
      "No matrix organization",
      "Stable counterparts",
      "Factory vs. studio",
      "Effective escalations",
      "Process gets a bad rep",
      "Talent Acquisition and retention",
      "High Output Management",
      "Building High Performing Teams",
      "Strategies to Build High Performing Teams",
      "Manager M-Team Groups",
      "Articles",
      "Books",
      "Email Lists",
      "Training",
      "Leadership Development Opportunities",
      "People Group",
      "Being a public company",
      "Mitigating Concerns"
    ],
    "word_count": 4615,
    "extracted_at": "2025-07-21 20:13:05"
  },
  {
    "document_id": "gitlab-handbook-350427",
    "url": "https://handbook.gitlab.com/handbook/people-group/learning-and-development/",
    "title": "Learning & Development",
    "category": "People Group",
    "content": "Learning & Development Overview Purpose Why we exist: GitLab Talent Development (commonly referred to as ‚ÄúLearning & Development‚Äù) exists to enhance team member performance, expand capabilities, and further develop skills that make GitLab team members the top talent in the industry. We strive to foster a culture of continous growth so that GitLab remains a great place to work. Positive impact on team member experience leads to a positive impact on results, which leads to a positive impact on GitLab customers. Vision Where are we going: GitLab seeks to be recognized as a top organization for remote learning & development. We aim for a future where everyone contributes to a culture of curiosity. Mission What we do: We empower individual contributors and equip leaders through self-service learning. We accomplish a culture of development by: Focusing on skill-based learning Providing resources to improve career mobility Developing learning journeys for teams throughout the organization Objectives Performance indicators Reduce voluntary attrition by 5% each year by measuring exit survey data related to career development Secure a 5% increase in the Growth & Development category of the annual engagement survey Increased access to career mobility: internal transfers, promotions , job shadows, intern for learning, and professional development Clear evidence of best in class remote learning & development (i.e. Brandon Hall Awards , Industry Speaking Events, Thought Leadership articles, etc.) Principles Meaningful and relevant content. We deliver learning solutions that help you reach your professional goals. Values aligned. Our learning solutions reinforce GitLab‚Äôs values and foster continuous learning and curiosity. Diverse approaches to learning. We apply a blended learning model to find solutions to various individual needs. Community. L&D offerings available to the public so that everyone can contribute. Learning & Development Team We are a small team, but we‚Äôve got a big role to play at GitLab! Learning and Development Director : Tre Ely Senior Learning and Development Program Manager : Jamie Allen Senior Learning and Development Program Manager : Lauren Cairns Senior Learning and Development Program Manager : MQ Gillespie Team Member Resources The Learning & Development team has a number of resources to help team members learn new skills. Click the button(s) below to learn more about each one: Transitioning to a Manager Role Growth & Development Fund Career Development & Mobility Learning Initiatives Self Paced Learning Level Up Elevate Manager Training Mentorship Coaching Partnerships at GitLab Multiple teams across the company contribute to learning and development of our team members. Below is a list of some teams we partner with and how we collaborate. Education Services: Share customer & product training with team members on Level Up Talent Brand: Telling career growth stories People Operations: Measuring impact of learning and development on team member engagement Select Department Subject Matter Experts: Legal, Compliance, and other specific courses Contact Us Slack: #learninganddevelopment Email Us: learning@gitlab.com Request support/Collaborate on new learning content Work With Us The work with us page outlines issue templates and processes that are managed on our Learning and Development issue board . We review and classify requests based on the scalability and possible organizational impact. Learning solutions that can be applied and used company-wide take priority. Our process includes: Evaluate the strategic impact of the learning session Determine the level of work associated with the learning requirement Assess the impacted audience groups of the session Identify measures of success Assess dates of delivery with the course schedule and forecast a future date How we work Tools The L&D team frequently uses the following tools for creating and communicating learning opportunities at GitLab. Tool Purpose Powtoon Video Creation LucidChart Interactive Diagrams Canva Image and infographic creation Articulate/Rise 360 Course Authoring Genial.ly Create Interactive Images Developing Learning Content Learning Content Accessibility Guidelines In July 2024, GitLab published the first iteration of our Learning Content Accessibility Guidelines . We ask that team members who create both internal and external learning content: Familiarize themselves with these guidelines Apply these guidelines when creating learning content for internal and external use, when applicable Revisit existing learning content you have created, to consider whether any updates are appropriate Top Five Training Content Development Principles Know Your Audience - Analyze and assess the course audience. Ensure that all audience needs are accounted for at every level in the organization you are delivering the training too. Define Learning Objectives - Highlight the learner outcome. Consider developing two to three broad overall statements of what the audience will achieve. Break Down Complex Information - Consider breaking down complex information into easy to digest visuals or text. Reference the handbook but do not be afraid to create a visual representation or use storytelling for the audience. Engage the Learner - Adults learn through practice and involvement. Consider using tools to engage learners in a virtual setting like Mentimeter or Kahoot to stimulate interactivity. Implement Blended Learning Course Content - Give the learners pre-course work to read and review before the learning session. Use off-the-shelf resources and ensure the content is applicable to what will be covered in the session. Follow up to gauge how they‚Äôve applied what they‚Äôve learned on the job through surveys and questionnaires. Application of Adult Learning Theory Adults learn differently in the workplace than in traditional learning environments or how they learned growing up. If you are developing training, consider applying principles related to Adult Learning Theories, those include: Transformative learning: Learning should change the individual through transformative learning approaches. Start with learning experiences that appeal to your specific audience, and then move to activities that challenge assumptions and points of view. Self-directed learning: Emphasize informal learning experiences. Infuse applications of pre-reads and post-course follow up. Have the participants bring up examples of self-directed learning that they have taken that is related to the training course. Experiential learning: Adults learn through experiences and by doing. When designing a learning experience, apply activities to stimulate learning by doing through role-playing, simulations, virtual labs, case studies, etc. Andragogy: Design learning experiences with the assumption that your participants will come to the table with their own set of life experiences and motivations. Adults tend to direct their own learning, learn better by doing, and want to quickly apply their learning to concrete situations. Developing Learning Objectives Add learning objectives to the beginning of the content to state a clear training outcome. A clear learning objective describes what the learner will do upon completion of a learning/training activity. Good learning objectives are what you want team members to learn or achieve. Steps to creating learning objectives: Identify the level of knowledge necessary to achieve the aim of the training. Use Bloom‚Äôs Taxonomy to assist with writing practical learning objectives. Select an action verb . Create your very own objective Check your objective. Make sure it includes these four pieces: audience, behavior, condition, and degree of mastery Repeat these steps for each objective Sample learning objectives: By the end of the session, team members will be able to describe the steps taken to address underperformance Team members will be able to apply the GROW coaching model framework to coaching sessions with members of their team After learning about the high-performance team-building model, team members will be able to determine the steps needed to reach high performance. Learning Components - Definitions Term Definition Duration Training The action of teaching a team member a particular skill or behavior Varies Bite-sized learning A short course to learn a skill. Bite-sized can be a compontent of training or a separate learning element (i.e. a video, a PDF cheat-sheet, an infographic) Max 15 minutes, 5 to 10 minute average Self-paced course Learner has the control over the amount of material they want to consume and the duration of time needed to learn the new information. Pre-defined by the designer (i.e. hours, days, etc.) Curriculum A series of learning paths that comprise a course of study on a skill-based topic Varies Certification A certification indicates that an individual community member has acquired the knowledge, skills, and abilities required to perform a specific skill or job. Certifications include an examination process. Varies Learning Path A chosen route taken by a learner through a range of learning activities to build knowledge progressively Varies Learning Delivery Methods - Definitions Term Definition Duration Instructor-Led Training (ILT) Practice of training and learning material between an instructor and learners. Face-to-face training (classroom training) Varies Virtual Instructor-Led Training (VILT) Training that is delivered in a virtual environment (i.e. training in Zoom) 1 to 3 hours E-Learning Learning based on traditional learning theories which takes place electronically, often via the Internet. Varies Blended Learning Training that uses multiple methods to teach the new information to learners. It can include ILTs, self-paced materials, VILT sessions, etc. Varies Webinar A seminar conducted virtually to a large audience 3+ hours Workshop Hands-on or virtual demos, problem solving, tutorials where team members engage in discussion and activity on a particular subject Varies Please let us know how you would prefer to learn by filling out this form ! Career Development and Mobility Resources and direction for career development and mobility for all GitLab team members Elevate Programs Use the links below to navigate to each Elevate program. Here is a useful guide to ensure ‚Ä¶ GitLab Basics GitLab Basics and Terminology This page is just a quick guide to some GitLab basics, for easy ‚Ä¶ Growth and Development Fund A description of programs and resources for team members to access when using the G&D Fund. Hone Partnership GitLab has partnered with Hone to provide expanded professional development opportunities through ‚Ä¶ Internship for Learning Resources and direction for internship for learning for all GitLab team members Learning Initiatives The Learning & Development team is rolling out learning programs to enable a culture of curiosity and continual learning. LevelUp Leveling Up LevelUp We‚Äôre currently rolling out a new platform for LevelUp to better support ‚Ä¶ Mentoring at GitLab Mentorship is an opportunity to learn from personal experience, background, and perspective. ‚Ä¶ Self-Paced External Trainings Details of third-party training providers utilised by various GitLab departments Team Workshops Visit the Team Workshops Level Up page to get started! Team Workshops are customized, group ‚Ä¶ Transitioning to a manager role Your first few months as a manager at GitLab can be exhilarating. They can also be challenging, ‚Ä¶ Work with the Learning and Development Team Available Learning and Development Support The Learning and Development team is available to support ‚Ä¶ Last modified July 11, 2025: Removing JS from HB page ( e3aab33c ) View page source -  - please contribute .",
    "headings": [
      "Learning & Development",
      "Overview",
      "Purpose",
      "Vision",
      "Mission",
      "Objectives",
      "Principles",
      "Learning & Development Team",
      "Team Member Resources",
      "Partnerships at GitLab",
      "Contact Us",
      "Work With Us",
      "How we work",
      "Tools",
      "Developing Learning Content",
      "Learning Content Accessibility Guidelines",
      "Top Five Training Content Development Principles",
      "Application of Adult Learning Theory",
      "Developing Learning Objectives",
      "Learning Components - Definitions",
      "Learning Delivery Methods - Definitions"
    ],
    "word_count": 1756,
    "extracted_at": "2025-07-21 20:13:07"
  },
  {
    "document_id": "gitlab-handbook-847609",
    "url": "https://handbook.gitlab.com/handbook/people-group/general-onboarding/",
    "title": "Onboarding",
    "category": "People Group",
    "content": "GitLab Onboarding Onboarding at GitLab and Onboarding Issue Templates Onboarding is incredibly important at GitLab. We don‚Äôt expect you to hit the ground running from day one. We highly recommend taking at least two full weeks for onboarding and only in week three starting with team specific onboarding and training. Please feel free to participate in your team‚Äôs work in your first two weeks, but don‚Äôt feel like you have to contribute heavily. All onboarding steps are in the onboarding issue template which is owned by the People Connect team. The onboarding process for the new team member is self-driven and self-learning , whilst also remaining as asynchronous as possible settling into the remote life at GitLab. At GitLab we take great pride in dogfooding our own product, that is why all onboarding tasks are completed in a GitLab issue. First of all, what is an issue? You can learn more about what an issue is here . The People Connect Specialist assigned to the team members specific onboarding will open the onboarding issue at least 4 days prior to the hire date. Each onboarding issue has a main section that contains tasks relevant to all GitLab team-members and a due date of 30 days. Below the main section are department and role-specific tasks. Some roles and departments have tasks that link to a supplemental issue template or an additional onboarding page. Reach out to your onboarding buddy or other GitLab team members if you need help understanding or completing any of your tasks. Through onboarding issues, you should gain access to our team member baseline entitlements . On Day 2 of onboarding an Access Request will be generated, if a template has been created for the role. Access requests are owned by the IT team. If you have any access requests related questions, please reach out to #it-help in Slack. In certain instances, the People Connect team may not be able to assist with onboardings due to a national holiday or Family and Friends Day. These specific dates are documented in the People Connect team availability . TaNewKi Welcome Call The People Connect team hosts a pre-onboarding call known as the Ta-New-Ki call (a play on the abstract Tanuki i.e. Japanese raccoon dog you will find in our logo). The purpose of this call, which is hosted in Zoom, is to give soon to onboard team members the chance to meet / socialise and to provide an opportunity to ask any lingering questions ahead of their start date. Internally we refer to this as an AMA (Ask Me Anything) call. Hiring managers and current team members (such as onboarding buddies), are more than welcome to join the call. This call occurs every two weeks on Thursday at three times to account for timezones. 04:00/16:00 PM PT 12:00/00:00 AM PT 08:30 AM PT For current team members: To add the invite to your calendar, review the GitLab Team Meeting Calendar. For future team members: You will receive an email with the future dates. Please note that this call will take a place a week or two before your actual start date. Agenda General Topics Covered Review the onboarding process on Day 1 Encourage team members to take their time Self Driven and self service Questions from the new team members Sending out the TaNEWki Call Invite Invites are sent by the People Connect Specialist in the respective rotation. This email should be sent out at least one week before the call. Open the Ta\"NEW\"ki Folder located People Experience/Ops Shared Drive>People Experience>Ta\"NEW\"ki Call Update the google form to include the next two TaNEWki call dates (AMER/APAC, APAC/EMEA and EMEA/AMER times) Use this email template Add the new team members emails to the BCC line and CC the People Connect team. The People Connect team can check who will be attending the call by looking at the Google response sheet. Once new hires have completed the form an auto-response (via Document Studio) will reply with the zoom link and the date selected. Slack Channel Support for New Team Members By default, all new team members are added to the below Slack channels from day 1 to ensure that they are able to ask any questions or for assistance in the correct channels upfront: #new_team_members (go say hi and introduce yourself) #diversity_inclusion_and_belonging (connect with other team members to find out more about what we do in Diversity, Inclusion and Belonging) #it_help (any IT related support needed, such as issues with laptop, 1Password, Okta, JAMF, etc) #questions (anything that the Handbook can‚Äôt help with) #donut-be-strangers (need some help setting up a coffee chat) #team-member-updates (new team member, anniversaries, goodbyes) #thanks (want to acknowledge and thank someone at GitLab, this is the channel) #whats-happening-at-gitlab (all important updates/reminders/notifications related to GitLab) Managers of New Team Members An issue is created for new team members at least 4 business days prior to their start date. The Manager and a People Connect Team member will be assigned to this issue. Managers and People Connect all have tasks that need to be completed prior to the start date to ensure a smooth and successful onboarding process. For questions or help with any of these tasks feel free to reach out in the issue or by creating a request via HelpLab. Compliance The Senior People Connect Specialist completes a monthly audit of all open onboarding issues to ensure that the new team member, manager and People Connect team tasks are completed. More importantly, there are certain tasks which need to be completed in line with our company compliance (security, payroll, etc). If any tasks are still outstanding, the People Connect Specialist will ping the relevant members on the issue requesting action on the items or checking whether the issue can be closed. It remains the responsibility of the People Connect Specialist to close the issue and remain compliant. The employment bot will automatically close any onboarding issues still open after 60 days. Completing Onboarding Issue First of all, what is an issue? You can learn more about what an issue is here . To ensure a successful completion of the onboarding issue, it is important that all tasks are checked off, whether the task is applicable to the onboarding team member or not. Checking the box indicates one of the following: I have completed this task I have checked and this task is not applicable to me Onboarding Issue Template Links These templates are used by the People Connect team to onboard new team members. All GitLab team-members Intern Role Specific Templates All onboarding related employment templates (country and role based) can be found in the public repository Supplemental onboarding issue templates Interviewing training issue Monitor group onboarding issue Becoming a GitLab manager issue Production engineering onboarding issue Security products technical onboarding issue Support engineer onboarding issue Temporary Service Provider (Contractor/Consultant) Onboarding The People team is not involved in the process for hiring, onboarding, or offboarding temporary service providers. You can work with the Procurement team on these onboardings and review the temporary service provider internal handbook page for templates and other helpful information. Additional onboarding pages Developer onboarding GitLab onboarding buddies Merge Request buddies Onboarding Processes Developer Experience Onboarding Sales team onboarding Support team onboarding SRE onboarding UX Researcher onboarding GitLab Onboarding Buddies Onboarding Responsibilities and Process Merge Request Buddies Merge request buddies at GitLab TaNewKi Tips New Hires Guide to Starting at GitLab Last modified June 13, 2025: Move IT under CorpSec ( 5b5a36c1 ) View page source -  - please contribute .",
    "headings": [
      "GitLab Onboarding",
      "TaNewKi Welcome Call",
      "Agenda",
      "Sending out the TaNEWki Call Invite",
      "Slack Channel Support for New Team Members",
      "Managers of New Team Members",
      "Compliance",
      "Completing Onboarding Issue",
      "Onboarding Issue Template Links",
      "Supplemental onboarding issue templates",
      "Temporary Service Provider (Contractor/Consultant) Onboarding",
      "Additional onboarding pages"
    ],
    "word_count": 1255,
    "extracted_at": "2025-07-21 20:13:09"
  },
  {
    "document_id": "gitlab-handbook-714704",
    "url": "https://handbook.gitlab.com/handbook/people-group/offboarding/",
    "title": "Offboarding",
    "category": "People Group",
    "content": "GitLab Offboarding Offboarding Procedures for GitLab Team Members and Stakeholders Offboarding Overview The offboarding process is facilitated by the People Operations team who collaborates throughout the process with various other stakeholders such as Team Member Relations, IT Operations and Payroll. If you have any questions around the offboarding process, please be sure to review the Offboarding FAQs handbook page. Note: Departing team members will receive a comprehensive email prior to their final date of employment with information such as the impact on benefits coverage, final pay, arranging for a laptop wipe and stock administration. Offboarding Support For system access questions and laptop wipes related to offboarding, send an email to gitlab-laptop-recovery@gitlab.com . For payroll questions or outstanding expense claims, please reach out to either uspayroll@gitlab.com or nonuspayroll@gitlab.com . For any other offboarding questions from active team members please reach out to People Operations via HelpLab or send an email to people-connect@gitlab.com if your access has already been terminated. Note: If a termination date changes, please reach out to People Operations via HelpLab. The team will update Workday. The notice is used as supporting documentation of the change and is saved in the team members Workday record. Voluntary Terminations Prior to Resignation Team Member: Please reach out to your Direct Manager prior to submitting your resignation particularly to discuss the handover process and the communication plan regarding your departure. Team Member: Review the documented notice period for your location if applicable and factor in the notice period when submitting your resignation through Workday. Team Member: Compile your Letter of Resignation for uploading into Workday. If you are employed through a PEO or Third-Party Employer, send a copy of your resignation letter to the PEO contact as well. Resignation Team Member: Following the guidelines in the ‚ÄòHow to Submit a Resignation‚Äô Job Aid submit your resignation directly in Workday accessible through Okta. Team Member: After your resignation is submitted in Workday, your manager will receive a request to complete your offboarding in Workday. Once your termination is complete, you can anticipate receiving your offboarding packet with information regarding your final pay, continued benefit offerings, and additional offboarding information such as returning your devices. Team Member: You should review the Offboarding FAQ handbook page to address any questions you may have. If you have a question that is not on that page, please reach out to the People Operations Team using HelpLab . Note: You will not see your offboarding issue prior to your departure as this is an issue used to deprovision access and is created once you are done working. Country Specific Requirements for Resignation France In addition to submitting their resignation directly in Workday (following the guidelines in the ‚ÄòHow to Submit a Resignation‚Äô e-Learning or Job Aid ) and complying with any contractual requirements, Team Members resigning in France should also email a copy of their resignation letter to legal-employment@gitlab.com . Germany In addition to submitting their resignation directly in Workday (following the guidelines in the ‚ÄòHow to Submit a Resignation‚Äô e-Learning or Job Aid ), Team Members resigning in Germany are required to provide a wet-ink signed resignation letter to the GmbH address and should liase with the People Operations team during offboarding to ensure it‚Äôs properly provided. Japan Team Members located in Japan who are resigning need to complete this resignation form and send it to payroll via HelpLab by the 10th of the month in order to process this with the local provider/partner for correct taxations. Please download or make a copy of the document in order to complete. Singapore Team Members located in Singapore who are resigning and are not Singapore citizens need to complete a Letter of Undertaking document and send it to payroll via HelpLab in order to process this with the local provider/partner. Please download or make a copy of the document in order to complete. UAE Team members the the PEO/EOR on UAE work visa‚Äôs who resign, completes their contract, or changes jobs, their visa must be cancelled by the company regardless of whether they leave the UAE. Team member‚Äôs with dependents must first either cancel dependent visas (if dependents are leaving the UAE) or place them on hold (if dependents are staying) - this is managed by the team member as the dependent visa sponsor. The PEO/EOR company handles the mandatory work visa cancellation process through MOHRE (for labor card) and GDRFA (for residence visa), which takes 1-3 working days. Team members have 30 days after cancellation to leave the UAE or obtain a new visa. Failure to cancel properly may result in re-entry bans, overstaying fines, and complications with final payroll and health insurance processing. Termination Manager: If your team member completes a resignation in Workday, you will receive a prompt in your Workday inbox to terminate the team member by following the steps documented in the following job aid . If a resignation was not submitted, you should initiate the termination by going to the departing team member‚Äôs Workday Profile and selecting Actions followed by Job Change and finally Terminate Employee . Note : Submitting the termination in Workday does not immediately terminate access. The offboarding issue, which is opened on the team members last day worked, initiates the deprovisioning process for terminated team members. Manager: You will be prompted to indicate whether the termination is regrettable or non-regrettable: Regrettable: The team members departure has a significant negative impact on the company, its customers, its projects or the team - the team member was a good and consistent performer both in terms of results and behaviours specifically upholding the GitLab values. Non-Regrettable i.e. The team members departure has a minimal impact on the company, its customers, its projects or the team - the team member has not been meeting expectations due to conduct, culture or values misalignment or performance concerns. Manager: Once the details about the team members departure have been finalized schedule time with the team member to plan the departure announcement . Please reach out to your PBP if you need additional guidance. People Business Partner: You will receive a prompt in your Workday inbox to review the termination details submitted by the Manager and to close the position in Workday. If you are aligned with the details including the final date of employment click Approve . In the instance that you feel further discussion is required a sync with the Manager and/or Team Member should be arranged and the termination can be sent back for further review. People Ops: Once the transaction has been fully approved the team will receive a notification of the termination within the Workday Inbox. Offboarding People Ops: On the Last Day of Work as indicated in the Workday Termination Report at the pre-determined time the offboarding issue will be created - this will signal to all system owners that team member access can be revoked. In the instance that the automation does not trigger the offboarding can be initiated manually once this has happened all other back-end offboarding processes facilitated by People Operations can get underway. Deprovisioners (Systems): You will be tagged in the departing team members offboarding issue and required to indicate that the team members access has been revoked kindly note that access to SOX Systems must be attended to with urgency and all other tasks within the offboarding issue must be closed out within five days. Involuntary Terminations Note: Involuntary terminations are only facilitated by Team Member Relations (TMR) who will initiate the process in Workday. Involuntary offboarding of any team member is never easy. We‚Äôve created guidelines and information to make this process as humane as we can. Beyond the points outlined below, make sure to refer to our guidelines on underperformance , as well as the offboarding issue . Involuntary Process The manager and the team member should have walked through the guidelines on underperformance before reaching this point. Manager : Reach out to the their TMR specialist for assistance. TMR will ask about what the performance issues have been, how they have been attempted to be addressed, and review all manager/team member documentation. Once the review has been completed and the decision has been made to offboard the team member, the manager should review the best timing for the involuntary offboarding call and termination date. We recommend to avoid scheduling a involuntary offboarding call while a team member is scheduled for any sensitive customer meetings or is on-call, per guidance below under Last working day. TMR will enter and approve the offboarding in Workday. Once entered, the relevant offboarding stakeholders will receive an alert via Workday reports or a Workday notification. TMR will work with IT in a separate Slack channel. TMR : TMR will create a private Slack channel that will include the PBP, Manager, and Leader of the organization to review the offboarding and agreed upon offboarding date. TMR : If applicable, TMR will prepare the severance agreement in preparation for the call between the TMR specialist, Manager, and team member. Additional guidelines for the preparation of this agreement can be found below in the Separation and Release of Claims Agreements section. To determine whether or not a severance agreement is applicable, please refer to the Severance Eligibility guidelines accessible by PBPs, and Team Member Relations Specialist. Manager : Once the date and time is confirmed, the manager will schedule time with the team member and send the TMR specialist a private and separate calendar invite with the Zoom details for the meeting with the team member to share the news of the offboarding. Payroll : If the team member is employed by a PEO/entity with statutory leave requirements, review if any time off needs to be paid on the last paycheck by looking in Workday in the Time Off section. Payroll : If the team member has a contract with a co-employer, the payroll lead will forward an email to the contact at the co-employer with the information surrounding the departing team members statutory leave etc. TMR/Manager : Discuss best mode of communicating the bad news to the team member. This discussion can happen via a private chat-channel, but it is best to be done via video. TMR/Manager : Decide who will handle which part of the conversation, and if desired, practice it. If needed the TMR will provide the manager with a script for the offboarding meeting. TMR/Manager : If the team member who is being terminated is a people manager, a communication plan for the team regarding the departure should be in place before the offboarding proceeds. The communication plan should include: identification of an interim leader, (ideally) a scheduled meeting with the interim leader for the direct reports, a scheduled team call to announce the current manager‚Äôs departure and the interim leadership, and finally an announcement in the #team-member-updates Slack channel to share with the wider team. Important: Informing the team and answering questions should be the top priority. No announcement should be made in the #team-member-updates Slack channel until the team call has been completed. In most cases, a team call can occur the same day of the offboarding. If necessary, the offboarding can be announced in the #team-member-updates Slack channel the following day. TMR/Manager : Decide what offboarding actions need to be taken before the call (e.g. revoke admin permissions), or during the call (e.g. revoke Slack and Gmail access), and which ones can wait until later. You can reference the offboarding issue template for the full list of actions. This conversation should take place in the private Slack channel with PBP, Manager and Leader. TMR : If the team member is a risk to the production environment, the TMR should privately reach out to the Infrastructure Managers to determine who will be available to assist with the offboarding. Once an infrastructure team member has been identified, they should be added to the private calendar invite sent to People Operations, Security, and Payroll to hold the time for the team member offboarding. Once the offboarding conversation starts the TMR will privately Slack the infrastructure contact the name of the team member to start the offboarding process. Facilitating the Call Manager : Deliver the bad news up-front, do not beat around the bush and prolong the inevitable pain for everyone involved. The Manager will make it clear that the decision is final, but will also explain what led to this decision and will point to the process that was followed to reach this decision. A sample leading sentence can be ‚ÄúThanks for joining the call, [team member name]. Unfortunately, the reason I wanted to speak with you is because we have decided that we have to let you go and end your employment / contract with GitLab because of xyz.‚Äù Manager : Hand the call over to the TMR to continue. TMR : The TMR will also make it clear that the decision is final, but also will genuinely listen to the team member‚Äôs side of the story since there may be useful lessons in what they say for the rest of the team e.g. regarding hiring and vetting practices. TMR : Make sure to communicate the practical points from the offboarding memo outlined below. TMR : Once the conversation is complete, the TMR will stage the involuntary offboarding email document along with the severance document in DocuSign for review and signatures. Critical Points During Offboarding Call All Team Members Final Pay: ‚ÄúYour final check (or invoice period) is for the pay period of X and includes X days of pay‚Äù. Company Property: ‚ÄúPlease return all property as explained in the handbook, also please delete GitLab‚Äôs email connection from your phone‚Äù. Business Expenses: ‚ÄúPlease create your final expense report to Navan Expense (for employees), OR, please file any outstanding expenses with your final invoice (for contractors), so these can be reimbursed to you in a timely manner‚Äù. Confidentiality and Non-Disclosure: ‚ÄúWe know you are a professional, please keep in mind the agreement you signed when you were hired‚Äù. Personal Particulars: If you would like GitLab to share your personal email with the rest of the company, please send an email to People Ops or a farewell message that can be forwarded on your behalf. US Team Members COBRA: ‚ÄúYour benefits will cease on last day of the month you are eligible for Consolidated Omnibus Budget Reconciliation Act (‚ÄúCOBRA‚Äù), the carrier (Lumity) has been notified and the carrier will send out the paperwork to your home address on file‚Äù. PPACA: ‚ÄúYou may also be eligible under the Patient Protection and Affordable Care Act (‚ÄúPPACA‚Äù) for subsidized health care options via the marketplace. If you are interested it is important that you sign up with the market place well before the 15th of the month to have coverage for the following month‚Äù. HIPAA: \" Under the Health Insurance Portability and Accountability Act of 1996 (HIPAA), if you need a certificate of credible coverage please download it from your current carrier‚Äôs online portal or request it from People Ops\". Unemployment Insurance: ‚ÄúIt is up to your state‚Äôs labor agency (in CA: EDD) to decide if you are eligible for unemployment insurance‚Äù. Keep GitLab Informed: ‚ÄúIf you move I want to be sure your W-2 gets to you at the end of the year. You may also contact X at GitLab (provide phone number and email address) with any other questions that you may have‚Äù (consider inviting them to contact you at anytime for any reason). Initiating an Involuntary Termination in Workday TMR: Terminate the team member in the system by following the steps documented in the following job aid (Workday Profile by selecting Actions followed by Job Change and finally Terminate Employee ). TMR: You will be prompted to indicate whether the termination is regrettable or non-regrettable and whether the team member would be eligible for re-hire in future or not i.e. with review unless specifically relating to conduct or job abandonment in which case they would not be eligible. TMR: Once you have submitted the termination details, you will be prompted to complete a Questionnaire confirming that the Manager or PBP have communicated termination to the business AND confirming that access has been shut off with IT. People Business Partner: You will receive the termination transaction to review, approve, and then enter a comment to confirm termination is ready for the offboarding process to begin. If PBP does not want the offboarding process to initiate they should NOT approve the termination until they‚Äôre ready. People Ops: will review all comment(s) and questionnaire to confirm the offboarding process is ready to begin. If needed, the Peopel Operations team member should reach out to the PBP to confirm the process can be initiated. This will complete the process of the involuntary termination. Last Working Day After the involuntary offboarding call has taken place and the last working day has been determined, team members will have no access to GitLab systems and may not be required to do any work on GitLab‚Äôs behalf. If they are on ‚ÄúGarden Leave‚Äù they will still be active on payroll through the termination date. When determining the timing of the involuntary offboarding call and termination date it is important to consider any effect this might have on ongoing tasks and responsibilities of the team member. No expenses may be incurred while on garden leave unless necessary to the performance of GitLab duties and approved by the team member‚Äôs manager or as subject to local law. As a manager, in collaboration with the Team Member Relations Specialist (TMR) and/or the People Business Partner (PBP), we recommend to avoid scheduling the involuntary offboarding call while a team member is scheduled for any sensitive customer meetings or is on-call . If this is unavoidable, the manager is responsible for ensuring a transition/remediation plan. People Engineering automations will generate the offboarding issue at the end of the team member‚Äôs last working day, as per notification from the Team Member Relations Specialist (TMR) and the People Business Partner (PBP). Once the Last Working Day or Garden leave expires the team member will be officially offboarded from GitLab. Prior to the offboarding issue and the overall process for the term listed below. Last Working Day for US Team Members TMR : TMR will have a legal/CPO review of the planned offboarding. TMR : TMR will inform payroll, compensation and benefits, security and the stock administration of the date the team member will have access suspended and the official offboarding date prior to the opening of the offboarding issue. TMR : TMR will work with People Operations team to ensure the offboarding issue has the correct dates and that all stakeholders in Payroll, Compensation and Benefits (Total Rewards), Security and Stock Administration have been communicated to and understand the offboarding details. Sample Offboarding Memo If appropriate (to be determined by conversation with the manager, the Group Executive, and People Ops), use the following offboarding memo , which is provided here as an openly viewable Google Doc, but of course needs to be personalized and tailored to each individual‚Äôs situation. As written, it is applicable to US-based employees only. Separation and Release of Claims Agreements Separation and Release of Claims Agreements do not apply for all offboardings. To review in which cases they do/do not apply, please reference the Severance Eligibility document accessible by Team Member Relations team and PBPs. In the case that a severance agreement is applicable, the steps below should be followed: Severance Process for US-based Team Members TMR : The TMR Partner/Specialist assigned to the particular offboarding case at hand should select the appropriate severance template. Options include: Non-California over 40, California over 40, Non-California under 40, California under 40. TMR : The TMR Partner/Specialist should make a copy of the template and save it in the Copies of Individual Severance Agreements folder. TMR : The TMR Partner/Specialist should fill out the document. TMR : The TMR Partner/Specialist will ping the stock team in the stock option section of the document. TMR : The TMR Partner/Specialist will share with the PBP and Legal for final review/approval. TMR : The TMR Partner/Specialist will stage the document in DocuSign for signatures. Please note that depending on the template used, team members have a limited amount of time to sign the Separation and Release of Claims Agreement. When staging the document for signatures, please note: Remember to send the document to the team member‚Äôs personal email address Select the assign signature order option in DocuSign to ensure the team member signs the document first All US (Inc.) severance agreements should be signed by Karen Iacobucci, VP, People Operations & Technology. If Karen is unavailable then Robert Allen, CPO will be responsible for signing. US (Federal LLC.) severance agreements need to be signed by an appropriate team member within the Federal Entity. TMR : When the signed document is received, the TMR should upload it to the team member‚Äôs Workday Profile in the documents tab. TMR : As a final step, the TMR specialist will email the appropriate uspayroll@gitlab or nonuspayroll@gitlab and total rewards that the final severance agreement has been uploaded to the team members Workday Profile in the documents tab. Important Notes: Separation pay is not paid until the ex-team member signs the document and the revocation period has passed. We treat team members equally and therefore do not take tenure into consideration when determining separation pay unless legally required. We know that other companies sometimes gives higher separation pay to longer tenure. We think that a short tenure can be harder to explain to a next employer and with a shorter tenure you might have less stock option upside, maybe you have not even reached your vesting cliff. Make sure you understand the rules for over 40. You must use language in your exit meeting that is in no way forceful of the ex-team member to sign the agreement. Use phrasing such as ‚Äúif you choose to sign‚Äù; ‚Äúyou have a right to have legal council review this document before you sign‚Äù, etc. Team Member Leave during an Investigation For team members who will be placed on leave during an investigation please follow the process below: TMR : Communicates with Legal, Aligned PBP regarding the decision to place a team member on leave and disable accounts during an investigation. TMR : TMR will request IT support for disabling a team members accounts. TMR : TMR schedules a call with the team member and manager to inform them of the decision to place the team member on leave while an investigation occurs. TMR : TMR informs the manager and PBP when the conversation is completed and accounts are disabled. During this period managers will not have access to the team members accounts. TMR : TMR notifies IT that an Out Of Office message needs to be set on the account and include the message that the team member is OOO and please reach out to their manager. TMR : TMR send the team member to their personal email the ‚ÄúTeam member Suspension letter‚Äù via DocuSign. The TMR will upload this document to the team members Workday Profile in documents tab. TMR : TMR once the investigation is completed the TMR will inform the aligned PBP and manager of the final decision. If the team member is to be returned to work the TMR will reach out and schedule time to meet with the team member. TMR : If the team member is returning to work the TMR will notify IT that the team member will be returning from leave and the date that accounts should be enabled. Offboarding Compliance The People Operations member in the relevant rotation will complete a weekly audit of all offboarding issues opened within that specific week and check that all People Operations tasks have been completed and that the label peopleops::done has been added. All offboarding tasks by all Departments need to be completed within 5 days of the offboarding date. For systems that are more critical and time sensitive, these will be completed within the first 24 hours (example 1Password, Slack) by the relevant Departments. Information about application & system deprovisioners can be found on the Tech Stack Applications handbook page . To ensure a successful completion of the offboarding issue, it is important that all tasks are checked off, whether the system/tool is applicable to the offboarding team member or not. Checking the box indicates one of the following: I have revoked team member access to this particular system/tool I have checked and this team member was not given access to this particular the system/tool. GitLab Alumni Program All voluntary exits are eligible to be added to the Slack channel #gitlab-alumni , unless otherwise noted. Involuntary exits are not eligible for the alumni channel, unless otherwise noted by Team Member Relations. The offboarding details provided by the termination transaction in Workday is how eligibility is determined and later shared with IT. The purpose of this channel is to network and socialize with team members. Joining the channel is voluntary and subject to GitLab‚Äôs Code of Conduct . GitLab, the company, monitors the channel and can remove people from it at their sole discretion. The GitLab Code of Business Conduct and Ethics is enforced in the channel. Communicating Departures Our goals in communicating offboardings are transparency, and to provide an opportunity for team members to say goodbye. We understand that different individuals are comfortable with different levels of communication and that each offboarding situation has different situations and nuances. For this reason and out of respect for individuals, we have a couple of key guiding principles for communicating offboarding: We ask that all offboardings are announced in the #team-member-updates Slack channel for transparency and awareness. While we encourage all offboardings to be posted in #team-member-updates, we recognize there may be select situations that we should consider a different approach for. If a team member or their manager does not want to post in #team-member-updates, please discuss with your People Business Partner or Team Member Relations . Team members and managers have the discretion to determine who shares the news of the team member‚Äôs offboarding (I.E. team member or manager). Regardless of who shares, it is required that team members review offboarding messaging with their managers prior to sharing. Depending on the team members‚Äô role, timing of communication may vary (e.g. direct team, key stakeholders, etc.), and managers have discretion to determine who should be informed most immediately. The typical order followed for communicating departures is: 1. Inform Direct Team The ‚Äúdirect team‚Äù is typically the team member‚Äôs peers within their immediate team (I.E. reporting to the same manager and/or in the same functional group, etc.) and is typically a relatively small group of people. In most cases, team members communicate their departures to their direct team, though messaging should be cross-checked with their manager for consistency. 2. Inform Key Stakeholders Key stakeholder communication can be done through 1:1 notifications, and/or by posting the update in team-specific channels for general awareness. Key stakeholders are individuals that departing team members work very closely with (typically in their day-to-day work) that will feel the impact of the team member‚Äôs departure in their work. Managers of key stakeholders should also be looped into communication to ensure awareness. It is essential that key stakeholders are looped in to offboardings to: Communicate go forward plans Ensure business continuity and transparency Departures should be communicated with stakeholders as soon as possible, with a maximum timeframe of 2 business days after the team member‚Äôs departure. Where possible and appropriate, we also encourage managers to work with departing team members to align on transitions plans to transition as much of the departing team members‚Äô work as possible before their departure. In most cases, managers communicate team member departures to key stakeholders. 3. Announce In #team-member-updates As explained briefly in the offboarding issue , GitLab is not always able to provide full context on why people are leaving when they do. However as mentioned in the procedures, for voluntary offboarding , the team member can work with their manager on messaging to share a company-wide message about their departure. Once the news has been shared with the team member‚Äôs team and other stakeholders, and messaging is agreed upon between the departing team members and their manager, the departure message should be shared in the #team-member-updates Slack channel. Managers and team members can optionally leverage this template as a guide on how to communicate a team member‚Äôs upcoming departure: I want to share that [team member's name] ([group] [role]) will be leaving GitLab, and [his/her/their] last day is (date of their last day). (Context to add about the team member's time at GitLab - examples: their favorite contribution to the handbook or they can use the update to express gratitude towards teams and individuals that have made their experience at GitLab positive.) I would like to take this opportunity to thank (team member's name) for their contributions and wish them all the best for the future. If you have questions about tasks or projects that need to be picked up, please let me know. If you have concerns, please bring them up with your manager. To keep in touch with (team member's name) he/she/they can be reached at (contact info - e.g. LinkedIn, email, etc.) There will be situations in which team members prefer to share their offboarding message, and situations in which managers prefer to do so. Either is ok, so long as team member and manager have reviewed the messaging together prior to posting . If someone is let go involuntarily, this generally cannot be shared since it affects the individual‚Äôs privacy and job performance is intentionally kept between an individual and their manager . If you are not close to an employee‚Äôs offboarding, it may seem unnecessarily swift. Please remember that these decisions are never made without following the above process to come to a positive resolution first - we need to protect the interests of the individual as well as the company, and offboarding is a last resort. According to our values negative feedback is 1-1 between you and your manager and we are limited in what we can share about private employee issues. Please discuss any concerns you have about another employee‚Äôs offboarding with your manager or your People Business Partner. Given the expectations and responsibility that come with a VP and above position, when there is an involuntary offboarding for one of these positions, additional context for the personnel change can be provided to the organization. 4. Inform The Department Managers should consider cross-posting the message in #team-member-updates to inform the wider Department of the departing team member. What Do We Share? We strive to maintain personal information regarding all team members private, this includes information regarding a team members voluntary or involuntary departure from GitLab. However, a manager with the consent and approval of the departing team member can share more details with the GitLab team regarding the decision to leave GitLab. If the departing team member gives their manager permission to share that information then the manager will share while making the departure announcement on the team call. Regarding involuntary offboarding, certain information can also be shared with the GitLab team regarding the departure. The departing team member may work with their manager to author a goodbye message for voluntary offboarding: Work with your manager on the message that your manager will share in #team-member-updates on Slack. Send it to your manager for approval. If, as a manager, you are in doubt about the message - please reach out to your manager or aligned People Business Partner for additional review. Managers are encouraged to use the suggested template (above link) and have the space to add more color wherever they see fit. In some instances there will be no further clarification on why a team member has departed, if there are concerns you can address those with your manager. Different levels of transparency will exist based on maintaining respectful treatment for all departures. Having team members leave may be a learning opportunity for some, but should not be a point of gossip for anyone. Managers will need to balance the opportunity for learning with the expectation of privacy and consult their People Business Partner should they have questions. Transparency is one of our values. In the case of offboarding, we opt to share the feedback only with peers and direct reports as needed, since we balance transparency with our value of collaboration and constructive guidance shared 1-1. Turnover Data GitLab‚Äôs turnover data is only viewable internally. Managing the Offboarding Tasks Offboarding Issue To track all tool deprovisioning, please open an offboarding issue following the offboarding standards . Returning Property to GitLab As part of offboarding, any GitLab property valued above 1,000 USD needs to be returned to GitLab. For laptops, please check and refer to the Laptop Buyback Policy which states that team members may , at GitLab‚Äôs discretion, have the option to keep or buy back their existing laptops either when it gets refreshed for a new one, or when the team member is offboarding. However, the option to purchase or keep a laptop at no cost may be voided where the team member is involved in cases of investigation, misconduct, termination for cause of any violation of GitLab‚Äôs Code of Business Conduct & Ethics , or other legal or security related inquiries. To return your laptop to GitLab, please contact gitlab-laptop-recovery@gitlab.com immediately upon offboarding. Navan Expense This section of the Accounting Department. To remove someone from Navan Expense Log in to Navan Expense and go to ‚ÄúSettings‚Äù in the left sidebar. Select the right policy based upon the entity that employs the team member. Select ‚ÄúPeople‚Äù in the left menu. Select the individual‚Äôs name and click ‚ÄúRemove‚Äù. If the person has a Corporate Credit Card assigned to them, please notify Accounts Payable before un-assigning it. Retrospective for Managers For involuntary offboardings it is optional to do a retrospective on the hiring, onboarding and coaching/communication of the departing team member. As a manager, you can use this template for a retrospective. Please share the filled out template with your manager as well as the People Business Partner for your group. Within the Engineering division this is a required process because it causes hiring managers to reflect on what led to the ultimate decision of parting ways with the team member, and how that might be prevented during future hiring processes. Evaluation Framework How could this outcome have been avoided? Were there early signs that were missed? In retrospect, what questions should have been asked to bring awareness and ownership to performance issues e.g. ‚ÄúHow would you compare yourself relative to your peers‚Äù ? - people are surprisingly honest here. Unemployment Claims Unemployment Claims in the US In the United States, Unemployment Insurance provides benefits to GitLab team members who have lost their jobs through no fault of their own. The purpose is to provide temporary financial assistance to employees who meet certain requirements. Unemployment insurance is administered at a state level and in compliance with Federal Law. Each state establishes its own eligibility criteria and regulations surrounding Unemployment Insurance with respect to the amount allocated, duration and eligibility for Unemployment Insurance. Eligibility criteria include meeting the state specified requirements in terms of both earnings and time worked during the base period. In some instances the state may require additional supporting information particularly more extensive wage related details surrounding a claim. Unemployment Insurance is funded through employer contributions and most states will have State Unemployment Taxes that apply however many employers typically pay the State Unemployment Taxes too. Reporting a False Unemployment Claim If you are a full-time team member and you are contacted by your state‚Äôs Unemployment Commission to discuss your request for Unemployment Benefits, you may be a victim of Unemployment Claim Fraud. Before giving out any information to the caller, please confirm that you are speaking with an agency employee. If you confirm with your state‚Äôs Unemployment Commission that there is a fraudulent claim, please report it via HelpLab to the People Operations team. Additionally here is a link to the U.S Department of Labor Contact Particulars to report Unemployment Insurance Fraud. GitLab Offboarding FAQ Common Questions about the Offboarding Process GitLab Offboarding Standards Offboarding process and steps on the backend Last modified July 7, 2025: Updating reference to People Connect to People Ops - offboarding & YouTube ( a03d9503 ) View page source -  - please contribute .",
    "headings": [
      "GitLab Offboarding",
      "Offboarding Overview",
      "Offboarding Support",
      "Voluntary Terminations",
      "Prior to Resignation",
      "Resignation",
      "Termination",
      "Offboarding",
      "Involuntary Terminations",
      "Involuntary Process",
      "Facilitating the Call",
      "Initiating an Involuntary Termination in Workday",
      "Last Working Day",
      "Sample Offboarding Memo",
      "Separation and Release of Claims Agreements",
      "Severance Process for US-based Team Members",
      "Team Member Leave during an Investigation",
      "Offboarding Compliance",
      "GitLab Alumni Program",
      "Communicating Departures",
      "1. Inform Direct Team",
      "2. Inform Key Stakeholders",
      "3. Announce In #team-member-updates",
      "4. Inform The Department",
      "What Do We Share?",
      "Turnover Data",
      "Managing the Offboarding Tasks",
      "Offboarding Issue",
      "Returning Property to GitLab",
      "Navan Expense",
      "Retrospective for Managers",
      "Unemployment Claims",
      "Unemployment Claims in the US",
      "Reporting a False Unemployment Claim"
    ],
    "word_count": 6093,
    "extracted_at": "2025-07-21 20:13:10"
  },
  {
    "document_id": "gitlab-handbook-359350",
    "url": "https://handbook.gitlab.com/handbook/people-group/talent-assessment/",
    "title": "Talent Assessment",
    "category": "People Group",
    "content": "Talent Assessment Overview of three critical pieces of GitLab‚Äôs talent development program: performance, growth potential, and key talent. Purpose The purpose of the Talent Assessment Program is to identify and retain team members who drive the success of our organization. This is a top priority and strategic process for people managers at GitLab. Our Talent Assessment Program (which is a critical piece of our overall Talent Development Program serves as a mechanism to help mitigate a couple of our biggest concerns: lack of performance management and losing key people . Additional key benefits of the Assessment Program include: Help facilitate career development conversations (and ensure they‚Äôre occurring regularly) Ensure transparency and ongoing feedback between team members and their managers Discuss promotion readiness and plan promotions Succession planning Increase awareness of top talent across departments (during calibration sessions) Overview We use Workday to complete our Talent Assessment. You can review an overview of Workday Talent here . Please reach out to your People Business Partner if you have any questions. You can also review the following guide which mirrors what is included in the Workday Talent Assessment template to prepare you prior to the tool being launched. There are many talent assessment options, and we have opted to use a Performance/Growth Potential Matrix (commonly known as ‚Äú9-Box‚Äù in the US) and annually review Key Talent. GitLab‚Äôs Performance/Growth Potential Matrix is a type of talent assessment that forms part of our Talent Development Program . The FY25 talent assessment should consider performance from the period FY25Q1 - FY25Q4 In addition to assessing Performance/Growth Potential, we annually review Key Talent aligned with the criteria outlined below on this page. The combination of Performance/Growth Potential and Key Talent assessments allow us to identify team members who drive the organization‚Äôs success and use our engagement tools to retain them. For team members with a tenure up to three months to the launch of the Talent Assessment Program will be designated as ‚ÄúToo New to Rate‚Äù. Also in some cases a ‚ÄúToo New to Rate‚Äù designation might be applicable for newly promoted or transferred team members. More about that designation can be found below. The Performance/Growth Potential Matrix Performance ‚Üë Growth Potential ‚Üí Developing Growth Potential Growing Growth Potential Exceeding Growth Potential Exceeding Box 5 Team member is consistently surpassing performance expectations in their current role but needs to continue to grow in current role, or has not exhibited the willingness or ability to grow in the current role. Box 2 Team member is consistently surpassing performance expectations in their current role, makes valuable contributions and consistently demonstrates competencies required. They have shown willingness and/or ability to further grow in their role and they may be ready to take on additional responsibilities in the next 12 months. Box 1 Team member is developing faster than the demands of their current position and/or division. Team member has been given additional assignments and has demonstrated high-level commitment/achieved significant results. Team member is ready to broaden their skill set and take on significantly greater scope and responsibility. Performing Box 7 Team member is currently meeting expectations of their role, and/or team member is not willing or able to absorb greater scope, impact or complexity. Box 4 Team member is currently meeting expectations and has shown willingness or ability to further grow; may not be ready to absorb greater scope, impact or complexity in the next 12 months. Box 3 Team member is contributing as expected and is meeting performance expectations. They have shown willingness and/or ability to further grow in their role and they may be ready to take on additional responsibilities in the near future. Developing Box 9 Team member is not meeting performance expectations and there is still more to learn in the current position, or , team member has not been in the position long enough (promotion, new to the role, or new hire) to adequately demonstrate the pillars of growth potential for a sustained period of time. Box 8 Team member has not been in the position long enough to adequately demonstrate their capacity (promotion, new to the role, or new hire), or may have lost pace with changes in the organization. The team member has shown the willingness and/or ability to grow in the role aligned with the pillars of growth or has had opportunity to consistently demonstrate performance and growth potential. Box 6 The team member is not meeting the requirements of their current role, but has demonstrated willingness and ability to extend beyond scope once ramped, and/or is showing the willingness and ability to grow further with additional guidance or direction. The team member could be more successful in the current role with more direction/time to ramp, or in another role or department that more appropriately suits their skill set. This matrix is an individual assessment tool that evaluates both a team members current contribution to the organization and their potential level of contribution. It is commonly used in succession planning as a method of evaluation an organization‚Äôs talent pool, identifying potential leaders, and identifying any gaps or risks. It is regularly considered a catalyst for robust dialogue (through a calibration process) and is considered more accurate than one person‚Äôs opinion. The performance/growth potential matrix can be a diagnostic tool for career development. The matrix serves as a tool to help managers assess, develop, and coach their team members - ultimately resulting in an ability to more effectively and efficiently lead teams. What is ‚ÄúPerformance‚Äù? Performance includes both results and behaviors, and is broken into three areas: Developing, Performing, and Exceeding. Developing Please note that Developing should not be automatically associated with underperformance. As highlighted below, Developing can also be used for new hires or newly promoted team members that are still ramping up in their new roles. Your manager will provide example and detail to ensure the rationale behind the Developing rating is communicated. Based on the Job Family responsibilities, values and remote working competencies , team members in this category are not meeting all of the expectations. There is still more to learn and improve on in the current position to achieve the desired results. This may be due to the following: The team member has not been in the position/at GitLab long enough to adequately demonstrate performance. The team member has been recently promoted and needs time to ramp up performance in the new role. The team member may have lost pace with changes in the organization. The team member is not committed to the job responsibilities and/or GitLab. The team member finds it difficult to perform work in a way that is aligned with our values and/or competencies. The team member‚Äôs performance is aligned to our values and competencies, however, they lack results for Job Family responsibilities. Team member was part of a recent transfer and is still learning how to be successful on their new team. Examples: The team member needs a lot of guidance from the manager with the majority of tasks to understand requirements and deliverables expected. The team member has not been in the position long enough to adequately demonstrate their capacity. For example, the team member was recently promoted or has changed roles and needs more time to ramp up. The team member is missing important due dates which is affecting the team, GitLab and/or customers. The team member still needs to adapt remote working best practices. For example, the team member does not manage their own time or work to achieve results or may have difficulty with asynchronous communication. The team member lacks (a part of) the knowledge, skills and abilities which are required for the role, resulting in a low quality of work being delivered. There is a significant mis-alignment (i.e. the team member struggles to collaborate with others, the team member does not work iteratively and key metrics are impacted, etc.) Performing Based on Job Family responsibilities, values and remote working competencies team members in this category are ‚Äúon track‚Äù and meeting all expectations. They can independently and competently perform all aspects of the Job Family responsibilities in a way that is aligned with our values and competencies. Their performance consistently meets the requirements, standards, or objectives of the job, and they can occasionally exceed expectations. They deliver results in a timely and accurate fashion. This performance may be expected as a result of: The team member is consistent and stable in their performance. The team member has the required knowledge, skills and abilities to perform in the role successfully and also applies values and competencies in their work. The team member has adapted to remote working and their knowledge, skills, and abilities align seamlessly to their role at GitLab. Examples: Team member is a dependable member of the team. Their manager can trust them to achieve key metrics. Team member consistently works in accordance with our value and remote working competencies. While consistently meeting expectations, the team member does not regularly exceed expectations. Team member does not frequently express interest in additional projects, responsibilities, or work outside of their immediate scope. The team member is exemplifying our values in their work, but might have some competencies to improve on. Exceeding Team members that are exceeding consistently surpass the demands of their current position. They demonstrate unique understanding of work beyond the assigned area of responsibility. They contribute to GitLab‚Äôs success by adding significant value well beyond Job Family requirements, values , and remote working competencies . This performance may be expected as a result of: Individual is developing more quickly than the demands of their current position. They rise to the challenge when given additional assignments and achieve significant results. A ‚Äúgo-to‚Äù team member for their peers for tough problems and day-to-day guidance. High commitment and engagement to GitLab combined with extensive knowledge, skills, and abilities to perform in the role. Examples: Constantly seeks opportunities to improve both self and organization. The team members exemplify great ways of giving and receiving feedback - incorporating this directly in their work. The team members are ambassadors for the values, take full ownership of delivering projects, and very rarely miss due dates. Please note that an Exceeding assessment for the performance factor does not guarantee a promotion. While the performance factor is a consideration, there are several considerations that are reviewed when evaluating promotion readiness. Please work with your manager to align expectations. Expected Distribution Performance/Growth Potential Company-Wide Note that this is an expected distribution, not a forced distribution. The bell curve distribution aligns with what is most commonly used as a benchmark in the industry and serves as a baseline for us to review and calibrate against. There may be exceptions that are justified that can be discussed and reviewed during calibration. Where deviations from the expected distribution occur, managers should use this as a data point to further review and work with their leadership to ensure appropriate growth plans are in place, proper role fit exists, hiring plans are adjusted, that we are promoting at a fair and accurate rate. We expect roughly ~5% of team members to be assessed as TNTR (Too New To Rate) . Performance: Developing : 10%, not yet meeting all of the expectations Performing : 60-65%, ‚Äúon track‚Äù and meeting expectations Exceeding : 25%, consistently surpasses the demands of their current role Growth Potential: Developing : 10% Growing : 60-65% Exceeding : 25% Remember that ‚ÄúDeveloping‚Äù for Performance and Growth Potential should not be automatically associated with underperformance, and that many newly promoted team members and new hires fall into this category. The Performance Factor While the primary objective of the performance axis of the Performance/Growth Potential Matrix is to calibrate team member performance, this axis of the matrix also directly impacts the Performance Factor , which is a determining factor in the annual compensation review. Please reference the Total Rewards Performance Factor page for more detail on compensation impact. Measuring Performance How can managers determine whether their team members are Developing, Performing, or Exceeding? ‚ÄúThe Performance Factor‚Äù is determined from several components outlined below. It is optional to use The Performance Factor Worksheet for weighing the different Performance Factors. Job Family Responsibilities and Functional Competencies Performance against Job Family responsibilities, requirements, performance indicators, and functional competencies (if applicable) should be weighted at 60%. Review Job Families: Look at the Responsibilities section and how your team member is performing against those responsibilities Example: Software Engineer in Test Review Performance indicators per Job Family: Look at the Performance indicators. Example: Software Engineer in Test (if applicable) Functional Competencies For management roles, please also review and consider the levels outlined in the Organizational Structure. GitLab Competencies Performance against these competencies should be weighted at 40%. Values Competencies Remote Working Competencies Job Frameworks (If applicable) Manager and Leadership Competencies When completing the talent assessment form, team members and managers should reflect on the applicable competencies and job frameworks when filling out the achievements, strengths, and opportunities section. Given GitLab‚Äôs CREDIT values should be lived, with each day representing a new opportunity to refamiliarize oneself with said values and strive to implement them in every professional interaction, there is an opportunity for team members and managers to rate how a team member demonstrates each of the CREDIT values. The following rating scale is used for each value: Rarely Demonstrated : team member demonstrates some of the sub-values associated with this value on an occasional basis. Sometime Demonstrated : team member demonstrates most of the sub-values associated with this value on a regular basis. Consistently Demonstrated : team member demonstrates a large majority of the sub-values associated with the value in most interactions. Use the comment box at the end of the CREDIT values section to provide examples to support the ratings selected. What is ‚ÄúGrowth Potential‚Äù? While performance is focused on the past and present, growth potential is focused on the future. Because of the nature of the future-focus associated with growth potential, it is more difficult to measure than performance, and inherently more qualitative than quantitative. A key element in determining growth potential is the manager and leadership observation and experience working with team members. Managers can gauge team member growth potential against the expectations in their current role or their growth potential to take on different roles across GitLab. Growth potential refers to the ability and desire of a team member to successfully assume increasingly more broad or complex responsibilities and learn new skills, as compared to peers and the roles‚Äô responsibilities outlined in their respective Job Family. This could include the growth potential to move up to the next level in their job family, and/or a lateral move. The Growth Potential assessment helps managers determine the best growth trajectory for their team members. The growth potential assessment will be used as input to leverage our engagement tools, offer lateral and upwards career opportunities, and do succession planning. Growth Potential can change over time as team members develop new interests, as new opportunities for growth arise, and as team members continue to broaden their knowledge, skills, and abilities. Measuring Growth Potential There are four primary pillars to consider when measuring growth potential: ‚ÄúGrowth Potential‚Äù Pillar Definition Adaptability Demonstrating a willingness and ability to learn new skills and apply them to be successful under new, tough, or difficult conditions. Ability to navigate uncertainty and be flexible with change. Expandability Expandability outside their areas (laterally or vertically), with the willingness and ability to take on a role of greater complexity, impact, and scope. Consistency Demonstrating effective problem-solving capabilities, the consistent delivery of results over time in changing circumstances, and dependability in the commitments you make. Self-Awareness The depth to which an individual recognizes skills, strengths, weaknesses, blind spots, and is able to reflect and act to improve and invest in their own development. Judgment in decision-making is also a key element of self-awareness. Judgment can be seen through our level of self-awareness in several ways, including communication, collaboration, and results. Judgment can be defined as ‚ÄúThe ability to make considered decisions or come to well thought-out conclusions‚Äù, and to do this effectively, we need to have a heightened sense of self-awareness in terms of how our communication will come across and how decisions and conclusions drawn will impact others and their willingness to collaborate. Under each pillar there are a few questions that managers should consider when assessing team member growth potential. Please note that the answer to all of these questions does not have to be yes to determine a team member is ‚Äúexceeding‚Äù growth potential, the questions are here to help guide managers through the thought and evaluation process. Adaptability Does the team member adapt to change well? (i.e. realignments, management changes, company changes, etc.) Does the team member seek to learn new skills to further succeed in their role? Has the team member demonstrated ability to learn new things effectively under pressure? Expandability Does the team member demonstrate interest in other areas outside of the immediate scope of their role? Does the team member invest time in learning new skills that will help them grow (laterally or vertically)? Has the team member volunteered for any ‚Äústretch‚Äù projects or initiatives? Does the team member coach, mentor, and/or influence others? Consistency Does the team member consistently deliver results? Does the team member follow through on their commitments? Is the team member dependable? If scope or timeline change, does the team member communicate the change and provide updates to stakeholders? Self-Awareness Does the team member respond to feedback aligned with our Receiving Feedback Guidelines ? Does the team member acknowledge their strengths and areas of improvement? Does the team member work towards closing gaps for their improvement areas? Does the team member demonstrate sound judgment in their decision-making? Growth Potential Output After assessing team member growth potential based on the four pillars outlined above, managers can determine whether team member growth potential is currently developing, growing, or exceeding. Developing ‚ÄúDeveloping‚Äù growth potential generally refers to a team member who is not working at full growth potential against the roles and responsibilities outlined in their Job Family. There could be a variety of reasons for this, including: They are new to their role and did not have the time to demonstrate willingness and/or ability aligned with the pillars of growth potential Lack of motivation to take on new projects Motivated to do what is needed in current job, not in what is required in a higher level Not expressing interest or demonstrating desire to continuously learn new skills Please note that ‚Äúdeveloping‚Äù growth potential does not equate to ‚Äúdeveloping‚Äù performance, but correlates with the pillars of growth potential outlined in the ‚Äúmeasuring growth potential‚Äù section below. Examples: A team member is recently promoted or is new to the company, and hasn‚Äôt had sufficient time to demonstrate the pillars of growth potential for a sustained period of time (and at the new level, if recently promoted) A team member has actively expressed that they do not have an interest in learning new skills or take on new projects. In a day-to-day they show self-awareness but they have not shown great adaptability, expandability and consistency to further expand on their role and responsibilities. Growing ‚ÄúGrowing‚Äù growth potential generally refers to a team member who is growing in their current role and demonstrating interest in advancing (up or laterally) and they exhibit knowledge, skills, and abilities that indicate this. Team members with ‚Äúgrowing‚Äù growth potential generally: Show interest in areas outside of their immediate scope occasionally Are comfortable in their current role Are a stable counterpart for other team members (especially for peers and more junior team members) Learn and apply new skills when the job calls for it; apply lessons learned to enhance success Example: A team member has demonstrated adaptability and expandability but has not been consistent in their results or self-awareness. This holds the team member back from growing to a higher level or taking on more complex responsibilities in their current role. Exceeding ‚ÄúExceeding‚Äù growth potential generally indicates that a team member will be ready for promotion within the next year (or when an opportunity arises). ‚ÄúExceeding‚Äù growth potential team members: Frequently seek involvement in stretch project/projects outside of their scope Invest in their development; seek feedback to improve and applies that feedback on the job Demonstrate ability to learn new skills Actively pursue increased opportunities to influence decisions and inspire others Example: A team member has consistently and proactively looked for opportunities to fill gaps and take on stretch projects. When another team member left the team, you leaned on this team member to help keep projects moving forward until you found a suitable backfill. They regularly ask for feedback from peers and adapt their approach accordingly. This has given your team member skills beyond their current job requirements, and broader understanding of the business. Calibration The portion of the Performance/Growth Potential matrix that often entails the most significant time commitment is the live calibration session of team members with leadership. The calibration session is very valuable to ensure consistency across the Job Family and level, raise any questions, and provide cross-departmental and/or cross-divisional feedback on team members to capture the assessment of different managers as opposed to the opinion of the direct manager exclusively. Ensure consistency and fairness in assessments Calibrate on approach and thought process behind assessments Provide cross-departmental and/or cross-divisional feedback Provide an additional checkpoint to check for unconscious bias Calibration can be done asynchronously or synchronously, and should be done by level (i.e. Manager calibration for their directs, Director calibration for their directs, etc.) so as not to disclose Talent Assessment evaluations amongst peers. Too New to Rate For newly onboarded team members, with a tenure up to 3 months, we have implemented a ‚ÄúToo New to Rate‚Äù (TNTR) assessment category. This designation will be applied to individuals with a start date within 3 months of the kick off of Talent Assessment as they have not yet had sufficient time to demonstrate their Performance/Growth Potential according to the defined pillars. The introduction of a ‚ÄúToo New to Rate‚Äù category is a solution as feedback was raised that being rated ‚ÄúDeveloping‚Äù in many cases does not reflect the actual Performance/Growth Potential. Therefore a TNTR designation is to accurately reflect the time to get up and running of recently onboarded team members. This category acknowledges that new hires require a reasonable timeframe to familiarize themselves with the organization, their role, and the expectations before they can be accurately assessed using the Performance/Growth Potential Matrix. While newly onboarded team members do not need to complete the Talent Assessment evaluation in Workday, it‚Äôs still important for them to have a check-in conversation with their manager. We recommend that this conversation happens after the team member has completed 3 months with GitLab. We‚Äôve created this template for team members and managers to complete. The goal would be for the newly onboarded team member and their manager to come together to have a conversation reflecting on their first 3 months at GitLab, highlighting their strengths and opportunities, then aligning on any support needed for the team member moving forward. Besides team members with a GitLab tenure up to 3 months (New hire TNTR), the ‚ÄúToo New to Rate‚Äù designation will also be available for team members that have just transferred or were promoted to a new role. Please see the Promotions or Transfer During Assessment Cycle section for more details and guidance on how to evaluate and consider performance in these scenarios. If any of the above cases arise it is recommended that you discuss with your People Business Partner to ensure the Too New to Rate designation is consistently applied. Calibration Session The calibration session is one of the most important pieces of the Performance/Growth Potential Matrix process, as it provides time for managers, their peers, and their manager to calibrate. Below are a few communication guidelines to ensure efficiency and fairness during the calibration session discussion. Best Practices Be conscious of time and consider setting a (reasonable) time limit per team member being discussed. Review program guidelines and avoid leniency bias. Refer to performance data that you may have taken on a team member throughout the past year - including any stakeholder or cross-functional feedback, performance against metrics over time, key accomplishments, etc.; this will help avoid bias like recency bias or the halo effect. Please note that when reviewing feedback for the talent assessment, it‚Äôs important to take into account areas in which the team member has improved. Two quarters is a fairly significant amount of time and team members have (hopefully) taken action on improvement areas during this period, which should be reflected in the assessment. Managers and other participants in calibration discussions should be prepared with this information if asked how they determined a rating. Leaders should feel comfortable providing feedback on team members in other functions that they have direct experience working with. Focus on discussing artifacts that are relevant to the performance factor and refrain from discussing artifacts that are not relevant to performance being developing, performing or exceeding. Examples of artifacts which are not relevant: upcoming maternity/parental leave, personal information/home situation or things that were confidentially shared and do not relate to performance. Refer to the competencies, job family, job frameworks and values when deciding what is relevant. Utilize the SBI model for feedback . Focus on facts and avoid blanket statements as opposed to (i.e. [team member] has poor communication), ‚Äú[team member] struggled with collaboration during the roll-out of x project and could have improved communication by ensuring they aligned with x stakeholders more regularly during the process. The impact of this was x.‚Äù Calibration is not a stack ranking of team members. While some inter-person comparison may happen, it should only be to ensure that evaluations are being applied fairly across different raters. Ask questions and provide feedback! This may seem obvious, but it is an important aspect to help identify any potential bias Who Do I Calibrate? It is likely not necessary to discuss each team member in detail, particularly for larger groups. Calibration sessions typically focus on gaps, outliers and areas that might require additional management attention and/or alignment. As a best practice, we should calibrate outliers. ‚ÄúOutliers‚Äù are typically considered to Box 1 (‚ÄúExceeding Growth Potential‚Äù and ‚ÄúExceeding Performance‚Äù) and Box 9 (‚ÄúDeveloping Growth Potential‚Äù and ‚ÄúDeveloping Performance‚Äù) . People Business Partners and business leaders have discretion to expand this threshold as needed, but live calibration for team members in Box 1 and Box 9 should be the baseline across the board. A few additional reasons to consider calibrating beyond Box 1 and Box 9 are: Team members close to promotion Team members who have changed assessments from the previous fiscal year (i.e. ‚ÄúPerforming Performance‚Äù to ‚ÄúExceeding Performance‚Äù) Team members in Box 3 (‚ÄúExceeding Growth Potential‚Äù and ‚ÄúPerforming Performance‚Äù) to highlight potential development opportunities from peer groups Outliers based on Performance alone (i.e. everyone ‚ÄúDeveloping Performance‚Äù and everyone ‚ÄúExceeding performance‚Äù) Anyone hired in the last 3 months assessed as Performing or Exceeding for Performance aligned with eligibility guidance Anyone identified as Key Talent Calibration Session Pre-Work It is absolutely essential that managers complete the required pre-work to ensure that the live calibration session is as efficient and productive as possible. Pre-work includes: For calibration sessions you can leverage this agenda template Review the team member‚Äôs own Self-Evaluation if they have completed one, if they wished to complete one. Review the Job Family/Families that will be calibrated in detail Review our competencies Talent Assessment Training Job frameworks High Performing Team Indicators Values competencies Remote work competencies Functional competencies (if applicable) Determine the appropriate box for each of your team members Add notes for each of your team members to the agenda, at least 12 hours before the session An example of notes could include: 2-3 strengths/accomplishments (and supporting examples) 2-3 improvement areas Anything else noteworthy (i.e. recently promoted or transferred, etc.) Keep the SBI Model (Situation, Behavior, Impact) in mind when adding notes for strengths/accomplishments and improvement areas. Each point should include clear examples and blanket statements should be avoided. Review the notes of your peers for other team members and add feedback/questions/thoughts for discussion If you did not attend the people manager live training session, please access the training video. Topics To Avoid While we want to encourage open and transparent conversation during calibration session, there are certain topics that should be avoided to ensure we respect team member privacy. Sharing whether team members are currently undergoing formal performance remediation . It is okay to share that team members are receiving coaching, but specifics pertaining to Written coaching, PIPs, etc. should be avoided. Anything related to health (i.e. medical diagnoses, conditions, disabilities, etc.). It is okay to share that team members have a lot going on in their personal lives, but we should not go into detail. Note that this applies for team member‚Äôs friends/family as well. Identifying Action After the calibration sessions the performance and growth potential outcomes can be used as input for the following: Career Development Conversations Promotion planning Identifying L&D opportunities Succession Planning Q4 Formal Talent Assessment Timeline Detailed dates for FY26 are pending and process is subject to modification. In general the timeframe runs from January through March with ACR (compensation statement) release in April and compensation changes and promos effective beginning of May. Note that different departments may have additional due dates built into the high level timeline, so please follow up with your People Business Partner if you have any questions. Below are the current activities for the formal assessment beginning in Q4 (January) Kick off Optional Self-Evaluation cycle for all Team Members Due date for all Self-Evaluations Managers begin to review their team members self evaluations and gather feedback. Workday Calibration cycle opens and Calibration discussions occur 5:00pm PST Workday Calibration will be locked Kick off the Manager Evaluation cycle in Workday Annual Compensation Review Kicks off for Managers Due date for all Manager evaluations. Talent Assessment in Workday is locked. Total Rewards and final E-Group review and approval Managers can communicate Performance/Growth Potential assessment and Annual Compensation Review to team members Talent Assessments pending in Workday will be auto advanced to team members* Annual Compensation Review effective date *Team members who are on Leave of Absence (LOA) on TBD are excluded from the auto advancement of their talent assessment until they return to work. Note: For full details on our Annual Compensation Review (ACR) timeline and cycle, please refer to our ACR handbook page . Cadence GitLab completes talent assessment at least once per year in Q4, with a recommended informal mid-year check-in. The formal assessment ideally takes place prior to the annual compensation review . Our e-group completes Performance/Growth Potential Matrix multiple times a year for their direct reports. Eligibility Anyone hired on or before January 31st should receive a Performance and Growth Potential assessment, as they are eligible for Annual Compensation Review. However, if the team member being assessed has been with GitLab for a period of 3 months or less or recently transferred roles or was promoted, please see the Too New To Rate description . Team Member Self-Evaluations It is up to all team members‚Äô discretion if they wish to complete their Self-Evaluation in Workday. While they are voluntary, self evaluations are highly encouraged so the team member‚Äôs perspective is captured and shared with their manager prior to the manager‚Äôs evaluation and Calibration Sessions. Please review the most current timeline to ensure a timely delivery. Team members may use Claude, Insights, and GitLab Wrapped to assist in the preparation of your self evaluation. AI tools like these can be super helpful to assist you in gathering information about your accomplishments, or helping you brainstorm how you might refine your self evaluation. However, meaningful human input and review is always required, and you should not rely solely on Claude to write your self-evaluation. Matrix Assessment Timeline The Performance/Growth Potential Matrix typically takes 4-6 weeks to complete from beginning to end. Steps are as follows: Team members have the opportunity to complete a Performance Review Self-Evaluation if they so wish, and share it with their manager through Workday. Managers complete a Manager evaluation and Performance/Growth Potential ratings for their respective team members Live session takes place for calibration with managers up to E-Group level Executive Review (leadership meets to review the matrix results, key talent, promotion requests, development and performance actions, review discrepancies, and measure against previous matrix results) Talent Management and People Analytics performs an equality review. Final approval of E-Group members and Total Rewards. Annual Compensation review kicks off after Talent Assessment Performance/Growth Potential and Annual Compensation Review updates are communicated to team members Final Assessments in Workday Aligned with the timeline , managers can see final assessments for each of their team members in their respective Workday profiles. Promotions or Transfers During Assessment Cycle The cut-off date to determine whether to assess team members as Too New to Rate based on recent promotion/transfer for the FY25 Talent Assessment cycle is based on their time in role prior to the start of the Talent Assessment cycle, 2025-01-27 . Please note, that a ‚Äútransfer‚Äù constitutes as a change to one or multiple of the following things: job family, department, division, or job grade. A change in job title specialty and manager alone would not constitute as a transfer. Guidelines are as follows: If a team member interviews and transfers or is promoted to a new role, with an effective date within 90 days of the start of the talent assessment cycle or throughout the talent assessment cycle (on or after 2024-10-01), guidance would be that they should be assessed as Too New to Rate. For example, if a Senior Manager is promoted to Director on 2024-11-02, they would be assessed as Too New to Rate for the Talent Assessment cycle. If a team member interviews and transfers to a new role or was promoted to a new role more than 90 days before the start of the talent assessment cycle (on or before 2024-10-01) they would be assessed based on the new level/role. For example, if a Senior Manager is promoted to Director on 2024-09-15, they would be assessed based on the new Director-level role for the Talent Assessment cycle. Exception for FY25 Talent Assessment Cycle : Due to the transition of our promotion cycles, team members who receive a promotion effective in the FY26 Q1 (Feb 1) cycle, will receive a talent assessment rating that is reflective of their full FY25 performance, and not be classed as TNTR for this talent assessment cycle. For example, if a Senior Manager is promoted to Director effective 2025-02-01, their Talent Assessment should reflect their Senior Manager level to ensure we are capturing a full year of Performance and Growth Potential feedback. It is important to note that because being promoted recognizes high performance both in terms of increased scope/responsibility and monetarily through compensation increase therefore a promotion ‚Äúresets‚Äù the performance factor evaluation . While a recent promotion resets the performance factor evaluation, and a job transfer is internal mobility that may be a lateral job level, there are soft skills and technical skills that are most likely transferable. When assessing team members who have transferred teams or changed roles throughout the year, managers should gather feedback from the previous manager on performance as well and take that into account when evaluating and documenting performance to reflect performance for the entire year. Managers should also provide the team member feedback on how they‚Äôre doing in their current role to ensure they‚Äôre set up for success, and aware of feedback moving forward in their current position. Best Practices for Communicating Performance/Growth Potential Factors Communication In most companies the Performance/Growth Potential Matrix is used exclusively as a management tool and results are not typically shared with team members. In the spirit of our transparency value, we want to encourage feedback with team members. Discussion topics that arise during calibration sessions (or at any other point during the assessment process) are confidential. Please do not share with anyone other than each individual team member. After calibration sessions are done and performance and growth potential factors are determined, it‚Äôs time to communicate the final results with team members. Please follow the Talent Assessment timeline and communicate performance and growth potential ratings to team members in your performance review conversations within the communication window . The conversation following the talent assessment process is the most important part; it is a great way to drive alignment with your team members and set them up for success moving forward. Below are some of the best practices for communications, but remember, if you are ever in doubt please reach out to your manager or People Business Partner for additional support. Communicate performance and growth potential factors face-to-face over Zoom . As a manager, this is the opportunity for you to have a conversation with your team member about their performance and growth potential. Having the conversation over Zoom allows for you to have a dialogue with your team member (versus just sharing their performance and growth potential factor asynchronously) and allows you to pick up other information, like tone and non-verbal cues which can tell you more about how someone is feeling during this conversation. You may also choose to share the PDF of the review prior to the conversation so that your team member has time to process the information. If so, ideally share just 1-2 days prior to the conversation so you are able to address questions promptly. Prepare for the discussion ahead of time. As a manager, you should prepare in advance of calibration discussions with your team members. Before communicating a team member‚Äôs performance and growth potential factors , it‚Äôs beneficial to look back through your preparation document, notes, and anything relevant that was discussed as part of the calibration exercise. Be prepared with notes on the following: Areas the team member is doing well Areas that need improvement Areas that you identified as either strengths and/or development areas that differed from the team member‚Äôs self-assessment. Provide specific examples for both strengths and improvement areas. The SBI (Situation - Behavior - Impact) model can be effective for delivering examples structured in a way that makes impact clear to team members. Think about recommendations and/or focus areas for a team member‚Äôs development OR if a team member has an active Individual Growth Plan(IGP) , consider how the feedback fits into their current IGP Schedule a separate call or repurpose your 1:1 ) to discuss a team member‚Äôs performance and growth potential factor . The performance and growth potential factors should be communicated at the beginning of the meeting. This allows the team member time to ask questions, discuss their assessment, and most importantly, determine next steps. If your 1:1s are often filled with agenda items, the recommendation is to schedule another call to make sure you have ample time allocated. Protect the confidentiality of other team members by avoiding saying things like ‚Äúyou were the only team member to be rated this performance factor.‚Äù Avoid making future promises like, ‚ÄúIn the next review, I will rate you X performance/growth potential factor.‚Äù Sample Script for Delivering a Talent Assessment The script below is intended to help you structure your Performance and Growth Potential conversation. Personalizing this conversation to reflect your authentic tone will make this a more effective conversation with your team member. ‚ÄúThank you for taking some time today to discuss your Performance and Growth Potential. I wanted to discuss your achievements and strengths, improvement areas, future development, and the final result of the talent assessment.‚Äù ‚ÄúI assessed your performance factor as * [Insert Performance factor] :‚Äù Exceeding (consistently surpassing the demands of their current position) Performing (‚Äúon track‚Äù and meeting all expectations of current position) Developing (room to learn and grow, not currently meeting all expectations of current position) Too New To Rate (hired or transferred <90 days from the start of the Talent Assessment program) ‚ÄúI assessed your performance as [Insert Performance Factor] because:‚Äù I assessed your performance against your job responsibilities as [Insert Performance Factor] . Your strengths in your job responsibilities are [Insert strengths with supporting examples] Your opportunities in your job responsibilities are [Insert opportunities with supporting examples] I assessed your performance against values competencies as [Insert Performance Factor] . Your strengths in aligned competencies are [Insert strengths with supporting examples] Your opportunities in aligned competencies are [Insert opportunities with supporting examples] ‚ÄúI assessed your growth potential factor as * [Insert Growth potential factor] :‚Äù Exceeding (ready to take on more responsibilities within the next year (or when an opportunity arises)) Growing (growing in current role, demonstrating interest in advancing (up or laterally) and they exhibit knowledge, skills, and abilities that indicate this.) Developing (not working at full growth potential against the roles and responsibilities) ‚ÄúI assessed your growth potential as [Insert Growth Potential Factor] because:‚Äù I assessed your growth potential against the four pillars of growth potential as [Insert Growth Potential Factor] . You have shown X, Y, Z [Insert strengths with supporting examples] Your opportunities to further grow in your role are X, Y, Z are [Insert opportunities with supporting examples] If a team member was identified as key talent , please ensure to communicate to the team member during the talent assessment conversation. I‚Äôd like to thank you for your hard work as, and I look forward to continuing to work together! Do you have any questions? [Allow team member to ask questions and respond] As a next step, let‚Äôs schedule some time to talk more about what you want to do in the future and create a career development plan together OR let‚Äôs talk about how this feedback should be incorporated into your Individual Growth Plan. Sample Next Steps The most important part of the talent assessment discussion is to determine next steps in partnership with your team member. The team member should be the DRI for the next steps with support from you as their manager. Our Career Development handbook page includes a lot of great information and resources on career development including an Individual Growth Plan guide which should help provide structure and a plan for next steps. If you have any questions or concerns about next steps, please contact your manager and/or your People Business Partner . Information Guide Performance/Growth Potential Review General Information Why does this matter to me? The Talent Assessment involves all team members and managers. Team Members are assessed according to performance and growth potential . Team Members should be prepared to have a conversation with their manager about their performance and growth potential in Q1 each year. Managers assess their team members‚Äô performance and growth potential . Managers attend calibration meetings in which team members‚Äô ratings are discussed and evaluated to ensure consistency and minimize bias. Once the program closes, managers are responsible for communicating Performance/Growth Potential Factor to team members. Can I use Claude or other AI tools to help me with my self evaluation? Yes. You may use Claude, Insights, and GitLab Wrapped to assist in the preparation of your self evaluation. AI tools like these can be super helpful to assist you in gathering information about your accomplishments, or helping you brainstorm how you might refine your self evaluation. However, meaningful human input and review is always required, and you should not rely solely on Claude to write your self-evaluation. Can I utilize Claude or other AI tools to help with manager evaluations? Claude is the only AI tool you are permitted to use for this purpose, and it may only be used to assist in the writing of manager evaluations. Use of Insights, GitLab Wrapped, or any other AI tool for the assessment of team members or the writing of manager evaluations is not permitted. Claude can be super helpful to assist you in brainstorming how you might refine the feedback in your manager evaluation. However, meaningful human input is required in assessing performance and growth potential of your team members, and you should not rely solely on Claude to write manager evaluations. We also have a robust calibration process in our talent assessment program to ensure we are consistently and fairly assessing performance and growth potential across GitLab. How does this impact the way I work at GitLab? The Performance Assessment is an evaluation of your performance against job family responsibilities and GitLab competencies and Growth is evaluated against the 4 pillars of Growth Potential. Both can help you determine strengths and improvement areas that you can apply in your day-to-day work/way you work. How does this impact the teams I lead? As a manager, you assess your team members‚Äô performance and growth potential . Managers attend calibration meetings in which team members‚Äô assessments are discussed and evaluated to ensure consistency and minimise bias. Once the program closes, managers are responsible for communicating Performance/Growth Potential Factor to team members. Who can I reach out to in supporting me during Talent Assessments for my team? You can reach out to your manager or your aligned People Business Partner . As a manager, when reviewing my team members, what is the difference between Developing and Underperformance? The ‚ÄúDeveloping‚Äù rating means that the team member is not (yet) meeting all of the responsibilities and competencies for the role. This can be for many reasons, including a recent start date. By contrast, Underperformance involves consistently not meeting the goals and requirements of the job; GitLab follows specific processes to attempt to remediate. While everyone within the Developing category isn‚Äôt automatically Underperforming, a team member who is Underperforming would also be grouped into the Developing category, because Performing is not an accurate assessment. Team members who are on a formal Underperformance remediation plan, such as a Performance Improvement Plan , are not eligible for a compensation increase as a result of the Annual Compensation Review . Will my Growth Potential assessment impact my compensation? Yes both Performance, Growth Potential, and Key Talent Assessment can impact your Total Rewards. Can my performance factor be changed? After the Talent Assessment closes, the performance factor cannot be changed. You should work with your manager to develop a plan to develop your performance for future assessments. Does this mean I am automatically getting an X% increase in the upcoming Annual Compensation Review? The Performance/Growth Potential Factor is one of the factors considered in the Annual Compensation review . The recommended increases displayed in the handbook are there to ensure company wide consistency. The factors taken into account for the Annual Compensation Review are: Your hire date (new hires hired after October 31st are ineligible for compensation review) Other compensation increases received over the last year Timing of promotion and/or role changes Your current placement within the compensation band Location factor Role benchmark updates Company budget for compensation increases When is the next opportunity for my performance to be reviewed? Talent Assessments are formally conducted at the beginning of the fiscal year (Q1) to assess the prior year, and we encourage a mid-year check-in at the half-year. What can I do to change my performance factor in the future? There are many things that you can do to change your performance factor in the future. Please work with your manager on a career development plan and discuss actions that can be taken to improve. Can my Growth Potential rating be changed? After the Talent Assessment closes, your growth potential factor cannot be changed. Your manager assessed your growth potential factor and this would be an opportunity for you and your manager to align on your growth opportunities. This discussion can also be an input into your career development discussion. What can I do to change my Growth Potential rating in the future? There are many things that a team member can do to change their growth potential factor in the future. Talk with your manager about how you might be able to develop a plan to increase your expandability, adaptability, consistency and self-awareness . Do you currently possess all the skills needed for your current role? Have you identified what skills you would like to learn? Have you determined what your career goals are, and are you actively working towards those goals? Are there additional projects to take on, to stretch your current responsibilities and/or skills? These are some discussion questions that might help you and your manager align on a future plan for growth. My team member is currently on a performance remediation plan; how should I handle this? You should continue to move forward with communicating their performance factor to them and use the meeting as an opportunity to reinforce the expectations of meeting the goals highlighted in the plan. Talent Assessment - Manager Scenarios My team member is on a leave (protected leave or PTO) during the Talent Assessment period. How should I handle communication of their assessment? If they will be returning from leave before the due date to communicate Talent Assessment results , please wait until their return from leave to communicate their assessment. If they are returning from leave after the due date to communicate Talent Assessment results, you may email them to offer to discuss their assessment. If they do not reply or prefer to wait until their return, please respect that choice. My team member was on protected leave for a large portion of the Talent Assessment period. How should I factor this in when assessing them? It‚Äôs important to ensure you are assessing the team member‚Äôs performance for their contributions while working during the assessment time period. There should be no adverse impact on their overall assessment due to being on leave for a portion of the period. During calibration, please remain vigilant to ensure no private details related to their time away are disclosed. Please reach out to your PBP to discuss the specific details related to your team member. My team member is on leave of absence during the Talent Assessment communication window. What happens to their Talent Assessment? Please do not action the To-Do task ‚ÄúMeet with your Employee‚Äù if your team member is on leave of absence (LOA). We will exclude team members on LOA from the auto advancement setting on TBD and you can communicate their talent assessment when they return to work. My team member was assessed as key talent last year, and is not for this assessment period. How should I handle communication with them? There is no guarantee that team members will retain their key talent assessment each assessment period. Make sure to explain the reasons why their key talent assessment has changed, including how we assess Key Talent and the definition outlined in the Handbook . Remember to end the conversation by discussing what your expectations are of key talent going forward. It‚Äôs important not to make promises about future assessments, but to focus on what makes a team member critical to the business, and how you, their manager, will support them. My team member was exceeding performance last assessment, and is not for this period. How should I communicate this change? It‚Äôs important to take a look at what may have changed since last year. Is your team member in a new role? On a new team? Did they take on bigger stretch assignments? Any of these factors can influence a team member‚Äôs performance. Be prepared with specific examples to share which support your performance assessment. The feedback conversation should also focus on what success looks like for the team member in the year to come and how you, as the manager, can support them with their goals. I have just adopted a new team, and the previous manager is no longer at GitLab. How can I assess the performance of my team fairly? You may be able to gather insights from your manager or cross functional stakeholders who have worked closely with the team member in the performance period. You may have access to the recent 360 feedback for each of your team members, as well as their talent assessment from last year to help inform your thinking. If you haven‚Äôt already, it‚Äôs important to ask the team member to share their own perspective on their accomplishments prior to you taking the role, so you are well prepared for the discussion of your assessment. A team member recently moved to be my direct report, however for the majority of the performance year, they reported to another manager. Are there options to delegate or re-assign the manager evaluation to their previous manager? As a manager, you can delegate the manager evaluation to another manager in your direct management chain. If your team member moved from another manager in another organization, you should collaborate with the previous manager to write the review with their input. The previous manager can leverage the Talent Assessment google template to capture their feedback and provide it back to you so that you can enter it into Workday. As the new manager, you will be responsible for the calibration of team members in your management chain at the time of calibration. You should also ensure your communication of the final talent assessment is done in a joint conversation with the previous manager, you as the new manager and your team member. This would be a great opportunity to ensure a formal transition and knowledge of performance and feedback takes place between previous manager and new manager. Please enter a HelpLab request if you have any questions about your specific scenario. My team member does not agree with their placement in performance and growth potential. How should I approach this? Remember that this conversation will be most effective if you are well prepared. If you haven‚Äôt yet, take an opportunity before the performance and growth potential conversation to understand their own assessment of their results. During the performance and growth potential conversation, provide the opportunity for a dialogue with your team member. Remain open and curious about their perspective. Engage in active listening, ensuring that you aren‚Äôt planning your counterpoints while they are sharing. The expectation is not that the results will necessarily change but the insights they provide may shape how you both think about their growth and development path. If you feel a conversation might be particularly challenging, you may reach out to the TMR team or your PBP to role play the discussion and ensure you are prepared. My team member is exceeding growth potential expectations, how should I be thinking about their ongoing development? Great! At GitLab team members have the opportunity to own their own development, and deserve a great manager (you) to facilitate it. Ask your team member to articulate where they would like to see their skills and career develop. You may have insights that help them refine those goals based on where you see the business going, as they will be most successful in gaining the experience they‚Äôre looking for if there are opportunities to align those goals with business goals. The Career Development handbook page has more ideas to help your team member craft a growth plan, including information on GitLab‚Äôs Growth and Development benefit . How should we be communicating Growth Potential to team members? First, ensure the team member understands what we mean when we say we are assessing Growth Potential, including the 4 pillars that you considered when making the assessment. Be prepared with specifics that led to your evaluation. Remember, Growth Potential can change over time as team members are promoted, develop new interests, as new opportunities for growth arise, and as team members continue to broaden their knowledge, skills, and abilities. Avoid making promises, but if your team member sees themselves in a higher position, help them understand behaviors you expect to be able to assess them differently next time. I received unexpected feedback about my team member from a cross-functional stakeholder in my calibration session. What should I do? If you receive unexpected feedback during the calibration, ensure you really understand what happened, and what has been discussed with your team member so far. If someone has tried to help this team member in the past, how did it go? Can your peer provide specifics to help you understand the impact of the behaviors? Talk to your peer about the importance of using this feedback to help your team member grow, and make sure you have agreement on how you plan to deliver this message. During the discussion with your team member, be prepared to gain their perspective on the situation first. Listen actively and consider their point of view. When delivering the message, consider the root cause, focus on impact and alignment with our values, and end with a discussion on future actions that would be more successful. If and when appropriate, check in with your peer on how improvements are going. Be sure to stay close to the situation so you are in a position to deliver more timely feedback if the behavior is ongoing. How do I assess team members in acting or interim roles? For team members who have assumed an Acting or an Interim role , we will assess team members aligned with their permanent positions (i.e. not the Acting or Interim position). As the Talent Assessment impacts compensation, and Acting/Interim periods are not permanent, in the instance that a team member does not end up moving into the Acting/Interim role permanently, we would not want to have their compensation impacted by a temporary position. My team member is performing at a high level in terms of results, but they struggle with behavioral alignment to one or more of our values. How do I take the ‚Äúhow‚Äù into account when I am assessing their performance and growth? Review the handbook content on how we measure Performance and how we measure Growth Potential . When a high output/results-oriented team member is struggling with soft skills and/or behavior, this is oftentimes related to improvement areas in terms of alignment to our values competencies , and/or our Growth Potential pillars (particularly, but not limited to, Self-Awareness). Considering our measurement guidelines for Performance and Growth Potential holistically, and be sure that your assessment takes all of our competencies, job family responsibilities, and pillars into account. My team member has the skills to perform, but there are will-based performance issues that are impacting their ability or the team‚Äôs ability to succeed. How should I think about this in terms of assessing their performance? First, act early. Do not wait for a formal performance and growth potential assessment conversation to deliver feedback about your concerns. Be specific, and document your conversation. Loop in a TMR specialist for support as these conversations can be challenging. Review the definition of ‚ÄúDeveloping‚Äù performance. Note that one criteria that applies to this category is a team member who is struggling to perform in a way that is aligned to our values and competencies. Think about the specific behaviors or impacts of their work or how they are working that have led you to assess that they are not fully engaged. Despite having the skills, if your team member is not contributing at the level they are expected to be, you should consider that a performance issue in the way you would a skill based performance issue. Keep in mind that not addressing these challenges may be affecting your other team members, especially those who may be picking up the slack. We encourage to review the handbook page on Underperformance . Mid-Year Check In Great managers share feedback with team members year-round in 1:1 meetings and ad-hoc. A dedicated Mid-Year check-in is a useful tool to support a holistic discussion between team member and manager about how things are going as we approach the second half of the fiscal year. During the Mid-Year check in, we assess how things are going from both the team member and managers‚Äô points of view, and share feedback to help inform performance and development plans. Leaning into where things are going well, as well as uncovering blind spots or improvement areas early are the keys to delivering great results. A Mid-Year check in complements weekly, on-going feedback, so we recommend documenting your discussion in your 1:1 doc to support frequent updates on action items and development goals. Goals of the Mid-Year check in are: To provide a dedicated space for questions/clarification about performance and growth opportunities at GitLab Team members share a cumulative self assessment of their performance against expectations and progress on development goals Managers respond, and provide their own cumulative update to the team member on how things are going. This should build on the regular performance feedback they should be delivering weekly in 1:1s and ensure no surprises at the end of the year review. Eligibility To participate in the mid-year check in we recommend that team members have at least 3 months of tenure so accomplishments and improvement areas are able to be clearly outlined with examples. Process Recommended process for our Mid Year check-in will be as follows: Team Member Led: Team member provides a self-assessment on their own performance in their 1:1 document A Google docs template is available to guide the self-assessment process. Team members are encouraged to author a document based on this template, share it with their manager and link it to the top of their 1:1 document. Team members should reflect on their achievements, strengths, and opportunity areas since the last formal Talent Assessment in Q4. It is the team member‚Äôs responsibility to provide the self-assessment and bring it to the conversation with their manager to discuss and align on. Linking the document to the 1:1 agenda ensures the self-assessment is available to come back to throughout the rest of the year. The template contains an agenda for the Mid-Year check-in as follows: Achievements List your 3 most significant achievements since the last formal Talent Assessment , aligned with the job responsibilities and expectations of the role. This can include significant impact to the department or company, customer-impact, community-impacting, etc. Feedback can also be included in this section if applicable. Strengths & Opportunities in Role In this area the goal is to determine 2-3 strengths and 2-3 opportunity areas in accordance with your role, job family, and job framework . Include examples when necessary to provide clarity or context. Ensure there are actionable takeaways. Support Needed A place to outline any support needed from your manager for your ongoing success and development at GitLab. Manager Feedback Managers will provide additional feedback or response to the self-assessment outlined above. Managers should be sure to reference the Achievements (3) and Roles & Responsibilities (Strengths and Opportunities) outlined by the team member above, and to any additional thoughts or feedback (2-3 points). Next Steps A space for the team member and manager to document any relevant next steps stemming from this conversation. This could be a full Individual Growth Plan or a couple of key actions or development opportunities for the individual. Manager Feedback: Team members let their manager know when they have provided their self-assessment overview in their 1:1 document Team members should share their Mid-Year Check In document with their manager at least one week prior to the live discussion to ensure managers have time to review the content, and to add in their own feedback in the Manager Feedback section. Live Discussion Team members and managers use a dedicated 1:1 to discuss the Mid Year check in. Align on actions/next steps Team member and manager align on action items stemming from the conversation to best support team member development and alignment to their goals. You are encourage to leverage our Career Development and Mobility ) handbook page for ideas and inspiration. Timeline Mid-Year Check-In Timeline (FY2026): 2025-06-16 ‚Äì 2025-06-30: Manager & Team Member preparation & 360 feedback gathering (optional) w/c 2025-06-30 & 2025-07-07: People Manager Enablement Sessions 2025-07-01 ‚Äì 2025-07-18: Mid-year conversations conducted & documented 2025-07-21 ‚Äì 2025-07-25:Follow-up on development & performance goals Succession Planning Succession planning is an important step in our Talent Assessment process. Completing the Performance/Growth Potential Assessment gives leaders a fresh overview of the top performers and the highest growth team members in their respective organizations. Particularly for individuals in Senior Leadership roles and above (the S-Group and depending on structure the Director-Group , a recommended next step following the Performance/Growth Potential assessment is to do succession planning. Succession planning ensures we are identifying and developing future GitLab leaders to ensure business continuity in the event of an unforeseen change, and providing the current leadership team the opportunity to grow and scale. It may provide an opportunity to diversify our leadership team by developing our internal bench of talent. Note, potential alone does not determine who will be a successor. Strong succession candidates should demonstrate sustained exceeding performance and growth, aspire to have a role at the next level, and be ready for a much larger role in the near term. Questions we should ask ourselves when thinking about succession planning (and the individual(s) identified) are: What are our current and upcoming business goals? Does the successor candidate have a track record of delivering strategic results, working in alignment with our values, and demonstrating high growth potential? Does our successor candidate have skill gaps that must close before they are ready to deliver on the business goals identified? (if we do have skill gaps) Can we develop our successors to close those gaps? If so, how? How long will this additional exposure and skill development take? Who else at GitLab should we engage to support their development? If not, do we need to hire externally to ensure business continuity? If we do not have anyone who could assume the role in an emergency situation, what is our plan to provide emergency coverage? Succession Planning Process The succession planning process might vary slightly for different areas of the business depending on size and structure, but at a high level the process should flow as follows: Leaders go through the Performance/Growth Potential Assessment process for all of their direct reports. Ideally, this process includes calibration to generate a level of initial familiarity amongst leadership peers with the talent in the organization. Leaders identify and document their respective successors (and emergency coverage plans if the identified successor could not currently cover in an emergency situation) leveraging this template . Succession plans are reviewed with peers (i.e. all other executives, all other senior leaders in the function, etc.) and your People Business Partner , ideally during a synchronous session to facilitate discussion and questions. Development plans are finalized for successors and documented in the successor slide. (if applicable) Skills gaps impacting ability to achieve business goals are identified and actions are put in place to ensure these gaps are closed/minimized (i.e. stretch assignments, increased visibility and exposure, or hiring) Succession Readiness Definitions Succession Readiness Description Emergency (ER) Someone who could take over this role if the current person were affected by a lottery factor or had to take emergency leave. Has competency and experience to provide coverage on an interim basis (~6 months), but may not be suitable for the role long-term Note: If there is no one who could assume the role today in an emergency situation, part of the succession coverage plan should include an overview of recommendation steps (i.e. engaging a consultancy, splitting up the team, etc.) Ready Now (RN) Someone who has 90% of the competency & experience to take the role now Ready in 1-2 years With additional responsibility & exposure, could take the role soon. Likely has the competency and experience to provide coverage on an interim basis if there is an urgent business need Ready in 2-3+ years Longer term candidate who requires significant development. May also have the competency to provide coverage on an interim basis if there is an urgent business need. Note that the Emergency Coverage slide in the template above should only be used to if the identified successor could not provide temporary coverage for the current leader in an emergency situation. Resources Resource Purpose Workday: Self Assessment & Manager Evaluation Template Team members and managers can leverage this template to begin thinking through and documenting the optional self-assessment and the manager evaluation for the Talent Assessment. Please note that this template is for team members who would like to get an early start ahead of Workday launching the Talent Assessment cycle, however, all assessments will need to be transferred over to Workday for formal documentation and calibration. Workday Job Aid: How to Complete My Annual Self Evaluation Team member instructions for how to complete their annual Self-Evaluation task in Workday. Workday Job Aid: How to Complete the Manager Evaluation and Assess Growth Potential Manager instructions for how to complete their Manager Evaluation task and Assess Growth Potential task in Workday. Workday Job Aid: How to Complete Talent Calibration Manager instructions for how to complete their Talent Calibration in Workday. Workday Job Aid: How to Facilitate Calibration - PBPs PBP instructions for how to facilitate calibration sessions in Workday. Workday Calibration Video Tutorial Manager instructions for how to complete their Talent Calibration in Workday. Talent Assessment Calibration Agenda Doc This template can be used by managers to ensure similar pre-work, structure, and context to generate alignment ahead of live calibration sessions. The agenda is also recommend to ensure rationale behind potential assessment changes during calibration are recorded. Values competencies Values competencies form an important part of the Performance Factor evaluation and are important to review prior to beginning the assessment period. High Performing Team Indicators We‚Äôve broken down each characteristic of high performance to help you recognize and measure success. Remote work competencies Remote work competencies form an important part of the Performance Factor evaluation and are important to review prior to beginning the assessment period. Functional competencies Functional competencies (for groups that have them developed) can also influence the Performance Factor and should be reviewed prior to the assessment period. It is important to me mindful of unconscious bias always, and especially during talent reviews and assessments. It is highly recommended that you review the handbook page and watch the training. Performance Factor handbook page This page is the SSOT to review the Performance Factor‚Äôs impact on compensation. Key Talent Key Talent Criteria Key Talent makes up roughly ~10% of the population. Key Talent represents team members who have a significant impact on GitLab‚Äôs present and future success. They deliver quality results that are instrumental in moving critical company initiatives forward and do so consistently in alignment with our values. These team members are often recognized as experts in their current role. Team members, at any level, can be considered Key Talent. Team members identified as Key Talent typically have knowledge, skills, and experience that: Substantially impacts the company‚Äôs ability to achieve significant milestones and results Demonstrates consistently strong performance Demonstrates growth potential; the ability and desire to assume increasingly more broad or complex responsibilities and learn new skills. Has an outsized, measurable impact on business performance Has a significant impact to the operation of a critical functional area Has demonstrated the ability to scale with the organization Key Talent, Performance, and Growth Potential Team members identified as key talent must be assessed at minimum Performing and Growing (Box 4) in the Talent Assessment process . Although Performance and Growth Potential are a consideration in the Key Talent selection process, they are not the only criteria used to determine the designation and should not be used in isolation. It is important to look holistically at the Key Talent Criteria outlined above when determining who qualifies as Key Talent on your team. ‚ÄúTNTR‚Äù (Too New to Rate) team members can be considered key talent but this would be an exception. In order for a ‚ÄúTNTR‚Äù team member to be identified as key talent they must meet the criteria above and be ramping successfully in their new role. We exclude team members rated ‚ÄúTNTR‚Äù when we calculate our Key Talent distribution across the company. E.g. Team members designated Key Talent during Calibration divided by Talent Assessment eligible team members (excluding TNTR) = Key Talent Distribution % Below are a few examples to help managers think through Key Talent designations as they relate to Performance and Growth Potential: A team member that has a performance assessment of ‚ÄúExceeding‚Äù is not automatically indentified as Key Talent. Perhaps they are doing exceptionally well in their role, but the impact on business performance may not be significant enough to meet the definition above. A team member that is new to the role due to recent promotion and rated ‚ÄúTNTR‚Äù could be identified as Key Talent if they are ramping successfully in their role and have a high impact on the ability for the company to achieve results. Note: Intentionally hoarding knowledge is in direct conflict with our transparency value and is viewed as a performance issue as we measure performance based on alignment with our values. Key Talent and Single Points of Failure (SPOF) Single Points of Failure (SPOF) refers to a single person whose absence would significantly impact the ability of an area of the company to function. Team members that are identified as Key Talent can also be SPOF, as the definition of SPOF overlaps with a few of the Key Talent Criteria outlined above, however, a team member who is identified as SPOF is not also Key Talent by default. A few key differences between Key Talent and SPOF include: team member‚Äôs performance and growth potential, risk mitigation plans, and support/development strategies. Four scenarios exist in the context of our Talent Assessment: Team member identified as Key Talent Team member identified as SPOF Team member identified as Key Talent and SPOF Team member identified as neither one To review the SPOF definition in more detail along with a few examples, please review our Organizational Design handbook page. Process To Determine Key Talent It is important to have a holistic view of all team members when determining who meets the key talent criteria, which is why we require a certain scope when calibrating key talent and making final recommendations in the organization. There are several factors that can help determine the level at which key talent should be assessed, including things like reporting lines and span of control. As a general rule, if a people manager meets the following requirements, key talent calibrations should start at their level: Senior Manager level or above 20+ direct and indirect reports The process to determine Key Talent is as follows: Direct managers make initial key talent recommendations in Workday. The direct manager should include the key talent recommendation along with the Performance and Growth Potential recommendation. The key talent criteria that is met should be noted in Workday. During sub-department calibration sessions, Senior Managers+ should calibrate on the initial key talent recommendations and make adjustments as appropriate, keeping in mind both key talent criteria , and number of individuals identified as key talent, as key talent makes up only ~10% of team members company-wide. The Senior Manager (if applicable), Director, Senior Directors, VP, and People Business Partner (PBP) discuss and calibrate the Key Talent nominations at the department level calibration sessions. A final proposal goes to the E-Group member who adds in their Key Talent and reviews for final approval on Division level. Organizational Value A very small portion of our business (roughly ~10% of the population) is considered to be key talent. As such, a team members‚Äô value in the organization should not be determined based on whether or not they are identified as key talent. While some team members are identified as key talent, this does not mean the rest of our team is not valued and important to our organization‚Äôs success. Aligned with our expected performance distribution , approximately 60-65% of our team are core performers (or ‚Äúperforming‚Äù . Core performers are responsible for keeping things consistently moving forward. This group comprises the largest population in companies across the board for a reason and is an essential part of any organization‚Äôs success. Impact of Being Identified as Key Talent We want to make sure we use engagement tools to retain Key Talent. A few of our primary engagement tools are: Learning & Development , growth opportunities and compensation. Learning & Development: We want to support the growth of Key Talent and their competencies, skills, and knowledge by providing them with the tools they need and the opportunities to progress their own personal and professional development goals. As a people manager it‚Äôs your priority to identify L&D opportunities for your team. Growth Opportunities: As a people manager, it‚Äôs important to have career conversations and identify growth opportunities with your team members. For Key Talent, it‚Äôs especially important to discuss their motivation and ambitions. Growth opportunities can be both horizontal and vertical. Examples of growth opportunities are: expanding the scope within a team member‚Äôs current role, a lateral move to a new role, or a promotion to the next level. Compensation: At GitLab, compensation = cash + equity + benefits. We have a market-based approach and differentiate pay based on performance. Our Annual Compensation Review Cycle and Annual Equity Refresh program allow us to differentiate compensation based on performance and for Key Talent. Succession Planning: As team members identified as Key Talent are critical to roles that have a high impact on the company‚Äôs success, it is important that we identify successors to mitigate risk in the organization. Note that being considered or designated as a key talent one year, does not mean or guarantee that a team member will be considered or designated as a key talent moving forward. Key Talent Program Supporting Key Talent at GitLab is a critical element of business scalability and organizational development and growth. Our Key Talent are often individuals that can be looked to for mentorship and guidance by others, but it is also important that we invest in the development of this group and ensure that key knowledge is shared. A couple of key ways we can support our Key Talent is through regular discussions and the development of Individual Growth Plans (IGPs) . Below are suggestions for getting started, resources for managers, a Key Talent Engagement Discussion template , and a recommended cadence. Key Talent Engagement Discussion One way to set up a structure and regular cadence for touchpoints with our Key Talent population is through Key Talent Engagement Discussions. We recommended these discussion focus areas are: Overall Engagement, Growth/Challenge, and Support Needed. The main goals for check-ins with this group include: Get a pulse on overall engagement Uncover potential risks for business continuity and implement plans to mitigate Identify areas of support needed Identify opportunity for stretch projects and continued growth Use this discussion as a starting point to partner with team members to get Individual Growth Plans (IGPs) in place Leverage this data to identify key themes and potential actions across our Key Talent pool with the goal of improving engagement (leaders can work with their aligned People Business Partner on this piece) Managers can leverage this template to help facilitate consistency in Key Talent Engagement Discussions. Individual Growth Plans (IGPs) Key Talent Engagement Discussions can be a great starting point to start thinking through Individual Growth Plans, which is the recommended next step. Some ideas for our Key Talent population to consider when thinking through Individual Growth Plans (IGPs) include: Stretch project (Cross functional, and an opportunity to be DRI) Mentor (leader to help identify internal or external mentor) Coach or Coaching program (e.g. Coaching Right Now Management development (if applicable) Cross-functional/leadership exposure plan Cross learning plan with other roles within their division Cadence We recommend that managers perform Key Talent Engagement Discussions twice per year, roughly every 5-6 months. Discussion timing is at manager discretion, as we want to ensure these discussions are held at the most relevant and impactful time for each team member. Key Talent Engagement Discussions are more geared towards stay interview format, and should not replace ongoing informal check-ins, regular feedback, and growth discussions that happen more regularly in 1:1s. A couple of options for Key Talent Engagement Discussions that managers can consider are: Before Mid-Year check-in : Before our company-wide Mid-Year check-ins . This cadence would be 1) Key Talent Engagement Discussions, 2) Mid year check-in discussion, 3) Individual Growth Plans (IGPs) ( if applicable ). Touching base with Key Talent ahead of Mid-year check-ins can help provide an insightful baseline and level of insight before going into more performance-focused discussions. In FY'24 Q2, we will begin optional Key Talent Engagement Discussions across the organization aligned with our upcoming mid-year check-in process. For divisions or departments that choose to opt in, the high level timeline would be as follows (exact dates TBD): May: Key Talent Engagement Discussions (optional) June: Mid year check-ins (required) July: IGP (Individual Growth Plan) development (optional) After our Talent Assessment cycle : This cadence would be 1) Self-assessment, 2) Talent Assessment performance review discussion, 3) Key Talent Engagement Discussion, 4) Individual Growth Plans (IGPs) ( if applicable ). We recommend that Key Talent Engagement Discussions occur after Talent Assessments as opposed to before to ensure we have the most recent group of key talent calibrated and confirmed before Key Talent Engagement Discussions occur. As mentioned above, Key Talent Engagement Discussions can be done at any point during the year, it is not necessary that they are coupled with our Mid year check-in process. Last modified June 6, 2025: Updated Mid-Year Check-In Timeline ( 0311457d ) View page source -  - please contribute .",
    "headings": [
      "Talent Assessment",
      "Purpose",
      "Overview",
      "The Performance/Growth Potential Matrix",
      "What is ‚ÄúPerformance‚Äù?",
      "Developing",
      "Performing",
      "Exceeding",
      "Expected Distribution Performance/Growth Potential Company-Wide",
      "The Performance Factor",
      "Measuring Performance",
      "What is ‚ÄúGrowth Potential‚Äù?",
      "Measuring Growth Potential",
      "Growth Potential Output",
      "Calibration",
      "Too New to Rate",
      "Calibration Session",
      "Identifying Action",
      "Q4 Formal Talent Assessment",
      "Timeline",
      "Cadence",
      "Eligibility",
      "Team Member Self-Evaluations",
      "Matrix Assessment Timeline",
      "Final Assessments in Workday",
      "Promotions or Transfers During Assessment Cycle",
      "Best Practices for Communicating Performance/Growth Potential Factors",
      "Communication",
      "Sample Script for Delivering a Talent Assessment",
      "Sample Next Steps",
      "Information Guide",
      "Performance/Growth Potential Review General Information",
      "Talent Assessment - Manager Scenarios",
      "Mid-Year Check In",
      "Eligibility",
      "Process",
      "Timeline",
      "Succession Planning",
      "Succession Planning Process",
      "Succession Readiness Definitions",
      "Resources",
      "Key Talent",
      "Key Talent Criteria",
      "Key Talent, Performance, and Growth Potential",
      "Key Talent and Single Points of Failure (SPOF)",
      "Process To Determine Key Talent",
      "Organizational Value",
      "Impact of Being Identified as Key Talent",
      "Key Talent Program",
      "Key Talent Engagement Discussion",
      "Individual Growth Plans (IGPs)",
      "Cadence"
    ],
    "word_count": 13627,
    "extracted_at": "2025-07-21 20:13:15"
  },
  {
    "document_id": "gitlab-handbook-972629",
    "url": "https://handbook.gitlab.com/handbook/people-group/team-member-relations/",
    "title": "Team Member Relations Philosophy",
    "category": "People Group",
    "content": "Team Member Relations at GitLab The Team Member Relations team at GitLab ensures that team members feel safe and have a point of contact for all confidential discussions. Team Member Relations The Team Member Relations team is responsible for facilitiating and resolving all people matter related team member issues. They will also assist in creating and informing team members of policies that are fair and consistent for all GitLab team members. As part of the People group the Team Member Relations team works with both the manager and team member in an intermediary function to understand and help resolve workplace issues. The Team Member Relations team can also help coach and advise managers and team members on policies and processes. Team member relation issues can range from simple coaching questions to serious code of conduct violations. We classify these different level of team member cases by tiers. Example of issues/cases by tier level: Tier 1 Coaching support Performance Management Unprofessional behavior Relocation concerns Absenteeism Tier 2 Job abandonment Manager/team member conflict resolution Team member/team member conflict resolution Tier 3 Ethic Violations Harrassment Retaliation Any Code of Conduct Violation All Tier 3 cases will be managed together with Legal and the TMR team. Discussing Private Concerns Team members who would like to discuss a private matter should send an email requesting support from our Team Member Relations team to teammemberrelations@gitlab.com . Please include the following in your email: Subject Line should be ‚ÄúNew Request for assistance‚Äù Name of Team member requesting support (Name of the person sending the email) Name of Team member(s) involved in the matter Team members location (example Orlando, Florida or Berlin, Germany) for managers who are requesting support regarding a team member issue on their team please use the location of the team member and not your location. Tier level as listed above Job title of team member requesting support Division Department Brief description of type support needed. Example - I am looking for guidance for managing a team members‚Äô performance. The Team Member Relations team will reach out within 24 hours from when the request was sent via email during the business week. GitLab also offers a Harassment Complaint Form that any team member may use to document any instance of any type of workplace harassment. Simply copy the form, fill it out with your information and send it to our Team Member Relations Specialist at teammemberrelations@gitlab.com . Team members and the TMR should both respond to questions or queries via slack or email within 24 hours to continue making progress on the issue and get to a timely resolution. For urgent requests that need immediate attention please ask for urgent assistance by sending a message marked URGENT to teammemberrelations@gitlab.com . If you do not receive support in a timely manner, below is the escalation path: Vice President of People Operations, Technology and Analytics Chief People Officer An urgent request would be something that needs immediate attention like team members safety or a code of conduct violation. Raising Communication Concerns We ask all GitLab team members to follow our Effective & Responsible Communication Guidelines . These guidelines highlight the expectation that everyone assumes positive intent, exercises kindness, and expresses your thoughts responsibly and inclusively. If there is an issue to raise regarding someone‚Äôs communication or conduct, team members should raise their concern with the manager of the individual involved or, if preferred, email Team Member Relations ( teammemberrelations@gitlab.com ) directly. Managers can email Team Member Relations ( teammemberrelations@gitlab.com ) to express concerns with a team member‚Äôs communication if they believe intervention is needed. If a team member is in violation of the effective & responsible communication guidelines, the Team Member Relations team will reach out to the manager and disciplinary action could be taken. Team Member Relations Philosophy GitLab believes in preserving the dignity of each team member and expects everyone to treat others with fairness, respect, and transparency. We encourage mutual responsibility for constructive work relationships and communication, information sharing, problem solving and a safe neutral process through which differences can be resolved. Direct and honest communication is strongly encouraged between all team members regardless of title or level and per our values we do not pull rank . Such communication is likely to enhance understanding, avoid misunderstandings and create rapid solutions to concerns. We have built this philosophy to focus on these 4 pillars in line with our values: Collaboration Diversity, Inclusion & Belonging Results Transparency Commitments We are committed to providing a safe environment for all GitLab team members to achieve maximum career development and goal achievement. We are committed to treating each team member as an individual and providing a workplace where communication is transparent and where problems can be discussed and resolved in a mutually respectful environment. To foster this environment we take into account individual team member circumstances and the individual team member while balancing the needs of the business. Team Member Relations Function To support our team members, GitLab has established a Team member relations group to assist team members and their leaders with resolving work related issues. The Team Member Relations team (TMR) respects the privacy of all team members and treats discussions with the fullest degree of confidentiality possible. We have incorporated our Values and the Code of Business Conduct and Ethics into our team member relations practices and philosophy. We believe that by communicating with each other directly and transparently, we can continue to resolve any difficulties that may arise and continue to make GitLab a great place to work. For Team Members The team member relations function provides all GitLab team members an avenue to express workplace concerns and to resolve conflicts in a safe and unbiased forum. Team members can express themselves openly and freely without fear of retaliation. Professional behavior and conduct is expected from all team members. As a reminder use judgement in your conversations with other team members. We encourage all team members to provide direct feedback to each other. The team member relations group is here to listen to team members concerns in an unbiased, open and professional manner. Team members can discuss reasonable accommodations or any related questions. For Managers Team member relations provides guidance to managers in their efforts to improve team member performance or to correct unacceptable personal behaviors. Managers are responsible for setting priorities and motivating their team members. They are also responsible for ensuring the care of their team members as well as meeting GitLab‚Äôs goals. These two things can be done simultaneously. As managers it is considered one of your primary responsibilities to understand GitLab‚Äôs Code of Business Conduct and Ethics , Values and People Group policies and processes. People managers are responsible for upholding compliance on the their teams and considering the best interest of the business. If a manager is made aware of a situation that potentially runs afoul of the Code of Conduct, Values and People Group processes or policy they should immediately reach out to the team member relations specialist . If uncertain about a specific policy or procedure, the manager should reach out to a leader, their aligned PBP or the Team member relation specialist for further clarification. When in doubt, it is always best to ask. Team Member Performance Improvement Management Guiding Principles A critical responsibility within the role of a GitLab leader is to spend the time required to truly understand the causes of the performance issue and how to address them properly. GitLab managers will determine if the performance concerns are skill-based or behavior (will)-based to determine next steps. Below are the definitions of both skill- and will-based performance concerns. Skill-based performance management Team member lacks the technical knowledge or capability to be successful in the role Team member is unable to prioritize work effectively Team member lacks the understanding on how to complete tasks Team member exhibits difficulties working with team members and/or communicating effectively Sometimes skill-based issues appear as a will-based or behavior concern. However, after delving into the cause for the behavior, the leader may find a skill-based gap causing the disruptive behavior. The team member may be embarrassed or concerned about their ineffectiveness or ability to perform their role and may react in a way that is inappropriate. The following are a few recommendations for a manager to address skill-based performance issues: Provide the team member with additional training Provide the team member with a mentor or buddy Provide the team member with clear directions and examples If the team member is still not making progress after the manager has provided additional resources or coaching please review the underperformance page in the handbook for next steps. Will-based performance management Will-based issues are described as undesirable behavior that impedes the success of the Team Member, the Team, and/or GitLab as a whole. The leader may hear about the behaviors from others or experience the undesirable behavior directly. It is important that the manager address the concerns right away. While ‚Äúwill‚Äù issues can be disruptive, there are different levels of severity which must be considered when determining next steps. The tiers below are examples and are not exhaustive, and should be used for comparision purposes to determine the impact to GitLab. Tier 2 - Misconduct resulting in limited material risk to GitLab Violations of the company code of conduct (excluding harassment and discrimination) Team member uses inappropriate language that others may find offensive Team members behavior creates a negative or toxic team environment Behavior continues even after coaching from manager For Tier 2 level concerns, the Manager should reach out and discuss with the team member relations specialist immediately. Tier 1 - Gross misconduct or a violation with serious implications to GitLab. Violates a law/regulation (theft, fraud, drug use, etc.) Poses a serious operational, reputational, or financial risk to GitLab Poses significant health or safety risks Harassment Severe and/or pervasive language or conduct that could be perceived as discriminatory or creating a hostile work environment Since situations differ, managers should immediately reach out to a team member relations specialist for guidance before taking any action. If unable to contact the team member relations specialist directly, please follow the escalation path listed in the handbook Please review the underperformance page in the handbook for further information regarding managing team member performance. Last modified February 7, 2025: Replace ref links with regular links ( 9fe84978 ) View page source -  - please contribute .",
    "headings": [
      "Team Member Relations at GitLab",
      "Team Member Relations",
      "Discussing Private Concerns",
      "Raising Communication Concerns",
      "Team Member Relations Philosophy",
      "Commitments",
      "Team Member Relations Function",
      "For Team Members",
      "For Managers",
      "Team Member Performance Improvement Management Guiding Principles",
      "Skill-based performance management",
      "Will-based performance management"
    ],
    "word_count": 1738,
    "extracted_at": "2025-07-21 20:13:17"
  },
  {
    "document_id": "gitlab-handbook-50910",
    "url": "https://handbook.gitlab.com/handbook/total-rewards/",
    "title": "Total Rewards",
    "category": "People Group",
    "content": "GitLab's Guide to Total Rewards Compensation Why: Our Compensation Principle What: Compensation Calculator Inputs How: Compensation Review Cycle Benefits Why: Our Benefits Principle What: General Benefits Equity Why: Why we grant Equity to Team Members What: What we grant to Team Members How: Accepting, Understand and Exercising Awards * Compensation at GitLab is currently being updated as part of our Job Architecture Project. All information in related compensation handbook pages is subject to change during or at the conclusion of this transition. Please see the Job Architecture Project section for more information. Meet the Total Rewards Team Who Job Title Allia McCrank VP, Total Rewards Angela Chung Director, Executive Compensation & Equity Denise Parsonage Director, Global Benefits Strategy Raisha Kole Senior Benefits Program Manager Vanessa Crisostomo Senior Benefits Analyst Charles Reveil Senior Benefits Analyst Jackie Grubbs Senior Absence Management Specialist Teranay Dixon Senior Absence Management Specialist Morgan Wilkins Manager, Compensation Shahrukh Talat Compensation Analyst Ari Weir Compensation Partner, GTM Mike Kitlas Compensation Partner, R&D Contact The Team For feedback or questions relating to compensation, benefits and equity, you can reach out to us via: HelpLab: To get in touch with People Connect who can answer your question or help direct it to the proper person/team. Benefits Find answers to your questions about GitLab's benefits. Compensation Find answers to your questions about GitLab's compensation framework. Equity Compensation Learn more about Equity Compensation at GitLab Incentives at GitLab The page contains information about incentives available for GitLab team members. Last modified June 3, 2025: Removal of Comp Calc References & Job Architecture Transition Updates ( f0896a99 ) View page source -  - please contribute .",
    "headings": [
      "GitLab's Guide to Total Rewards",
      "Meet the Total Rewards Team",
      "Contact The Team"
    ],
    "word_count": 273,
    "extracted_at": "2025-07-21 20:13:18"
  },
  {
    "document_id": "gitlab-handbook-13710",
    "url": "https://handbook.gitlab.com/handbook/tools-and-tips/",
    "title": "Tools and Tips",
    "category": "People Group",
    "content": "Tools and tips Overview This page contains useful tips for working at GitLab and for various tools we use. GitLab tips Change your username at GitLab.com Starting point: let‚Äôs say your username is old-mary and you want it to be just mary . Note: each GitLab account is tracked by an userID , which is a number stored in a database. If we change the username, the userID does not change. And all the permissions, issues, MRs, and relevant stuff within GitLab are related to your userID , not with your username. Note: if you are not a GitLab Team member, the same process applies except your e-mail ( STEP 2 ), which will be different (will not be @gitlab.com email), so you can replace it with your own email account. STEP 1: Request your new username As of this Merge Request , it is no longer possible to request a username via the Namesquatting process . If the username you wish to use is unavailable, you will have to pick a different one. STEP 2: Create a new account with your new username If support replies to you telling that the username is free to use, create a new GitLab.com account with it. Use a personal email to register your new account and choose one that has not been used with your old GitLab account. Navigate to your Profile Settings > Emails , and add a new email. ‚≠êÔ∏è Trick ‚≠êÔ∏è If your email at GitLab is mary@gitlab.com , add the new email as mary+something@gitlab.com : this is a Gmail trick ! All your emails sent to this alias will end up in your GitLab email account üòÉ Navigate to https://gitlab.com/-/profile/notifications and choose the notifications email: mary+something@gitlab.com . Open your old account in one browser and the new one in another browser (e.g., Chrome and Firefox, or Chrome and Safari) - log in to both accounts at the same time. STEP 3: Let‚Äôs have some fun (kidding, this is critical!) Navigate to https://gitlab.com/-/profile/account in both your accounts. Look for your username. This operation has to be done quickly, otherwise you are risking to lose your awesome new username to someone else quicker than you. We need to swap the usernames between both accounts, so you‚Äôll keep all your history, your privileges, issues, and MRs assigned to you, etc. If you work with 2 monitors, open each browser on one monitor. If you don‚Äôt, open them side by side, so that you can keep an eye on both at the same time. Rename your new username mary to something like mary-1 and DO NOT click update username yet. Rename your old username old-mary to your new username mary and DO NOT update that either. Just leave them typed into the boxes. Make sure you did the previous step right! ‚ö†Ô∏è CRITICAL ‚ö†Ô∏è Update the first one ( mary to mary-1 ). Immediately, click update on the other one ( old-mary to mary ). Immediately, rename the mary-1 to your old one old-mary and click update username again. Ta-Da! üôå STEP 4: Move your projects (or not) Now, if you have any personal projects, you might want to import them to your new account (the one that has your old username now). To do that, in your new account (the one with the old username), click Create a New Project , give it the very same name as the original one, click Git - add repo by url , and paste the https:// URL of your project there. To make things easier, make sure all the projects you want to import are set to public view. You can make them private afterwards. If you have GitLab Pages projects with the default GitLab.io url, you will need to import them to you new account, then make a change to trigger a build and redeploy your site. They will be affected only if you‚Äôre using a CNAME with a subdomain instead of an A record . This won‚Äôt affect Pages projects that use custom domains, as they all point to the same Pages server IP via A record. Your groups won‚Äôt be affected either, as they operate under their own namespace. Add both users as members of your groups and nothing changes. That‚Äôs it! STEP 5: Update your username in other places Don‚Äôt forget to update your username in the following places: team page If you‚Äôre part of Marketing, Marketing Handbook Workday - GitLab Username under ‚ÄòAdditional Data‚Äô > ‚ÄòView all‚Äô in your profile actions STEP 6: Set up your notifications Team members choose to manage their GitLab activities in different ways. Setup your notifications in a way that works best for you. To-do list: all team members will see a to-do list within their GitLab account. This will track different action items. Items can be marked as done as they are completed. Email: team members can choose which, if any, notifications show up in their Gmail accounts by using filters . Slack notifications: team members can choose to enable Slack notifications . Please note that GitLab slack expires after 90 days, so this is not a tool for longer-term activity management. GitLab team members‚Äô resources The GitLab team-member resources project has a wiki for sharing among GitLab team-members . It‚Äôs for topics like parenting where people may want to share knowledge, but the handbook is not the best fit. GitLab team members‚Äô setups @tipyn ‚Äôs home office equipment and macOS setup Linking Gravatar photo Link your GitLab email address to an easily recognizable photo of yourself on GitLab, Slack, and Gravatar . It is company policy to use a photo, and not an avatar, a stock photo, or something with sunglasses for any of your GitLab accounts, as we have a lot of GitLab team-members and our brains are comfortable with recognizing people; let‚Äôs use them. Note : If you upload your photo to Gravatar associated with your gitlab.com email, then you can simply not set an image in your GitLab and Slack profiles and they will automatically use your Gravatar photo. If you already uploaded individual photos to your GitLab and Slack profiles, simply removing them will cause your avatar to use the Gravatar photo by default. Using Mermaid Mermaid is a tool that allows us to create flowcharts, graphs, diagrams, Gantt charts, etc. within GitLab! Check out the examples in the GitLab docs on how to use Mermaid. A few additional resources that can be helpful when working with Mermaid are: The live mermaid editor to check your work! GitHub‚Äôs Mermaid overview A CSS color bank to add color to your charts. You can see an example of how to add images to Mermaid charts here . Examples of Mermaid charts that have been created by GitLab team members: Talent Development Program Chart by Cassiana Gudgenov , People Compliance Partner CEO Year at a Glance Data Infrastructure System Diagram Advanced layout demos for Mermaid diagrams Note: When creating Mermaid charts in the GitLab handbook, you need to type three back tick symbols followed by the word mermaid before the chart, and three back tick symbols at the end of the chart. This will enable Markdown to distinguish between .md and Mermaid. Please reference the example Mermaid charts linked above to see how this looks live. Visual help to differentiate between GitLab servers If you are working on multiple GitLab instances and want to have a visual differentiation, you can change the default Navigation theme to a different color. Calculating the GitLab handbook page count Page counts are determined through a simple two-step process: Count the number of words in the handbook. This can be done by running find source/handbook -type f | xargs wc -w from the root directory of the repository. Submit the word count to WordCounter for conversion to a page count. Trainee maintainer issue upkeep Part of the maintainer training process is to keep track of Merge Request that have been reviewed and writing down an assessment on the review in the maintainer training issue. Manual upkeep of the maintainer training issue can be time consuming. There are tools that others have built to help with this task: https://gitlab.com/nolith/review-tanuki https://gitlab.com/splattael/traintainer https://gitlab.com/arturoherrero/trainee https://gitlab.com/alberts-gitlab/review-tanuki https://gitlab.com/gitlab-org/gitlab-dev-cli#maintainer-trainee-helper Note: When using these tools, avoid adding mentions to maintainers in existing comments. There is a known issue where users are not notified by email when mentioned in an edited comment. It only generates a TODO which a maintainer may not use. Handbook Tips Refer to the Handbook Development section to learn more about the architecture, structure and how to edit the handbook locally on your desktop. For how to edit the handbook in your browser, refer to the editing handbook page . www-gitlab-com Tips Portions of the https://about.gitlab.com site lives in the www-gitlab.com repo. The marketing website is maintained by the digital experience team in their GitLab group . The data/*.yml files live in the www-gitlab-com repository, and are used by numerous sites including the marketing website and the handbook. The documentation for the site itself is in markdown documents under the doc folder in the repo . If you are looking to do local development on the site, doc/development.md is probably the best place to start. Image and GIF tips Many of the tips shown in this section require ImageMagick, an image manipulation tool. The installation is described in the ImageMagick section . ImageMagick ImageMagick provides the convert CLI command which can be used to resize images, add drop shadows, edit GIFs, etc. On macOS, install ImageMagick with Homebrew: brew install imagemagick On Linux, use your package manager: sudo dnf install ImageMagick sudo apt install imagemagick Creating GIFs We have a dedicated section for that in the handbook. Resizing images ImageMagick provides the convert CLI command which can be used to resize images. Our blog images do not need resolutions higher than 1920x1080. This saves bandwidth and makes the website load faster. This example converts an existing image to 1920x1080 resolution and replaces it inline: convert blogimage.jpg -resize 1920x1080 blogimage.jpg You can also use percentage values for the -resize parameter. The convert CLI command can do more things explained in the documentation . If you need to convert multiple images, combine the convert command with find . Note that this replaces the images inline. find . -type f -name '*.jpg' -exec sh -c 'convert {} -resize 1920x1080 {}' \\; Convert HEIC to JPG Tip: Modern macOS versions provide the Finder right-click menu Quick Actions > Convert Image which automatically converts an image to JPG. Use this method for quick UI conversions. ImageMagick provides the mogrify CLI command which can be used to convert the HEIC image format to other formats like JPG which are accepted on all websites. mogrify -format jpg icloudphoto.HEIC If you need to convert multiple images, combine the mogrify command with find . Note that this creates new files and requires manual cleanup of .heic|HEIC files, -iname uses a case insensitive match. find . -type f -iname '*.heic' -exec sh -c 'mogrify -format jpg \\\"{}\\\"' \\; An example shell alias can be found in @dnsmichi‚Äôs dotfiles project . Add drop shadow to images Install ImageMagick and use the convert CLI command to add a drop shadow. The -shadow parameter may need adjustments on the dimension. convert input.png \\( +clone -background black -shadow 80x20+0+15 \\) +swap -background transparent -layers merge +repage output.png Troubleshooting 2FA debugging If 2FA stops working unexpectedly (no new phone or computer) it‚Äôs usually because of improperly configured date & time on either device. Make sure that ‚ÄúAutomatic Date & Time‚Äù is enabled on both devices. If they‚Äôre already enabled try toggling them off and on again to force an update. If this doesn‚Äôt work, request that IT Ops reset your 2FA setting. Links for finding the settings: iOS: Get help with the date and time on your iPhone, iPad, and iPod touch - Apple Support macOS: If the date or time is wrong on your Mac - Apple Support Linux (using systemd): systemd-timesyncd - ArchWiki For Android there‚Äôs no definitive link, since most vendors have different UIs for their settings. But in the Settings-app, look for ‚ÄúDate & Time‚Äù and there should be a ‚ÄúAutomatic Date & Time‚Äù toggle. Check which process occupies a given port Using Netstat Netstat is a command line tool which can be useful to print network connections, routing tables, interface statistics, etc. One of the most common uses for netstat during troubleshooting is to display a list of open ports listening for connections. sudo netstat -tulpn | grep -i listen [ user@gitlab ~ ] $ sudo netstat -tulpn | grep -i listen tcp 0 0 127.0.0.1:5000 0.0.0.0:* LISTEN 18948/registry tcp 0 0 127.0.0.1:9100 0.0.0.0:* LISTEN 18841/node_exporter tcp 0 0 127.0.0.1:9229 0.0.0.0:* LISTEN 18764/gitlab-workho tcp 0 0 127.0.0.1:8080 0.0.0.0:* LISTEN 18980/unicorn maste tcp 0 0 127.0.0.1:9168 0.0.0.0:* LISTEN 18808/puma 4.3.3.gi tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 18831/nginx: master If you find a port already in use, you won‚Äôt be able to successfully start up a service or program that utilizes that same port. Options to resolve are: Stop the service currently running on the needed port and confirm the port is no longer in use Review documentation to determine whether it is possible to specify an alternate port for either process (the existing one or your new service) Known Port Conflicts When the GitLab Development Kit cannot start using the ./run command and Unicorn terminates because port 3000 is already in use, you will have to check what process is using it. Running sudo lsof -iTCP:3000 -sTCP:LISTEN -n -P will yield the offender so this process can be killed. It might be wise to alias this command in your .bash_profile or equivalent for your shell. You may also wish to add a function in your .bash_profile (or equivalent file for your shell) like this: function killport () { lsof -i tcp: $1 | awk '(NR!=1) && ($1!=\"Google\") && ($1!=\"firefox\") {print $2}' | xargs kill } which you can use like so: > killport 3000 and it will kill whatever process is currently using port 3000. Terminal Display current git branch in the console By adding this small configuration you will be able to view the git branch that you are using currently. If you are not inside a git repository, it only displays the username and the current directory. For Bash: Add the following lines in your .bash_profile git_branch () { git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/(\\1)/' } export PS1 = \"\\u@\\[\\033[32m\\]\\w\\[\\033[33m\\]\\$(git_branch)\\[\\033[00m\\]\\$ \" Doing the following, makes the changes to get reflected in you current terminal: source ~/.bashrc For Zsh: On macOS Catalina, ZSH is the default shell . By installing Oh My ZSH! , the git plugin is automatically loaded and shows the current git branch. Another option would be: Add the following lines in your ~/.zshrc parse_git_branch () { git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/ (\\1)/' } PROMPT = \"%n@%d~%f%\\$(parse_git_branch) %# \" The changes will show on the next terminal or immediately by running. . ~/.zshrc Shell aliases Use command aliases in your shell to speed up your workflow. Take a look at these aliases and others in Sid‚Äôs dotfiles project . For example, by adding the following to your .bash_profile or equivalent for your shell, you can just type s to checkout the master branch of this website, pull the latest changes, and open the repository in Sublime Text: alias gco = 'git checkout' alias gl = 'git pull --prune' alias gca = 'git commit -a' alias gp = 'git push origin HEAD' alias www = 'cd ~/Dropbox/Repos/www-gitlab-com/source' alias s = 'www;subl .;gco master;gl' After editing, you can just type gca to commit all of your changes, followed by gp to push them to the remote branch. If you are using Oh My ZSH! , you can add custom aliases shown below. You can freely define the file name, only the suffix .zsh is important. vim ~/.oh-my-zsh/custom/aliases.zsh An example can be found in Michael Friedrich‚Äôs dotfiles project . Delete local Git branches where remote branch was deleted In order to delete local Git branches which are deleted on the remote server, you‚Äôll need to combine the --prune pull/fetch command with more commands. git branch -vv lists all details of local branches, the followed grep filters for all marked gone in the default remote origin and prints the results with awk . This argument is passed into git branch -d , and executed for all matching results. Note that -d does not delete unmerged branches. -D has more impact but can accidentally delete branches. # Delete all remote tracking Git branches where the upstream branch has been deleted alias git_prune = \"git fetch --prune && git branch -vv | grep 'origin/.*: gone]' | awk '{print \\$1}' | xargs git branch -d\" Run the command without the final deletion command to see the potential affected branches. Note that \\$1 is shell escaped in the alias and needs to be executed as $1 . git fetch --prune && git branch -vv | grep 'origin/.*: gone]' | awk '{print $1}' Dotfiles You can use dotfiles to customize your system, and keep all configuration in a central place. The name dot file is derived from Linux/Unix where all configuration files started with a dot, hiding them from the default list view ls . Team member dotfiles projects: Sid Sijbrandij‚Äôs dotfiles Michael Friedrich‚Äôs dotfiles , more details in this blog post Brendan O‚ÄôLeary‚Äôs dotfiles Traveling Long haul flights Note: you have to pay for these items yourself. Quiet comfort Bose over ear noise canceling headphones (so it doesn‚Äôt touch your dried out eyes) Custom molded ear plugs (can be up to $200 hearing aid store but are usable in many situations, there are also DYI kits but Sid has not tried that) Melatonin (possible unsafe during pregnancy and breast-feeding) Sleeping pills (over the counter is fine) WorkFrom WorkFrom is a crowd-sourced resource of coffee shops and other such places that are remote-work friendly. Wi-fi usage When using unsecured Wi-Fi, consider a personal VPN. We don‚Äôt have a corporate VPN but consider purchasing a personal VPN if you travel for GitLab or use unknown networks often. Remember that if your job has restrictions based upon geolocation (for example supporting customers with specific data restrictions and country-based access), a personal VPN may not be the best choice as often the VPN vendor routes traffic through other countries. If this restriction applies to you, consider tethering. Tethering is when you set up your mobile phone as a hotspot and connect your laptop up to it via Wi-Fi, avoiding the unsecured Wi-Fi network. There is more information here on the subject, and as long as your data plan supports it, you should be good to go. Double check before international travel, as it may be supported but have hidden costs. When connecting to a network with a captive portal , most websites will not load as modern sites use HTTPS, and captive portals interrupt that process. Your device will try and compensate for this, but it can be tough to manage manually. If you have trouble, try connecting to https://captive.apple.com/ first, which is intentionally only HTTP and will load the captive portal. FIDO2 / WebAuthn FIDO2 is a cryptographically strong 2FA (2-factor authentication) method. It is hardware-based, and is typically deployed via a USB, NFC, or built into a device such as a MacBook‚Äôs Touch ID or iPhone‚Äôs Face ID. The standard is open and is maintained by the FIDO Alliance . WebAuthn is a component of FIDO2 that supports verification by web applications using public key cryptography. FIDO2/WebAuthn is the preferred method of 2FA and is highly recommended by GitLab‚Äôs Security Department. One of the points of 2FA is that while you are authenticating with a username and password for the first factor, a secondary factor should use a separate - or ‚Äúout of band (OOB)‚Äù - communication channel for the authentication. FIDO2/WebAuthn devices certainly meet that criteria, better than all other methods. There are other 2FA methods outlined below . How it works During the authentication process, you enter in your username and your password. On systems with 2FA enabled and using FIDO2/WebAuthn, the hardware token is queried. By pressing a button or tapping a sensor on the FIDO2 device, the FIDO2 device completes the authentication process in a cryptographically strong way. It is generally considered the most secure form of 2FA. It is also more convenient than manually entering codes generated by a TOTP application. During the registration of the FIDO2/WebAuthn device, a public/private key pair is generated, with the public key being registered with the service you will be authenticating with, and the private key is stored on a secure chip in the device. When authenticating, after you‚Äôve entered in your username and password, the device is queried via an encrypted message that can only be authenticated by the private key, so a button or sensor is pressed on the device to allow the query to be completed, and the user is then granted access to the system. FIDO2/WebAuthn devices YubiKey: The most popular FIDO2/WebAuthn device is Yubico‚Äôs YubiKey. There are a wide variety of sizes and styles of YubiKeys. Yubico (along with Google) helped develop the predecessor to FIDO2 standard (U2F) before it was moved to the FIDO Alliance. Most GitLab team members that have WebAuthn devices have a YubiKey. It should be noted that for a long time Yubico‚Äôs source code for its firmware was open source, but some of the newer versions of firmware are closed source. This has caused some concern in the security community, particularly those that prefer to use open source whenever possible. Are They Secure? YubiKey has been examined by the security industry at large, third party audits and by the Security Team. YubiKey‚Äôs are more than suitable for use within GitLab and work fine with FIDO2/WebAuthn-compatible systems. YubiKey has had a number of security issues which are typically resolved quickly. They have a dedicated page for security advisories. In rare cases, a security issue involving a hardware token arises that requires the hardware token to be replaced as a firmware update will not mitigate the issue. This happened with Yubico in 2017 . Most of the attack models that impact the FIDO2/WebAuthn tokens require physical access to the token itself. That is, the security advisories involve coding issues that can only be exploited via access to the token or the computer that the token is plugged into. This in itself makes the devices more secure. Recommendations While there are other hardware tokens that are also decent and will function with GitLab, some have limitations. The recommended solution for team members is Yubico‚Äôs YubiKeys. Please fill out this form before ordering a YubiKey, as we may be able to provide a YubiKey via our group buy subscription. Recommended YubiKey models include the YubiKey 5Ci (for iPhone users) and YubiKey 5 NFC (for Android users). What GitLab team members need to keep in mind is that if you travel with your company laptop - either on a business trip, a trip to visit family and friends in another location but you intend to keep working, or just a trip to the local coffee shop - treat the token with the same level of care as a credit card. Do not leave it where it could be stolen. If you are concerned about potentially losing your hardware token, be sure to add Touch ID and potentially a mobile device as an accepted authentication token. Sites following the FIDO2/WebAuthn standard should support multiple tokens. That way if one is lost or stolen, you can still login use another method. Currently YubiKey‚Äôs are limited to one per user, in the case of lost or damaged, please reach out in the #it_security_help Slack channel and we‚Äôll assist you with a replacement. Usage of 2FA is mandatory for GitLab team members. Other 2FA Methods In addition to FIDO2/WebAuthn , there are additional protocols used for 2FA. There is ‚Äúcryptographic push‚Äù, TOTP , and SMS-based authentication (text message). Pluses and minuses to each are listed below. Cryptographic Push This is usually shortened to simply ‚Äúpush technology‚Äù. It is called ‚Äúpush‚Äù because during the authentication process, after you‚Äôve entered your username and password, the service you are authenticating with automatically ‚Äúpushes‚Äù a secondary authentication via a separate communications channel to a device you possess. This is usually your phone, and it is facilitated via a phone app that is specific to that process. During the registration process a cryptographically-secure key pair is generated, and the app uses that key pair to uniquely identify the Push as coming from the service you are authenticating to. Typically the app then either directly notifies you or you access the app, which will pop up a message asking if you were in fact trying to authenticate. Answer yes and the authentication process is complete. GitLab team members may be familiar with this Push method as it is used by Okta Verify . Push Caveats This method is not quite as secure as a hardware token, as typically those devices stores data securely on the secure chip on the device itself. It is possible that the Push phone app is also storing secret data on the local secure chip on the phone, however the entire process is dependent on the service‚Äôs servers being up, and WebAuthn is more self-contained. But note that Push technology is still considered extremely secure, and once configured it is fairly convenient to use. TOTP Timed-based One-Time Password is fairly secure. This method involves a rotating value based off of a cryptographic seed that is used to uniquely identify communication between the service and the end user authenticating. The value is (usually) a six digit number that changes every 30 seconds, and during the authentication process after you‚Äôve successfully entered in your username and password, you are asked to enter in the value. GitLab team members should use 1Password to manage TOTP codes. TOTP Caveats The main problem with TOTP is that during this 2FA process it typically involves the end user entering in all values through a single communications channel (usually a web browser). As this is the case, it is possible that an attacker could send you a fake web page for you to enter in your credentials, including your TOTP value. Granted, the attacker would have to be reading your replies and sending in all of your credential information extremely quickly and get the entire process completed with 30 seconds so the risk is greatly reduced, but it still exists. Both WebAuthn and Push are preferred over TOTP, but as long as you are the one initiating the communication and you are not clicking on a link in email, you should be okay. SMS One of the more popular (and most common) methods of 2FA is SMS-based text messaging. It is similar to TOTP, but instead of using a locally-stored application to calculate the six digit number, the service you are authenticating to sends the six digits to you via an SMS text message. When you set up your account, you provide the service with your cell phone number so they know which phone number to send the six digits to. SMS Caveats Due to the number of caveats, SMS is only recommended if there is no other 2FA option available. Here are the main problems with SMS messaging. SMS is subject to the same phish-style attack as TOTP. The main difference is that some SMS-based authentication schemes time out after 60 seconds instead of 30, making the phish-style attack slightly easier for the attacker. The information regarding your phone number is stored on a SIM card in your phone. If an attacker with physical access to your phone were to steal the SIM, they could impersonate you from their own phone. Of course they could do the same thing with your hardware token, however they would still need your username and password to use the hardware token. Unfortunately, calling up the service and asking for your password to be reset is often confirmed using SMS messaging, so with the possession of the SIM card, the attacker could pose as you. Again, if you treat your phone the same way you treat your credit card or cash, then this type of attack is minimized. An attacker could contact your phone carrier, impersonate you and state you lost your phone, and set up a new SIM card. Unfortunately many times your account is protected with a security question such as ‚Äúmother‚Äôs maiden name‚Äù, ‚Äúfavorite restaurant‚Äù, or some other simple question - all information that could be determined from a website that does family trees or via social media where you post pictures of your dinner. An older attack known as ‚Äú SIMJacker ‚Äù allowed an attacker to send your phone an SMS message with a malicious payload that allows for direct manipulation of the SIM card itself. This attack still works on older SIM cards, although more modern SIMs are no longer vulnerable to this. Most of the known attacks using SIMJacker involved Latin and South America, the Middle East, Northern Africa, parts of Eastern Europe, and parts of Southeast Asia. If You Must Use SMS There may be services that only offer SMS as their 2FA solution, so in those cases it is better than nothing. If this is the case, there are a few things you can do to secure things ever so slightly. If you have an old phone (5+ years old) you might want to consider upgrading the SIM to a recent one, as these are not susceptible to the SIMJacker issues. Contact your phone carrier and ask if there are additional security measures to protect your account besides security questions, such as a PIN. In lieu of that, you could also try setting your mother‚Äôs maiden name or family pet security questions to something more, shall we say, unique (e.g. Hdyla86kajDF64asdlui ). Set a SIM PIN. For iOS devices, follow these instructions from Apple . For Android devices, start with these instructions but contact your phone‚Äôs manufacturer website if the instructions do not fit your particular model. Complain to the service to offer more than just SMS for 2FA! The more complaints they get, the more likely they might be to offer more secure options. Additional 2FA Concerns Remember the purpose of 2FA - it is a secondary authentication method, invoked after the primary authentication method has succeeded. You should only acknowledge a 2FA request if you personally have just successfully completed the primary authentication. An unsolicited 2FA request means someone has your password, and is in the process of trying to log in as you. This is why 2FA exists, to help protect your user account from attacks involving your password. If you experience any such irregularities, please bring it to the attention of the Security Team. For more information, review the handbook regarding Security Awareness Slack There is a lot of information pertaining to Slack, as it is a critical part of GitLab‚Äôs communication. See the Slack handbook page . Zoom There is a lot of information pertaining to Zoom, as it is a critical part of GitLab‚Äôs communication. See the Zoom handbook page . The Google Calendar invite is the single source of truth for the Zoom link. Avoid linking the Zoom link in Google Document agendas since those may quickly become out of date. If the zoom link changed around the start of the meeting it is OK to have it in there temporarily. Google Need a new document or new slide deck quickly? Use shortcuts like https://doc.new or https://slide.new . The full list (not even restricted to Google products) is available at https://whats.new/shortcuts/ . Google Docs Google Docs Pro Tips Quickly create a new Google Doc in chrome: type ‚Äúdocs.new‚Äù in the chrome address bar. Likewise ‚Äúsheets.new‚Äù for a Google Sheet etc‚Ä¶ While in a document with many other editors, click on the image or icon of any user at the top of the document to move focus to their cursor and what they are typing in the document. This is great when someone is speaking about something they are typing on a video call and you are not sure where they are in the document. Quickly find all action items assigned to you with a search for followup:actionitems . To add additional rows to a numbered list in a Google Document, press Return to add additional spaces under the existing numbered list in the document, highlight those spaces, and click the numbered list icon in the formatting bar (or press Command ‚åò + Shift + 7 on a Mac) to create a numbered list from the spaces. See video on how to add more rows to a numbered list for a quick tutorial. Type the @ character to quickly embed today‚Äôs date, other document titles, references to people, and more; without clicking anything (a menu will pop up). See details in the Smart Canvas blog post and the Add items with the @ menu support doc. Emoji live-search can be accessed by typing @: , or shorter using the : character. Start typing to search for an emoji and press enter to insert. Pageless docs are great for documents you don‚Äôt intend to print, and is the preferred format at GitLab . You can switch in File > Page setup . See also Live Doc Meetings for more Google Doc tips. Google Analytics Google Analytics (GA) is an essential tool for making data-driven decisions. It receives data from both about.gitlab.com and docs.gitlab.com websites. Read through the Google Analytics Handbook for more information on GA. For example, you can look at the GA data to analyze how visited is a certain page, in a period of your choice. You can also look at the GA referrals data to understand where the users are coming from and where they go when they leave a certain page. Set your picture in Google Optional: Set your picture in Google so that your picture will show where you are in a Google document (vs showing just your first intial). This will allow others to more easily follow a discussion when meeting attendees move around in a document. Add name pronunciation in Google Consider adding a phonetic pronunciation of your name and/or a pronunciation recording in your Google profile. Click on your profile icon on the top-right of any Google account page (i.e. Google Docs, Google Sheets) Select ‚ÄúManage your Google account‚Äù On the left-hand side panel, select ‚ÄúPersonal info‚Äù ¬ª on the center of the page, go to ‚ÄúName & pronunciation‚Äù Add a recording or a phonetic pronunciation e.g. Rochana (Rosh-ah-na) Google Calendar Finding a time Please make use of the Find a Time tab in Google Calendar, especially when scheduling events with teammates in other parts of the world: Find a Time presents a new or existing event‚Äôs time for all participants, adjusting for time zones as appropriate. To use Find a Time: Create a new event or modify an existing event. Click the ‚ÄúFind a Time‚Äù tab. Invited guests will be presented in the availability table and represented by a column. Areas outside of someone‚Äôs working hours (9:00 AM - 5:00 PM by default) are represented in light grey. Guests who are optional will not appear in the availability table by default. You can add them by checking their name in the ‚ÄúGuests‚Äù area on the right hand side. For meetings spanning across multiple time zones and with external parties, Time & Date Calculator can help determine the best time to schedule. GitLab availability calendar The GitLab Availability Calendar has been deprecated to allow for GitLab to scale effectively. We have created tools and tips for managing your time off . Setting working hours & location To help other team members to schedule meetings with you, you can set your normal working hours & location in Google Calendar . The preferred times will show up when someone tries to schedule a meeting with you. To set your working hours, go to Settings -> General -> Working Hours & Location . Working location can be set here or on your calendar directly by clicking on the pill in the All day row. In Settings there‚Äôs a helpful Copy to all option as well. Since all GitLab Team Members work remotely Home can be an ambiguous choice as folks may travel and it doesn‚Äôt provide any context on timezones. If you‚Äôd like, you can choose Somewhere else (in Settings) or Edit pencil -> + -> Another location (from the pill) to set this to something such as City, State, Country (GMT-#) and keep it up to date when traveling or timezones shift, which can help folks with planning and understanding timezones. GitLab Team Meetings calendar The GitLab Team Meetings Calendar is available to all team members and can be found in your calendars list after it‚Äôs added. To add the GitLab Team Meetings Calendar to your list of calendars: Go to your calendar Scroll the left sidebar down to Other calendars Press on + Select Subscribe to calendar Enter in the search field gitlab.com_6ekbk8ffqnkus3qpj9o26rqejg@group.calendar.google.com and then press enter on your keyboard Please reach out to a People Connect Team member if you have any questions. NOTE: Please do NOT remove any meetings from this calendar or any other shared calendars, as it removes the event from everyone‚Äôs calendar. You can find the details for the Company Calls, Group Conversations, 101s, and other teams‚Äô meetings here, so you can attend a different teams‚Äô meeting and ask questions, learn about what they‚Äôre working on, and get to know the rest of the GitLab Departments and teams. These meetings are open to everyone in GitLab. If you are creating a new team meeting, please add it to the GitLab Team Meetings calendar Please reach out to the People Connect Team in the #people-connect Slack channel with any questions, requests or changes to the GitLab Team Meetings calendar. Adding an event to the GitLab Team Meetings calendar Create your calendar invite Add your Zoom link Add an agenda or relevant content Under Add Guests, add GitLab Team Meetings in addition to anyone else you want invited (if you want the entire company invited please use everyone@). Note: This will appear like adding a room, which is expected Managing invite responses If you are familiar with queries in Gmail, add a filter to remove invites responses from your inbox with the following query: *.ics subject:(\"invitation\" OR \"accepted\" OR \"rejected\" OR \"updated\" OR \"canceled event\" OR \"declined\") when where calendar who organizer You can also create a filter to remove ALL invite responses from your inbox with the following search terms: Subject: ‚Äúinvitation‚Äù OR ‚Äúaccepted‚Äù OR ‚Äúrejected‚Äù OR ‚Äúupdated‚Äù OR ‚Äúcanceled event‚Äù OR ‚Äúdeclined‚Äù Has the words: *.ics Then click Create filter: Skip the Inbox Apply the label (of your choosing) Modifying events Please click ‚ÄòGuests can modify event‚Äô so people can update the time in the calendar instead of having to reach out via other channels. You can configure this to be checked by default under Event Settings . Notifications You can change the default notification settings by calendar (add or remove notifications for all-day events, add a second default notification to all events‚Ä¶). This is accessible through Settings -> Settings for my calendars -> pick the calendar -> Event notifications and All-day event notifications . If you change the default notifications, all existing events will inherit that as well (unless their notifications have been customized). Restore deleted calendar items (This assumes you are using Google‚Äôs new Calendar ). When you have accidentally deleted something from the Team Meetings calendar, you can recover it by: Go to Google Calendar and click the gear icon at the top left of your screen. Choose the Trash . Make sure you are on the correct calendar, by clicking on the name of the calendar in the left sidebar. Hover over the item you‚Äôd like to restore and click the arrow to ‚ÄúRestore‚Äù. Show declined events We recommend enabling the ‚ÄòShow declined events‚Äô setting if you are unable to attend a meeting but will still contribute to the agenda or attendance list asynchronously. Use this setting if it‚Äôs helpful for you to see declined meetings in your calendar view for any other reason. Navigate to Event settings Check the box for ‚ÄòShow declined events‚Äô under ‚ÄòView options‚Äô Sharing We recommend you set your Google Calendar access permissions to ‚ÄòMake available for GitLab - See all event details‚Äô. Team member calendars should not have access permissions set to ‚ÄòMake available to public‚Äô due to the risk of sensitive data exposure and zoombombing . Consider marking the following appointments as ‚ÄòPrivate‚Äô: Personal appointments Confidential & sensitive meetings with third-parties outside of GitLab 1-1 performance or evaluation meetings Meetings on organizational changes There are several benefits and reasons to sharing your calendar with everyone at GitLab: Transparency is one of our values and sharing what you work on is in line with our message of ‚Äúbe open about as many things as possible‚Äù. Due to our timezone differences, there are small windows of time when our availabilities overlap. If other members need to schedule a new meeting, seeing the details of recurring meetings (such as 1-1s) will allow for more flexibility in scheduling without needing to wait for a confirmation from the team member. This speaks to our value to be more efficient. When setting up your Google Calendar be sure to set your working hours . If you‚Äôd like to share your calendar with e.g. your partner you can use the ‚ÄòShare with specific people‚Äô feature and set the permissions to ‚ÄòSee only free/busy (hide details)‚Äô: Speedy meetings Enable speedy meetings to automatically provide a buffer at the end of events you schedule. This thoughtfully allows participants with back-to-back events the opportunity to use the restroom or grab a cup of coffee without being late to their next function. World clock Add as many time zone world clocks as you wish by, in Google Calendar, going to Settings -> World Clock in order to see team members‚Äô local times. You can also use sites like TimeAndDate to convert times to/from UTC for example. Time zone Check Display secondary time zone and select (GMT+00:00) Coordinated Universal Time (UTC). This enables team members to standardize on a single time zone in communicating when meetings take place. Google Cloud Platform See the Sandbox Cloud page for a listing of cloud resources and how to gain access to them. Google Drive First, an important message - Don‚Äôt use Google Drive/Apps (unless you have to) We would be remiss if we didn‚Äôt start this section off with this IMPORTANT message: Your default storage place for information that needs to persist and be available to others in the company should be ON THE WEBSITE/IN THE COMPANY HANDBOOK and not in Google Drive and Google Apps files!! This is from the top. This is how we operate, because Google Docs/Apps can only be found and contributed to by team members, and not by users, customers, advocates, future employees, Google handbook searches, or developers. Do not link directly to Google Drive/Apps Having said that, there is content which doesn‚Äôt make sense to be created on the website directly (e.g. large collections of data in tables, spreadsheets for calculations, etc) or for which Google Drive storage makes sense. When directing folks to these files in Google Drive please include name of the file in the handbook so that team members can search for it in Google Drive. If you link directly to the URL, people from outside the organization can request access, creating workload and the potential for mistakes. Keeping it organized It is important that we not just throw files into random or general places in the shared Google Drives. Doing so makes it harder for others to find and work with the content. Here are some guidelines to organizing the Google Drive content: First by department (e.g. strategic marketing) then by subject (e.g. analysts relations) then by sub-subjects as deep as necessary (e.g. Gartner -> 2018 ARO MQ) Using Google Drive For starters, when your GitLab Google company account is created you automatically get a Google Drive with unlimited storage allocation in your own ‚Äúhome‚Äù directory (called My Drive). You can get to it by: (optional) Login to your GitLab account in your browser (if you are using Chrome) Open your web browser to https://drive.google.com If you‚Äôre not already logged in as your GitLab account (Chrome users should be) then login to Google using your GitLab account This will take you to your Google Drive (called My Drive) which is like your home directory. If you create Google files using Google Apps and don‚Äôt specify where to store them, they will be put in this home directory. This is great for storing your own working files. As already stated, this should never be the final resting place for shared files that are meant to be used by the rest of the company (or beyond). Existing GitLab Google Drive repositories There are a few Google Drive repositories of GitLab shared files (there might be more, please add if not listed here): UX Research Drive - This houses all findings from Customer Discovery Meetings and raw, confidential materials from customers shared with Design, UX Research, Product and Customer Success. Distilled findings from User Research are stored in the UXR_Insights repository . GitLab Marketing Drive - This houses all shared files from the entire Marketing organization. The best practice is for sub-organizations to have their own directory inside this space (e.g. Strategic Marketing ). Sales Drive - This houses all the shared files from the Sales organization. The best practice is for some sub-organizations to have their own directory inside this space (e.g. Customer Success ). GitLab Alliance Drive - This houses all shared files from the entire Alliance organization. The best practice is for sub-organizations to have their own directory inside this space (e.g. Partner Discussions ). How do you use these? You don‚Äôt have to remember these URL‚Äôs. To add these links to your Google Drive My Drive directory, do the following: Make sure you are logged into your GitLab account in Google Drive in your browser Open the link of interest (from above) to go to that directory Find the directory path across the top (under the ‚ÄúSearch Drive‚Äù field) Find the name of directory in that path that you want to add to your drive (e.g. Sales) Click on the down arrow next to it From the resulting pop-up menu, select ‚ÄúAdd to My Drive‚Äù From now on you can get to that directory by first going to your drive ( https://drive.google.com ) and then opening that link Adding Google Drive to your Mac To really make your Google Drive easier to access, you can have your Google Drive show up on your Mac Finder as a regular drive. With this it is easier to store and view files such as videos, analyst reports (PDFs), etc. Here‚Äôs how to do this: Make sure you are logged into your GitLab account in Google Drive in your browser Go to your Google Drive ( https://drive.google.com ) Click on the ‚ÄúSettings‚Äù icon (Gear) to the right of the search field From the resulting menu, select ‚ÄúGet Drive for desktop‚Äù It might pull up a new page/tab and use your personal login. If it does this you won‚Äôt see ‚ÄúDownload & install Drive for desktop‚Äù on the page. Switch to your GitLab account. Download and install Google Forms Use these GitLab branded form templates when creating internal or external surveys or forms. Make a copy of the form and only edit the copy; do not edit the template itself. Review what data privacy means at GitLab . Help participants make informed decisions by applying the following guidelines: For external forms : State that any Personal Data collected will be processed in accordance with the GitLab Privacy Statement . For internal forms : Ensure that the purpose for collecting data is stated under our Team Member Privacy Policy and that this purpose is made clear to Team Members. Don‚Äôt make Personal Data form fields mandatory unless they‚Äôre absolutely necessary to achieve the processing; any inessential Personal Data collected should be through a voluntary form field. Only process Personal Data for the reason in which it was initially collected e.g., if the Google Form collected traveler information, don‚Äôt then use that Personal Data to create a marketing list. Google Mail (Gmail) Auto-advance If you use the archive function, you normally return to your overview. With Auto-advance you can select whether to advance to the next or previous message. ‚ÄúAuto-advance‚Äù can be enabled from the Advanced section under Settings. This reveals the Auto-advance settings in the General section under Settings. The default setting of showing the previous (older) message is usually preferred. Email signature -Set up an email signature which includes your full name and job title so people can quickly know who you are and what you do. -It is also an option to add your personal pronouns to your email signature. Example Note: You can copy and paste the template below to use it in your own signature. Alex Doe (they/them) Frontend Engineer | GitLab Email signature if employed by our German entity During onboarding you may have been asked to set up your GitLab Gmail and your email signature using the following example as a guideline . If you are employed by our German entity, you will need to add some company related details to the end of your email signature as set out here ( accessible internally to GitLab only ). Add company details to certain company communications if employed by our German entity Certain company details are required to be added as a signature to the forms of communication listed below, where that communication is going from a team member employed by our German entity GitLab GmbH to outside of the company, and relates to GitLab‚Äôs business activities: order forms physical mail fax postcard email SMS Twitter Zendesk other electronic communications If you are sending such a communication, externally, please look at the setting of the relevant application and add the company details below to the end of the communication. If you are in doubt, please do add the details. If you are unable to add this information for any reason, please alert legal-employment@gitlab.com . If you are employed by our German entity you may have been asked during onboarding to set up your signature wherever it‚Äôs required to be used and to include certain company details, and if you have not been, please do so now, as set out here ( accessible internally to GitLab only ). Filters Apply label on mention It might be useful to add a Gmail filter that adds a label to any GitLab notification email in which you are specifically mentioned, as opposed to a notification that you received simply because you were subscribed to the issue or merge request. Search for from:(gitlab@mg.gitlab.com) \"you+have+been+mentioned+on\" . Click the down arrow on the right side of the search field. Click Create filter with this search . Check Apply the label: and select a label to add, or create a new one, such as ‚ÄúMentioned‚Äù. Check Also apply filter to matching conversations . Click Create filter . Apply label when assigned as reviewer You can create a Gmail filter that adds a label to any GitLab notification email in which you are assigned as a reviewer: Search for from:(gitlab@mg.gitlab.com) \"(Reviewer) (Firstname Lastname)\" . Click the down arrow on the right side of the search field. Click Create filter with this search . Check Apply the label: and select a label to add, or create a new one, such as ‚ÄúAssigned‚Äù. Check Also apply filter to matching conversations . Click Create filter . Apply label when MR is merged You can create a Gmail filter that adds a label to any GitLab notification email in which an MR has been merged: Search for from:(gitlab@mg.gitlab.com) \"Merge Request\"+\"was merged\" . Click the down arrow on the right side of the search field. Click Create filter with this search . Check Apply the label: and select a label to add, or create a new one, such as ‚ÄúMerged‚Äù. Check Also apply filter to matching conversations . Click Create filter . Apply label to all GitLab-generated emails GitLab issues and merge requests can generate a lot of email notifications depending on your settings and how in-demand your attention is. It can be useful to apply a label to these generated emails and move them out of your immediate inbox. Search for from:gitlab@mg.gitlab.com . Click the down arrow on the right side of the search field. Click Create filter with this search . Check Skip the Inbox (Archive it) . Check Apply the label: and select a label to add, or create a new one, such as ‚ÄúGitLab.com‚Äù. Check Also apply filter to matching conversations . Click Create filter . You can learn more about how to use Gmail filters to organize your inbox in Productivity Hack video . To import downloaded filter export go to Gmail => Settings => Filters and Blocked Addresses => Import filters. Keyboard shortcuts Keyboard shortcuts only work if you‚Äôve turned them on in Gmail Settings. Steps below: In ‚ÄúSettings‚Äù scroll down to the ‚ÄúKeyboard shortcuts‚Äù section Turn Keyboard shortcuts ‚Äúon‚Äù Scroll down and Save Changes Here are some shortcuts you can use Split screen List your inbox and preview mails in one view with this configuration change: Cog/settings top right of inbox. Settings option. Inbox tab Reading pane: enable Select a position for the reading pane, Right of Inbox or Below Inbox Save changes Reload inbox Inbox Zero To utilitze Gmail to it‚Äôs full potential, consider adopting the Inbox Zero strategy. It‚Äôs the same way Google employees use Gmail. There‚Äôs also an internal training recording about this. It goes into more details and more ‚Äúpower user‚Äù focused, covering keyboard shortcuts, etc. Video (It‚Äôs set to private, so log in with GitLab Unfiltered to watch it: upper right corner > click on your profile picture > switch account > GitLab Unfiltered) Meeting notes Disable Google Meet and Chat in Google Mail The integration for Google Meet and Google Chat is enabled by default. It can consume too much space in the left menu listing mailbox folders. In order to disable the integration in Google Mail, navigate to Settings at the right top, See all settings , Mail and Chat and select the following: Chat: Off Meet: Hide the Meet section in the main menu Save the changes and wait for Google Mail to reload. Google Slides Use this general GitLab Slide Template when creating slide decks for internal and external use. Make a copy of the slide deck and only edit the copy; please do not edit the template itself. To avoid potentially editing the source deck, you can go to the Template gallery and click on the GitLab Slide Template vYear-Month to quickly make a copy and begin a new deck. Ensure that all pages in the slide deck are numbered, with the title page always being number 1. Sales slide decks Slide decks are available in Highspot in GitLab‚Äôs Official Sales Deck Library . Google Jamboard Jamboard is a collaborative whiteboarding platform, accessible at https://jamboard.google.com/ . The results are persisted in Drive and are shareable like any other object. Google Chrome Search and find things by typing words from document/issue/etc page titles into the urlbar (anything that appears in the page title). The search is ‚Äúbest effort‚Äù but surprisingly efficient at finding that doc or issue you‚Äôve accessed recently. ‚ÄúSearch engines‚Äù help even more! Typing ‚Äúdrive‚Äù and pressing Tab, for example, searches in Google Drive. To discover and customize them, go to Settings > Search engine . Practice Chrome keyboard shortcuts . Here are a few common helpful shortcuts: Jump to the address bar: cmd l Create a new tab cmd t , close a tab cmd w , undo close tab cmd shift t Open new incognito window: cmd shift n (e.g. to reproduce a UI bug, or login problem) Search all opened tabs: cmd shift a Hide the bookmarks bar: cmd shift b (e.g. for screenshots, or shared screen presentations) Open the developer tools: cmd option i (e.g. for debugging website errors) You can organize tabs into tab groups , assign names and custom colors, and collapse or reorder them. Moving tabs between groups also works across browser windows. Logging in to the browser (with your GitLab Workspace account) preserves your profile across installations . This is helpful to migrate bookmarks, extensions, and configuration when refreshing your laptop . Chrome Performance Settings Enable the memory saver . This will pause inactive tabs and reduce memory consumption. Enable the energy saver . This can help extend battery life by telling Chrome to reduce background task activities. 1Password and Environment Variables AI at GitLab Tips Editors and IDEs git Linux tools and tips macOS tools and tips Mermaid Layouts Other apps Personal VPN RuboCop Searching GitLab like a pro Slack Zoom Last modified July 9, 2025: Google tag manager handbook ( 7a73052e ) View page source -  - please contribute .",
    "headings": [
      "Tools and tips",
      "Overview",
      "GitLab tips",
      "Change your username at GitLab.com",
      "GitLab team members‚Äô resources",
      "GitLab team members‚Äô setups",
      "Linking Gravatar photo",
      "Using Mermaid",
      "Visual help to differentiate between GitLab servers",
      "Calculating the GitLab handbook page count",
      "Trainee maintainer issue upkeep",
      "Handbook Tips",
      "www-gitlab-com Tips",
      "Image and GIF tips",
      "ImageMagick",
      "Creating GIFs",
      "Resizing images",
      "Convert HEIC to JPG",
      "Add drop shadow to images",
      "Troubleshooting",
      "2FA debugging",
      "Check which process occupies a given port",
      "Terminal",
      "Display current git branch in the console",
      "Shell aliases",
      "Dotfiles",
      "Traveling",
      "Long haul flights",
      "WorkFrom",
      "Wi-fi usage",
      "FIDO2 / WebAuthn",
      "Recommendations",
      "Other 2FA Methods",
      "Cryptographic Push",
      "TOTP",
      "SMS",
      "Additional 2FA Concerns",
      "Slack",
      "Zoom",
      "Google",
      "Google Docs",
      "Google Analytics",
      "Set your picture in Google",
      "Add name pronunciation in Google",
      "Google Calendar",
      "Google Cloud Platform",
      "Google Drive",
      "Google Forms",
      "Google Mail (Gmail)",
      "Disable Google Meet and Chat in Google Mail",
      "Google Slides",
      "Google Jamboard",
      "Google Chrome"
    ],
    "word_count": 9567,
    "extracted_at": "2025-07-21 20:13:20"
  },
  {
    "document_id": "gitlab-handbook-620935",
    "url": "https://handbook.gitlab.com/handbook/engineering/",
    "title": "Engineering Overview",
    "category": "Engineering",
    "content": "Engineering The GitLab Product team looks ahead for expanding the platform ‚ÄúWhat\" (customer needs) and ‚ÄúWhy‚Äù (business strategy) and Engineering determines the ‚ÄúHow‚Äù (technical implementation) and ‚ÄúWhen‚Äù (scheduling) of the platform releases. The content on this page talks about how we do engineering at GitLab. Engineering Direction GitLab has a Three-Year Strategy, and we‚Äôre excited to see every member of the Engineering division contribute to achieving it. Whether you‚Äôre creating something new or improving something that already exists, we want you to feel empowered to bring your best ideas for influencing the product direction through improved scalability, usability, resilience, and system architectures. And when you feel like you need to expand your knowledge in a particular area, know that you‚Äôre supported in having the resources to learn and improve your skills. Our focus is to make sure that GitLab is enterprise grade in all its abilities and to support the AI efforts required to successfully launch AI features to General Availability. Making sure that GitLab is enterprise grade involves several teams collaborating on improving our disaster recovery and support offerings through ongoing work with GitLab Dedicated and Cells infrastructure. Our goal here is improved availability and service recovery. Engineering Culture Engineering culture at GitLab encompasses the processes, workflows, principles and priorities that all stem from our GitLab Values . All these things continuously strengthen our engineering craftsmanship and allow engineers to achieve engineering excellence, while growing and having a significant, positive impact on the product, people, and the company as a whole. Our engineering culture is primarily being carried and evolves through knowledge sharing and collaboration. Everyone can be part of this process because at GitLab everyone can contribute. Engineering Excellence Engineering excellence can be defined as an intrinsic motivation to improve engineering efficiency, software quality, and deliver better results while building software products. Engineering excellence is being fueled by a strong engineering culture combined with a mission: to build better software that allows everyone to contribute. Engineering Initiatives Engineering is the primary advocate for the performance, availability, and security of the GitLab project. Product Management prioritizes 60% of engineering time, so everyone in the engineering function should participate in the Product Management prioritization process to ensure that our project stays ahead in these areas. Engineering prioritizes 40% of time on initiatives that improve the product, underlying platform, and foundational technologies we use. Work in the 40% time budget should be coordinated and prioritized by the Engineering Manager of a team. Use the label Engineering Time for issues and MRs that are done as part of it so we can follow the work and the results across the engineering division. Contributing to broad engineering initiatives and participating in working group-related tasks. Review fixes from our support team. These merge requests are tagged with the Support Team Contributions label. You can filter on open MRs . Working on high priority issues as a result of issue triaging . This is our commitment to the community and we need to include some capacity to review MRs or work on defects raised by the community. Improvements to the performance, stability and scalability of a feature or dependency including underlying infrastructure. Again, the Product team should be involved in the definition of these issues but Engineering may lead here by planning, prioritizing, and coordinating the recommended improvements. Improvements and upgrades to our toolchain in order to boost efficiency. Codebase improvements: Removing technical debt, updating or replacing outdated dependencies, and enhancing logging and monitoring capabilities. Constructing Proof-of-Concept models for thorough exploration of new technologies, enhancements and new possibilites. Work on improvements and feature enhancements to the product, in the sense of internal community contributions, that would increase our internal engineering productivity by focusing on ready-to-go items that are currently assigned a low priority in the backlog. Engineering Innovation Engineering Innovation is a new process geared toward individual or small-team collaboration that encourages engineers to explore new ideas and Proof-of-Concepts. These projects are typically lean, time-boxed, iterative, and designed to validate whether an idea has the potential to evolve into a viable experimental feature or product. See the Innovation at GitLab Guide . Technical Roadmaps Some of the above examples for the 40% time budget can help in forming a long-term technical roadmap for your group, and determine how best to prioritize your technical work to support overall business goals. In addition to the examples above: Ask yourself these questions What are your most frequent sources of delays? (Could be long-standing tech debt you have to work past while developing, could be lack of reviewers for your domain, could be external to your team like with pipeline duration) Do you have any consistently similar bugs or security issues that come in due to a certain area? Has your team been talking about potentially refactoring any areas? Is your team struggling with certain processes? Have you had recent incidents that allude to a larger problem? Are you getting frequent requests for help in some area? Is your team frequently missing their deliverable commitments? What would help? Does your area have performance (slow endpoints, inconsistent responses, intermittent errors) or scalability (the feature or area as-is will not scale) concerns? Where do you see the biggest instability? Have you talked to operations and support about feedback for your area? Do you have application or rate limits in the right places? Have you burned down your security, corrective action, and infradev issues? Is your error budget green? Have your feature flags been removed from the codebase yet? Do you have adequate unit test, integration test and E2E coverage? Do you have adequate documentation for your features? Do you have adequate telemetry , logging, monitoring of your features? Do you have adequate error handling and error codes that allows fast and easy diagnostics? Gather data like this Master:Broken issues ~‚Äúseverity::1‚Äù and ~‚Äúseverity::2‚Äù bugs Missed-Slo issues Flaky test issues ~‚Äútype::maintenance‚Äù issues Think about the future state of your product Where do you want your product to be this time next year? What are the technical requirements to achieve that? What are technical topics that would benefit from research/POCs? What would make it easier for you to achieve that if it was no longer a factor? What would be the performance and/or business impact once you address these issues? How would you evolve your team processes to regularly review your technical roadmap? Technical roadmap process Engineering Managers (EMs) are responsible for collaboratively developing their team‚Äôs technical roadmap backlog. All items should be documented as epics and issues using the ‚ÄúTechnical Roadmap‚Äù label. Global initiatives will be defined and must be incorporated into each group‚Äôs roadmap and prioritization (e.g., allocating 40% of front-end capacity for Vue upgrade, completing all Cells issues for a specific area by milestone XYZ). Prioritization of items should align with: General business goals Engineering vision Team capacity and expertise Planning Guidelines: Allocate 40% of the overall time budget for technical roadmap items in the normal milestone planning process. Use the ‚ÄúTechnical roadmap‚Äù label for all related issues to facilitate tracking and coordination. Key Steps: Identify and document technical debt and improvement opportunities Assess impact and effort for each item Prioritize based on business value and strategic alignment Integrate with existing iteration/milestone planning Regularly review and adjust the roadmap This process ensures a balanced approach between feature development and technical improvements, promoting long-term sustainability and efficiency of the engineering organization. Community Contributions We have a 3-year goal of reaching 1,000 monthly contributors as a way to mature new stages, add customer-desired features that aren‚Äôt on our roadmap, and even translate our product into multiple languages. Diversity Diverse teams perform better . They provide a sense of belonging that leads to higher levels of trust, better decision making, and a larger talent pool. They also focus more on facts, process facts more carefully, and are more innovative . By hiring globally and increasing the numbers of women and under represented groups (URGs) in the Engineering division, we‚Äôre helping everyone bring their best selves to work. Growing our team Strategic hiring is a top priority, and we‚Äôre excited to continue hiring people who are passionate about our product and have the skills to make it the best DevSecOps tool in the market. Our current focus areas include reducing the amount of time between offer and start dates and hiring a diverse team (see above ). We‚Äôre also implementing industry-standard approaches like structured, behavioral, and situational interviewing to help ensure a consistent interview process that helps to identify the best candidate for every role. We‚Äôre excited to have a recruiting org to partner with as we balance the time that managers spend recruiting against the time they spend investing in their current team members. Expand customer focus through depth and stability As expected, a large part of our focus is on improving our product. For Enterprise customers , we‚Äôre refining our product to meet the levels of security and reliability that customers rightfully demand from SaaS platforms (SaaS Reliability) . We‚Äôre also providing more robust utilization metrics to help them discover features relevant to their own DevOps transformations (Usage Reporting) and offering the ability to purchase and manage licenses without spending time contacting Sales or Support (E-Commerce and Cloud Licensing) . Lastly, in response to Enterprise customer requests, we‚Äôre adding features to support Suggested Reviewers, better portfolio management through Work Items, and Audit Events that provide additional visibility into user passive actions. For Free Users , we‚Äôre becoming more efficient with our open core offering, so that we can continue to support and give back to students, startups, educational institutions, open source projects, GitLab contributors, and nonprofits. For Federal Agencies , we‚Äôre obtaining FedRAMP certification to strengthen confidence in the security standards required on our SaaS offering. This is a mandated prerequisite for United States federal agencies to use our product. For Hosted Customers , we‚Äôre supporting feature parity between Self-Managed and GitLab Hosted environments through the Workspace initiative. We‚Äôre also launching GitLab Dedicated for customers who want the flexibility of cloud with the security and performance of a single-tenant environment. For customers using CI/CD , we‚Äôre expanding the available types of Runners to include macOS, Linux/Docker, and Windows, and we‚Äôre autoscaling build agents. Taking time off Note: This process is expected for PTO that is five consecutive days or more, inclusive of adjacent public holidays (excluding weekend days). For PTO that is fewer than five consecutive days, including the cases where there are multiple PTO blocks with fewer than 5 consecutive days and a few working days in-between, a coverage issue is not required but a coverage issue can be filed for PTO of any length, especially if it‚Äôd be helpful to balance team continuity and individual flexibility. In order to ensure business continuity, and deliver on commitments; the Engineering Division is adopting a PTO Coverage Issue Process. Processes like this are already formalized in GitLab (e.g. PM Coverage Issue ) and some team‚Äôs within Engineering have practiced this regularly at the Management+ level. This allows us to continue to support team member well-being through time away without negatively impacting the rest of the team. A PTO Coverage issue is required for job grades 8 and up . For job grades 7 and below a PTO Coverage issue is recommended as there is value in going through the process of creating the PTO Coverage issue even if there are minimal items to include (for all levels) in that it forces you to think about what you have on your plate and what impact your PTO will have on those items. So whether the result is that the work waits or there is someone designated as a replacement DRI, it makes the decision explicit and documented. Once planning for a milestone has been completed (see Monday, 5 days before the milestone begins ) PTO for periods longer than 5 consecutive days, inclusive of adjacent public holidays (excluding weekend days), cannot be requested. This is to prevent disrupting plans for that milestone. There are exceptions to this, but all need to be discussed with your manager. Examples include: urgent scenarios a team/individual hits targets earlier in the milestone ( we measure impact, not activity ) a strong need for a team member to take PTO of this length These issues will help inform teams as they plan their milestones to ensure the work teams are committed to can be achieved with the staff available, or if there will be a lack of staff to achieve those commitments, to work with team members to see what can be done to achieve the results for our customers. The process below helps to clarify and expand upon the Flexible PTO Policy by making the coordination with the team members manager explicit. 1. Creating an Engineering coverage issue You should use this issue template to define handshake responsibilities. For extended leave, it is important to find one or more Directly Responsible Individuals (DRIs) that will be able to make decisions while you are away. This may be your manager, another engineer, or maybe the Product Manager for your team. The coverage issue should contain all the necessary information for the DRIs to make good decisions in your absence, so please make sure to include as much detail as needed. The coverage issue should highlight work impact estimates, mitigations identified, and coverage alternatives. If additional context needs to be shared to provide color to the coverage issue, you can consider a specific handover meeting to cover further details. It is recommended to work with your manager and other stakeholders when considering cross-functional teammate capacity for a coverage task assignment. For example, while it‚Äôs optimal for PM, EM, and PDs to assist in covering for each other given their shared knowledge of their product area including customers and users, PM teammates may or may not have the bandwidth or expertise to take on covering engineering specific responsibilities. Alternatively, it may be better for the manager of the engineer or another engineer in the same stage to aid in coverage. Plan to have the necessary conversations across teams and managers. 2. Sharing your Engineering coverage issue with your manager Once you‚Äôve filed your engineering coverage issue, share this with your manager prior to milestone planning so they can review and approve. Check the latest guidance in our PTO policy on how much notice is required. Consider whether any new commitments would be affected by your planned PTO. If a team member falls behind on something, they will need to make sure they have a coverage plan in place to ensure success of their commitments. 3. Manager reviews coverage issue Once the team member has shared their coverage issue with their manager, the manager will review the coverage issue and validate assumptions with stakeholders or impacted project DRIs as needed. The manager will make a decision on approval or discuss different arrangements or other contingency plans. Once the manager ticks their box on the coverage issue approving the leave, enter the time off into Workday. 4. Communicate your time off After team members‚Äô coverage issue is approved, team members will communicate their time off and enter the PTO into Deel/Workday including a link to their coverage issue. Team members will share their coverage issue with their relevant colleagues via Slack channels, GitLab status, etc. ahead of the milestone planning. 5. Take your time off Please disconnect and take the time off that you need! 6. Returning from Time Off Returning from time off can be overwhelming and daunting. You should work with your DRIs to understand what has changed during your absence and what the current priorities are. Also, communicate transparently that your response time may be slower because you are catching up. Here are some additional tips on how to return back to work after time off . Engineering Departments There are five departments within the Engineering Division: DevOps Engineering Department AI Engineering Department Sec Department Infrastructure Platforms Support Engineering Department Other Related Pages CTO Leadership Team Communication Database Engineering Development Principles Engineering Automation Engineering Metrics Engineering READMEs Frequently Used Projects GitLab Innovation Program , managed by the GitLab Legal Team Hiring Mentorship Pajamas Design System R&D Tax Credit Applications Workflows Developer onboarding Engineering Demo Process Engineering Workflow Code Review Security Issues Architecture Design GitLab Repositories Issue Triage Policies Contributing to Go projects Wider Community Merge Request Triage Policies Root Cause Analysis Unplanned Critical Patch releases Incident Management GitLab in Production Workflow Diagram Error Budgets Performance of GitLab Monitoring of GitLab.com Production Readiness Guide People Management Engineering Career Development Engineering Career Mobility Principles Emerging Talent @ GitLab Engineering Management Cross-Functional Prioritization See the Cross-Functional Prioritization page for more information. SaaS Availability Weekly Standup To maintain high availability, Engineering runs a weekly SaaS Availability standup to: Review high severity (S1/S2) public facing incidents Review important SaaS metrics Track progress of Corrective Actions Track progress of Feature Change Locks Infrastructure Items Each week the Infrastructure team reports on incidents and key metrics. Updating these items at the top of the Engineering Allocation Meeting Agenda is the responsibility of the Engineering Manager for the General Squad in Reliability. Incident Review Include any S1 incidents that have occurred since the previous meeting. Include any incidents that required a status page update. SaaS Metrics Review Include screenshots of the following graphs in the agenda . Alert Volume Review Corrective Actions Development Items For the core and expansion development departments, updates on current status of: Error budgets Reliability issues (infradev) Security issues Groups under Feature Change Locks should update progress synchronously or asynchronously in the weekly agenda. The intention of this meeting is to communicate progress and to evaluate and prioritise escalations from infrastructure. Feature Change Locks progress reports should appear in the following format in the weekly agenda: FCL xxxx - [team name] FCL planning issue: <issue link> Incident Issue: <issue link> Incident Review Issue: <issue link> Incident Timeline: <link to Timeline tab of the Incident issue> e.g. time to detection, time to initiate/complete rollback (as applicable), time to mitigation Cause of Incident Mitigation Status of Planned/completed work associated with FCL Feature Change Locks A Feature Change Lock (FCL) is a process to improve the reliability and availability of GitLab.com. We will enact an FCL anytime there is an S1 or public-facing (status page) S2 incident on GitLab.com (including the License App, CustomersDot, and Versions) determined to be caused by an engineering department change. The team involved should be determined by the author, their line manager, and that manager‚Äôs other direct reports. If the incident meets the above criteria, then the manager of the team is responsible for: Form the group of engineers working under the FCL. By default, it will be the whole team, but it could be a reduced group if there is not enough work for everyone. Plan and execute the FCL. Inform their manager (e.g. Senior Manager / Director) that the team will focus efforts towards an FCL. Provides updates at the SaaS Availability Weekly Standup . If the team believes there does not need to be an FCL, approval must be obtained from either the VP of Infrastructure or VP of Development. Direct reports involved in an active borrow should be included if they were involved in the authorship or review of the change. The purpose is to foster a sense of ownership and accountability amongst our teams, but this should not challenge our no-blame culture. Timeline Rough guidance on timeline is provided here to set expectations and urgency for an FCL. We want to balance moving urgently with doing thoughtful important work to improve reliability. Note that as times shift we can adjust accordingly. The DRI of an FCL should pull in the timeline where possible. The following bulleted list provides a suggested timeline starting from incident to completion of the FCL. ‚ÄúBusiness day x‚Äù in this case refers to the x business day after the incident. Day 0: Incident: Business day 1: relevant Engineering Director collaborates with VP of Development and/or VP of Infrastructure or their designee to establish if FCL is required. Business day 2: confirmation that an FCL is required for this incident and start planning. Business days 3-4: planning time Business days 5-9 (1 week): complete planned work Business days 10-11: closing ceremony, retrospective and report back to standup Activities During the FCL, the team(s) exclusive focus is around reliability work , and any feature type of work in-flight has to be paused or re-assigned. Maintainer duties can still be done during this period and should keep other teams moving forward. Explicitly higher priority work such as security and data loss prevention should continue as well. The team(s) must: Create a public slack channel called #fcl-incident-[number] , with members The Team‚Äôs Manager The Author and their teammates The Product Manager, the stage‚Äôs Product leader, and the section‚Äôs Product leader All reviewer(s) All maintainers(s) Infrastructure Stable counterpart The chain-of-command from the manager to the VP (Sr Manager, Sr/Director, VP, etc) Create an FCL issue in the FCL Project with the information below in the description: Name the issue: [Group Name] FCL for Incident #### Links to the incident, original change, and slack channel FCL Timeline List of work items Complete the written Incident Review documentation within the Incident Issue as the first priority after the incident is resolved. The Incident Review must include completing all fields in the Incident Review section of the incident issue (see incident issue template ). The incident issue should serve as the single source of truth for this information, unless a linked confidential issue is required. Completing it should create a common understanding of the problem space and set a shared direction for the work that needs to be completed. See that not only all procedures were followed but also how improvements to procedures could have prevented it A work plan referencing all the Issues, Epics, and/or involved MRs must be created and used to identify the scope of work for the FCL. The work plan itself should be an Issue or Epic. Daily - add an update comment in your FCL issue or epic using the template: Exec-level summary Target End Date Highlights/lowlights Add an agenda item in the SaaS Availability weekly standup and summarize status each week that the FCL remains open. Hold a synchronous closing ceremony upon completing the FCL to review the retrospectives and celebrate the learnings. All FCL stakeholders and participants shall attend or participate async. Managers of the groups participating in the FCL, including Sr. EMs and Directors should be invited. Agenda includes reviewing FCL retrospective notes and sharing learnings about improving code change quality and reducing risk of availability. Outcome includes handbook and GitLab Docs updates where applicable. Scope of work during FCL After the Incident Review is completed, the team(s) focus is on preventing similar problems from recurring and improving detection. This should include, but is not limited to: Address immediate corrective actions to prevent incident reoccurrence in the short term Introduce changes to reduce incident detection time (improve collected metrics, service level monitoring, which users are impacted) Introduce changes to reduce mitigation time (improve rollout process through feature flags, and clean rollbacks) Ensure that the incident is reproducible in environments outside of production (Detect issues in staging, increase end-to-end integration test coverage) Improve development test coverage to detect problems (Harden unit testing, make it simpler to detect problems during reviews) Create issues with general process improvements or asks for other teams Examples of this work include, but are not limited to: Fixing items from the Incident Review which are identified as causal or contributing to the incident. Improving observability Improving unit test coverage Adding integration tests Improving service level monitoring Improving symmetry of pre-production environments Improving the GitLab Performance Tool Adding mock data to tests or environments Making process improvements Populating their backlog with further reliability work Security work Improve communication and workflows with other teams or counterparts Any work for the specific team kicked off during this period must be completed, even if it takes longer than the duration of the FCL. Any work directly related to the incident should be kicked off and completed even if the FCL is over. Work paused due to the FCL should be the priority to resume after the FCL is over. Items created for other teams or on a global level don‚Äôt affect the end of the FCL. A stable counterpart from Infrastructure will be available to review and consult on the work plan for Development Department FCLs. Infrastructure FCLs will be evaluated by an Infrastructure Director. Engineering Performance Indicator process The Product Analytics team is responsible for maintaining Engineering Performance Indicators. Work regarding KPI / RPI is tracked using the Product Analytics task intake tracker . Manual verification We manually verify that our code works as expected. Automated test coverage is essential, but manual verification provides a higher level of confidence that features behave as intended and bugs are fixed. We manually verify issues when they are in the workflow::verification state. Generally, after you have manually verified something, you can close the associated issue. See the Product Development Flow to learn more about this issue state. We manually verify in the staging environment whenever possible. In certain cases we may need to manually verify in the production environment. If you need to test features that are built for GitLab Ultimate then you can get added to the issue-reproduce group on production and staging environments by asking in the #development Slack channel. These groups are on an Ultimate plan. Critical Customer Escalations We follow the below process when existing critical customer escalations requires immediate scheduling of bug fixes or development effort. Requirements for critical escalation Customer is in critical escalation state The issues escalated have critical business impact to the customer, determined by Customer Success and Support Engineering leadership Failure to expedite scheduling may have cascading business impact to GitLab Approval from a VP from Customer Success AND a Director of Support Engineering are required to expedite scheduling Customer Success: approval from VP, Customer Success Management - Sherrod Patching Support Engineering: approval from VP, Support - Johnny Scarborough Process The issue priority is set to ~\"priority::1\" regardless of severity The label ~\"critical-customer-escalation\" is applied to the issue The issue is scheduled within 1 business day For issues of type features, approval from the Product DRI is needed. The DRI or their delegate provides daily process updates in the escalated customer slack channel DRI If issue is type bug DRI is the Director of Development If issue is type feature DRI is the Director of Product If issue requires Infrastructure work the DRI is the Engineering Manager in Infrastructure The DRI can use the customer critical merge requests process to expedite code review & merge. Pairing Engineers on priority::1/severity::1 Issues In most cases, a single engineer and maintainer review are adequate to handle a priority::1/severity::1 issue. However, some issues are highly difficult or complicated. Engineers should treat these issues with a high sense of urgency. For a complicated priority::1/severity::1 issue, multiple engineers should be assigned based on the level of complexity. The issue description should include the team member and their responsibilities. Team Member Responsibility Team Member 1 Reproduce the Problem Team Member 2 Audit Code Base for other places where this may occur If we have cases where three or five or X people are needed, Engineering Managers should feel the freedom to execute on a plan quickly. Following this procedure will: Decrease the time it takes to resolve priority::1/severity::1 issues Allow for a smooth handover of the issue in case of OOO or End of the Work Day Provide support for Engineers if they are stuck on a problem Provide another set of eyes on topics with high urgency or securing security-related fixes Internal Engineering handbook There are some engineering handbook topics that are internal only . These topics can be viewed by GitLab team members in the engineering section of the internal handbook . AI Engineering Vision Our goal is not merely to launch features, but to ensure they land successfully and provide ‚Ä¶ Architecture Complexity at Scale As GitLab grows, through the introduction of new features and improvements on ‚Ä¶ Cross Functional Prioritization Overview The Cross-Functional Prioritization framework exists to give everyone a voice within the ‚Ä¶ CTO Leadership Team The CTO Leadership Team is composed of the CTO‚Äôs direct reports and the Office of the CTO ‚Ä¶ Deployments and Releases Overview and terminology This page describes the deployment and release approach used to deliver ‚Ä¶ Developer Onboarding Awesome! You're about to become a GitLab developer! Here you'll find everything you need to start developing. Development Development Department Learning and Development Resources Secure coding best practices It is important that all developers are aware of secure ‚Ä¶ DevOps Engineering Vision Our goal is not merely to launch features, but to ensure they land successfully and provide ‚Ä¶ Engineering Career Development The Three Components of Career Development There are three important components of developing ‚Ä¶ Engineering Communication Communication GitLab Engineering values clear, concise, transparent, asynchronous, and frequent ‚Ä¶ Engineering Demo Process Occasionally, it is useful to set up a demo on a regular cadence to ensure cross-functional ‚Ä¶ Engineering Error Budgets The error budget provides a clear, objective metric that determines how unreliable the service is allowed to be within a single quarter. Engineering Function Performance Indicators Executive Summary KPI Health Status Engineering Handbook MR Rate Okay Above target Engineering Team ‚Ä¶ Engineering Hiring Overview Hiring is a cornerstone of success for our engineering organization, contributing to our ‚Ä¶ Engineering IC Leadership Engineering IC Leadership at GitLab: going beyond Senior level At GitLab, it is expected that ‚Ä¶ Engineering Management How Engineering Management Works at GitLab At GitLab, we promote two paths for leadership in ‚Ä¶ Engineering Mentorship Mentorship, Coaching and Engineering Programs Senior Leaders in Engineering The 7CTOs Program is run ‚Ä¶ Engineering Projects Name Location about.gitlab.com gitlab-com/marketing/digital-experience/about-gitlab-com AI Gateway ‚Ä¶ Engineering Team Readmes Engineering Workflow This document explains the workflow for anyone working with issues in GitLab Inc. Fast Boot A Fast Boot is an event that gathers the members of a team or group in one physical location to work ‚Ä¶ Frontend Group Teams Create Monitor Plan Secure Verify and Release Frontend domain experts You can find engineers ‚Ä¶ GitLab Repositories GitLab consists of many subprojects. A curated list of GitLab projects can be found at the GitLab ‚Ä¶ Guidelines for automation and access tokens Guidelines for automation with project/group tokens or service accounts Incident Definition of an Incident The definition of ‚Äúincident‚Äù can vary widely among companies ‚Ä¶ Infrastructure The Infrastructure Department is responsible for the availability, reliability, performance, and scalability of GitLab.com and other supporting services Infrastructure Platforms The Infrastructure Platforms department is responsible for the availability, reliability, performance, and scalability of GitLab SaaS Platforms and supporting services Innovation at GitLab This guide serves as a comprehensive handbook for GitLab team members (engineers, product managers, ‚Ä¶ Monitor Stage The Monitor Stage is responsible providing observability and response features. Monitoring of GitLab.com GitLab.com Service Availability The calculation methodology for GitLab.com Service Availability ‚Ä¶ On-Call If you‚Äôre a GitLab team member and are looking to alert Reliability Engineering about an ‚Ä¶ Open Source at GitLab We believe in Open Source As a company, GitLab is dedicated to open source. Not only do we believe ‚Ä¶ Performance Performance Facets We categorize performance into 3 facets Backend Frontend Infrastructure Backend ‚Ä¶ Policies related to GitLab.com The handbook pages nested under ‚Äúpolicies‚Äù directory are controlled documents, and ‚Ä¶ R&D Tax Credits GitLab submits applications for R&D Tax Credits in a number of jurisdictions that implement ‚Ä¶ Recognition in Engineering Engineering Quarterly Achievers Quarterly, CTO Leadership will recognize Engineering team members ‚Ä¶ Releases Overview and terminology This page describes the processes used to release packages to self-managed ‚Ä¶ Root Cause Analysis At GitLab transparency is one of our core values, as it helps create an open and honest working ‚Ä¶ Testing Welcome to the Testing Guide. Pages in this section provides information about testing practices, ‚Ä¶ Unplanned Upgrade Stop Workflow An unplanned upgrade stop is disruptive for customers as it requires to perform rollback and ‚Ä¶ Last modified July 17, 2025: Removes outdated strategy page ( 387298cd ) View page source -  - please contribute .",
    "headings": [
      "Engineering",
      "Engineering Direction",
      "Engineering Culture",
      "Engineering Excellence",
      "Engineering Initiatives",
      "Engineering Innovation",
      "Technical Roadmaps",
      "Community Contributions",
      "Diversity",
      "Growing our team",
      "Expand customer focus through depth and stability",
      "Taking time off",
      "Engineering Departments",
      "Other Related Pages",
      "Workflows",
      "GitLab in Production",
      "People Management",
      "Cross-Functional Prioritization",
      "SaaS Availability Weekly Standup",
      "Feature Change Locks",
      "Engineering Performance Indicator process",
      "Manual verification",
      "Critical Customer Escalations",
      "Requirements for critical escalation",
      "Process",
      "DRI",
      "Pairing Engineers on priority::1/severity::1 Issues",
      "Internal Engineering handbook"
    ],
    "word_count": 5381,
    "extracted_at": "2025-07-21 20:13:22"
  },
  {
    "document_id": "gitlab-handbook-780937",
    "url": "https://handbook.gitlab.com/handbook/support/",
    "title": "Customer Support Department",
    "category": "Engineering",
    "content": "Support Team Handbook The GitLab Support Team Handbook is the central repository for why and how we work the way we do. Welcome to the GitLab Support Team Handbook The GitLab Support Team provides technical support to GitLab.com and Self-Managed GitLab customers. The GitLab Support Team Handbook is the central repository for why and how we work the way we do. If you are Your Need Where You Should Look A customer, or an advocate for a customer Technical assistance Public Support Page , which describes the best way to get the help you need and lists GitLab‚Äôs paid service offerings GitLab team member Technical assistance Internal Support for GitLab Team Members page New Support Team member Onboarding / Learning Support Engineer Responsibilities page and Support Learning Pathways New Support Manager Onboarding / Learning Support Manager Responsibilities page and Support Manager Pathways Know someone who might be a great fit for our team? Please refer them to the job-family descriptions below. Support Engineering Job Family Support Management Job Family What does the Support Team do? We care for our customers Always assume you are the person responsible for ensuring success for the customer. When supporting a customer, any issue, incident or loss is GitLab‚Äôs loss . When a customer experiences trouble or downtime, take action with the same urgency you‚Äôd have if GitLab were experiencing downtime. When a customer is losing productivity, take action with the same urgency you‚Äôd have if GitLab were losing productivity. A customer with 2,500 users whose instance is down, gets the same urgency as if GitLab were losing $1,000,000 per day. Escalate early. Visibility across GitLab, up to and including the CEO, is always better earlier rather than later. Ensure all resources needed are on the case for customers early. Remember, as members of the support team we are the first to interact with someone when they have a problem or question. As such it is up to us to represent the company and make sure we present ourselves properly. Therefore we are expected to: Always be friendly and respectful. Be open to new ideas and points of view. Be OK if you don‚Äôt know something. You can always ask someone else. Be comfortable saying no to a customer (but try to suggest a workaround and escalate to a Senior if necessary). We are not commissioned or bonused Our goal is to provide guidance that will lead to the best results for our customers as they use GitLab. In that, we will often point to documentation, product functionality, or open bugs/feature requests. However, there are times when customers will be best served through one of our commercial offerings. Support is part of the Engineering Department and Support Engineers are not commissioned or bonused for upsell for additional services, customer purchases, or lead generation. If you recommend Professional Services or moving to a different tier or offering you may link to this section in your recommendation to give the customer assurance you‚Äôre doing so with no mixed motivations. Our role within GitLab GitLab Support is part of the Engineering division . While most engineering departments are part of the R&D cost center, Support is part of the Cost of Sales (or sometimes Cost of Goods Sold (COGS)) cost center. This unique arrangement is expressed in our Key Performance Indicators , which are largely focused around pursuing customer success and satisfaction while driving efficiency by increasing output while keeping costs within a predefined range. This is also why Support Engineer responsibilities include contributing code and documentation and working alongside Product Managers on our products: By using the knowledge gained from interacting with our customers to make our products or docs better, we solve problems before they become one. This reduces support case load while increasing efficiency for the wider GitLab organization. For example, the Sales department can rely on our docs to answer customer queries instead of leaning on Support or Customer Success for help, freeing up more time to close sales. Building customer empathy Part of Support‚Äôs role is to amplify the voice of the customer. One way of doing this is inviting other GitLab team members into experiences that will help them understand customer challenges with the product or our own obstacles in helping customers overcome those challenges. Before you start, make sure you get light-agent access in Zendesk so that you can view Support tickets. If you‚Äôre looking to get more exposure to customers, there are a few ways to get involved with Support: Support Shadow Program GitLab team members interested in learning about the GitLab Support team and our responsibilities are encouraged to participate in the Support Shadow Program. The Support Shadow Program is a way that team members outside of Support can spend time shadowing, learning, collaborating, and working together with the GitLab Support team. If you‚Äôre not part of the Support team and you‚Äôd like to participate in this program, open a Support Shadow Program issue in the support-team-meta project. This issue will be used to organize, plan, and track progress toward this program. GitLab Support uses Calendly to facilitate scheduling Shadow pairing sessions with participants. If you‚Äôre part of the Support team and you‚Äôd like to volunteer to host Support Shadow Pairing sessions with folks outside of Support, please open a Schedule update request issue requesting that Support Ops add you to the Support Shadow Program Calendly rotation. Join Support Calls Support calls are published on the GitLab Support Calendar . There are: Customer calls between customers and engineers. The description will include a ticket ID. Go to https://gitlab.zendesk.com/agent/tickets/<id> to view the ticket. Pairing sessions between two or more engineers working on one or more tickets. Office hours / Help sessions where more experienced Support engineers share their knowledge. Training sessions where a member of the support team is presenting on a specific topic Join an Emergency Call A great way to get involved is to join a customer emergency call. You can monitor #support_self-managed for PagerDuty alerts. Alternatively, if you have access to PagerDuty you can be scheduled into a shadow rotation . How our team helps fellow team members at all levels ‚Äì Helping Hierarchy If you go through the responsibilities for each role in Support you can piece together how the organization works. We wanted to make a simple clear way to think about how the roles work together to solve problems: Support Engineers help solve customer problems via tickets, merge requests, and other customer facing activities. Managers help solve Support Engineer problems by removing obstacles, joining in on customer facing activities, and working with support engineers to build systems that work to reduce friction and enable results and efficiency. Senior Leaders help resolve and avoid scaling problems by addressing team performance to KPIs, prioritizing initiatives and being responsible for the achievement of global results. VP of Support helps resolve and avoid company wide problems, by identifying growth and team design challenges, and reporting on progress to the Executives and Board. This simple list helps to give an easy way to set expectations and align problem solving in different roles. How we measure our performance We use Key Performance Indicators (KPIs) to keep track of how well each Engineering Department is doing, including the Support team, as a whole. The KPI measurements can be found under the Reporting tab in Zendesk if you have the appropriate access, but progress on meeting these KPIs is also tracked via the aforementioned KPI link. We review these KPIs weekly in the Support Week-in-Review . Our Success Pillars In service of achieving our KPIs and OKRs, there are three key pillars that we must balance to achieve success: People: Continue to hire excellent engineers and managers, at the right time, and the right places. Support our existing engineers and work with each team member towards realizing their full potential through professional development and smart tooling. Process: Iterate on existing processes and develop new, simplified processes that enable global scaling. Performance: People understand how their contributions help the global team attain our results, with guidance on what these contributions look like in practice. At various times it‚Äôs easy to over-optimize on one of the pillars to solve a problem, but considering all three is key to avoiding short-sighted decision making. About the Support Team The Single Source of Truth for information about Support Team Members - everything from email address and personal interests to product skills and group memberships - is the support-team project . The Support Team Home Page is built from the information in that project. Many other Support tools and automations make use of it also. See the Support team entry page of the Support Team wiki for details of the structure of an individual Support team member‚Äôs file. Information for and about the different parts of the Support Team can be found in the following sections of the Support Handbook: /support/engineering is content that is for Support Engineers. Think: Zendesk workflows and technical resources. /support/license-and-renewals is content for the Licensing and Renewals Support Engineers and Managers. Think: customers.gitlab.com and working with the Fulfillment Product Team. /support/managers is content that is for Support Managers. Think: how to manage issues, run 1:1s and leadership sync information. /support/readiness is the landing page for Support Readiness. Think: how is the support team preparing for X? Below we also have some commonly referenced pages: Support Engineer responsibilities Support Engineer knowledge areas Support Engineer career path Support Manager responsibilities FY25 Direction GitLab Support‚Äôs vision is to deliver a consistent, ‚Äúdelightful‚Äù experience to our customers. Our team members will collaborate across all timezones to seamlessly deliver the results our customers care about while continuing to strengthen and scale the team. The overall direction for Support in FY25 will continue to build from the foundations laid in FY24. We will continue to focus on KPI achievement and evolve and iterate our approach to support, keeping the customer centered in our outcomes. Following on to the company‚Äôs overall strategic objectives, specific areas of focus are: Our ability to achieve business aligned results for our customers How our team structure supports that ability Maintaining and augmenting the culture of our team Delighting our customers While our publicly visible OKR page and Key Performance Indicators reflect the focus and progress for the current quarter, the following provides more detail on the items included in the themes for the entire FY25. Improving our ability to achieve results for our customers FY24 was a challenging year in many aspects. As the workload and customer expectations grew, we needed to look at how we could improve efficiency and create a differentiated Support experience. FY25 is a year to focus and align on our customer needs and put our customers at the center of our understanding of their situations, perceptions, and expectations. To that end, we will: Iterate our support model, keeping our customer experience and business vision at the forefront of our decision making. Adopt a prioritization strategy incorporating our customers‚Äô business impact and GitLab business need, while building an understanding within the Support team for the why behind it. Examine and shape the macro and micro trends in group performance and individual efficiency. Build a compelling customer digital support experience that will improve the customer journey and reduce toil for our team. Team structure and how it supports our ability to achieve results In FY23 / FY24 we moved towards dividing the team into globally distributed groups of engineers. In FY25 we‚Äôll build on that foundation and extend towards differentiating support offerings to better align with customer requirements. This year, we will: Progress enhanced support offerings while partnering more closely with the Customer Success Team to meet our customers‚Äô business needs. Improve how we route and address customer tickets to an appropriate expert with a mind for growing individual engineers from just starting their support journey to complete stewardship of the support journey experience. Team culture and how it supports our ability to achieve results As GitLab grows, Support‚Äôs influence within the company as advocates for customers must also grow. We need to continue to strengthen the Values-driven cultural attributes that promote efficient collaboration and results for customers while maintaining GitLab Support as a great place to work. In FY25 we will: Build leaders and influencers within GitLab as advocates for customers. Expand our enablement, training, and education to prepare the current and future generations of Support Engineers to meet the needs of our customers. Delight our customers FY24 was a year of better understanding the needs of our customers. In FY25 we will focus on delighting them. We will: Pair with our customers and train engineers in setting and exceeding customer expectations. Improve our ways to serve customers and resolve their problems before a ticket is even opened while keeping that context to enrich tickets for Support Engineers if a ticket is needed. Improve our understanding of Support Delivery Quality and how we can consistently provide world class service. We are also Product Development Unlike typical companies, part of the mandates of our Security, Infrastructure, and Support Departments is to contribute to the development of the GitLab Product. This follows from these concepts, many of which are also behaviors attached to our core values : Dogfooding Everyone can contribute As such, everyone in the department should be familiar with, and be acting upon, the following statements: We should all feel comfortable contributing to the GitLab open source project If we need something, our first instinct should be to get it into the open source project so it can be given back to the community Try to get it in the open source project first, rather than later, even if it‚Äôs 2x harder We should be using the whole product to do our jobs We are all familiar with our Dogfooding process and follow it We should not expect new team members to join the company with these instincts, so we should be willing to teach them It is part of managers‚Äô responsibility to teach these values and behaviors Dogfooding in Support Citing our dogfooding operating principle, people sometimes ask why GitLab Support doesn‚Äôt use Service Desk . Dogfooding is using a piece of GitLab for its intended purpose . For example, one could use GitLab issues as a newsletter (and we do! See: Support Week in Review ), but creating merge requests to help Issues serve as a newsletter more effectively wouldn‚Äôt be dogfooding unless that improvement also helps its core use case. In other words: Dogfooding is using the product in the way that our customers would use it to the end of discovering and solving pain points that they have. Dogfooding supports customer results. At GitLab Support we use Service Desk to process Personal Data Requests , but not for our global support because the customer for Service Desk is primarily small teams soliciting bug reports, feature requests, or general feedback . Through our use of Service Desk in this smaller setting we‚Äôve been able to influence product direction towards adding features like internal notes . We continually evaluate product features for use-cases within Support and provide feedback and feature requests where blockers exist. Support will always prioritize customer results over any other consideration. OKRs Current Quarter These were previously populated via a tool we are no longer using. TODO: Replace with current GitLab implementation Previous Quarter These were previously populated via a tool we are no longer using. TODO: Replace with current GitLab implementation Hazards and Challenges See Managers/Hazards page Communications The GitLab Support Team is part of the wider Engineering function. Be sure to check the communications section in the Engineering handbook for tips on how to keep yourself informed about engineering announcements and initiatives. Here are our most important modes of communication: Support Week in Review . Important updates for everyone in support. The SWIR is expected reading/listening for all support team members. You should try to check the SWIR at least once a week. If you have something to share with the entire team this is the best place to do it. For example, if you have an issue for a common bug, an issue that requires feedback, or an issue about an external project you‚Äôre working on. Slack channels for ‚Äúinformal‚Äù communication. Due to our data retention policy in Slack, things shared there will eventually be deleted. If you want to share something there, please make sure it also has a more permanent place in our docs, handbook, issue tracker, etc. Meta issue tracker for any issues regarding workflows, general team suggestions, tasks or projects related to support, etc. Where we want to ensure that important messages are passed to the global support team, we will use this messaging template . This ensures that these messages are delivered across our communications channels in a structured and documented manner. GitLab.com Groups We use the following GitLab Groups to notify or add support team members to issues and merge requests on GitLab.com. Group Who @gitlab-com/support All Support Team members @gitlab-com/support/amer AMER Support @gitlab-com/support/apac APAC Support @gitlab-com/support/emea EMEA Support @gitlab-com/support/dotcom Support members with primary SaaS focus and GitLab.com admin access @gitlab-com/support/dotcom/console Support members with GitLab.com console access @gitlab-com/support/customers-console Support members with CustomersDot console access @gitlab-com/support/licensing-subscription Support members focused on License and Renewals @gitlab-com/support/managers All support managers @gitlab-com/support/managers/amer All AMER support managers @gitlab-com/support/managers/apac All APAC support managers @gitlab-com/support/managers/emea All EMEA support managers Projects Our team projects and issue trackers can be found in the Support parent group . Here are some selected projects which are relevant to team communications. Project Purpose support-team-meta Issues to discuss and improve Support processes support-training Courses and training for Support team including onboarding support-pairing Record of pairing sessions where we work together on tickets feedback Collects SSAT survey responses from Zendesk in the form of issues support-operations Support Operations team project support-readiness Support Readiness project Support team meta issue tracker We use the Support meta issue tracker for tracking issues and creating issues that may require feedback around support. If you‚Äôre interested in working on a project or task related to support feel free to create an issue and link to any external issues or projects so that we can: Be transparent to the entire team what we‚Äôre working on Have the opportunity to collaborate on external projects or tasks with other team members who are interested Avoid having team members do duplicate work Issues regarding documentation or features for GitLab, our FOSS project or any of the GitLab components should not go in this issue tracker, but in their appropriate issue tracker. If you have a proposed solution that is actionable, it‚Äôs best to start a merge request , tag the team for feedback and link in the Support Week in Review . Slack We follow GitLab‚Äôs general guidelines for using Slack for team communications. As only 90 days of activity will be retained, make sure to move important information into the team handbook, product documentation, issue trackers or customer tickets. spt_vs. support_ prefix When naming channels, ‚Äúspt‚Äù is meant for internal channels, meaning those that will be of use to the Support Team mainly. They should be public so others may join if they choose. If a channel has a ‚Äúsupport‚Äù prefix, it is meant as a public interface where other teams will interact with the Support Team. Daily Stand-up bot The Support Daily Slackbot is an automated tool designed to facilitate daily standup Slack threads across various teams and regions at GitLab. It posts customized messages to specific Slack channels based on type and target. For further details of the different variations, please refer to the README file . Channels Channel Purpose #support_team-chat Support team lounge for banter, chat and status updates #support_gitlab-com Discuss GitLab.com tickets and customer issues #support_self-managed Discuss self-managed tickets and customer issues #support_gitlab-dedicated Discuss GitLab Dedicated tickets and customer issues #support_licensing-subscription Discuss Licensing & Renewals tickets and customer issues #support_ticket-attention-requests Discuss escalated tickets with the Support Manager On-Call #support_operations Discuss operational items related to how Support works #support_leadership Discuss support team internal matters which require support managers‚Äô attention #recruiting-support-engineering Discuss support team hiring-related matters #spt_amer_global Discuss topics specific to Global SEs in AMER #spt_emea Discuss topics specific to Global SEs in EMEA #spt_apac Discuss topics specific to Global SEs in APAC #spt_pairing Used when working together on tickets and issues #spt_us-government Discussion about topics pertaining to US Fed Support #spt_onboarding New here? Topics related to onboarding Private Channels At GitLab we are to be public by default unless there is a valid reason for it to not be public. While Slack is not public, the spirit of opening up discussions so that everyone can contribute means that private channels should be kept to a minimum. The following private channels are permanent fixtures in support. Usage estimates are approximate based on traffic in Feb 2022. Channel Who is in it Purpose How often is it used? #spt-vp-directors Directors+ Used for Senior leadership to discuss and coordinate on sensitive topics / budget / etc. 3-4 threads per week #spt_managers-internal Managers+ Used for sensitive topics that are applicable to managers that aren‚Äôt appropriate for public channels 4-5 threads per week #spt_managers-internal-apac APAC Managers+ Used for sensitive topics that are applicable to APAC managers that aren‚Äôt appropriate for public channels 3-4 threads per week #spt_managers-emea EMEA Managers+ Used for sensitive topics that are applicable to EMEA managers that aren‚Äôt appropriate for public channels 4-5 threads per week #spt_managers-amer AMER Managers+ Used for sensitive topics that are applicable to AMER managers that aren‚Äôt appropriate for public channels 1-2 threads per week #spt_hiring-mgmt Managers+, Recruiting, Finance Used for coordinating offers and discussing hiring specifics that can be shared in the public channel 1-2 threads per week #spt_leadership_internal Managers+, Staff+ Private version of #support_leadership , used for sensitive topics where Staff and Managers are the appropriate audience rarely used #spt_staff_internal Staff+ Used for sensitive topics that are applicable to Staff Engineers that aren‚Äôt appropriate for public channels rarely used Before starting a new private channel, ask yourself Why can‚Äôt everyone contribute here? Appropriate answers might be: this channel will be used to discuss material, non-public information that may affect designated insider status. this channel will be used to discuss something that would negatively affect the privacy of an individual or group of individuals, such as performance, compensation or other sensitive matters Private channels are not appropriate for: Reducing noise (create a new public channel for this) Long-lasting discussions (unless included in the table above) Getting materials ready for public comment Values are only values if you do them when it is hard. See more discussion on how to scale the business while preserving GitLab Values . User Groups Group Who @support-dotcom Support Team Members with GitLab.com Admin Access @support-selfmanaged Support Team focused on Self-Managed tickets @support-team-apac Support Team APAC @support-team-emea Support Team EMEA @support-team-americas Support Team AMER @supportmanagers Support Managers @support-managers-apac Support Managers APAC @support-managers-emea Support Managers EMEA If you need to be added to one or more of these groups, please open an issue in the access requests project . Google Calendar We use the following team calendars to coordinate events and meetings: GitLab Support Calendar ID gitlab.com_9bs159ehrc5tqglur88djbd51k@group.calendar.google.com Support - Time off Calendar ID gitlab.com_as6a088eo3mrvbo57n5kddmgdg@group.calendar.google.com Support - Customer Events - EXPERIMENTAL: see support-team-meta#5153 Add these calendars to your GitLab Google calendar by clicking on the ‚Äú+‚Äù sign next to ‚Äúother calendars‚Äù, and choose ‚Äúsubscribe to calendar‚Äù. Enter the relevant ID mentioned above. If you need access to these calendars, ask a support team member for help. Zoom Zoom name format Please use the following formats for your name in Zoom as described in adding your title to your name in Zoom . As a primarily customer facing team, these formats were chosen to help identify you by vendor and role in calls where customers are present. For the sub-department, use the smallest unit you belong to. Again, bias for customer understanding over technical correctness. For example, Customer Support -> Support Engineering (use Support Engineering) Customer Support -> Support Readiness -> Support Operations (use Support Operations) Customer Support -> Support Engineering -> US Federal Support (use US Federal Support) Examples Intermediate Support Engineer: Name | Support Engineer | GitLab - Luciana de Santos | Support Engineer | GitLab Support Readiness Specialist - Ops: Name | Support Ops Specialist | GitLab - Barka Adamec | Support Ops Specialist | GitLab Senior Support Engineer: Name | Sr. Support Engineer | GitLab - Shen Hua Li | Sr. Support Engineer | GitLab Staff Support Engineer: Name | Staff Support Engineer | GitLab - Jabulani Achebe | Staff Support Engineer | GitLab Support Manager: Name | Manager, Sub-department | GitLab - Sneha Sharma | Manager, Support Operations | GitLab Senior Support Manager: Name | Sr. Manager, Sub-department | GitLab | Joo Hee Ko | Sr. Manager, US Federal Support | GitLab Director: Name | Director, Sub-department | GitLab | No√©mie Blanchet | Director, Support Engineering | GitLab Vice President: Name | VP, Department | GitLab - Kalina Nowak | VP, Customer Support | GitLab Weekly Meetings The Support Team has several meetings each week. These allow us to coordinate and help us all grow together. Each meeting has its own agenda and is led by a different member of the team each week. Discussions are encouraged to be kept in issues or merge requests so the entire team can collaborate, regardless of time zone. Any demos or announcements that need to be shared with the entire team should be shared in the Support Week in Review . All Zoom and agenda links can be found on the relevant calendar entry in the Support Calendar. . Support Team Call Support team members in some regions meet up regularly. Details of these calls are on the Weekly Support Team Call workflow page . Support Leadership Meetings The Support management team meets regularly. Details of these calls are on the Support Managers page Support Monthly Business Review (MBR) The leadership team (Staff, Managers, Senior Managers, Directors) meet monthly to align on business objectives and cross-region collaboration. There is SAFE data shared, but a read-out is disseminated for wider team awareness. Support Regional Team Meetings Some regional Support teams have meetings oriented around company news, Support initiatives, training plans, and connectedness. Weekday Region Meeting Name Purpose Tuesday APAC Team Meeting Tuesday AMER Team Meeting Thursday EMEA Team Meeting Senior Support Engineer Office Hours Senior and Staff Support Engineers are encouraged to host office hours. These office hours are intended to strengthen the team through mentoring. It is up to each Senior/Staff Support Engineer whether they schedule office hours, and how often. Please see the ‚ÄúGitLab Support‚Äù Team calendar to view office hours and invite yourself. We encourage hosts to include what they will cover in the calendar event description and optionally a document to track. Some ideas of what one can expect at a Senior/Staff Support Engineers‚Äô office hour: Troubleshooting a difficult ticket Trying out a GitLab feature (Geo, CI, SAST, k8s, etc.) or a new workflow Reproducing a particular bug Fixing a bug Creating or updating documentation Thinking through a particular problem Hosting a ticket crush session Creating a Meeting You may wish to host a sync call. To do so, you can create an event on the Support Calendar. . To invite team members to the event, you can use the appropriate Support email alias (internal Handbook, GitLab team members only) Support Week in Review Every Friday, we do a week in review, inspired by the greater Engineering organization week in review . You can add topics any time by using the SWIR topic form . Any workflow changes or announcements should be shared in the SWIR and we recommend you check at least once a week to stay up to date on recent changes. Ideally, the information shared here should have a permanent location such as an issue or merge request. How to read/listen to the SWIR You can read the Support Week in Review by viewing the more recent issue with the SWIR::Digest label in the SWIR project . You can subscribe to this label to be notified when the latest SWIR has been generated. For audio editions recorded after 2022/07/01, you can find a link to the audio edition of the SWIR within the respective issue (this is so we comply with the SAFE framework . An archive of all audio editions can be found in the Support Week in Review - Audio Edition folder on Google Drive (internal only). We encourage anyone in the team to share. SWIR Topics We currently have the following topics, each in its own section in the SWIR: Actionable . For items that require a decision to be made or action to be taken (such as, asking for feedback on an issue). Things to know about . Share items that you would like to share with the team, like projects you‚Äôre working on, known bugs, new workflows, cool articles you found, etc. Team Member updates . New team members, internal transfers and nother news about our team members! What Did we Learn this Week . A space to share things you‚Äôve discovered (or rediscovered!) and learnt. Support Operations Corner . Announcements and information from the Support Operations team Kudos . Give a special kudos to other team members or highlight something they did. - SSAT . A selection of the positive SSAT feedback received from customers during the week Metrics report . Review the support metrics for the span of the week. SWIR Labels SWIR Issues can also have their own Tags or Labels in the GitLab project. These are used to highlight specific Areas of Focus (L&R, SaaS‚Ä¶). Labels are used on the Issues only, they do not appear in the digest Issue nor in the Google doc. One label, Manager Attention , is used for policy changes or other topics of which Support Managers should specifically be made aware. You can find the Manager Attention label here ] and subscribe to it. You can read about the origins of the auto-generated SWIR in this issue . Cross-Department Roles The Support Team collaborates with many other departments throughout GitLab - Sales, Channel, Product and Legal, to name a few. And we have created two different roles to help those collaborations to be as effective and efficient as possible. Support Stable Counterpart The Support Stable Counterpart role is designed to provide a strong connection between a product or non-product team and Support. The purpose is discussing product issues, sharing product knowledge and representing customer needs, as well as sharing knowledge about each team‚Äôs work and developing processes and documentation to allow the two teams to work together well. If you are interested in becoming a Support Stable Counterpart, or would like to learn more about the role, read the Support Stable Counterparts page. Processes Updating Support Team documents using merge requests The Support Team records our institutional knowledge, processes and workflows in multiple places, such as the handbook and project issues templates. When updating such documents, make sure to have visible artifacts of approval on your merge requests before merging even if you have received approval somewhere else. This avoids the impression of changes being made without any oversight or accountability. Artifacts of approval can include: Getting a peer or manager to review and merge your MR A peer or manager showing their approval using MR approvals A peer or manager commenting ‚Äúlooks good to me‚Äù Support Workflows Support Workflows Internal Policies and Procedures Wiki How to Work with Tickets How to Submit issues to Product/Development How to Submit Code to the GitLab Application How to Submit Docs when working on customer issues License & Renewals Workflows Slack Workflows Each Slack channel within Support has a number of Workflows attached to them that are used to provide information to users. The source files for each workflow live in the slack-workflows project. Issue Notification Some workflows are meant to notify the team of new issues created in the relevant project. In these cases, a project webhook passes information to Zapier , which then sends the information to a Slack workflow. #support_gitlab-com CMOC GitLab Project , Zap , Slack workflow #support_licensing-subscription L&R related internal requests GitLab Project , Zap , Slack workflow Emoji Reaction Providing information by reacting to a message with a specific emoji. #support_escalations Ticket Escalation - :escalate: - Directs the user to follow the proper procedure to escalate a support ticket or internal issue. #support_gitlab-com Ticket Escalation - :escalate: - Directs the user to follow the proper procedure to escalate a support ticket or internal issue. Question Redirect - :leftwards_arrow_with_hook: - Directs the user to post their question in a more appropriate Slack channel. Remove Link Preview - :slack: - Politely asks the user to remove any unfurled link previews in their message. Welcome - This automated workflow automatically sends a direct message to new members of the channel that contains helpful information. Contact Management - :admission_tickets: - Direct the user to follow the proper procedure to manage the support contacts for a Zendesk Global organization. #support_self-managed Ticket Escalation - :escalate: - Directs the user to follow the proper procedure to escalate a support ticket or internal issue. #support_licensing-subscription Ticket Escalation - :escalate: - Directs the user to follow the proper procedure to escalate a support ticket or internal issue. Time Off See the Support Time Off page Onboarding See the Support Onboarding page Promotion After getting promoted, make sure to update your title in: our Support team page , and the change would be reflected in Zendesk the company team page following the same steps in Add yourself to the Team Page Consider updating the title on Slack and on Zoom, following the guidelines in Zoom name format . Support Pods In GitLab Support, we use Support Pods to organize support engineers as they work. Each Support Pod is a cross-region, single skill group of engineers who are interested in their Support Pod‚Äôs specific product area. They are engineer- lead. To join or start a Support Pod you can read more below. See the Support Pods handbook page and the Working with Support Pods workflow page . Improving our processes - ‚ÄòActive Now‚Äô issue board The Support team uses ‚Äòsupport-team-meta‚Äô project issues to track ideas and initiatives to improve our processes. The ‚ÄòActive Now‚Äô issue board shows what we‚Äôre currently working on. It uses three labels: Blocked - waiting for another team or external resource before we can move ahead Discussing this week - under active discussion to arrive at a decision In Progress - actively being worked on Some principles guide how these labels are used: A maximum of six issues at any time for each label (18 total issues) All issues with one of the above labels must be assigned to one or more support team members All issues with one of the above labels must have a due date no longer than a week ahead If an issue is too big to complete in a week it should be split into smaller parts that can be completed in a week (a larger ‚Äòparent‚Äô issue is OK to keep in the project, but it shouldn‚Äôt make it onto the ‚ÄòIn Progress‚Äô column) Each week we look at the board and discuss the issues to keep things moving forward. By keeping a maximum of six issues for each label, we limit work in progress and make sure things are completed before starting new tasks. Adding and managing items on the board: Support managers will regularly review the board to keep items moving forward. The team can vote on issues not on the board by giving a ‚Äôthumbs up‚Äô emoji so we can see popular issues . Support managers will look at popular issues and add them to the board when there is room. Support managers will curate issues to prevent a large backlog. Unpopular or old issues can be closed / merged to keep the backlog manageable. Support Slackbot The Support Slackbot (archived) has been retired. Support Resources Handbook links GitLab Team page Product Categories - Find out what team handles what Statement Of Support Support Managers Support Hiring Support Channels On-Call License & Renewals Advanced Topics Browser extensions AI and Support Work Documentation GitLab GitLab.com Status GitLab Releases Writing docs GitLab Documentation guidelines Documentation Style Guide GitLab Markdown Setting up GitLab GitLab Architecture Overview Requirements Installation methods for GitLab Backing up and restoring GitLab Omnibus configuration settings Omnibus Configuration options Omnibus Database settings Debugging GitLab Log system Rake tasks Maintenance Rake Tasks Debugging resources for GitLab Support Engineers GitLab Rails Console Cheat Sheet GitLab features Install GitLab Runner GitLab CI example projects Elasticsearch Connecting GitLab with a Kubernetes cluster Developing GitLab GitLab development utilities Feature flags What requires downtime? Advanced Support Topics Training modules that Support team members can complete to gain expert skills. AI and Support Work Guidelines and best practices for Support Team AI use, including tool recommendations, workflow integration, and responsible AI principles Browser Extensions Documentation for managing, developing, and publishing browser extensions for the GitLab Support team Customer Support Department Performance Indicators Displays Support KPIs, pulled from full list of company performance indicators. Enhanced Support Offerings Everything about Support's Enhanced Support Offerings GitLab Support On-Call Guide For customers that have Priority Support, the Support Engineering Team is on-call and available to assist with emergencies Gratis Support for Prospects Details on how to request support for prospects Knowledge Base GitLab Support's Knowledge Base Licensing & Renewals Licensing & Renewals (L&R) comprises efforts to resolve problems customers face when they purchase or renew their GitLab subscription. Partnerships Support specific information on partnership's workflows, automations and processes. Providing Excellent Customer Service Guidance for delivering a great experience to our customers Readiness Team Everything you wanted to know about the Readiness sub-department Requesting Gratis Support Details on how to request gratis support for customers and prospects Support Channels Communication channels for GitLab Support Support Engineer Career Path The details of this page are to outline more specific guidance around promotions for Support team members. Page should not be moved without a Support Global Change Management issue. Support Engineer Resources If you want to learn more about what support engineers do and how they do it, this is the place. Support Engineer Responsibilities A detailed listing of the responsibilities of Support Engineers in GitLab. Page should not be moved without a Support Global Change Management issue. Support Engineering Data Analysis Community Purpose This page serves as the cornerstone for a Support Engineering data analysis community of ‚Ä¶ Support Glossary The Support Glossary contains definitions and explanations for support-related acronyms and terms. Support Incident Response Framework Delivering customer results during critical moments through collaboration, iteration, and transparency‚Äîtransforming incidents into opportunities for trust. Support Learning & Training Learning Pathways available to Support team members Support Managers Support Managers activities and references Support Pods Flexible interest groups to focus on collaboration within Support and across functions Support Stable Counterparts An overview of the Support Stable Counterpart role and related expectations and goals. Support Team APAC Support Team APAC home page Support Team Member Time Off Guidelines for how time off applies to Support team members and what actions need to be taken. Page should not be moved without a Support Global Change Management issue. Support time off buddy system Guidelines for leveraging the Support time off buddy system Support Workflows AI AI Workflow Duo Chat case scenarios for support GitLab Dedicated GitLab Dedicated Logs GitLab ‚Ä¶ Working With GitLab Support How GitLab team members can work with and best ways to contact Support. Last modified July 18, 2025: Remove #fy23_support_promotions channel ( d3ab8a91 ) View page source -  - please contribute .",
    "headings": [
      "Support Team Handbook",
      "Welcome to the GitLab Support Team Handbook",
      "What does the Support Team do?",
      "We care for our customers",
      "Our role within GitLab",
      "How our team helps fellow team members at all levels ‚Äì Helping Hierarchy",
      "How we measure our performance",
      "About the Support Team",
      "FY25 Direction",
      "Improving our ability to achieve results for our customers",
      "Team structure and how it supports our ability to achieve results",
      "Team culture and how it supports our ability to achieve results",
      "Delight our customers",
      "We are also Product Development",
      "Dogfooding in Support",
      "OKRs",
      "Current Quarter",
      "Previous Quarter",
      "Hazards and Challenges",
      "Communications",
      "GitLab.com",
      "Slack",
      "Google Calendar",
      "Zoom",
      "Weekly Meetings",
      "Creating a Meeting",
      "Support Week in Review",
      "Cross-Department Roles",
      "Processes",
      "Updating Support Team documents using merge requests",
      "Support Workflows",
      "Slack Workflows",
      "Time Off",
      "Onboarding",
      "Promotion",
      "Support Pods",
      "Improving our processes - ‚ÄòActive Now‚Äô issue board",
      "Support Resources",
      "Handbook links",
      "Documentation"
    ],
    "word_count": 6613,
    "extracted_at": "2025-07-21 20:13:24"
  },
  {
    "document_id": "gitlab-handbook-150919",
    "url": "https://handbook.gitlab.com/handbook/engineering/development/",
    "title": "Development Department",
    "category": "Engineering",
    "content": "Development AI Model Validation at GitLab How we monitor the market for models to evaluate and respond to on-demand requests for new model evaluation. Database Engineering This page is dedicated to database application engineering and provides an entry-point for resources ‚Ä¶ Development Department Performance Indicators Executive Summary KPI Health Status Past Due InfraDev Issues Okay We are now below 5. We did have a ‚Ä¶ Development OKRs Development OKRs Development Required Approvals Overview There are specific scenarios we are identifying that will require additional approval ‚Ä¶ Engineering Principles Engineering Principles At GitLab, Company Culture is very important to us. The main ingredient of ‚Ä¶ Fulfillment Sub-department The Fulfillment Sub-department is composed of the Billing and Subscription Management, Fulfillment Platform, Provision, and Utilization development teams working on the infrastructure between the systems which affect the user purchasing process that support the GitLab DevOps Platform. Growth Stage The Growth Stage consists of development teams working in the product delivering enhancements and running experiments Keeping secure coding knowledge fresh in development Secure Coding Training Guidelines It is essential that all developers are aware of secure coding ‚Ä¶ Manager Notes This page is for any development manager notes we want to share more broadly. A directory was ‚Ä¶ Onboarding Processes Sec Section The Sec Section is composed of development teams working on Secure and Software Supply Chain Security features of the GitLab DevOps Platform. Last modified December 15, 2023: Migrate Engineering ruby code to the new handbook ( c8544f4a ) View page source -  - please contribute .",
    "headings": [
      "Development"
    ],
    "word_count": 254,
    "extracted_at": "2025-07-21 20:13:25"
  },
  {
    "document_id": "gitlab-handbook-102536",
    "url": "https://handbook.gitlab.com/handbook/engineering/infrastructure/",
    "title": "Infrastructure Department",
    "category": "Engineering",
    "content": "Infrastructure The Infrastructure Department is responsible for the availability, reliability, performance, and scalability of GitLab.com and other supporting services Mission The Infrastructure Department enables GitLab (the company) to deliver a single DevOps application, and GitLab SaaS users to focus on generating value for their own businesses by ensuring that we operate an enterprise-grade SaaS platform. The Infrastructure Department does this by focusing on availability , reliability , performance , and scalability efforts. These responsibilities have cost efficiency as an additional driving force, reinforced by the properly prioritized dogfooding efforts. Many other teams also contribute to the success of the SaaS platform. However, it is the responsibility of the Infrastructure Department to drive the ongoing evolution of the SaaS platform, enabled by platform observability data. Getting Assistance If you‚Äôre a GitLab team member and are looking to alert the Infrastructure teams about an availability issue with GitLab.com, please find quick instructions to report an incident here: Reporting an Incident . For all other queries, please see the getting assistance page. Vision The Infrastructure Department operates a fast, secure, and reliable SaaS platform to which (and with which) everyone can contribute . Integral part of this vision is to: Build a highly performant team of engineers, combining operational and software development experience to influence the best in reliable infrastructure. Work publicly in accordance with our transparency value. Use our own product to prepare, build, deliver work, and support the company strategy Align our strategy with the industry trends, company direction, and end customer needs. Direction The direction is accomplished by using Objectives and Key Results (OKRs). Other strategic initiatives to achieve this vision are driven by the needs of enterprise customers looking to adopt GitLab.com. The GitLab.com strategy catalogs top customer requests for the SaaS offering and outlines strategic initiatives across both Infrastructure and Stage Groups needed to address these gaps. We are also Product Development Unlike typical companies, part of the mandates of our Security, Infrastructure, and Support Departments is to contribute to the development of the GitLab Product. This follows from these concepts, many of which are also behaviors attached to our core values : Dogfooding Everyone can contribute As such, everyone in the department should be familiar with, and be acting upon, the following statements: We should all feel comfortable contributing to the GitLab open source project If we need something, our first instinct should be to get it into the open source project so it can be given back to the community Try to get it in the open source project first, rather than later, even if it‚Äôs 2x harder We should be using the whole product to do our jobs We are all familiar with our Dogfooding process and follow it We should not expect new team members to join the company with these instincts, so we should be willing to teach them It is part of managers‚Äô responsibility to teach these values and behaviors Organization structure (click the boxes for more details) flowchart LR I[Infrastructure Platforms] click I \"/handbook/engineering/infrastructure/\" I --> DA[Data Access] click DA \"/handbook/engineering/infrastructure-platforms/data-access/\" I --> D[Dedicated] click D \"/handbook/engineering/infrastructure/team/gitlab-dedicated/\" I --> DE[Developer Experience] click DE \"/handbook/engineering/infrastructure-platforms/developer-experience/\" I --> PE[Production Engineering] click PE \"/handbook/engineering/infrastructure-platforms/production-engineering/\" I --> SD[Software Delivery] click SD \"/handbook/engineering/infrastructure/team/delivery/\" I --> TS[Tenant Scale] click TS \"/handbook/engineering/infrastructure-platforms/tenant-scale/\" DA --> GC[Gitaly] click GC \"/handbook/engineering/infrastructure-platforms/data-access/gitaly/\" DA --> Git[Git] click GG \"/handbook/engineering/infrastructure-platforms/data-access/git/\" DA --> DF[Database Framework] click DF \"/handbook/engineering/infrastructure-platforms/data-access/database-framework/\" DA --> DO[Database Operations] click DO \"/handbook/engineering/infrastructure-platforms/data-access/database-operations/\" DA --> DU[Durability] click DU \"/handbook/engineering/infrastructure-platforms/data-access/durability/\" D --> E[Environment Automation] click E \"/handbook/engineering/infrastructure/team/gitlab-dedicated/\" D --> PSS[Public Sector Services] click PSS \"/handbook/engineering/infrastructure/team/gitlab-dedicated/us-public-sector-services/\" D --> Switchboard click Switchboard \"/handbook/engineering/infrastructure/team/gitlab-dedicated/switchboard/\" DE --> EA[Development Analytics] click EA \"/handbook/engineering/infrastructure-platforms/developer-experience/engineering-analytics/\" DE --> DT[Developer Tooling] click DT \"/handbook/engineering/infrastructure-platforms/developer-experience/developer-tooling/\" DE --> FE[Feature Readiness] click FE \"/handbook/engineering/infrastructure-platforms/developer-experience/\" DE --> PER[Performance Enablement] click PER \"/handbook/engineering/infrastructure-platforms/developer-experience/performance-enablement/\" DE --> TG[Test Governance] click TG \"/handbook/engineering/infrastructure-platforms/developer-experience/test-governance/\" PE --> CC[Cloud Connector] click CC \"/handbook/engineering/infrastructure/team/cloud-connector/\" PE --> Foundations click Foundations \"/handbook/engineering/infrastructure-platforms/production-engineering/foundations/\" PE --> Observability click Observability \"/handbook/engineering/infrastructure/team/scalability/\" PE --> Ops click Ops \"/handbook/engineering/infrastructure/team/ops/\" PE --> Runway click Ops \"/handbook/engineering/infrastructure/team/runway/\" SD --> DB[Build] click DB \"/handbook/engineering/infrastructure-platforms/gitlab-delivery/distribution/\" SD --> DD[Deploy] click DD \"/handbook/engineering/infrastructure-platforms/gitlab-delivery/distribution/\" SD --> FR[Framework] click FR \"/handbook/engineering/infrastructure-platforms/gitlab-delivery/framework/\" SD --> RE[Releases] click RE \"/handbook/engineering/infrastructure-platforms/gitlab-delivery/delivery/\" SD --> SM[Self-managed] click SM \"/handbook/engineering/infrastructure-platforms/gitlab-delivery/delivery/\" TS --> Geo click Geo \"/handbook/engineering/infrastructure-platforms/tenant-scale/geo/\" TS --> Organizations click Organizations \"/handbook/engineering/infrastructure-platforms/tenant-scale/organizations/\" TS --> Cells click Cells \"/handbook/engineering/infrastructure-platforms/tenant-scale/cells-infrastructure/\" Technical Roadmap Infrastructure maintains a Technical Roadmap for planning projects over the short (1y), medium (2y), and long term (3y). This serves as our strategic compass, helping us balance immediate needs with long-term sustainability. The Technical Roadmap is based on the Product Roadmap , where Product provides the ‚ÄúWhat‚Äù (customer needs) and ‚ÄúWhy‚Äù (business strategy). Engineers then determine the ‚ÄúHow‚Äù (technical implementation), while Engineering Managers plan the ‚ÄúWhen‚Äù (scheduling). This comprehensive roadmap emphasizes building high-quality, complete features in a sustainable manner. The Technical Roadmap serves three key purposes: It helps build engineering excellence by addressing critical areas that might not show up in product backlogs, such as technical debt, performance improvements, platform improvements, and system scalability. It enables the department to be proactive rather than reactive. By regularly asking key questions like ‚ÄúWhere do we see the biggest instability in our systems?‚Äù or ‚ÄúWhat is generating the most toil?‚Äù, we can address issues before they become critical problems. This helps maintain our SLOs and keeps our customers happy. It aligns engineering efforts with business goals, ensuring technical improvements drive GitLab‚Äôs success. Each technical roadmap item is prioritized based on business value and strategic alignment. Current State The Infrastructure Roadmap is maintained as a static site. GitLab team-members can review the current technical roadmap, at infra-roadmap.gitlab.com . NOTE : The Infrastructure Roadmap is not publicly available as some of the projects and initiatives may be considered unSAFE . The site presents the roadmap in a visual manner, showing: Dependencies between planned initiatives Filtering options by confidence, stage, or tags Individual roadmaps for each stage within the department Impact analysis through dependency visualization Updating the Roadmap Changes to the Roadmap are made through merge requests to the infra-roadmap project. The data is stored in YAML format, and changes can be made by editing the YAML. This allows for version control and collaborative discussion through the merge request process. Full instructions for making changes to the Infrastructure Roadmap are available in the project‚Äôs README.md . Everyone is encouraged to contribute to the roadmap, whether proposing new initiatives or making smaller changes like updating descriptions or adding links to relevant issues. Design The Infrastructure Library contains documents that outline our thinking about the problems we are solving and represents the current state for any topic, playing a significant role in how we produce technical solutions to meet the challenges we face. Dogfooding The Infrastructure department uses GitLab and GitLab features extensively as the main tool for operating many environments , including GitLab.com. We follow the same dogfooding process as part of the Engineering function, while keeping the department mission statement as the primary prioritization driver. The prioritization process is aligned to the Engineering function level prioritization process which defines where the priority of dogfooding lies with regards to other technical decisions the Infrastructure department makes. When we consider building tools to help us operate GitLab.com, we follow the 5x rule to determine whether to build the tool as a feature in GitLab or outside of GitLab. To track Infrastructure‚Äôs contributions back into the GitLab product, we tag those issues with the appropriate Dogfooding label. Handbook use at the Infrastructure department At GitLab, we have a handbook first policy . It is how we communicate process changes, and how we build up a single source of truth for work that is being delivered every day. The handbook usage page guide lists a number of general tips. Highlighting the ones that can be encountered most frequently in the Infrastructure department: The wider community can benefit from training materials, architectural diagrams, technical documentation, and how-to documentation. A good place for this detailed information is in the related project documentation. A handbook page can contain a high level overview, and link to more in-depth information placed in the project documentation. Think about the audience consuming the material in the handbook. A detailed run through of a GitLab.com operational runbook in the handbook might provide information that is not applicable to self-managed users, potentially causing confusion. Additionally, the handbook is not a go-to place for operational information, and grouping operational information together in a single place while explaining the general context with links as a reference will increase visibility. Ensure that the handbook pages are easy to consume. Checklists, onboarding, repeatable tasks should be either automated or created in a form of template that can be linked from the handbook. The handbook is the process. The handbook describes our principles, and our epics and issues are our principles put into practice. Projects Classification of the Infrastructure department projects is described on the infrastructure department projects page . The infrastructure issue tracker is the backlog and a catch-all project for the infrastructure teams and tracks the work our teams are doing‚Äìunrelated to an ongoing change or incident. In addition to tracking the backlog, Infrastructure Department projects are captured in our Infrastructure Department Epic as well as in our Quarterly Objectives & Key Results Supporting Product Features We have a model that we use to help us support product features. This model provides details on how we collaborate to ship new features to Production. Stable Counterparts Infrastructure SREs may be aligned with stage groups as stable counterparts . Stable Counterparts are used as a framework for managing reliable services at GitLab. The framework provides guidelines for collaboration between Stage Groups and Infrastructure Teams . Interviewing The Infrastructure department hires for a number of different technical specialisms and positions across its teams. This Infrastructure Interviewing Guide offers more detail on some of our regular openings, interview process and other useful information related to applying to jobs with us. More information on our current openings can be found on the careers page . Common Links How we do Incident Management for GitLab.com GitLab.com status information Slack Channels #production #infrastructure-lounge #incidents-dotcom #announcements #feed_alerts-general General Issue Trackers Infrastructure issue queue Production incidents, and changes Delivery Scalability Resources Production Architecture Operational Runbooks Environments Monitoring Readiness Reviews Infrastructure Standards Other Pages On-call Handover SRE Onboarding GitLab.com data breach notification policy Coding at scale Database Database Reliability at GitLab The group of Database Reliability Engineers (DBREs) are on the ‚Ä¶ Engineering Productivity team ‚ÑπÔ∏è Note: This page is deprecated. The team has been restructured as Development Analytics and ‚Ä¶ Getting Assistance on Infrastructure Platforms How to get assistance for problems on Production Platforms Incident Management If you‚Äôre a GitLab team member and are looking to alert Reliability Engineering about an ‚Ä¶ Infrastructure Environments Environments The Terraform configuration for the environments can be found in config-mgmt. Future ‚Ä¶ Infrastructure Product Management Responsibilities The responsibilities of the Infrastructure Product Manager are documented in the ‚Ä¶ Production If you‚Äôre a GitLab team member and are looking to alert Reliability Engineering about an ‚Ä¶ Rate Limiting This page exists to consolidate GitLab Rate Limiting documentation into a single source of truth. It is intended to reflect the current state of our rate limits, with the target audience being Operators (SRE and Support team members). Team See the Infrastructure Platforms Organizational Structure for teams in Infrastructure. The Infrastructure Platforms Section Mission The Infrastructure Platforms section enables GitLab Engineering to build and deliver safe, ‚Ä¶ Last modified July 17, 2025: Removes outdated strategy page ( 387298cd ) View page source -  - please contribute .",
    "headings": [
      "Infrastructure",
      "Mission",
      "Getting Assistance",
      "Vision",
      "Direction",
      "We are also Product Development",
      "Organization structure",
      "Technical Roadmap",
      "Current State",
      "Updating the Roadmap",
      "Design",
      "Dogfooding",
      "Handbook use at the Infrastructure department",
      "Projects",
      "Supporting Product Features",
      "Stable Counterparts",
      "Interviewing",
      "Common Links",
      "Slack Channels",
      "General Issue Trackers",
      "Resources",
      "Other Pages"
    ],
    "word_count": 1922,
    "extracted_at": "2025-07-21 20:13:27"
  },
  {
    "document_id": "gitlab-handbook-19955",
    "url": "https://handbook.gitlab.com/handbook/engineering/open-source/",
    "title": "Open Source",
    "category": "Engineering",
    "content": "Open Source at GitLab We believe in Open Source As a company, GitLab is dedicated to open source. Not only do we believe in it, but we use it, and we give back to it. Not just through GitLab, but through contributions to other open source projects. The purpose of this page is to document how a GitLab employee can: Create an open source project on behalf of GitLab Contribute to a third-party open source project on behalf of GitLab Use a third-party open source code in a GitLab‚Äôs project Growth Strategy As an open source project, we want to stay healthy and be open for growth, but also ready to accommodate a 10x factor of our community. In order to achieve that, we‚Äôve outlined a strategy that is a collaboration between multiple departments. General notes GitLab Code of Business Conduct and Ethics PIAA Creating an open source project See Creating a new project for the instructions. Contributing to a third-party project on behalf of GitLab Contributor License Agreements (CLAs) If you‚Äôre contributing to an open source project on behalf of GitLab, you may be required to enter into a CLA. In accordance with the Authorization Matrix Policy , Legal approval is required in order for you to enter into a CLA on behalf of GitLab. Visit the Legal & Corporate Affairs Product handbook for further information on this process. Contributing to a project on GitHub If your GitHub account‚Äôs primary email is not your @gitlab.com email, you can add it as an additional address. No need to create a separate account. Fork the repository you want to contribute to into your account Follow the usual pull request flow . In the future, we might have a single organization for forks. That will allow us to track various metrics about contributions made by GitLab employees. If a project does not have a license GitLab allows contribution to open source licensed projects. If the project to you which you wish to contribute does not have a license: Hold off making any contributions to the project until a license is in place. Open an issue in the project (or contact the maintainers through other documented means). Request the project adds an appropriate license citing an inability to contribute to unlicensed code. Potentially refer to licenses used in other projects in the same group/organization as an easy reference for the maintainer. If an open source license is added, you may then contribute to the project. Using open source software The guidance for using open source software, including details of which licenses are pre-approved for use, is now available in the Legal & Corporate Affairs handbook . Using forks in your code Avoid using forked code and try to contribute your change upstream. It‚Äôs typical for forks to fall far behind the upstream repository and such dependencies become a source of pain: Rebasing the branch may become non-trivial and it‚Äôd become hard to bring such dependency up to date. Some other library in your project might depend on the original version, creating a diamond dependency problem . There may be good reasons to create a fork: To fix a security issue that is not being fixed upstream fast enough if it‚Äôs affecting us or our customers Any other reasons? Talk to your peers and use your best judgement. If you decide to create a fork, make sure you open an issue that: Describes the reason for the fork to exist Links to the MR(s) where the fork was introduced as a dependency Links to any relevant issues in the upstream project. If the issue was not reported already, make sure you report it in the project‚Äôs issue tracker. This is important because if the project‚Äôs maintainers don‚Äôt know about it they will not fix it Links to any opened MRs/PRs to fix the issue upstream Describes the remediation work needed to start using the upstream code again If it‚Äôs not just changes in the forked code, but also some modifications in your code to use the fork, consider putting a TODO and a link to this issue next to that code in a comment GPL Cooperation Commitment Visit the Legal & Corporate Affairs Product handbook for further information on this. Open Source Growth Strategy Strategy We will be executing in 5 key areas in support of the company‚Äôs broader ‚Ä¶ Last modified June 13, 2025: Add section around contributing to unlicensed code/projects ( 8322846b ) View page source -  - please contribute .",
    "headings": [
      "Open Source at GitLab",
      "We believe in Open Source",
      "Growth Strategy",
      "General notes",
      "Creating an open source project",
      "Contributing to a third-party project on behalf of GitLab",
      "Contributor License Agreements (CLAs)",
      "Contributing to a project on GitHub",
      "If a project does not have a license",
      "Using open source software",
      "Using forks in your code",
      "GPL Cooperation Commitment"
    ],
    "word_count": 749,
    "extracted_at": "2025-07-21 20:13:36"
  },
  {
    "document_id": "gitlab-handbook-107182",
    "url": "https://handbook.gitlab.com/handbook/security/",
    "title": "Security Overview",
    "category": "Security",
    "content": "Security at GitLab Security Vision and Mission Our vision is to transparently lead the world to secure outcomes. Our mission is to enable everyone to innovate and succeed on a safe, secure, and trusted DevSecOps platform. This will be achieved through 5 security operating principles: Accelerate business success with a focus on: Prioritize ‚Äòboring‚Äô, iterative solutions that minimize risk Find ways to say Yes Understand goals before recommending solutions Use GitLab first Efficient operations with a focus on: Technical controls over handbook rules Leverage automation first (robots over humans) Responsible decisions (Spending, Tooling, Staffing, etc) over low ROI (return on investment) decisions Reusable or repeatable over singular solutions Transparency with a focus on: Responsible protection of MNPI (material non-public information) Evangelize dogfooding of GitLab publicly Lead with metrics Balance security with usefulness Risk Reduction with a focus on: Secure by default Preventative controls over detective controls Solving root causes over treating symptoms Visibility through Coverage, Discoverability, Observability Collaborative Culture with a focus on: Working together on common solutions Solve shared problems with shared solutions Simplifying language for everyone to understand Avoiding security jargon Seek opportunities to help others succeed To help achieve the vision of transparently leading the world to secure outcomes, the Security Division has nominated a Security Culture Committee . Division Structure The Security Division provides essential security operational services, is directly engaged in the development and release processes, and offers consultative and advisory services to better enable the business to function while minimising risk. To reflect this, we have structured the Security Division around four key tenets, which drive the structure and the activities of our group. These are : Product Security Security Operations Corporate Security Security Assurance Application Security Infrastructure Security Security Platforms and Architecture Vulnerability Management Data Security Security Logging Security Incident Response Team (SIRT) Trust and Safety Red Team Threat Intelligence Signals Engineering Corporate Security Helpdesk Support Tech Stack Systems Engineering Teams Field Security Security Compliance Security Governance Security Risk Secure the Product - The Product Security Department The Product Security Department is primarily focused on Securing the Product. This reflects the Security Division‚Äôs current efforts to be involved in the Application development and Release cycle for Security Releases, Infrastructure Security, and our HackerOne bug bounty program. The term ‚ÄúProduct‚Äù is interpreted broadly and includes the GitLab application itself and all other integrations and code that is developed internally to support the GitLab application for the multi-tenant SaaS. Our responsibility is to ensure all aspects of GitLab that are exposed to customers or that host customer data are held to the highest security standards, and to be proactive and responsive to ensure world-class security in anything GitLab offers. Protect the Company - The Security Operations Department Security Operations Department teams are primarily focused on protecting GitLab the business and GitLab‚Äôs platform. This encompasses protecting company property as well as to prevent, detect and respond to risks and events targeting the business and our platform. This department includes the Security Incident Response Team (SIRT) and the Trust and Safety team. These functions have the responsibility of shoring up and maintaining the security posture of GitLab‚Äôs platform to ensure enterprise-level security is in place to protect our new and existing customers. Lead with Data - The Threat Management Department Threat Management Department teams are cross-functional. They are responsible for collaborating across the Security Division to identify, communicate, and remediate threats or vulnerabilities that may impact GitLab, our Team Members or our users and the community at large. Assure the Customer - The Security Assurance Department The Security Assurance Department is comprised of the teams noted above. They target Customer Assurance projects among their responsibilities. This reflects the need for us to provide resources to our customers to assure them of the security and safety of GitLab as an application to use within their organisation and as a enterprise-level SaaS. This also involves providing appropriate support, services and resources to customers so that they trust GitLab as a Secure Company, as a Secure Product, and Secure SaaS Protect the Organization - Corporate Security GitLab is both a company and a product. The Corporate Security department focuses on implementing and protecting the information technology (IT) related systems that the company uses to conduct business internally, and provides the hardware, software, and tools that our team members and 3rd party service providers (aka contractors) need to be productive and get their job done efficiently. The configurations that we implement for team members internally are designed to protect our customers and their data. We have a 24x5 technical support helpdesk for team members and have engineers that configure and maintain many of our company-wide tech stack applications . We invest heavily in device trust, identity management, and infrastructure governance to provide the highest level of security assurance for the administrators of our product and ensure all appropriate controls are in place when handling customer data. Other groups and individuals Security Program Management Security Program Management is responsible for complete overview and driving security initiatives across Product, Engineering, and Business Enablement. This includes the tracking, monitoring, and influencing priority of significant security objectives, goals, and plans/roadmaps from all security sub-departments. Security Program Manager Job Family Security Program areas of focus Drive Accountability & Visibility for Program Objectives & Goals Drive, Gather, & Examine Program Needs & Opportunities through Intra & Inter Organizational Collaboration Provide Insights & Suggestions Impacting Program Strategy & Roadmap Assist in Gathering & Prioritizing Program Risks, Requirements, & Alignment to Influence Remediation Drive & Define Acceptance Criteria, Value Proposition, Milestones to Visualize and Communicate Program Effectiveness Develop Repeatable, Scalable, Efficient, Effective, Processes & Procedures Product development In keeping with our core values and the belief that everyone can contribute , the Security Division is committed to dogfooding and contributing to the development of the GitLab product. Contacting the Team Reporting vulnerabilities and security issues For information regarding GitLab‚Äôs HackerOne bug bounty program , and creating and scheduling security issues, please see our engaging with security page and our Responsible Disclosure Policy . Reporting an Incident If an urgent security incident has been identified or you suspect an incident may have occurred, please refer to Engaging the Security Engineer On-Call . Examples include, but are not limited to: Lost or stolen devices Leaked credentials Endpoint compromise or infection Exposure of sensitive GitLab data GitLab provides a panic@gitlab.com email address for team members to use in situations when Slack is inaccessible and immediate security response is required. This email address is only accessible to GitLab team members and can be reached from their gitlab.com or personal email address as listed in Workday. Using this address provides an excellent way to limit the damage caused by a loss of one of these devices. Additionally if a GitLab team member experiences a personal emergency the People Group also provides an emergency contact email . Sub-groups and projects Many teams follow a convention of having a GitLab group team-name-team with a primary project used for issue tracking underneath team-name or similar. @gitlab-com/gl-security is used for @‚Äòmentioning the entire Security Division @gitlab-com/gl-security/security-managers is used for @‚Äòmentioning all managers in the Security Division Security Division Meta is for Security Division initiatives, ~meta and backend tasks, and catch all for anything not covered by other projects Security Assurance (@gitlab-com/gl-security/security-assurance) @gitlab-com/gl-security/security-assurance/sec-compliance @gitlab-com/gl-security/security-assurance/field-security-team @gitlab-com/gl-security/security-assurance/security-risk-team @gitlab-com/gl-security/security-assurance/governance Product Security (@gitlab-com/gl-security/product-security) Product Security Meta For department wide management and planning issues. @gitlab-com/gl-security/product-security/appsec is the primary group for @‚Äòmentioning the Application Security team. @gitlab-com/gl-security/security-research @gitlab-com/gl-security/threatmanagement/vulnerability-management Security Operations (@gitlab-com/gl-security/security-operations) Security Operations Department @gitlab-com/gl-security/security-operations/sirt is the primary group for @‚Äòmentioning the Security Incident Response Team (SIRT). SIRT (private) for SIRT issues. @gitlab-com/gl-security/security-operations/trust-and-safety is the primary group for @‚Äòmentioning the Trust & Safety team. @gitlab-com/gl-security/security-operations/redteam Corporate Security (@gitlab-com/gl-security/corp) Functional Teams Org Chart Issue Tracker @gitlab-com/gitlab-com/gl-security/corp/managers - Management Team @gitlab-com/gitlab-com/gl-security/corp/helpdesk - End User Services Helpdesk Team (see Support Handbook Page ) @gitlab-com/gitlab-com/gl-security/corp/logistics - Laptop and Phone Logistics @gitlab-com/gitlab-com/gl-security/corp/code - Code Platforms Engineering @gitlab-com/gitlab-com/gl-security/corp/device - Device Trust Engineering @gitlab-com/gitlab-com/gl-security/corp/identity - Identity Engineering @gitlab-com/gitlab-com/gl-security/corp/infra - Infrastructure Governance Engineering @gitlab-com/gitlab-com/gl-security/corp/saas - SaaS and Tech Stack Engineering (shared responsibility handled by Device Trust and Identity Teams) @gitlab-com/gitlab-com/gl-security/corp/dept - Entire Department Slack Channels #security ; Used for general security questions and posting of external links for the great discussions. Company wide security relevant announcements are announced in #whats-happening-at-gitlab and may be copied here. #security-division - Daily questions and discussions focused on work internal to the Security Division. Can be used for reporting when unsure of where to go. #abuse - Used for reporting suspected abusive activity/content ( GitLab Internal ) as well as general discussions regarding anti-abuse efforts. Use @trust-and-safety in the channel to alert the team to anything urgent. #security-team-standup - Channel for daily standups. #incidents and other infrastructure department channels #security-alert-manual - New reports for the Security Division from various intake sources, including ZenDesk and new HackerOne reports. #hackerone-feed - Feed of most activity from our HackerOne program. Other #security-alert-* and #abuse* - Multiple channels for different notifications handled by the Security Division. Use the @sirt-members mention in any Slack channel to tag the members of the Security Incident Response Team (SIRT). Use the @sec-assurance-team mention in any Slack channel to tag the members of the Security Compliance, Risk, and Governance & Field Security teams. Use the @field-security mention in any Slack channel to tag the members of the Field Security team. Use the @appsec-team mention in any Slack channel to tag the members of the Application Security team. Use the @trust-and-safety mention in any Slack channel to tag the members of the Trust & Safety team. Use the @security-identity mention in any Slack channel (or #security-identity-ops ) to tag members of the Identity team. Division, Department, and Team updates We believe it is important to share regular updates at various levels of the Security Division, and we use Slack as the primary mechanism for providing these updates. Our updates are open to all GitLab team members using the following process: Start of each month: A thread per-department is started in #security-division by each department leader (CorpSec, ProdSec, SecAssurance, SecOps). These threads are pinned for the duration of the month. Thread template: <MONTH> <DEPARMENT> Weekly Updates Example: August Product Security Weekly Updates Weekly: At least once a week, teams provide updates they wish to share within the appropriate thread. For example, updates from Vulnerability Management would be placed in the Product Security thread for the given month. These weekly updates, while highly encouraged, are strictly optional and should represent content that ICs and managers feel should be highlighted. Teams are encouraged to define processes and DRIs around these updates that work for them. Individuals providing the weekly updates are encouraged to use the ‚ÄúAlso send to #security-division‚Äù option within the thread to increase visibility. End of each month: Departmental leaders prepare a monthly update, including no more than three updates per team , and post it in #ciso within the first week of the following month. Each monthly update should include a brief preface written by the departmental leader covering any notable themes or other strategic updates. Each of the three updates per-team should be no more than 2-3 sentences and include at least one link to allow readers to gain additional context. Links should be to GitLab Issues or Epics wherever possible. If information is confidential and not able to be added to an Issue or Epic, a note should be added indicating this. It is recommended that departmental leaders build their monthly update over the course of the month via a GitLab issue ( see an example ) in collaboration with their managers and senior ICs. Twice-Monthly Security Leadership Meetings Security Leadership meets twice a month over Zoom to discuss division-wide topics. Individual contributors from across the security organization are invited to present their work, ideas, or projects to this leadership forum. If you‚Äôre interested in presenting: Discuss the topic with your manager first Your manager will help you: Add your topic to the agenda with supporting materials Request an appropriate time slot (5-25 minutes) Coordinate scheduling your presentation Note that these meetings are not on the general Security calendar. Your manager will ensure you receive the meeting invitation for your scheduled time. We encourage all team members to take advantage of this opportunity to share your work and insights with security leadership. Ransomware For an overview of the communication and response process for a suspected ransomware attack, please see our Responding to Ransomware page. Important topics Tokens The following best practices will help ensure tokens are handled appropriately at GitLab. For detailed requirements regarding the use of tokens at GitLab, please see our token management standard . When creating a Personal Access Token , be sure to choose the appropriate scopes that only have the permissions that are absolutely necessary. Oftentimes a Project Access Token might be sufficient instead of a Personal Access Token. Project Access Tokens have a much more limited scope and should be preferred over Personal Access Tokens whenever possible. Always set an expiration for your tokens when creating them. Tokens should preferably expire in a matter of hours or a day. Be mindful to keep these personal access tokens secret. Be particularly careful not to accidentally commit them in configuration files, paste them into issue or merge request comments, or otherwise expose them. Please consider periodically reviewing your currently active Personal Access Tokens and revoking any that are no longer needed. Personal Access Tokens will be highly discouraged within the GitLab production environment, and disallowed/disabled wherever possible. Existing tokens shall remain, but additional issuance will not be permissible/possible. If you believe a personal access token has been leaked, revoke it immediately (if possible) and contact the security team using the /security Slack command. Receive notification of security releases To receive security release blog notifications delivered to your inbox, visit our contact us page. To receive release notifications via RSS, subscribe to our security release RSS feed or our RSS feed for all releases . For additional information regarding security releases, please visit the Delivery Team‚Äôs security releases page. Resources Tools Incident-Tools (private) for working scripts and other code during or while remediating an incident. If the tool is applicable outside of the GitLab.com environment, consider if it‚Äôs possible to release when the ~security issue becomes non-confidential. This group can also be used for private demonstration projects for security issues. security-tools (mostly private) contains some operational tools used by the security teams. Contents and/or configurations require that most of these projects remain private. Calendar We welcome GitLab team members to join meetings that are on our shared Security Calendar . Other Frequently Used GitLab.com Projects Security crosses many teams in the company, so you will find ~security labeled issues across all GitLab projects, especially: gitlab-foss gitlab infrastructure production When opening issues, please follow the Creating New Security Issues process for using labels and the confidential flag. Other Resources for GitLab Team Members Security Best Practices, using 1Password and similar tools, are documented on their own security best practices page. Secure Coding Training . GitLab.com data breach notification policy . GitLab Internal Acceptable Use Policy . For GitLab.com, we have developed a Google Cloud Platform (GCP) Security Guidelines Policy document, which outlines recommended best practices, and is enforced through our security automation initiatives. GitLab Security Tanuki for use on security release blogs, social media and security related swag as appropriate: Web-RGB Print-CMYK and one exclusively for stickers . Security READMEs Working in Security Contributing to GitLab the product as a Security team member Threat Modeling Last modified May 16, 2025: Move existing security standards to new section, which includes an index ( 840eb803 ) View page source -  - please contribute .",
    "headings": [
      "Security at GitLab",
      "Security Vision and Mission",
      "Division Structure",
      "Product development",
      "Contacting the Team",
      "Important topics",
      "Resources"
    ],
    "word_count": 2608,
    "extracted_at": "2025-07-21 20:13:38"
  },
  {
    "document_id": "gitlab-handbook-207780",
    "url": "https://handbook.gitlab.com/handbook/security/product-security/",
    "title": "Product Security",
    "category": "Security",
    "content": "Product Security Product Security‚Äôs mission is to set the standard for product security by fostering a culture of rapid innovation and secure product delivery. We are committed to leveraging the GitLab platform, embodying the pinnacle of internal usage (‚Äòdogfooding‚Äô) practices. Aligned with GitLab‚Äôs overarching information security strategy and its three-year plan, the Product Security Department (PSD) within the Security Division is responsible for crafting and directing a comprehensive vision to bolster the cybersecurity posture of the GitLab platform. What is Product Security at GitLab? At GitLab, product security encompasses a broad range of cybersecurity disciplines that enable product and engineering teams to design, develop, deploy, maintain, and refine GitLab‚Äôs technologies securely. This goes beyond the conventional confines of security, covering everything from protecting developer workstations to ensuring the integrity of our production environments. The Product Security Mission Our mission is to set the standard for product security by fostering a culture of rapid innovation and secure product delivery. We are committed to leveraging the GitLab platform, embodying the pinnacle of internal usage (‚Äòdogfooding‚Äô) practices. By maintaining close collaboration with product teams and contributing significant security features and capabilities to the GitLab codebase, we aim to enhance our operations and be a vital driver of the broader GitLab vision. Multi-Year Product Security Mission Our comprehensive, multi-year product security mission can be found in our internal handbook. Product Security Risk Register Our Product Security Risk Register process details can be consulted on this dedicated page . Collaboration is Key Success in product security is not confined to PSD or even the Security Division. It requires a concerted effort across the entire GitLab ecosystem. Collaboration is crucial, involving not just our security counterparts but the broader organization. Key disciplines and capabilities, from Security Operations to Site Reliability Engineering, while not directly under PSD‚Äôs purview, are vital to our strategy‚Äôs success. Guiding Principles Business Enablement : PSD‚Äôs role is to facilitate GitLab in achieving its business goals by ensuring product teams can operate both efficiently and securely, bolstering customer trust, and utilizing transparency as a strategic advantage. This includes providing insightful product feedback through extensive dogfooding. Empathy and Accessibility: Recognizing that the optimal security solution may not always align with business or customer needs, PSD prioritizes understanding and empathizing with these unique perspectives. This empathetic approach guides our security practices and engagements, aiming to align our methods with the preferences of our customers and internal teams. Pragmatism Over Perfection: Addressing current challenges quickly and effectively is preferred over waiting for a perfect solution. PSD focuses on delivering incremental, tangible value through rapid, short-cycle initiatives, aiming for partial solutions that immediately benefit our long-term goals. Design for Rapid Iteration: Our strategy and roadmaps are crafted to quickly identify and learn from suboptimal decisions by engaging with customers and stakeholders early and maintaining a tight feedback loop. This approach helps us adapt and refine our strategies and approaches efficiently. Data-Driven Decision Making: Data drives our objectives, priorities, and actions, reducing the risk of failure or scope creep. Example useful metrics include root cause analyses of incidents (data within), threat modeling outcomes, and production readiness assessments, among others. Scalability and Repetition: PSD emphasizes scalable, repeatable processes over bespoke solutions, ensuring we can meet growing demands without proportional increases in resources. Decentralization and Empowerment : Acknowledging that product and engineering teams possess deep, specialized knowledge of their domains, PSD advocates for these teams to take ownership of security tasks like secure code reviews and threat modeling. This decentralization fosters a more integrated and effective security posture across GitLab. Integration with Reliability, Quality, Infrastructure, and Platform Engineering: PSD‚Äôs mission to mitigate product security flaws is inherently tied to improving overall product quality and reliability. We aim to leverage and integrate with the practices of existing teams to enhance both security and product excellence. Teams The Product Security sub-department includes the following teams. Learn more about each by visiting their Handbook pages. Application Security Infrastructure Security Vulnerability Management Security Platforms and Architecture Data Security Product Security Department Label Standardization The Product Security Department has standardized its labeling system to improve issue tracking, team identification, and cross-team collaboration across all security teams. Mandatory Division and Department Labels All issues, epics, and merge requests within the Product Security Department must include the ‚ÄúDivision::Security‚Äù and ‚ÄúDepartment::Product Security‚Äù labels. Team-Specific Labels Each team uses a standardized naming convention : Application Security : ~‚ÄúApplication Security Team‚Äù Infrastructure Security : ~‚ÄúInfrastructure Security Team‚Äù Data Security : ~‚ÄúData Security Team‚Äù Vulnerability Management : ~‚ÄúVulnerability Management Team‚Äù Product Security Engineering : ~‚ÄúProduct Security Engineering‚Äù Security Platforms & Architecturee : ~‚ÄúSecurity-Platforms-Architecture Team‚Äù Multiple team labels can be applied to issues requiring collaboration Application Security Application Security home page Data Security GitLab's Data Security team investigates and remediates known unknowns in our data security and privacy posture. Infrastructure Security GitLab's Infrastructure Security provides security oversight of the SaaS. Security Logging Overview Security Logging supports and develops GitLab's security log ingestion platform. Security Platforms & Architecture Security Platforms & Architecture Team Charter Supply Chain Risk Management Strategy This page outlines GitLab's comprehensive approach to supply chain risk management, providing a structured framework for identifying, assessing, and mitigating risks across the software development lifecycle while advancing toward higher SLSA compliance levels. Vulnerability Management Vulnerability Management is the continual process of identifying, prioritizing, mitigating and ‚Ä¶ Last modified July 1, 2025: Fix SPA label ( 25c5952f ) View page source -  - please contribute .",
    "headings": [
      "Product Security",
      "What is Product Security at GitLab?",
      "The Product Security Mission",
      "Multi-Year Product Security Mission",
      "Product Security Risk Register",
      "Collaboration is Key",
      "Guiding Principles",
      "Teams",
      "Product Security Department Label Standardization",
      "Mandatory Division and Department Labels",
      "Team-Specific Labels"
    ],
    "word_count": 902,
    "extracted_at": "2025-07-21 20:13:43"
  },
  {
    "document_id": "gitlab-handbook-278208",
    "url": "https://handbook.gitlab.com/handbook/security/security-operations/",
    "title": "Security Operations",
    "category": "Security",
    "content": "Security Operations Vision Protect company property by identifying, preventing, detecting and responding to risks and security events targeting the business and GitLab.com and its users. We are at the forefront of GitLab‚Äôs security. Mission The Security Operations department focuses on the operational aspect of security. Our department consists of experienced breakers, builders, and defenders from all walks of life and geographic locations. We are responsible for improving GitLab‚Äôs security capabilities, metrics in the areas of security anomaly/event detection, incident response and abuse mitigation of GitLab.com. Our department consists of: Security Incident Response Team (SIRT) - Security incident response and forensic analysis Trust & Safety - Prevention and mitigation of abuse of the GitLab.com platform Red Team - Adversary emulation Threat Intelligence - Actionable insights on real-world threats Signals Engineering - Detection Engineering Contacting Security Operations Slack channel to interact with the Security Operations Department #security-operations The Security Operations department follows the Security Team On-Call Rotation with more details available in Security Operations On-Call How to Engage the Security Engineer On-Call Common Links GitLab Security Division Group (GitLab) GitLab Security Operations Department Group (GitLab) Last modified July 3, 2025: Update SIRT members, grammar & formatting ( 067f051a ) View page source -  - please contribute .",
    "headings": [
      "Security Operations",
      "Vision",
      "Mission",
      "Contacting Security Operations",
      "Common Links"
    ],
    "word_count": 205,
    "extracted_at": "2025-07-21 20:13:45"
  },
  {
    "document_id": "gitlab-handbook-968103",
    "url": "https://handbook.gitlab.com/handbook/security/threat-management/",
    "title": "Threat Management",
    "category": "Security",
    "content": "Security Threat Management Security Threat Management Sub-Department The Security Threat Management sub-department is responsible for identifying and remediating vulnerabilities or threats that may impact GitLab, our Team Members or our Customers and the community at large. Security Threat Management Mission The Security Threat Management sub-department‚Äôs mission is to support the business and our overall security efforts by ensuring that we are focused on real world threats and vulnerabilities that impact us. We accomplish this by: working closely with engineering, product, infrastructure, and other security department teams designing and deploying vulnerability and threat management processes conducting in-depth security related research and assessments transparently communicating important information externally to customers and the community alike Teams The Security Threat Management sub-department includes the following teams. Learn more about each by visiting their Handbook pages. Security Identity Engineering leads the technical strategy and automation implementation of next-generation identity and access management (IAM), role-based access control (RBAC), and administrative access controls for internal GitLab systems, cloud infrastructure, and tech stack applications. Identity Engineering Team The Identity Engineering team leads the technical strategy and automation implementation of identity and access management (IAM), role-based access control (RBAC), and administrative access controls for internal GitLab systems, cloud infrastructure, and tech stack applications. The Security team focuses on customer and product trust, while the Business Technology and IT team focuses on compliance and financial trust. Last modified June 27, 2024: Fix various vale errors ( 46417d02 ) View page source -  - please contribute .",
    "headings": [
      "Security Threat Management",
      "Security Threat Management Sub-Department",
      "Security Threat Management Mission",
      "Teams"
    ],
    "word_count": 246,
    "extracted_at": "2025-07-21 20:13:46"
  },
  {
    "document_id": "gitlab-handbook-32197",
    "url": "https://handbook.gitlab.com/handbook/security/security-assurance/",
    "title": "Security Assurance",
    "category": "Security",
    "content": "Security Assurance Security Assurance Mission and Vision Our mission is to provide a high level of assurance that Gitlab (the platform and company) is secure. Our vision is to be a trusted sales enablement partner that is recognized internally and externally for its collaborative and transparent security assurance program, powered by AI and automation. This will be achieved through 10 strategic objectives: Establish GitLab as a thought leader in DevSecOps and AI. Accelerate the sales cycle to enable Sales to acquire new customers and reduce customer churn. Align Security Assurance with strategic business objectives and develop oversight for continuous alignment Enhance the efficiency and effectiveness of Security Assurance through automated and custom-built solutions Facilitate strategic initiatives to expand and improve GitLab‚Äôs external Security brand. Identify, manage, and reduce security risk through cross-functional collaboration, strategic prioritization, and proactive mitigation including governance over data security and resilience programs. Proactive compliance initiatives to maintain competitive advantage and enable customer acquisition through alignment with regulatory and industry specific requirements. Intra-division collaboration to enable successful, timely, and cost effective program and project initiation, management, and delivery through repeatable and scalable processes with consistent measurement and actionable reporting. Influence product development and enhancement through deliberate use and delivery of actionable feedback. Intra and Inter-division collaboration to enable effective and efficient identification and remediation of compliance findings. Security Assurance Department Structure There are four teams in the Security Assurance department. Governance & Field Security Security Compliance Security Risk Security Program Management Governance Team Page Field Security Team Page Security Compliance Team Page Security Risk Team Page Security Program Management Team Page Core Competencies Field Security Core Competencies Sales Training (Security) Sales Enablement (Security) Customer Assurance (Security) Security Evangelization Security Governance Core Competencies Security Policies, Standards and Control maintenance Security Assurance Metrics Regulatory Landscape Monitoring Security Awareness and Training Security Assurance Application Administration Security Assurance Automation Security Risk Core Competencies Security Third Party Risk Management Tier 2 Operational Security Risk Management Business Impact Assessments Critical System Tiering Security Compliance Core Competencies Continuous Control Monitoring Security Certifications and Attestations User Access Reviews (non-SOX) Observation management for control failures and Tier 3 (system-level) risks GitLab Production Readiness: Compliance Assessment Core Tools and Systems The Security Assurance sub department utilizes a variety of tools to carry out day to day activities. The system admin is responsible for the following: Configuration changes Onboarding/offboarding/transfers (ie Access) Upgrades/patching/incidents Migrations to new environments Restores from backup Admin level audit evidence Quality oversight (limited scope) All other actions are the responsibility of the assigned DRI. System Name System Description Admin DRI Hyperproof Key system utilized for initiating, tracking/documenting, and completing Governance, Risk, and Compliance related activities. Donovan Felton Security Compliance - Madeline Lake Security Risk - Ty Dilbeck Authomize Key system utilized by Security Compliance for User Access Reviews Alex Frank Platform - Alex Frank Custom Connectors - Byron Boots Safebase Trust center solution to host security collateral for customers to request. Donovan Felton Joe Longo ProofPoint Key system utilized for the creation and distribution of our security training and phishing simulations to provide ongoing testing for adherence of various compliance frameworks. Donovan Felton Joe Longo BitSight BitSight is used to assess and monitor software vendors as part of our Security Third Party Risk Management Program. Ryan Lawson Ty Dilbeck GitLab - Security Assurance Projects Primarily used to engage stakeholders via issues, updates to Security Assurance related handbook pages, etc. Security Assurance Senior Director Each Team is responsible for their Projects, but everyone can contribute Contacting the Team Join our slack channel: #sec-assurance Email: security-assurance@gitlab.com Team READMEs Byron‚Äôs README References Check out these great security resources built with our customers in mind: GitLab‚Äôs Customer Assurance Package GitLab‚Äôs Security - Trust Center GitLab‚Äôs Security Team Page Automation and Compliance Purpose The goal of this handbook page is to document the goals and priorities for the automation in ‚Ä¶ Field Security Team Governance and Field Security team charter Field Security Team The Field Security team serves as the ‚Ä¶ Observation Management Procedure This procedure details the and remediation process for observations. Production Readiness: Compliance Assessment The Compliance Production Readiness Assessment is a process designed to make it clear what obligations systems owners have for configuring and hardening a system/tool/service in order for GitLab to meet its compliance and regulatory obligations. Security Compliance Team Security Compliance Team Security Enablement Team Charter Team Charter Mission The mission of the Security Enablement team is to: (i) drive the development of ‚Ä¶ Security Governance Program Security Governance Program Security Risk Team Security Risk Team Charter Security Terms Glossary A glossary of common Security Terms that may be encountered in Security Assurance documentation. Technical and Organizational Security Measures for GitLab Cloud Services Technical and Organizational Security Measures for GitLab Cloud Services Technical Security Validation Technical Security Validation Last modified February 18, 2025: Adding updated vision to handbook ( b61b39aa ) View page source -  - please contribute .",
    "headings": [
      "Security Assurance",
      "Security Assurance Mission and Vision",
      "Security Assurance Department Structure",
      "Core Competencies",
      "Field Security Core Competencies",
      "Security Governance Core Competencies",
      "Security Risk Core Competencies",
      "Security Compliance Core Competencies",
      "Core Tools and Systems",
      "Contacting the Team",
      "Team READMEs",
      "References"
    ],
    "word_count": 815,
    "extracted_at": "2025-07-21 20:13:48"
  },
  {
    "document_id": "gitlab-handbook-463172",
    "url": "https://handbook.gitlab.com/handbook/marketing/",
    "title": "Marketing Overview",
    "category": "Marketing",
    "content": "Marketing GitLab Marketing Handbook: Brand and Product Marketing, Integrated Marketing, Sales Development, Marketing Strategy and Platforms, Enterprise Data, Developer Relations, and Corporate Communications Welcome to the GitLab Marketing Handbook The GitLab Marketing team operates as one team and is organized by the following departments: Integrated Marketing , Brand and Product Marketing , Marketing Operations and Analytics , Sales Development , Enterprise Data , Corporate Communications , and Developer Relations . This page documents our shared team philosophy and processes, while the individual department handbooks contain more detailed information. Marketing Purpose GitLab is the leading DevSecOps Platform that empowers organizations to deliver quality software faster and more efficiently while strengthening security and compliance. The marketing team‚Äôs purpose is to amplify the value of the GitLab platform, authentically and transparently, by putting customers and the community at the center of everything we do. Marketing Alignment As the GitLab Marketing team puts customers at the center of everything we do, the marketing strategy aligns with the customer journey. The journey‚Äôs purpose is to provide a clear and cohesive experience to a prospect/customer from the minute they become Aware of GitLab, to Considering the platform and Converting into a happy customer, and then of course Expanding over time and becoming an Evangelist . Each stage has a purpose which is the guiding indicator for the marketing team to measure our success. Everything the team plans and executes in the short and long term will revolve around the customer journey, and we will also measure our success along each step to hold ourselves accountable. Marketing Strategy Our FY25 Marketing Strategy and Plan can be found in the internal handbook . Marketing OKRs Each quarter, the Marketing team creates OKRs (Objectives and Key Results) . Each department within the Marketing team manages their own cascading OKRs. Team members can access the filtered OKR search . How we work Value-driven Marketing Team How we work as one team aligns with the GitLab Values . Results - The team measures success together along the customer journey. Each quarter, we align CMO OKRs based on company goals set in the company OKRs. This helps us stay aligned with company-level goals while also understanding if what we are doing quarter over quarter is moving the needle on our marquee metrics along the customer journey. Being data-driven as a team is essential for team success. Iteration - Like the rest of the company, we aspire to be agile and experimental where possible. In every area possible, we roll out campaigns, brand updates, messaging, etc. in small iterations, measure the success, and take next steps accordingly. Transparency - We strive to be as transparent as possible in all areas of marketing. We welcome thoughts and feedback from each other, other GitLab team members, and the community at all times. Collaboration - A major key to success is operating as one team. Leveraging the different backgrounds, cultures and, skill sets of an entire company and community, the marketing team operates in a way where everyone can contribute. Collaboration is key to taking Marketing to the next level. Diversity, Inclusion and Belonging (DIB) - With GitLab team members being located across the world, we strive to always keep DIB at the core of everything we do. Like the rest of GitLab, we follow asynchronous meeting principles, welcome diverse perspectives, and as marketers, foster an environment where quirkiness is welcomed. Efficiency - We keep efficiency at the forefront of everything we do. Whether it is bringing in marketing technology to automate menial tasks and foster collaboration, finding ways to save cost, or simply doing the right things to be respectful of others‚Äô time, efficiency drives faster results for marketing. Team Meeting Cadence Monthly Marketing All Hands (All Marketing team members) Goal : Align all Marketing team members on activities in progress to achieve our goals, and update the team on cross-functional items. The meeting is 50 minutes and runs as follows: Always begin by welcoming our newest GitLab Marketing Team Members Celebrate well-deserved promotions CMO Top of Mind (5 items per month) ~20 minutes of CMO Leadership sharing updates ~20 of either marketing team member updates (to be added during the call for items announcement prior) or special guest from another GitLab org The remaining time for Q&A and most importantly‚Ä¶recognition! All team members are encouraged to bring forward discussion topics that they want to share with the team or to have covered during the call. Quarterly CMO Q&A (one session for each department) Goal : Provide the team a smaller forum to ask any questions they may have, offer feedback, and brainstorm ideas directly with the CMO Weekly CMO Leadership Direct Reports Team Meetings (Each manager with their direct team) Goal : Foster an environment to empower managers overseeing different functions to collaborate and share ideas and feedback. Weekly Direct Reports Meetings (Each manager with their direct reports) Goal : For managers to work with direct reports on removing roadblocks, brainstorming, coaching, and providing/receiving feedback. Contacting Marketing Getting Help by Common Topics Topic Where to reach out Sub-Team Blog posts, webcasts, the newsletter or other marketing content #content Content Swag #swag Brand Design requests, logo usage questions #marketing-design Brand External PR (public relations) agency, discuss GitLab media mentions, and evaluate speaking/podcasting/commentary opportunities #external-comms Corporate Communications Anything regarding the marketing website and website development #digital-experience-team Digital experience Questions about tools in the marketing tech stack , evaluating new marketing tools, marketing system process improvement #mktgops Marketing Operations Rules on legally compliant language for marketing communications ( internal only ) #mktgops Marketing Ops Salesforce #sfdc-users Sales Operations (not marketing) A complete list of marketing slack channels can be found here . General Questions and Feedback GitLab Marketing public issue tracker ; please use confidential issues for topics that should only be visible to team members at GitLab Slack channel ; please use the #marketing Slack channel for questions that don‚Äôt seem appropriate to use the issue tracker CMO Requests Please follow the CMO handbook for review request workflows, and communication guidelines. Social Requests All teams are responsible for requesting social posts themselves. If you are not the DRI on a specific category or campaign and want to request a social post, please reach out to the teams‚Äô point person identified below as a first step. Team Members in these roles reserve the right to say no to your request. If they say yes, coordinate with them to create a new social request issue so that the social team can process the request and schedule the post(s). The point person on the team or a member of the marketing or social teams may adjust copy to ensure consistency in brand voice. Events: Jr. Content Editor Release & technical posts/product updates: Technical writing User questions/comments on Twitter/X: Social Marketing or Developer Relations team Leadgen campaigns: Content team UX Design: UX Lead Press/media coverage: Post in #external-comms for assistance from the Corporate Communications team Social media, reshares of mentions, CEO Statements/posts: Post in #social_media_action for assistance Company Spokesperson Speaking on behalf of GitLab at a conference, to media or on a podcast as a GitLab team member is a significant responsibility. Please see the Corporate Communications Handbook Page for guidelines and trainings. Blog post editing Product release posts: Product team Technical community posts/tutorials: Developer Advocacy and Blog editorial team CEO statements/updates: CMO All other blog posts: Blog editorial team Guidelines for how to pitch and submit a blog, including templates and formatting, can be found in the Blog Handbook . Newsletter Marketing Newsletter Marketing and the Editorial team send out a monthly developer newsletter, called ‚ÄúDevSecOps Download‚Äù, to our newsletter subscribers . The newsletter always includes information about the latest release post, links to our latest blogs, plus additional content for DevSecOps teams. The goal for this newsletter is thought leadership and awareness. To add a content suggestion, please create an issue with ‚ÄúDevSecOps Download Content: [subject]‚Äù in the title (no template necessary) and tag @sgittlen (Sandra Gittlen, Blog Managing Editor). Anyone in the company can add suggestions, but the Blog Managing Editor will determine the final content. Other Newsletter To request a newsletter to be sent to an audience outside the newsletter subscribers , please create an issue in the Campaigns project , using the request_email_newsletter issue template. Newsletter requests should be submitted no less than 5 business days before the intended send date to ensure there is enough time for Content and Marketing Programs Manager‚Äôs (MPM) review and set up workflow. Community Newsletter The community newsletter is managed by the Developer Relations team, dedicated to sharing relevant developer content, highlighting contribution opportunities, and updating community members on upcoming events. We aim to keep our contributors involved and connected with the wider community. This newsletter will not be used to drive or generate leads. To submit to the newsletter, please follow the handbook instructions . Sponsorship We are happy to sponsor events and meet-ups where a marketing benefit exists, subject to approval by Field Marketing Managers. These sponsorships may be in cash or in kind, depending on individual circumstances. Organizational or project sponsorships may also be considered where a marketing benefit exists. Typically, these sponsorships will be in kind - e.g., developer time commitments, or subsidized / free GitLab licenses . Cash sponsorship of projects or organizations may be considered only in exceptional cases - for example, if a project or organization that GitLab depends on is struggling to survive financially. Marketing Slack Channels We use Slack internally as a communication tool. The Marketing channels are as follows: #marketing : General marketing channel. Don‚Äôt know where to ask a question? Start here. marketing-team-internal : (Private) Read-Only channel for marketing team members, with the ability to post comments. CMO staff has the ability to post. Should a team member want to make a post, please reach out to our Marketing EBA with your written statement and as much as possible, provide an issue or MR with more details. #brand : Connect with Brand Strategy, Brand Marketing, and Brand Design here. #brand_video : Video production and marketing support. #cfp : All event call for papers will be posted here. Learn more in the speaking resources handbook. #cmo : CMO review requests and content shares. cmo-staff : (Private) CMO‚Äôs private staff discussion room #content : Questions about blog posts, webcasts, the newsletter or other marketing content ? This is the place to ask. #developer-relations : A channel for the developer relations team to collaborate. #dev-advocacy-team : Discuss the latest tech in DevSecOps and Cloud-Native with the Developer Advocacy team. You can request speakers, customer consultancy and technical content collaboration and guidance. #digital-experience-team : Channel for connecting with the website development and design teams #digital-marketing : Channel for all advertising, website analytic and general digital programs. #external-comms : To collaborate with our external PR (public relations) agency, discuss GitLab media mentions, and evaluate speaking/podcasting/commentary opportunities. #marketing-design : Discuss, feedback, and share ideas on Marketing Design here. #marketing-campaigns : Discuss, ask questions, stay up-to-date on campaigns and events that are being organized by the Marketing Program Managers #mktgops : Marketing Ops communication channel for questions and project updates mktg-budget-holders : (Private) Discussion among all Marketing team members with budget responsibility #product-marketing : Discuss, feedback related to product news, features and vision #regional-partner-marketing : Discuss, ask questions, stay up-to-date on events that are being organized by Regional Field Marketing, and Channel Marketing #remote : Discuss and share impressions on remote work experience, playbook and strategy. #sales_dev_global : Place for the sales development team to brainstorm amd share ideas. Please refer to the regional Slack channel list to reach SDR/BDR teams in AMER, EMEA, APAC. #sfdc-users : Having issues with SFDC? Ask here first. #social_media_action : Use this channel to communicate and coordinate with the Social Marketing team. You can ask for amplification help and share cool tweets, posts, etc. #swag : Request or question regarding swag. #website : Discuss topics related to website redesign project Automated channels with feeds from different sources: #developer-advocacy-updates : Zapier workflows automatically post GitLab blog posts, Developer Relations social shares, competitive insights, Common Room updates, etc. hn-mentions : Hacker News post feed, automated with Zapier and maintained by the Developer Relations team. social_media_posts : Automated social media post feed. Marketing email alias list Analysts@ company domain: external email address for contacting Analyst Relations at GitLab. Replies are forwarded to Analyst Relations manager and VP Product and Product Marketing Community@ company domain: external email address for sending confirmation emails related to GitLab products. Replies are forwarded to Zen Desk support Content@ company domain: external email address associated with management of our SlideShare account. Replies are forwarded to Content Marketing team and Marketing OPS Manager Events@ company domain: external email address for sending live, VIP & in-person training related emails. Replies go to Field Marketing Managers and Marketing OPS Manager Fieldmarketing@ company domain: external email address for requests to the worldwide Field Marketing team Giveaways@ company domain: external email address for receiving content & social media related promotional giveaways. Replies go to Content Marketing Team and Marketing OPS Manager Leads@ company domain: external email address for internal Lead alerts. Replies go to Marketing OPS Manager News@ company domain: external email address used to send newsletter. Replies go to Marketing OPS Manager and Manager, Content Marketing MPM@ company domain: external email address used to send direct generic requests to the Marketing Program Managers MarketingOPS@ company domain: external email address used to direct generic operational requests to Marketing OPS Manager MarketingSFDC@ company domain: external email address associated with management of Salesforce. Replies forward to Manager, Digital Marketing Programs; Field Marketing Manager; Product Marketing Manager; and Manager, Content Marketing SecurityAlerts@ company domain: external email address used to send security alerts. Replies go to Marketing OPS Manager Sponsorships@ company domain: external email address used to manage sponsor requests from community. Replies forward to Developer Relations Team Support@ company domain: external email address for sending Breaking Change and/or support related customer communications. Replies go to Zen Desk support Surveys@ company domain: external email address for sending the Developer Survey and/or related surveys. Replies go to Content Team and Product Marketing Manager Webcasts@ company domain: external email address for sending webcast related emails. Replies go to Marketing OPS Manager and Marketing Program Managers on24questions@ company domain: external email address used for collecting privately asked questions in On24 webinars Get to Know the Marketing Team Marketing Team READMEs Get to know the people who work in GitLab‚Äôs marketing team by visiting our READMEs . Learn about the Marketing Departments Marketing Functional Conversations are modeled after Group conversations. While Group Conversations offer high-level insights, Marketing Functional Conversations are meant to drill deeper into the various functions within the Marketing Department. The goal of Marketing Functional Conversations is to create increased awareness and mutual understanding of the functions within Marketing. Awareness and understanding is an essential building block for effective collaboration. Recordings of the Marketing Functional Conversations can be found on the GitLab Unfilitered YouTube Channel Brand and Product Marketing Product and Brand Marketing represents the GitLab story at the brand, solution, product, and technical levels. We accelerate GitLab‚Äôs path to market by developing market insights, leadership positioning, messaging, and narratives that elevate our brand, show value in our solution, and fuel demand for our platform. We activate brand ambassadors and customer advocates to show momentum and trust in the market. The team includes Solutions & Product Marketing, Brand Marketing, Design, and Content. Handbook Handbook Links Brand Merchandise Handling (Swag) Product and Solution Marketing Core Product Marketing Competitive Intelligence Analyst Relations Customer Advocacy Design Content Integrated Marketing The Integrated Marketing team is focused on creating awareness, generating demand and collaborating with the broader ecosystem globally, through a co-ordinated and unified approach. We connect the dots and bring content and messaging to life by leveraging various channels as our levers to communicate across segments, regions and personas. The team includes Field Marketing , Global Channel Marketing , Corporate Events , Account Based Marketing , Integrated Campaigns , Lifecycle Marketing , Digital Strategy and Digital Experience . Handbook Handbook Links Field Marketing Channel Marketing Corporate Events Account Based Marketing Integrated Campaigns Lifecycle Marketing Digital Strategy Digital Experience Marketing Website Sales Development The Sales Development organization is focused on serving the needs of prospective customers during the beginning of their buying process. The Sales Development department is composed of 2 groups: the SDR team who handles all the inbound interest and the BDR team who specializes in outreach of prospective customers. When prospective customers have questions about GitLab, the SDRs assist them or connect them to a technical team member as needed. During the initial exploration, if the prospective customer is interested in continuing their exploration of GitLab, SDRs will connect them to an Account Executive (AE) or Strategic Account Executive (SAE). BDRs contact people who work at large organizations to uncover or create early-stage sales opportunities for GitLab SAEs. The BDR team will plan with their paired Sales counterpart to approach interesting accounts and develop a plan for prospecting including contact discovery, understanding enterprise-wide initiatives that GitLab could assist with, and ensuring accurate data quality of accounts and contact in salesforce.com. Handbook Marketing Operations and Analytics Marketing Operations and Analytics includes Marketing Operations, Marketing Analytics, and Globalization and Localization. The team focuses on enabling efficient operations and actionable analytics insights, working across all Marketing teams. The team also owns the MarTech stack used by Marketing. Handbook Handbook Links Marketing Operations Marketing Strategy & Analytics Globalization & Localization Enterprise Data The GitLab Enterprise Data Team is responsible for empowering every GitLab team member to contribute to the data program and generate business value from our data assets. Handbook Developer Relations Developer Relations drives platform awareness and adoption by reaching deep into wider communities and engaging developers where they are. GitLab currently engages with more than 3000 developers every month on GitLab.com alone, and receives more than 250 contributions every month, giving us a unique level of influence in the DevSecOps space and helping accelerate our innovation. Our ultimate goal is to raise awareness of GitLab and drive customer success by winning the hearts & minds of developers through best-in-class technical enablement and an active community of contributors. Handbook Handbook Links Contributor Success Developer Advocacy Community Programs Education Program Open Source Program Corporate Communications The mission of GitLab‚Äôs Corporate Communications team is to amplify GitLab‚Äôs product, people and partnerships in the media, via social media channels and through award wins. This team is responsible for global public relations (PR), social media, and executive communications (speaking). Handbook Handbook Links Social Marketing Speaking Resources Incident Communications Plan Marketing Calendar FY25 All-Marketing SSoT Calendar The marketing team utilizes a single all-marketing calendar where everyone can contribute, and we can answer key questions (using pre-set filter views) related to upcoming marketing plans. Note: this calendar links to our internal handbook page. Please do not filter the entire doc. Instead, you may use pre-set filter views (click down arrow selector next to the filter icon on the bookmark bar) to see activities grouped by GTM Motion, segment, region, team, language, and more. If there are other views you would find helpful, please feel free to duplicate an existing filter view, and include some sort of categorization (i.e. team, segment, etc.). You can do this by going to a similar filter view, and clicking on the top right gear icon, then selecting Duplicate . For more information about adding events to All-Marketing SSoT Calendar, please click here . Marketing Team Processes This front page of the Marketing Handbook is intended to serve as the external face of the marketing team. We‚Äôve created a dedicated Team Processes page that is intended to house our internal processes, workflows, and guidances relevant internally to the marketing team. Visit the Page Account Based Marketing Account Based Marketing Handbook Blog Handbook Everything you need to know about suggesting and publishing a post on the GitLab Blog. Brand and Product Marketing GitLab Brand and Product Marketing Handbook Chief Marketing Officer GitLab CMO Handbook: Review requests and communication guidelines CI/CD GTM Sales Plays description to add CMO Shadow Program GitLab Marketing Handbook: CMO Shadow Core DevOps Solutions Core DevOps Solution Definition A DevOps solution is: A customer problem or initiative that needs a ‚Ä¶ Corporate Communications Handbook Mission Statement, What We do, Team Norms, Contact Info and Resources for Corporate Communications at GitLab Demand Generation Demand Generation at GitLab, including Marketing Campaigns, Digital Marketing, and Partner & Channel Marketing. Developer Relations The Developer Relations team supports GitLab's mission by working with our community to ensure they receive support and recognition for contributing to GitLab. Digital Experience Handbook Learn more about the Digital Experience purpose, vision, mission, objective and more in this handbook. Field Marketing The role of Field Marketing at GitLab is to work closely with sales to support marketing messages & pipeline building at a regional level through in-person and virtual interactions. FY22 Marketing Plan FY22 Marketing Plan FY23 Marketing Plan FY23 Marketing Plan GitLab Event Information Events at GitLab This page outlines details for in-person events. For virtual event information, ‚Ä¶ GitLab Marketing Team READMEs Learn more about working with various members of the marketing team GitLab Positioning FAQs What is GitLab? GitLab is an open-source, complete DevOps platform, delivered as a single ‚Ä¶ Global Channel Marketing Global Channel supports global channel sales objectives and provides support to the GitLab channel partner community and customers. Growth Direction Growth Section Overview The GitLab Growth section is dedicated to making it easier for teams to find ‚Ä¶ Inbound Marketing Handbook Inbound Marketing Handbook Integrated Campaigns GitLab Marketing Handbook: Integrated Campaigns Integrated Marketing Integrated Marketing at GitLab Intra-Department Learning: Marketing Functional Conversations The goal of Intra-Department Learning is to create, conduct, and host cross-department learning sessions to drive collaboration and understanding of marketing functional team priorities. Journeys Introduction As a company we have to be great at providing multiple journeys. The contributor, user, ‚Ä¶ Lifecycle Marketing Lifecycle Marketing Handbook Localization Learn more about the Localization team's vision and processes. Marketing - Emergency Response GitLab's email response process for marketing emergencies Marketing Analytics Marketing Analytics supports the entire Marketing team to develop and execute a Global Marketing Strategy by working with Marketing Leadership and GTM teams as well as owning the overall measurement strategy for GitLab marketing. Marketing Career Development - Overview This page details the marketing career development program. Marketing Department Efficiency Working Group - FY24 The Efficiency Working Group aims to identify and solution 3-5 key areas for efficiency improvement within the Marketing Department. Marketing Operations Marketing Operations (MktgOps) supports the entire Marketing team to streamline processes and manage related tools. Due to those tools, we often support other teams at GitLab as well. Marketing Project Management Guidelines This is a work in progress for the Marketing Project Management Simplification project. Sub Pages ‚Ä¶ Marketing Strategy & Platforms Learn more about the Marketing Strategy & Platforms. Marketing Team Processes - How We Work This page is meant to house resources and processes for the marketing team. Prescriptive Buyer Journeys Prescriptive Buyer Journeys Sales Development The purpose of this page is to act as the homepage of the sales development org's handbook presence. Sales Plays Sales plays are designed to improve the quantity of opportunities and closed business with defined Land and Expand sales motions SMB Marketing Who we are SMB Marketing addresses the SMB Segment in support of SMB Sales, Sales Development (SDR) ‚Ä¶ Team Member Social Media Policy This is the GitLab employee social media policy The Source Handbook Everything you need to know about The Source, GitLab‚Äôs thought leadership portal. User Engagement User Engagement is one of GitLab's top 12 cross-functional initiatives. The goal is to strengthen our developer brand and increase contributors per month to GitLab. UTM Strategy Everything you need to know about our UTM strategy, which enables insights through the connected/resulting Tableau dashboards. Virtual Events An overview of virtual events at GitLab including webcasts, virtual workshops, and external virtual events. Last modified June 27, 2025: Remove company OKR process ( 99161f51 ) View page source -  - please contribute .",
    "headings": [
      "Marketing",
      "Marketing Purpose",
      "Marketing Alignment",
      "Marketing Strategy",
      "Marketing OKRs",
      "How we work",
      "Team Meeting Cadence",
      "Contacting Marketing",
      "Getting Help by Common Topics",
      "General Questions and Feedback",
      "CMO Requests",
      "Social Requests",
      "Company Spokesperson",
      "Blog post editing",
      "Newsletter",
      "Sponsorship",
      "Marketing Slack Channels",
      "Marketing email alias list",
      "Get to Know the Marketing Team",
      "Marketing Team READMEs",
      "Learn about the Marketing Departments",
      "Brand and Product Marketing",
      "Integrated Marketing",
      "Sales Development",
      "Marketing Operations and Analytics",
      "Enterprise Data",
      "Developer Relations",
      "Corporate Communications",
      "Marketing Calendar",
      "Marketing Team Processes"
    ],
    "word_count": 4018,
    "extracted_at": "2025-07-21 20:13:50"
  },
  {
    "document_id": "gitlab-handbook-579921",
    "url": "https://handbook.gitlab.com/handbook/marketing/team-member-social-media-policy/",
    "title": "Team Member Social Media Policy",
    "category": "Marketing",
    "content": "Team Member Social Media Policy This is the GitLab employee social media policy Introduction We recognize that many team members engage in social media activity. This policy establishes a set of rules and guidelines for any activity and participation on social media channels when commenting about GitLab or GitLab-related topics. These rules are intended to be adaptable to the changes in technology and norms of online communication and behavior and may be amended by GitLab at any time, for any reason, without notice to team members. However, we will work to be as transparent as possible when communicating changes, what those changes are, and when they are expected to go into effect. This policy also applies to social media activity when on or off duty, while using the Company‚Äôs or personal electronic resources, and whether the team member posts anonymously or using a pseudonym. Be diligent, and if it‚Äôs questionable, don‚Äôt say it. You are personally responsible for the social posts, likes and shares, and replies you post on social media while representing GitLab. Everything you publish is publicly viewable and will be available for a long time, even if redacted. Remember that you represent GitLab and our culture. When commenting on posts, please keep in mind: ‚ÄúDon‚Äôt argue but represent‚Äù. Social Media Policy for Team Members You‚Äôll be asked to confirm reading this section during your onboarding to the company. We‚Äôll ask everyone to review and sign off on review in partnership with legal for existing employees. If you‚Äôve been identified as a spokesperson for the company or a specific function within GitLab, you may have unique circumstances. Please refer to your team guidelines or the communications team for more information about your work as a spokesperson and the social media policy. Definition of social media The GitLab Social Media policy for team members applies to traditional social media channels, like Twitter, LinkedIn, Facebook, and Instagram, as well as ‚Äúsocial-like‚Äù sites, like YouTube, HackerNews, Reddit, blogs (on the GitLab website, Medium, or any other online journals or diaries), message boards, forums (including the GitLab Forum, private groups or forums on public sites like Facebook Groups), and private/direct messages on public social media channels (Twitter DMs, Instagram Directs, etc.). The term ‚Äúsocial media‚Äù applies to any online technology in use now or in the future that enables you to send or receive information and communicate or interact with others. Any site where you can share a post or comment on a post would be considered a social media website for the purposes of this policy. Exclusions for anonymous review sites This policy is not intended to limit team members from sharing their feedback or reviews of their experiences at GitLab on sites like Glassdoor, Fishbowl, Indeed, or similar sites. While we encourage you to share feedback with your manager and the people ops team, we celebrate our value of transparency and welcome feedback from team members on these sites, as long as the feedback follows our SAFE Framework . All other GitLab codes of conduct and policies also apply to our social media policy Please adhere to the Community Code of Conduct , Anti-Harrassment Policy , which includes sexual harrassment and discrimination policies, and our Code of Business Conduct and Ethics . These policies all apply to team member behavior within social media and in public online spaces. Social Media sometimes generates press and media attention or legal questions Please refer all inquires to the Communications Team in the #external-comms Slack channel What you should do Click each recommendation below for more details Do disclose that you're a team member If you talk about work-related matters within your job responsibility area, you must disclose your affiliation with GitLab. If you have a vested interest in something you're posting on social, point it out. You can identify yourself as a team member in your profile bio, list GitLab as your employer, or mention that you're a team member in the post itself. You can also add #LifeAtGitLab to the end of your social posts about GitLab-related topics. How you choose to disclose is up to you. Do state that it's your opinion When commenting on the business, you're not commenting for the business. Unless authorized to speak on behalf of GitLab and through comms training. However, don't add your opinion to content from a news source that includes financial figures or forecasts. If you would like to share content that includes financial figures or a forecast, please only share it without adding your commentary. Not sure if you should share? Ask in the #safe Slack channel. Do protect yourself Consider what information you're sharing online and how it can be used to identify you. Everyone has a different level of privacy they want to abide by, have you thought about yours? Some of the things folks opt-out of to protect their privacy include: not tagging specific locations in posts while you're still on-site, not including phone numbers or email addresses in plain text because bots sweep for contact info, and not showing the faces of their children on public channels. You aren't required to follow any of these specifics, but consider what kind of information will be available to the public when publishing on your social media profiles. Do act responsibly and ethically Don't misrepresent yourself. If you're not a director in your role, don't say you are. Don't imply that you're a member of a team if you're not. Share your thoughts, but disclose your role. Furthermore, our team members are bound by the same code of conduct we provide to the community . Do try to live our values Easier said than done, but consider our values when engaging online. The same space and respect we grant each other is needed with strangers on social media. Do share GitLab content that is already published If it's written in a blog, presented at a public conference, or simply on GitLab's website, it's publicly available to share on social media. GitLab's social media advocacy tool will have a lot of preapproved content, including links, images, and copy, available to all team members. Anything already in the public domain, posted in the #newswire Slack channel, or in the company social media advocacy tool can and should be shared freely. Some items in the #newswire Slack channel may say \"shareable internal only\", so please do not share those stories on social media. Examples of what you should, and are encouraged, to share on social media GitLab blogs and press releases Positive news media that mentions GitLab and is shared in the #newswire Slack channel (team member adds no commentary/copy to the post) or is available to share in the social media advocacy tool (with commentary/copy to share) Industry reports that are publicly available and are ungated Videos from either our brand or Unfiltered YouTube Channels Third-party articles that don‚Äôt bash competitors (mentioning them or comparing GitLab and competitors is fine) Retweeting or sharing GitLab brand social channel posts from Twitter , LinkedIn , Facebook , or Instagram All of the above from our eco and alliance partners Items that are not connected to your job or GitLab at all! Social Media is best when you bring your true-self to the mix. DevOps isn‚Äôt the only thing you‚Äôre interested in, so consider posting about other passions and topics. Learn more about what is encouraged and how GitLab helps to enable you to become great at using social media on our team member advocacy page. It‚Äôs your job to protect GitLab, our customers, and our team members Whether you‚Äôre an intern or our CEO, protecting the GitLab brand, the company, and our entire team is a part of your job description. You can protect GitLab by not sharing the following data with the public on your social media profiles Click each recommendation below for more details Don't speculate or add forward-looking statements Forward-looking statements predict, project, or use future events as expectations or possibilities. Team Members mustn't speculate or add forward-looking statements to their opinions written on social media. Forward-looking statements could include company valuation, details on customer volume, subscription growth, and more. This would include forecasting, or when data is presented to argue for or against future trends. Sometimes an article from a news source will use speculative information in their story. While this is okay to share, it is not okay to share your commentary with speculative information. Not sure if it's public? Ask in the #safe Slack channel or review the SAFE handbook page . Some language indicators that you're talking about forward-looking statements would be using one of the following words: \"will,\" \"may,\" \"should,\" \"expects,\" \"intends,\" \"plans,\" \"aims,\" \"anticipates,\" \"believes,\" \"estimates,\" \"predicts,\" \"potential,\" \"looking to,\" or \"continue,\". Don't share customer or Team Member personal information Team Members are prohibited from using social media to post or display comments about co-workers or supervisors/managers of GitLab that are knowingly false, vulgar, obscene, threatening, intimidating, disparages GitLab‚Äôs products or services, depicts the team member engaging in conduct that is unlawful or in violation of GitLab‚Äôs workplace policies against workplace violence or discrimination and harassment based on any protected status under federal, state or local law. Allow the team member(s) to own the decision on what is and isn‚Äôt public about them. For customers, any customer with a published case study is available to share publicly. If you would like to share information about a customer please reach out to the customer reference team first before sharing any content on social media. Don't bash competitors While sharing your opinion is a critical part of being authentic on social media, it's equally important to limit overly negative responses to competitor posts. We don't like trolls, and neither do our competitors. Providing constructive feedback is read very differently than trolling. Trolling occurs when you respond to social media posts with intentionally provocative or offensive messages. Don't share legal information Never share anything to do with a legal issue, legal case, or attorneys without first checking with legal in the #legal Slack channel. Note, that if you're looking to connect on whether or not you should publicly disclose legal issues, the answer is probably a no. Don't share confidential information Don't share information that is considered personal or GitLab proprietary confidential. If it's related to work in an issue, consider reviewing whether or not the issue was made confidential. It is inappropriate to use or disclose confidential personal information about another individual or use or disclose GitLab's proprietary confidential information in any form of social media. Confidential personal information refers to information that could be used to commit identity theft such as an individual's Social Security Number, financial account numbers, driver's license number or personal medical information (including family medical history). GitLab's proprietary confidential information refers to internal information regarding GitLab's finances, future business performance and business plans, business and brand strategies and information which is or relates to GitLab's trade secrets. Don't use third-party materials (including images, videos, or text) without permission from the owner Images, videos, and text, even if posted publicly on the internet, are copyright-protected materials and should not be used without the permission of the owner. If you're unable to obtain permission from the owner, hyperlink to the relevant material rather than copying it. Consider using a source of permissively-licensed images, like unsplash.com , which provides free to use materials which do not require attribution . You can (and are encouraged to)share GitLab-made assets even if these contain third-party materials If you're unsure what's permissible, reach out to the #legal Slack channel. Don't create images with, or manipulate, third-party logos without the permission of the owner Logos (including those indicating companies, and products and services) are registered trademarks. You must obtain the consent of the owner before using, for any purpose, any third-party logo. If you're wanting to share content from GitLab's website or social channels and it has logos or trademarks from other companies, this is okay to use. The various marketing teams at GitLab are responsibile for confirming the company's use of these logos and trademarks and sharing links or images that GitLab produced does not violate this policy. You can refer to other companies, or products and services, by name (without using a logo) provided that (i) the company, product or service in question could not easily be identified without using its name; and (ii) your use does not imply endorsement by, or affiliation with, the trademark owner. You can (and are encouraged to)share GitLab-made assets even if these contain third-party logos If you're unsure what's permissible, reach out to the #legal Slack channel. Don't use social media, blogs, or other digital channels for GitLab-related communications with other team members While GitLab is a transparent company, we like to keep negative feedback 1:1. Team members should not discuss work-related situations in public forums. For all communications that can be public-facing, please use issues and epics and mark them as not confidential. Connecting with Team Members on Social Media In case you want to connect with fellow team members of GitLab on social media, you have to keep it professional. With this communication, we would like you to consider GitLab‚Äôs Communication Guidelines at all times. Aligned with our Anti-Harassment Policy , it is expected that everyone will contribute to an inclusive and collaborative working environment and respect each other at all times. Mimicking the GitLab brand Keep your identity clear on social media channels by not using the GitLab logo as your profile image, not adding GitLab to your @handle, and not adding the company name to your display names. Upon first glance of your social media profile, there should be immense clarity that you are a team member of GitLab and not GitLab the company. Use common sense when selecting pictures and names to use. We‚Äôll always work to get profile names and visuals updated to reflect who runs the account. If the corporate marketing team comes across profiles that don‚Äôt respond to these requests, we will report them for impersonating our brand. Unauthorized GitLab brand social media accounts As a Team Member of GitLab, you aren‚Äôt authorized to create company/brand social media profiles to use for your work. If promoting content should come from the company, you‚Äôll need to open a request issue with the organic social team . If the corporate marketing team encounters unauthorized profiles, they will be treated as external threats and reported for impersonation. There is no formal method for requesting new brand channels, nor is there an outline for managing to do so. It‚Äôs best to use personally identified social media profiles to share your posts. Contests or sweepstakes on your social media profiles As part of your role at GitLab, you may be responsible for a contest or a sweepstakes with social media elements. It‚Äôs important to follow legal guidelines. Essentially, as a representative of GitLab, if you‚Äôre promoting the contest on your social media channels, it will need to follow the same rules as what the GitLab brand channels will need to follow. You can learn more about legal and contests in the handbook here . Follow website terms of use Most social media websites/services have rules concerning the use of and activity conducted on their sites. These are sometimes referred to as ‚ÄúTerms of Use.‚Äù Team Members must follow the established terms and conditions of use that have been established by the website, social media network, or channel and not do anything that would violate those rules. Ramifications of not following the social media policy If the company finds any statements or claims that are false or misleading, or we discover an activity that does not follow the policy, we will contact you to correct the situation. If you are consistently disregarding the social media policy, especially if you fail to disclose your relationship to GitLab, make false or misleading statements about GitLab or our products and services, GitLab retains the right to discipline, up to termination of employment with anyone that does not comply with this policy. Conflicts with local laws In the event there is any conflict between this social media policy and local laws and/or regulations for your region, the local laws and/or regulations prevail over our policy and must be followed. However, if the conflict is simply because of practice or customs varying between regions, our social media policy must still be followed. Any conduct which is impermissible under the law if expressed in any other form or forum is also impermissible if expressed through social media. See section below for location-specific details that are necessary to review. Location-specific social media policy details United States Confidential proprietary information does not include information lawfully acquired by non-management employees about wages, hours or other terms and conditions of employment, if used for purposes protected by Section 7 of the National Labor Relations Act such as joining or forming a union, engaging in collective bargaining, or engaging in other concerted activity for their mutual aid or protection. GitLab will not enforce the social media policy in a manner that would interfere with team members‚Äô rights under the National Labor Relations Act to discuss the terms and conditions of employment. United Kingdom You may not use data obtained in the course of your employment with GitLab in any way which breaches the provisions of the Data Protection Act 1998. Transform this policy into action with a social media training and certification Take this policy and turn it into a social media certification in less than 45 minutes with the social media 101 training and certification . You‚Äôll find details on the training and what to expect here . Last modified November 26, 2024: Fix broken external links ( bc83f2be ) View page source -  - please contribute .",
    "headings": [
      "Team Member Social Media Policy",
      "Introduction",
      "Social Media Policy for Team Members",
      "Definition of social media",
      "All other GitLab codes of conduct and policies also apply to our social media policy",
      "What you should do",
      "It‚Äôs your job to protect GitLab, our customers, and our team members",
      "Connecting with Team Members on Social Media",
      "Mimicking the GitLab brand",
      "Unauthorized GitLab brand social media accounts",
      "Contests or sweepstakes on your social media profiles",
      "Follow website terms of use",
      "Ramifications of not following the social media policy",
      "Conflicts with local laws",
      "Location-specific social media policy details",
      "United States",
      "United Kingdom",
      "Transform this policy into action with a social media training and certification"
    ],
    "word_count": 2967,
    "extracted_at": "2025-07-21 20:13:52"
  },
  {
    "document_id": "gitlab-handbook-17624",
    "url": "https://handbook.gitlab.com/handbook/marketing/blog/",
    "title": "Blog",
    "category": "Marketing",
    "content": "Blog Handbook Everything you need to know about suggesting and publishing a post on the GitLab Blog. Welcome to the GitLab Blog handbook! The GitLab Blog is managed by the Content Marketing team. The managing editor of the blog is Sandra Gittlen (@sgittlen). What is a blog post? At GitLab, blog posts largely focus on sharing helpful information with the audience ( DevSecOps professionals ). When you suggest or write a blog post, always consider what it offers the reader. If the post is more internal-focused or a personal essay of sorts, it is likely not a fit for the blog (but could go on your personal LinkedIn page). Blogs fall into the following categories: Technical tutorials/how-tos Point of view/thought leadership Introduction to features and capabilities Open source community Customer case studies/interviews Company announcement (done in partnership with Executive comms team) Feature/change/etc. announcement Guest blog to highlight partnerships/alliances Who can publish content to the GitLab Blog? Everyone can contribute at GitLab . For the blog, this means we welcome your blog suggestions, ideas, and drafts. However, the main blog is one of the many official voices of GitLab ‚Äì meaning content that is published there must be carefully vetted to ensure we are accurately representing GitLab ‚Äì both the company and the product. The Blog Managing Editor and the Director of Global Content Marketing are the directly responsible individuals (DRIs) for the official GitLab blog and are tasked with this responsibility. If you have questions about the GitLab Blog, please reach out to sgittlen@gitlab.com . How to suggest a blog idea - NEW PROCESS Please create an issue using the blog submission template . Answer all the questions on the template. They help us provide feedback on your idea. Submit your idea at least two weeks before your targeted publication date. For corporate/comms requests or blogs on a tight turnaround, please submit an issue and reach out to @sgittlen directly. The blog editor will review the pitch and either a) greenlight the post, b) offer suggestions for improvements, or c) explain why the idea might not be a fit for the blog and offer other ideas for getting the message out. **Note: You can also notify the Blog team of a typo or request a change via the blog submission template . External contributions Note: GitLab does not accept unsolicited blog submissions. If you are a GitLab partner and would like to pitch a blog post idea for consideration, please email sgittlen@gitlab.com . If you are a GitLab community member and would like to pitch a blog post idea for consideration, please email contributors@gitlab.com . Please DO NOT SEND drafts of your blogs with your pitch. Pitch ideas must be relevant to the GitLab Blog and our readers and include the following information: What will your blog be about? Please be as specific as possible. Which of the following best describes your blog? (Please check at least one box.) tutorial/how-to on how best to use a feature/capability best practices for how to use the GitLab platform the open source community and GitLab partner/alliance integration other - please explain All blog pitch ideas and submissions will be vetted and reviewed by GitLab team members. Blog editors, please add the following two sentences at the beginning of contributed articles: Editor‚Äôs note: From time to time, we invite members of the community to contribute to the GitLab Blog. Thanks to [entity name] for co-creating with us. External contributions are subject to the External Blog Submissions Terms . Please read this document and agree to terms before submitting material to GitLab. How to submit a blog draft once your idea is approved Once a blog pitch is approved, the author will use one of the following options to submit their draft: Submit via a merge request in GitLab. To do this, please follow these steps to do so from the repo or for the IDE . Please follow them CAREFULLY! Reach out to @sgittlen with any questions. Submit via Decap, our basic content management system, using these steps . Please follow them CAREFULLY! Reach out to @sgittlen with any questions. Submit via Google Docs using the Blog Submission template (Google Doc) to write the blog, ensuring the Google Doc is linked in the issue. All fields in the template will have to be completed for the blog team to accept the submission. The author will tag @sgittlen in the issue, put the doc link in a comment, and share the Google Doc once it is ready to be edited (after all necessary approvals and reviews have been completed). Note: All images must be included inline in the Google Doc. Note: All blog submissions now require a call to action or CTA and you will be asked to provide one in the blog draft template. A CTA is what you want the reader to do next after reading your blog. Do you want them to go to another page and learn more, sign up for a trial, register for a webinar, view a demo, etc.? We will be able to track the CTA as part of our overall blog metrics. Whatever way you choose to submit your blog, please ensure that @sgittlen is tagged. BLOGS CANNOT BE PUBLISHED WITHOUT REVIEW/APPROVAL FROM THE BLOG TEAM. Guide to the frontmatter in the MR The MR will include the following frontmatter. Please see the comments after each section seo: title: the blog post title description: the blog post description <!-- Blog team will fill this area in --> config: slug: blog-post-slug featured: false template: BlogPost <!-- blog team will fill this in --> content: title: the blog post title <!-- ideal length - 55-60 characters --> description: the blog post description <!-- ideal length - no more than 155 characters --> authors: - Blog post author <!-- Format: Sandra Gittlen (if this is your first time contributing, leave blank, and if there are multiple authors, add a comma no space between)--> heroImage: images/blog/hero-images/logoforblogpost.jpg <!-- blog team will fill this in --> date: '2021-03-31' category: engineering <!-- blog team will fill this in --> tags: - community <!-- blog team will fill this in --> body: | add the blog post body text in markdown The blog edit process The blog team will communicate initial edits/questions for the author using the issue and Google Doc. The blog team will then put the blog into the CMS and, if necessary, share a preview link with the author/DRI. Note: The blog will be published from Contentful. If changes are needed post-publication, the author will reach out to the blog team via Slack and explain the change or submit an MR by going to the bottom of the published page and clicking on , which will kick off an MR. The blog team will share the blog‚Äôs URL with the author once it is published. Publishing of blog posts occurs according to an editorial calendar. However, that is subject to change based on blogs that are urgent. The blog team will update authors as to their expected publish dates. Legal review process Some blog posts must be reviewed by legal, in accordance with our Materials Legal Review Process/SAFE program . Authors are responsible for reviewing SAFE guidelines and getting Legal approval before sharing the Google Doc with the blog team. This process can take time, so please plan target publication dates accordingly. GitLab has a bias for action, and the Blog team is no different. However, the GitLab Blog is a public-facing asset and represents the company. If the Blog team has concerns or questions about the information contained in the blog post, the Blog team has the authority to hold a blog post until Legal, Corporate Commmunications, Partner Marketing, the CMO, etc., can review the blog post to mitigate any potential risk for the company. Learn more about the SAFE Guidelines by reading the handbook page and following the Materials Legal Review Process . How to suggest a change to a published blog If you are internal to GitLab and want to suggest a change to a published GitLab blog, please post the change you need in detail with the URl in the #content Slack channel and tag @sgittlen or ping @sgittlen directly in Slack or create an MR with the change needed by going to the bottom of the published page and clicking on ‚Äú,‚Äù which will kick off an MR. If you are external to GitLab, please email Sandra Gittlen at sgittlen@gitlab.com with the details of your suggested change or create an MR with the change needed by going to the bottom of the published page and clicking on ‚Äú,‚Äù which will kick off an MR. Communication with Blog team Chat channels: Use #content for questions (also tag @sgittlen) Use #content-updates to see updates on recently published articles Slack @sgittlen directly Add newsletter content requests to this issue Other related pages Editorial style guide Brand guidelines Monthly release post Considerations when drafting a blog Diversity, Inclusion, and Belonging (DIB) checklist for blog writers It is important that our blog content represents our company values of diversity, inclusion, and belonging. Not all of these points will be relevant to your blog post, but they are important values and practices to be mindful of throughout the writing process. The blog editorial team tries to check for these things, but it is better if all content is created with these values and practices in mind. Tag us or a member of the DIB team if you have questions! Inclusive writing Write short and concise sentences. Clear writing with short sentences makes it easier for the reader to follow along. Limit your use of jargon, and if you must use a jargon-y term, define it on the first instance. GitLab is a global team with a global community, so you want to write for a global audience. This means limiting your use of regional metaphors and not writing in a manner that is United States-centric. Does the post use inclusive language ? Is every individual in the blog post quoted using their preferred pronoun ? Tip: If you don‚Äôt know someone‚Äôs preferred pronoun, just ask them. They should also be included on the team page profile and Slack profile. More DIB writing tips Is your blog post biased? We all have unconscious biases. Check the list of unconscious biases in our DIB handbook page and practice strategies for recognizing and managing yours . If you still have questions, don‚Äôt hesitate to tag the editorial team lead @sgittlen, leads of the appropriate team member resource group (TMRG) in your blog issue, or email diversityinclusionandbelonging@gitlab.com with your questions. Blog categories and tags Categories Use only one of the following categories per post. Do not change the capitalization, spelling, or anything else, otherwise you‚Äôll create another category, which is something we don‚Äôt want to do accidentally. If you‚Äôre not sure which category your post belongs in, just put a placeholder in your MR and leave a comment for your reviewer noting that. agile planning - posts about AgiLe planning ai-ml ‚Äì posts that focus directly on AI/ML in the platform or in the industry as a whole customer stories - posts about how our customers are using GitLab DevSecOps platform bulletin board - where shorter blogs/announcements go DevSecOps - posts more generally about DevSecOps engineering ‚Äì technical, actionable content. Anything covering how to do something, use something, or solve a problem should fall under this category open source ‚Äì stories from or about our community, users, or the wider open source community product - details about features, roadmaps, and strategy news ‚Äì company or product announcements (including policy changes, operational announcements, and breaking changes), news, or events security ‚Äì security-related posts releases - release posts, security and patch releases. Posts in the releases category need to be in the sites/uncategorized/source/releases/posts directory, not sites/uncategorized/source/blog/blog-posts . Please see the Release Post handbook for more. Tags These are included to help readers find similar posts if they are interested in a particular subject. Tags appear at the top of each blog post, and clicking on a tag takes you to the specific /blog/tags/specific-tag where you can view all posts with the specified tag. You can include as many tags as you like, separated by commas. Please only include tags from the following list, and note that they are case sensitive. agile AI/ML automotive AWS bug bounty careers CI/CD cloud native code review collaboration community contributors customers demo design developer survey DevSecOps DevSecOps platform embedded development education (articles about the education sector) events features financial services frontend git GitOps GKE google growth inside GitLab integrations kubernetes news open source partners patch releases performance product production public sector releases remote work research security security releases security research solutions architecture startups testing tutorial UI user stories UX webcast workflow zero trust Media embeds Instructions for including video . Adding code blocks Instructions for adding code blocks . Mermaid charts How to embed mermaid charts into MR . Please read as there are nuances that might prevent your chart from rendering properly. Preparing images If creating an original cover image, the dimensions should be 1800px x 945px for optimal quality on all displays. All images should aim to be less than 1MB. JPEGs tend to be smaller than PNGs so use JPEGs when possible. To resize in Preview go to Tools , Adjust size and adjust the entry in the Resolution field. Preview will estimate what the resulting image size will be before you click OK to confirm. Keep all the images the same width. Screenshots For technical/tutorial posts, please illustrate your examples with code blocks or screenshots. Be consistent with your examples. E.g., if you are using a generic URL to exemplify your steps domain.com , be consistent and keep it domain.com , throughout the post. Static images should be used to illustrate concepts, provide diagrams, elements of the UI or orient the reader. Images should not be used to render commands or configuration which would prevent someone being able to copy and paste. Animated GIFs can be used sparingly where you need to show a process or some event happening over the course of time or several actions, though they should not replace text descriptions or instructions. Use screenshots to identify and localize specific parts of the screen. There are great tools for doing so. For example, Nimbus Screenshot (browser extension), Mac screenshot, Snipping Tool for Windows, and Screenshot Tool for Ubuntu. Important security point: Do not expose your personal details by using your real tokens or security credentials. Use placeholders such as [project's CI token] stub instead. Or blur them if displayed on screenshots. Embedding tweets or Instagram posts Please see the Markdown guide for instructions for embedding posts from social media . Creating GIFs Animated GIFs are very useful to illustrate short dynamic processes, which might be easier to understand with this kind of resource. There are a few ways to create animated GIFs, one of them is using [Giphy Capture], a light-weight app for Mac. Avoid GIFs with a huge file size, they will be difficult to load for users with bad internet connection. In those cases, you can either cut the GIFs in smaller pieces, or record a video, or use a sequential image. Creating Author entries in the CMS Here‚Äôs a set of recommendations when creating an Author entry in the CMS (Decap). Name field This is a required field. It is also a unique field. Author‚Äôs name should be a combination of first and last name only, including composed names. Please avoid adding a job description (use the Role field for this task) or alpha-numeric combinations into this field. No double authors (eg. /authors/<author1>-<author2> ). We can add multiple single authors to blog posts. We should create individual authors and then add them all to other content types as a one-to-many relationship. Same as above, no multiple authors for a single blog post (eg. /authors/<author1>-<author2>-<author3>-and-<author4> ). Role field Current working position or job description. Bio field Biography of the Author. GitLab handle field It corresponds to Author‚Äôs GitLab username in lowercase format. This field has to be unique. Social media handles fields Optional fields for social media handles. Localizing blog posts in the CMS We can publish blog posts in languages other than English. We currently support the following languages: Language URL structure French /fr-fr/blog/YEAR/MONTH/DAY/Title/ German /de-de/blog/YEAR/MONTH/DAY/Title/ Japanese /ja-jp/blog/YEAR/MONTH/DAY/Title/ Please contact the GitLab localization team for more information. How to kick off translations Starting the process of getting a blog post translated is easy. Follow these steps: Create a translation request issue in the Localization project. Pro tip - add the URL for the blog post and a direct link to the Contentful entry. It will be super helpful to you as you track the project. Argo will export the English blog post as JSON and import the translated JSON back into Contentful. Then you‚Äôll be pinged in the issue when it‚Äôs ready for review. Hop into the entry for the blog post and review the translated content. Coordinate with @sgittlen on publishing the translated post. Once published, always verify that it‚Äôs working as expected on about.gitlab.com/blog/. Celebrate your translated blog post by posting it in Slack. Here‚Äôs a video walkthrough of the full process from creating the translation request to publishing on production. Video recording comming soon that demonstrates the following Create issue Argo roundtrip Translation show up in Contentful Review the translations Live previews/changing languages Publish Gotchas When localizing an EN blog post Things to be careful about when localizing an EN blog post. Don‚Äôt change the slug! Tags to keep organized If a post in process of being translating, put the ‚Äútranslation-in-progress‚Äù label on it. This enables the team to easily find all blog posts in Contentful that are in progress of being translated and reviewed. Remove and apply local label to languages the post is translated into. Tag Definition How to use translation-in-progress Notes when a blog post is currently be translated and reviewed Apply when translation request is opened. Remove when post is published language_de-DE Marks entry that is in German Apply to blog post that is translated into German language_fr-FR Marks entry that is in French Apply to blog post that is translated into French language_ja-JP Marks entry that is in Japanese Apply to blog post that is translated into Japanese Blog dashboard How to use the GitLab blog performance dashboard. Git Guide for Blog Contributors A guide for working with Git, terminal, and the www-gitlab-com repository GitLab Release Posts Guidelines to create and update release posts Last modified June 30, 2025: added in a section on the frontmatter ( 8a8788ca ) View page source -  - please contribute .",
    "headings": [
      "Blog Handbook",
      "What is a blog post?",
      "Who can publish content to the GitLab Blog?",
      "How to suggest a blog idea - NEW PROCESS",
      "External contributions",
      "How to submit a blog draft once your idea is approved",
      "Guide to the frontmatter in the MR",
      "The blog edit process",
      "Legal review process",
      "How to suggest a change to a published blog",
      "Communication with Blog team",
      "Other related pages",
      "Considerations when drafting a blog",
      "Diversity, Inclusion, and Belonging (DIB) checklist for blog writers",
      "Blog categories and tags",
      "Media embeds",
      "Adding code blocks",
      "CreatingAuthorentries in the CMS",
      "Localizing blog posts in the CMS",
      "How to kick off translations",
      "Gotchas When localizing an EN blog post",
      "Tags to keep organized"
    ],
    "word_count": 3121,
    "extracted_at": "2025-07-21 20:13:54"
  },
  {
    "document_id": "gitlab-handbook-591514",
    "url": "https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/",
    "title": "Brand and Product Marketing",
    "category": "Marketing",
    "content": "Brand and Product Marketing GitLab Brand and Product Marketing Handbook Welcome to the GitLab Brand and Product Marketing Handbook The Brand and Product Marketing team‚Äôs goal is to accelerate GitLab‚Äôs path to market. We tell the GitLab story at the brand, corporate, solution, and product levels. We develop market insights, leadership positioning, messaging, and narratives that elevate our brand, show value in our solutions, and fuel demand for our platform. We activate brand ambassadors and customer advocates to show GitLab‚Äôs momentum and trust in the market. Team Disciplines ‚Äì What We Do, Why We Do It Brand Brand : We create awareness, trust, and affinity for the GitLab brand. We develop umbrella, corporate-level messaging to establish GitLab as market and category leader. We conduct research to define, evolve, and measure the health of the GitLab brand. We provide brand stewardship and governance, empowering internal and external advocates to become brand champions. Product and Solution Marketing Product and Solution Marketing : We develop insights, positioning, and messaging that communicate the value of our platforms and solutions. Product and Solution Marketing consists of several specialities including core product marketing , customer advocacy , market insights , analyst relations , and competitive intelligence . We create positioning and messaging to fuel demand and adoption of GitLab‚Äôs solutions and products. We develop market and competitive intelligence in order to develop actionable insights on market trends, customer needs, and competitive insights that guide go-to-market and product strategy. We identify, recruit, and activate customer advocates to demonstrate momentum and trust in the market. Creative Design and video - Deliver creative content and experiences that elevate our brand and fuel demand. We develop our brand visual identity design to ensure it stays relevant in the market and reflects the benefits and quality of our product. We are the creative partners for GitLab marketing. We create, conceptualize, and design high quality brand experiences. Content Content - Showcase our leadership through easy-to-find content that is educational, thought-provoking, and market-defining. We create, review, and improve content to establish GitLab as the leader in modern software development and DevOps, while also sharing the company‚Äôs vision for the future. We create content that maintains and improves our search rankings around key terms. We create content for go-to-market campaigns that drive awareness, growth, engagement, and conversion. Our core capabilities The Brand & Product Marketing team operates at the intersection of marketing, sales, customer success, and product management. As a team, we measure our impact through the following capabilities: Brand GitLab Brand Handbook Brand Creative Handbook GitLab Brand Creative Handbook: Brand Video GitLab Brand Creative - Brand Video Handbook GitLab Content Strategy & Ops An overview of the strategy and processes for the Content Strategy & Ops team. Product and Solution Marketing GitLab Product and Solution Marketing: Core product marketing, competitive marketing and intelligence, market research and insights, analyst relations and customer advocacy Last modified July 7, 2025: Change design to create and add brand video ( dc19d90e ) View page source -  - please contribute .",
    "headings": [
      "Brand and Product Marketing",
      "Welcome to the GitLab Brand and Product Marketing Handbook",
      "Team Disciplines ‚Äì What We Do, Why We Do It",
      "Brand",
      "Product and Solution Marketing",
      "Creative",
      "Content",
      "Our core capabilities"
    ],
    "word_count": 503,
    "extracted_at": "2025-07-21 20:13:55"
  },
  {
    "document_id": "gitlab-handbook-606996",
    "url": "https://handbook.gitlab.com/handbook/marketing/marketing-operations/",
    "title": "Marketing Operations and Analytics",
    "category": "Marketing",
    "content": "Marketing Operations Marketing Operations (MktgOps) supports the entire Marketing team to streamline processes and manage related tools. Due to those tools, we often support other teams at GitLab as well. Charter Marketing Operations supports the marketing organization to streamline processes and manage related tools. We work closely with multiple teams to ensure information between systems is seamless, data is as accurate as possible, and terminology is consistent in respective systems. Our team‚Äôs primary functions are: Project management of marketing technology stack Streamline and standardize processes related to tools Data cleanliness and accuracy Best practices and strategy on marketing technology Continuous improvement of marketing systems Evaluate new marketing technology Support procurement of new marketing technology Meet the Team Person Role Christine Lee VP, Marketing Ops and Analytics Amy Waller Director, Marketing Operations Gill Murphy Manager, Marketing Operations Manager Rob Rosu Manager, Marketing Operations Manager Jenny Tiemann Staff Marketing Operations Manager Salina Tran Senior Marketing Operations Manager Jameson Burton Senior Marketing Operations Manager Evan Mathis Senior Marketing Operations Manager Bryce Weatherford Marketing Operations Manager Esmira Khalilova Associate Marketing Operations Manager How to Get Help Important : Before submitting an issue that may contain Personally Identifable Information (PII) data (including screenshots), please ensure the issue is marked confidential. You can use quick actions to accomplish this in the issue description prior to submitting. Report a bug Issue tracker Process change request Emergency Comms Handbook Updates When making an update to a handbook page for ABM , FMM , MOps , or SDR handbook pages (or sub-pages), we have a Zapier workflow set up that will push the MR (upon merge) to the related Slack channel to ensure our teams are aware of any change that is made to the page. In order for the merged MR to show up in the respective Slack channel, you must add one of the following corresponding labels on the MR. Slack updates will also trigger for MktgOps MRs when created. Label you add Slack channel the merged MR pushes to MktgOps - HB Update #hbupdate-mktgops #mktgops FMM-HB Update #fieldmarketing-FYI SDR-HB Update #hbupdate-sdr ABM-HB Update #hbupdate-abm How to Communicate with Us Slack channels #hbupdate-mktgops - This channel is used to automatically post new handbook updates that have been merged. #mktgops - We use this channel for general marketing operations support, weekly marketing operations team standup updates, and key system status updates. We attempt to avoid direct messages where possible as it discourages collaboration. In order to efficiently triage common requests, we utilize auto-responses in this channel. Anyone can help triage requests in the #mktgops slack channel by using the slack emoji reactions in the table below. Inquiry Slack Reaction Questions specific to SFDC :mktgops_salesforce: Complex questions that require an issue :mktgops_issue: Bugs :mktgops_bug: Questions about tool status :mktgops_status: List import questions :mktgops_lists: Tool access is needed :mktgops_AR: Salesforce The Marketing Operations team has created the ‚Äò@mktgops-support‚Äô Chatter in Salesforce to help you make changes or manage Lead objects in Salesforce. Please note, the more information you can provide in your support request, the faster the request can be resolved. Use the ‚Äò@mktgops-support‚Äô Chatter for support with: Assigning leads to a new owner Merging duplicate leads in different ownership Investigating routing logic if you think a lead was routed improperly Requesting additional lead support from the Marketing Operations team The Marketing Ops team does not manage requests related to Contact, Account, or Opportunity objects. Please refrain from mentioning individual Marketing Ops team members and use this Chatter instead. Thank you! Emergency Comms If an emergency communication needs to be send out, Marketing Ops will need to assist. Follow directions on this page to initiate the emergency response and view the coverage matrix . You can also follow the security incident communication plan for security related issues. How We Work Issue Boards Asana team Board - General and Ad-hoc requests Asana team portfolio - adhoc and projects MktgOps Team (issues by team member) Issues The MktgOps team works from issues and issue boards. If you are needing our assistance, please do one of the following: If you are on the Marketing Team, please create a request utilizing this request form . If you do not have Asana access, open an issue and use the ~MktgOps::00: Triage label. Please do not re-open issues that have been closed in a previous milestone. OKRs Check out our quarterly highlights trackers to learn more about the key results we‚Äôve accomplished. Labeling We use labels for three purposes: Categorize the tool or area that is affected Show priority Identify the stage they are in Categories MktgOps - FYI : Issue is not directly related to operations, no action items for MktgOps but need to be aware of the issue MktgOps - List Import : Used for list imports of any kind - event or general/ad hoc (do not also use To Be Triaged scoped label) Marketo , Bizible , 6sensee , Qualified , LinkedIn Sales Navigator , PathFactory , ZoomInfo , Goldcast , Groove : used to highlight one of our tech stack tools MktgOps - bug : A bug issue to be addressed or identified by MktgOps MktgOps - changelog : Used to track issues or epics that would need to be logged in the marketing changelog to track major changes across marketing SMOps/Systems - Changelog : Used to track changelog issues that will impact Sales Operations or Systems MktgOps-Support : Used on issues to track field marketing and event support, such as field marketing landing pages and emails. MktgOps-Future Feature : Something to consider for a future project as time allows. Timeframe: As time allows dg-campaigns , ABM , lifecycle-mktg : Used on issues created by these teams for easier tracking of their requests. MktgOps::Events/FM Copy Review : Used by Field Marketing and Corporate Events on MktgOps-Support issues to note when an issue is ready for copy review. Proccess Steps with Sales Systems MktgOpsPrio::00: Requested : New issues MktgOpsPrio::01: In Approved : Issues that have received business process owner approval MktgOpsPrio::02: In Queue - Mops : Issues that are ready for prioritization with Sales Systems MktgOpsPrio::03: In Queue - Systems : Discussed in prioritization and added to a temporary milestone MtkgOpsPrio::04: Actioned : Issue is in current or future milestone, not yet ready for UAT MktgOpsPrio::05: Business Owner UAT : Issue is in UAT by the business owner, Systems cannot move forward without signoff MtkgOpsPrio::06: Pending Release : Issue fully tested and approved in staging. Awaiting deploy by systems team MtkgOpsPrio::07: Complete : Issue has been deployed into production Systems Related Labels entapps-customer::MOPS : Used on issues that require Sales Systems support MktgSystems-PMO : Used for issues on committed PMO projects to help with prioritization and to determine work streams Business Impact Labels: What business impact or subject area is driving these changes MktgImpact - Partner Lead Lifecycle - Impacts to Vartopia and Partner Lead Lifecycle. Such as the Lead Module, Campaign Module and ROI for channel events and lead tracking. MktgImpact - Sales Enablement - Marketing initiatives that will help Sales productivity and efficiency MktgImpact - Sales Dev Productivity - Improves productivity of Sales Dev team, such as SLAs, and visibility MktgImpact - Product Launches - Issues revolving around a prodct launch or release MktgImpact - Team Productivity and Efficiency - General marketing team productivity improvements MktgImpact - Analytics and Data Quality - Data updates or analytics needs MktgImpact - TBD - New labels will be created for large-cross function projects, like FY25 Type Labels: What type of SFDC work is required MktgType - Break/Fix MktgType - Tool Installation / Configuration MktgType - Package Updates MktgType - FLS or Access MktgType - Tech Debt MktgType - Operational Improvements Priorities MktgOpsPriority:: 00-Urgent : Issue that is related to a breaking change, security issue or business critical item. This category will be limited because not everything can be a priority. Timeframe: Immediate action needed. MktgOpsPriority:: 01-High : Issue that is related to a breaking change, OKR focus, any other issue of high business value. Timeframe: Action within milestone MktgOpsPriority:: 02-Medium : Issue has a specific action item for MktgOps to be completed. Timeframe: Within weeks MktgOpsPriority:: 03-Low : Issue is a feature to help the team or a specific action item for MktgOps that would be helpful, but can be pushed for other issues.Timeframe: Within months Stage MktgOps::00: Triage : General label for any issue that needs MktgOps attention, request for work and/or involvement MktgOps::01: Needs More Information : Issues awaiting for information from the requester, needs more clarity in requirements, no milestone, and not assigned to MktgOps team member yet MktgOps::02: Ready for Assignment : Issues that are acknowledged (in review), gathering requirements, no milestone, and not assigned to MktgOps team membe MktgOps::03: Assigned : Issues that are ready to move forward, slotted to a milestone (not current), and assigned to MktgOps team member‚Äôs queue MktgOps::04: In Progress : Issues that are in the current milestone, assigned to MktgOps team member, and are actively being worked MktgOps::05: Business Owner Review : Issues in current milestone that are near the finish line, needs to be reviewed and demoed to the business owner(s) to sign-off MktgOps::06: Ready to Deploy : Issues in current milestones, sign-off(s) given by business owner, ready to be deployed by MktgOps team member MktgOps::07: Blocked : Issue is blocked and no other actions can be taken by MktgOps. Waiting for someone else/another team to complete an action item before being able to proceed. May also be blocked due to external party such as a vendor to complete an action before closing. MktgOps::08: Completed : MktgOps has completed their task on this issue although the issue may not be closed. Milestones Each individual contributor (IC) is responsible for adding issues to the milestone that will be completed in the two-week time frame. If needed, the IC will separate the main issue into smaller pieces that are workable segments of the larger request. At the end of every milestone, we will post a thread in the #mktgops Slack channel with links to the Issues that we are moving to the next milestone. Context as to why an Issue is moving to a new milestone will be posted in the Issue (not in the Slack thread). The goal of this is to proactively and transparently communicate to our business partners and to empower marketing operations team members to intentionally and thoughtfully manage their work in each milestone. A milestone cannot be closed nor marked complete until the milestone‚Äôs accompanying merge request has been merged. Within every milestone there is a WIP merge request with all commits being changes to our handbook. All team members contribute their changes to the milestone merge request. The merge request should be tagged with marketing operations labels and the current milestone. View Milestones Marketing Ops Calendar Our team google calendar is available to GitLab team members here . It shows upcoming team PTO and holidays. Marketing Changelog Periodically Marketing Operations and other teams through the marketing org make significant changes to our system and processes that affect overall tools, data and reporting or uncovers significant changes that affected reporting. As such we have a shared changelog . The MktgOps and Marketing Analytics teams update this document as needed as changes are made. If you are working on an issue or epic that will have a significant impact across marketing, add the label MktgOps - changelog so marketing operations can track changes across GitLab. Teams We Work Closely With Working with Channel Partner Marketing Channel Partner Marketing Expectation To open issues for any new request using the problem statement. Channel Partner Team to respond to mktgops queries on the issue To provide full problem statement on the issue with as much context as possible. Optional - suggested solution for this issue. Marketing Ops Expectation To use labels to denote where the issue is To use Milestones to denote when the work will be done To provide solution options for the problem statement with clear outline of timeline/ potential blockers. To verify possibility of the suggested solution (if there is one). Bi-weekly Meeting New issues will be prioritized within the bi-weekly meeting where Salina can understand if/what work should be deprioritised to complete the new work. Salina to Add Priority label Add Stage Label Add milestone to the issue of when she thinks the work will be started If no new issues- can either discuss issues or skip a week. Milestone MRs The marketing operations team uses collective merge requests, known as our milestone MRs, to make multiple updates across our handbook, see high-level updates in 1 MR, and avoid conflicts with each other. Here is an example . We list all major changes with our GitLab username in the description after a commit and link any relevant issues that the commit closes out. If you have an update for the marketing operations handbook, please feel free to use our milestone MR to make a commit and tag us for review to avoid conflicts. Working with Sales Systems for SFDC Updates The MktgOps team frequently works with the Sales Systems team to make changes in Salesforce.com (SFDC). See the below information regarding the process for working with Sales Systems for these changes and SLAs we adhere to. If a field needs to be created in Marketo AND SFDC, it must be created in SFDC first and then added to the Marketo User Permission set within SFDC. From there, the field will sync down to Marketo. If you miss this order of operations and the field is created in Marketo first, you will need to still follow the directions above and then open a support to re-map the fields. **Use documentation for Marketo for field types. If you need assistance with Sales Systems follow the next steps: Open an Sales System issue in their project and assign the label entapps-customer::MOPS . If the issue is a part of a committed PMO project, please add the label MktgSystems-PMO If Mops member can create a changeset, please do so shortly after creating the issue to decrease time to deploy, Add prioritization label of MktgOpsPrio::00: Requested Business process owner (Amy or Christine) will review, and if they approve of the request from a business standpoint, they will check the appropriate box and add the MktgOpsPrio::01: Approved label. If not, the request will stay in MktgOpsPrio::00: Requested status until blockers or outstanding questions are resolved. Once approved, requests will be added to the prioritization queue by the business proess owner to review with Sales Systems or the PMO and labeled MktgOpsPrio::02: In Queue - Mops Once Systems or PMO has agreed to take on work, the request will be added to a Temp holding milestone for further prioritization, and labeled MktgOpsPrio::03: In Queue - Systems Once a milestone is added and the issue is discussed, the label will be updated to MktgOpsPrio::04: Actioned by the MktgOps representative that is in the prioritization call. Once the label has been updated to MktgOpsPrio::04: Actioned , follow along with the Sales Systems labels for next steps. Systems will work on the issue and push any updates to the Staging environment first Once systems build, it is the responsibility of the Business Owner to test and accept. The Business Owner must show proof (such as a testing plan, or screenshot) that the solution is working correctly in the staging environment. This is an important step that represents acceptance of the solution, its testing, and the authority to change the related process. The issue will stay in MktgOpsPrio:: 05: Business Owner UAT during this time. Once ready to deploy, Systems manager will add SFDCReleaseHelp to flag to release managers it is ready for production release. Marketing Ops label should be updated to MktgOpsPrio::05: Pending Release Once in production, MktgOps should confirm again that the field/update in SFDC and corresponding/impacted systems is working as anticipated. Label updated to MktgOpsPrio::06: Completed Issue is closed and completed. Other helpful links: Steps to getting help from Sales Systems Working with the Integrations team on Workato related issues Workato is a low-code/no-code tool used to for automations and integrations across different teams at GitLab. We frequently work with the Integrations team to build, test and deploy some of the processes in Marketing Operations. The best way to work with the Integrations team is by opening an issue, depending on the scenario, there are two ways to go about that: Request the creation of a new automation/integration For types of request that involve building something from scratch and you require assistence from the Integrations team Open an issue in the Integrations Work and follow the instructions in the issue template. If the issue relates to marketing operations, make sure to tag @mihaiConteanu or @amy.waller Bug fixing or deploying recipes developed in the testing environment For fixing issues with currently working recipes or to test and review an independently built recipe before moving it into production. Due to SOX compliance, any change to a recipe in production needs to be acompanied by a change management issue. Open an issue in the Integrations Work Project and depending on your specific need, choose a template for Bug , Change , or Default and follow the instructions in the issue template. Open an issue in the Change Management Project and copy and paste this template in the issue description Follow the instructions in the template, it contains all labels and tags necessary to notify the Integrations Team Set a meeting with Durgesh Thakkar and Karuna Singh to go over and review your changes/recipe/issue. Helpful links How Integrations Team works Stakeholder Mapping Stakeholder mapping is a tool to help define roles and to delegate cross-functional responsibilities among the team. Stakeholder mapping connects key functions and jobs across marketing with a primary marketing operations stakeholder, a supporting team of marketing operations team members, and stakeholders outside of marketing operations. The main purpose of stakeholder mapping is to identify and connect the stakeholders involved in setting the strategic direction of marketing operations initiatives. Stakeholder mapping is NOT a way to gatekeep, nor is it meant to stifle communication, collaboration, or efficiency. A particular function is not limited to communicating only with the strategic partner or supporting team members mapped to that function. Similarly, marketing operations team members who are not strategic partners or supporting team members for a particular function may still support that function in various ways. Why is Stakeholder Mapping important? Stakeholder mapping is important because it helps to formalize a process for setting the strategic direction of marketing operations initiatives. Stakeholder mapping will help marketing operations better understand the challenges and opportunities that our stakeholders face, allowing the marketing operations team to be more proactive business partners, and better able to plan for and deliver on strategic projects. Additionally, Stakeholder Mapping creates tighter alignment between Marketing Operations and our stakeholders. It provides our stakeholders with a specific point of contact and a predictable cadence with which they can collaborate on strategic initiatives. What does it mean to be a strategic partner? Strategic partners are the main point of contact for understanding, documenting, and sharing strategic opportunities from the functions to which they are mapped. This can be done by conducting Marketing Operations Discovery research, which typically happens twice per fiscal year. Findings of Discovery research are then used as inputs for the marketing operations roadmap and backlog. What does it mean to be a supporting team member? Supporting team members are typically subject matter experts in a specific use case or area within a function. Supporting team members participate in Discovery research and should feel free to ask questions directed toward their particular focus area in order to capture additional insights. Supporting team members typically take point on note taking during Discovery research calls. What is Discovery research and how do we conduct it? Discovery research is a way to learn more about our users. Our users are members of the marketing division who use tier 1 and 2 marketing technology. Discovery research can be conducted through synchronous interviews or asynchronously. When possible, synchronous interviews are preferred because they allow us to build relationships and ask follow up questions in real time. Discovery research calls should happen quarterly, up to the discretion of the strategic partner and the stakeholder. What will Discovery research insights be used for? Insights from Discovery research calls will be used to inform the Marketing Operations strategic planning and roadmapping. List Imports List Imports Marketing Technology Stack Marketing Technology Tiering System The Marketing Operations team maintains the Marketing technology tiering system in order to prioritize requests, provide support, and optimize processes. Tools in the Stack The SSoT for all tools at GitLab is the Tech Stack Applications page . We are constantly evaluating new tools to help create efficiency, data accuracy and provide additional functionality. If you have a pain point, or have come across a new technology you‚Äôd like to explore further, please let us know by creating a tool eval issue. To see our current list use the label Ops Tool Evaluation or click here . Please also follow process and directions listed in the sections . As a compliment to the Tech Stack, we created a visual of the Tier 1 and 2 tools in Marketing Technology stack , aligned to our customer journey. Below are tools in the Marketing Technology stack, organized by tier. Business Critical Technology - Tier 1 6sense Bizible / Marketo Measure Cognism Iterable Marketo Groove Goldcast PathFactory Qualified Traction ZoomInfo Vartopia - Lead Sharing Module Operational Technology - Tier 2 Allocadia Hightouch LinkedIn Sales Navigator OneTrust (DEX) RingLead Integrate DAP (Digital Strategy - Campaigns) Mutiny JiffleNow Management Technology - Tier 3 Litmus Brilliant Gifts Google Analytics (Search Discovery/Further) (DEX) Terminus Email Experiences Functional Technology - Tier 4 Bitergia (Developer Relations) Canva (Brand) Cision Common Room (Devoper Relations) ContentKing Frame.io (Brand) Figma (UX) Launch Darkly MeetUp Quantum Metric (DEX) SEMRush (Search Marketing) EveryOne Social Vimeo (Brand) Zendesk Community Typeform Requesting access to an existing tool Most of our tools have been migrated to Lumos for provisioning, so follow that procedure first. If you cannot find the tool in Lumos, please follow the access request process as outlined in the business operations handbook. If you are working with a contractor or consultant that requires access to a tool in our stack, please follow the professional services access request process as outlined in the procurement handbook. Tool User Management Technical owners should perform quarterly, bi-quaterly and, for some tools, monthly user audits. If a team member has not been actively taking advantage of a tool for 45 days (30 days for Zoominfo) or more, they will have access to that tool revoked with 5 business days of notification via email or slack (for Zoominfo). Activity will be determined by user reports pulled by the tools‚Äô technical owner. These reports can be found by viewing issues from the Marketing Ops project with the issue label Mktg Tool Audit . The reports will utilize the audit issue template from the Marketing Ops project. To regain access to revoked tools, the team member will need to submit a new access request and follow standard access request procedures. However, user seats will be on a first-come-first-serve basis unless it is determined additional seats should be purchased. Tech Stack Status Pages Below is a collection of links leading to status pages of several listed MktgOps DRI tools. Unclickable links did not offer official status pages during the 2023 review of available webpages, but there are several unofficial and unaffiliated websites that offer webpage uptime checking as a service, e.g. www.isitdownrightnow.com , www.downdetector.com and www.downforeveryoneorjustme.com . Feel free to search on these sites during a perceived downtime, but keep in mind it may not be as accurate as an official source. Click to see dropdown list of available status page URLs. Asana Marketo/Marketo Measure (formerly Bizible) Qualified LinkedIn Sales Navigator PathFactory Terminus Email Experiences ZoomInfo Allocadia Iterable Litmus OneTrust Hightouch Groove Goldcast Renewal process for marketing technology budget owners Renewal discussion timing is determined by tier. For new software that has been approved create a business case to attach to the Zip Request ( example ). With Procurement submit an RFP every 2 years or for tools over $50K+. POC for any new tools or new features before signing a contract. No auto-renewals Align with Procurement and Finance: Work with Procurement to structure and negotiate the contract. As well, look to do an RFP with multiple vendors for competitive pricing. Align with Finance to confirm budget is accounted for in FY24. Marketing Operations role: Marketing Operations will help to define requirements and be a trusted advisor. Submit an issue ( example ) for new software evaluations. MarTech Change Management New Tool Purchase Process If you are interested in or would like to request a new tool be added to the tech stack, please submit an issue using the tools eval issue template in the Marketing Operations repository. Marketing Operations should be included in ALL new tool evaluations to account for system integrations, budget, etc. Any new tools desired after the budget is set will be handled by transferring budget from the other department to Marketing Operations. Once an issue is submitted, Marketing Operations will evaluate the request and assign the tool a tier. To see current and previous tool evaluations, please click here . The process for requesting a new tool is: Tool Eval Request is submitted A Marketing Operations member is assigned to review the request. This person scores the requested tool in order to determine its tier. The business and technical owners of the tool are identified. For tier 1 and 2 tools, once the request has been reviewed, the Marketing Operations manager will: Create a new evaluation Epic, capturing relevant details from the intake issue. Assign the new Epic to the business and technical owners Update the intake issue description with a link to the new Epic. Tier 3 tools will be handled on a case-by-case basis. If the tool requires extensive evaluation and Marketing Operations support, the above process will apply. The business owner is the DRI for tier 4 tool evaluations and implementations, but still must include Marketing Operations. Once the evaluation Epic is created, the following evaluation steps should be followed: Discovery - understand the request/problem we‚Äôre trying to solve Stakeholder identification - build the evaluation team based on the roles and responsibilities outlined below Requirements gathering - document user stories, requirements, impacted processes, and features using this requirements gathering template Evaluation - attend demos and compare features Stakeholder alignment - align stakeholders to select vendor of choice Privacy and security reviews - ensure that the selected tool is compliant Negotiations and procurement Implementation Post-Implementation Review & Retro Roles and Responsibilities Role Responsibility Technical Owner Serve as facilitators for tool evaluations Establish norms (meeting cadence, status updates, communicating results, etc.) Ensure that technical requirements are documented and feasible Document and report any risks or conflicts identified during tool evaluation Facilitate meetings and support operational efficiencies of the evaluation Business Owner Complete the tool evaluation issue Document requirements and user stories, and obtain approval(s) for tool Review and provide approval to ensure everything is working as expected Leadership Sponsor Responsible for staying plugged into the project, supporting the leads, and supporting escalations (if required) Peer Reviewer (optional) Review and ensure requested change has been documented and there are no undocumented downstream impacts Post-Implementation Reviewer(s) (optional) Review of the change in production after the change is made to ensure everything is working as expected Resources Requirements Gathering Template Weekly Implementation Update Template Lead Scoring, Lead Lifecycle, and MQL Criteria For more information about lead lifecycle, visit this handbook page A Marketing Qualified Lead (MQL) is a lead that has reached a certain threshold, we have determined to be 100 points accumulated, based on demographic/firmographic and/or behavioral information. The Person Score is comprised of various actions and/or profile data that are weighted with positive or negative point values. You can find more details about the scoring model on the Marketo Page What are MQL SLAs? SLA (or Service Level Agreement) is the agreed upon amount of time that a lead which has MQL‚Äôd and routed to a Sales Development Representative will be actioned. Right now, the SLA time has been set to 2 business hours. More information on how the SLA reporting functionality works can be found here . Campaigns and Programs Campaigns are used to track efforts of marketing tactics - field events, webcasts, content downloads. The campaign types align with how marketing tracks spend and align the way records are tracked across three of our core systems (Marketo, Salesforce and Bizible) for consistent tracking. Leveraging campaigns aligns our efforts across Marketing, Sales and Finance. Go to the Campaigns and Programs Page to view all of the campaign types, their progression statuses and cost tracking. That page also includes directions for set up in Marketo and Salesforce. Marketing Ops partners with the Field Marketing and Corporate Events teams to provide Marketo program set-up and configuration, providing these teams with an internal partner to provide advise on the best technical set-up to reach their goals and streamlining more complex program requirements. Visit the Marketo Program/Campaign Support page for additional details. Email Management Marketing Ops is responsible for maintaining the email marketing database. Go to the Email Management Page for policies and more detailed information. Initial Source Initial Source is the first ‚Äúknown‚Äù touch attribution or when a website visitor becomes a known name in our database, once set it should never be changed or overwritten. For this reason Salesforce is set up so that you are unable to update the Initial Source field. If merging records, keep the Initial Source that is oldest (or set first). Initial Source in Marketo is named Person Source , and should only update when empty. The values listed below are the only values currently supported. If you attempt to upload or import leads or contacts into Salesforce without one of these initial sources you will encounter a validation rule error. If you want to add a new Initial Source, please ask someone in Mops to Add to this sheet . When a new initial source and bucket are added, they will automatically flow through to our reporting. Status in the table below means: Active = can be selected from picklist Inactive = cannot be selected from picklist, but a record may exist with this source Source Source Bucket Definition and/or transition plan Status* CE Download core Downloaded CE version of GitLab Active CE Usage Ping core Created from CE Usage Ping data Active CORE Check-Up core Created from In-App Contact us (Handraise PQL/In-App Health Check) Active Demo inbound Filled out form to watch demo of GitLab Active Education inbound Filled out form applying to the Educational license program Active Email Request inbound Used when an email was received through an alias ( will be deprecated ) Active Email Subscription inbound Subscribed to our opt-in list either in preference center or various email capture field on GitLab website Active Gated Content - General inbound Download an asset that does not fit into the other Gated Content categories Active Gated Content - eBook inbound Download a digital asset categorized as an eBook Active Gated Content - Report inbound Download a gated report Active Gated Content - Video inbound Watch a gated video asset Active Gated Content - Whitepaper inbound Download a white paper Active GitLab.com inbound Registered for GitLab.com account Active Newsletter inbound Active OSS inbound Open Source Project records related to the OSS offer for free licensing Active Request - Contact inbound Filled out contact request form on GitLab website Active Request - Professional Services inbound Any type of request that comes in requesting to engage with our Professional Services team Active Security Newsletter inbound Signed up for security alerts Active Trial - Enterprise trial In-product or web request for self-managed Enterprise license Active Trial - GitLab.com trial In-product SaaS trial request Active Web inbound Active Qualified inbound Active Request - Community inbound Active Request - Public Sector inbound Active Other Other Active 6Sense outbound Acquired from the 6Sense database Active AE Generated outbound Sourced by an Account Executive through networking or professional groups Active LinkedIn outbound Active Prospecting outbound Active Prospecting - General outbound Active SDR Generated outbound Sourced by an SDR through networking or professional groups Active Zoominfo outbound Sourced by SDR/BDR/AE/SAE/ASM Active Cognism outbound Sourced by SDR/BDR Active Conference paid demand gen Stopped by our booth or received through event sponsorship Active Owned Event paid demand gen Events that are created, owned, run by GitLab Active Virtual Sponsorship paid demand gen Active Purchased List purchased list Active Employee Referral referral Active Partner Qualified Lead referral GitLab partner sourced, previously partner or Channel Qualified Lead Active Web Chat inbound Engaged with us through website chat bot Active Word of Mouth referral Active Existing Client referral Active External Referral referral Active Webcast virtual event Register for any online webcast (not incl Demo ) Active Workshop virtual event Active Web Direct web direct Created when purchase is made direct through the portal (check for duplicates & merge record if found) Active Investor outbound Sourced by our investors (i.e. - GV, Khosla, ICONIQ). The Investor value is coupled with the Investor Name custom field Active GitLab DataMart core Created by the GitLab Marketing Database data pump. Contains leads from various internal sources Active GitLab Subscription Portal Signed up for customers portal account, but did not upgrade Active Free Registration core Sign up via Free User registration Active Paid Social inbound Sourced from Paid Social Campaigns Active Vendor Arranged Meetings paid demand gen Registered or attended a vendor arranged meeting Active Trust Center inbound Requested access to the GitLab Trust Center Active JiffleNow outbound Created by JiffleNow integration Active Source Source Bucket Definition and/or transition plan Status* Startup Application inbound Inactive Consultancy Request inbound Inactive Promotion paid demand gen Inactive Lead and Contact Statuses The Lead & Contact objects in Salesforce have unified statuses with the following definitions. Also reference Re-MQL workflows for how to move from status to status. To learn more on how we manage our lifecycle including lead/contact status and Lifecycle Classifications, please see here . Status Definition Raw Untouched prospect, default status Inquiry Action was taken by the record to specifically give their contact information to GitLab MQL Marketing Qualified through systematic means Accepted Actively working to get in touch with the lead/contact Qualifying In 2-way conversation with lead/contact Qualified Progressing to next step of sales funnel (typically SAO created & hand off to Sales team) Disqualified Contact information is not now or ever valid in future; Spam form fill-out Recycle Record is not ready for our services or buying conversation now, possibly later Bad Data Incorrect data - to potentially be researched to find correct data to contact by other means Ineligible All leads/contacts that are ineligible to go through the sales process after an initial review One of the following must occur to have a lead move from Raw to Inquiry Become a member of a marketing program (except no-action/default statuses, nor email) Fill out a form (social or website) Behavior score > 10 pts. Lead Address Fields On the lead object we have three types of address information, the local/personal address information for that lead, which is stored on the Person Address (address type field), the Ultimate Parent Account Company information stored on Company Address: [XXX] text fields, and the Zoominfo enrichment address information for both the Contact (local information) and the Company level information: Person Address is partially filled in from Marketo Form Fills and is also completed by ZI enrichment when it is missing; This is the address that Marketo references for email lists. It contains the local address of the record, if known through form fill, list upload, or ZI enrichment. UPA Company Address - stored on the Company Adress: Country , Company Adress: State , Company Adress: City , Company Adress: Street , Company Adress: Postal Code text fields. These fields are updated through APEX code through a 3-step waterfall approach. Account Demographics Fields (i.e: Account Demographics: UPA City ) - If the lead matches to an existing account the address is populated through the Account Demographic fields, taken from the account associated with this lead; Admin Override Fields (i.e: [Admin] Company Address Country ) - If a lead doesn‚Äôt match to an account, the Company Address fields are either blank or are populated through step 3 in the waterfall (see below). If the address is blank or the address information from step 3 is wrong, SDRs/BDRs can update the address information themselves using these Admin Override fields. You can see more information about this process in the Overriding Incorrect Account Assignments section from Sales Dev Handbook or in this video . Zoominfo Company Address Fields (i.e: [ZI] Company Country ) - If the lead doesn‚Äôt match an account, it was not overwritten using the Admin Override Fields mentioned above and the lead matches to Zoominfo‚Äôs database, the Company Address fields are populted with Zoominfo Company Address information from the Zoominfo Company Address fields. Zoominfo enrichment address information which as can be of two types, personal (local) or company level address; Zoominfo personal (local) address information can be found in the [ZI] Contact Country , [ZI] Contact State , [ZI] Contact City , [ZI] Contact Street , [ZI] Contact Zip Code fields; Zoominfo Company Address Information can be found on the [ZI] Company Country , [ZI] Company State , [ZI] Company City , [ZI] Company Street , [ZI] Company Zip Code fields; Data Cleanliness and Enrichment Process Marketing Operations has the responsibility for cleaning and enriching our database of leads/contacts with the most complete and up to date information. The cleaning part of this process is being done with the Cleanse functionality of the lead/contact deduplication tool, Ringlead. The enrichment part of the process is done using the data appending/enrichment tool, Zoominfo , our SSOT when it comes to account/lead/contact data. Cognism , is another enrichment tool but only for a smaller subset of our lead data. As of now, only the BDRs and Cognism admins have login access. However, Cognism data, can be found in the Cognism fields on the lead/contact layout. This cleaning & enrichment process has 5 main priorities: Enrich net new Marketo leads with Marketo Webhook - All leads created through Marketo are instantly enriched with ZI data. Instant Enrich for leads - When new leads are created in SFDC, Instant Enrich functionality kicks in and the record‚Äôs [ZI] fields are enriched upon creation. Enriching net new leads with Scheduled Enrich - As a back-up to the Instant Enrich functionality (in case it fails for any reason), all leads created in the last 24h are enriched through scheduled enrichment, to make sure they contain the most updated information. Existing Database Enrichment - All lead records in SFDC are enriched regularly to make sure that the leads who change roles/companies are updated with the lastest information. Assure Data Cleanliness & Accuracy - The Marketing Operations team is following the recommended deduplication order of operations as detailed below: Lead to Lead Deduplication ( Paused to fix duplicates being created by different tools) Account Deduplication (This part is currently performed using Openprise by Sales Operations) Converting Leads to New Contacts (This step is skipped in our case since it would impact sales workflow considerably. We will re-evaluate if the sales team is not as heavily focused on leads as we are now.) Contact to Contact Deduplication (Testing unwanted contact merging effects on order processin and open quotes) Lead to Contact Deduplication (This part of the process will start once Contact Deduplication is completed) Deduplication of Custom Objects (Bizible Person IDs - On hold until Contact Deduplication and Lead to Contact Deduplication are completed) For more information regarding our data deduplication process visit the Ringlead Handbook Page . Cleaning & Enrichment Frequency: While the enrichment jobs for net new leads, work on a continuous bases, when it comes to enrichment of our existing leads & contacts in SFDC, this is done via scheduled enrichment jobs as follows: All leads are enriched on a weekly basis, last Saturday of the month. All leads created in the last 7 Days are enriched daily to make sure no new leads from list uploads miss enrichment and also to make sure our sales teams have the most up to date information when working them. All contacts in our SFDC instance get enriched weekly, last Saturday of the month. You can find more details on the enrichment process in our Zoominfo Handbook Page . Lead List Upload Enrichment To be able to upload a lead in our SFDC, it is mandator for the lead to have an email address. Sometimes we do run into situations where the email address is not available. To bypass this challenge and still be able to upload the leads in SFDC, please create an List Upload - Enrichment Request with this request form , upload the CSV file in the issue and Mops will use the Zoominfo Enhance , Zoominfo ListMatch and Cognism Enhance functionality to enrich these records with the most up to date information (including the email address). Note: Such records as lead list uploads with no email addres, that sub-sequently are enriched with the email address through Zoominfo/Cognism enrichment, need to be marked as Opt-out as these individuals did not give us the express consent that they can be reached to; Cleaning Test Leads Testing processes and automation are critical for quality assurance in our systems. As a tester, you create test leads to ensure processes work as expected. These test leads are mixed among real records, causing inaccuracies in our reporting. Marketing Operations has created best practices that make it easier to spot and delete test leads. The next time you test a program, remember set Job Title = Test and they will be removed promptly. Notice any test leads? Please open an issue with the Marketing Operations team. Communication Compliance Best Practices Internal DNC (Do Not Call) Lists Internal DNC List are maintained using the Do Not Call checkbox on the lead/contact record layouts. The sales development organization has a clear process on how and in what context should the box be checked. Please visit the Sales Development Handbook page - Cold Calling Checklist section to find out more about it. External DNC (Do Not Call) Lists To be compliant with international DNC (Do Not Call) regulations and minimize the risk of litigation, a process was implemented for making sure the records that appear on external DNC lists are not contacted via phone (this applies to both Direct Dial Phone Numbers and Mobile Phone Numbers ). This information gets passed to us with the help of Zoominfo, which populates the [ZI] Do Not Call - Direct Phone and [ZI] Do Not Call - Mobile Phone fields with the Yes value whenever a phone number is found to be on an external DNC list. With Marketo automation we are then using these two fields to hide the phone number information on the following fields: [ZI] Phone Number , Phone (standard field - only if it matches the [ZI] Phone Number value), [ZI] Mobile Phone Number and Mobile Phone (standard field - only if it matches the [ZI] Mobile Phone Number value). For more information, please visit this figjam flow chart . Do Not Do Business In some cases, there are companies we do not do business with. If an account is flagged, Mops should take the following steps to ensure they are not included in any of our communications moving forward. Add the customer account to the DNDB campaign in Marketo. Use the SFDC Account ID and update contains with the email domain, if sepcific to that company. Click Schedule > Run once . (This will also run nightly.) This flow updates the lead/contacts to unsubscribe``, removes them from Security Distro, marks email as invalid, marks as Do Not Call``, updates person status to Ineligible , and marks the reason as ECCN - Do Not do Business No need to check Iterable for the email address. They will be removed via API, as Marketo sends unsubscribes over via webhook to Iterable automatically once unsubscribe = true . Zoominfo Opt Out Lists Zoominfo is our SSOT when it comes to data enrichment of our leads/contacts and accounts. To be compliant with the latest privacy policies and safeguard our database from potential litigation, Zoominfo‚Äôs recommendation for contacts that have opted out of their database is to: If you have downloaded any of these contact records from ZoomInfo or uploaded them to your internal systems, you must remove >them unless you have an independent lawful basis to possess and use such person‚Äôs personal data. Note: This only applies for leads/contacts that do NOT currently have an existing business relationship After collaborating with GitLab‚Äôs privacy department, it was decided to create a process for removing said contacts from our database. The current process takes place on a weekly basis and is implemented with the help of a Marketo Program. It takes advantage of the Zoominfo Non-Matched Reason field which is populated by Zoominfo. All leads/contacts that have the OPT_OUT value, enter the process and are checked for additional activities that could qualify as independent lawful basis to be kept. If they lack said activities they will be removed from our database. For more information, please visit this figjam flow chart . If you have any questions or concerns feel free to open an issue with the Marketing Operations team. 6sense 6sense is an Account Based Marketing platform that uses a predictive model to identify the right customers at the ideal time Adobe Marketo Measure (formerly known as Bizible) Adobe Marketo Measure, AMM for short, unifies behavioral and ad data with sales outcomes and machine learning so you can make the right marketing decisions. AI in Marketing Handbook page that describes how the marketing team leverages AI and shares marketing-specific AI resources. Asana Asana is a collaborative work management platform that will support GitLab's mission to enable everyone to contribute to and co-create the software that powers our world. GitLab's Marketing team is planning to use Asana to track projects (e.g., Product Launches), connect work to goals, and coordinate work across the team. Asana will have access to Orange data including pre-release product launch information and GitLab issues and epics in private projects. Backblaze Backblaze is high performance cloud storage tool used by digital production. Brilliant Brilliant Gifts will serve as GitLab's \"swag\" vendor platform (company-branded products) for the public-facing swag shop website. Campaigns and Programs Campaigns are used to track efforts of marketing tactics Cognism Cognism is sales intelligence software that provides contact or account data helping sales and marketing teams drive predictable pipeline Email Management Email database management is a core responsibility for MktgOps. Ensuring GitLab is following email best practices, in compliance with Global spam laws and overall health of active database are all priorities. Goldcast Goldcast is a digital events platform that helps B2B marketers create and host events, webinars, and video campaigns. It uses AI to help users create engaging content and repurpose videos into multiple formats. Groove.co Groove is a Salesforce native sales engagement platform which helps Sales and Sales Dev team members efficiently and effectively engage prospects and customers to drive more pipeline and increase deal closure. Hightouch Hightouch Overview iconik Iconik is a hybrid cloud media management solution for digital production workflows. Impartner PRM and Partner Portal Iterable Iterable Overview JiffleNow Automated appointment scheduling of in-person, and virtual B2B meetings at events or campaigns. Lead Lifecycle Management This page is a dedicated resource for information on how GitLab manages it's lead lifecycle Learning Marketing Operations This handbook page is to provide updated marketing operations learning and resources materials. List Imports Processes for importing records into Marketo Litmus Litmus is email marketing software used primarily by marketing campaign managers to build, test, and optimize our email marketing programs. Marketing Owned System Provisioning Instructions Marketing Operations manages the majority of marketing-owned systems. Marketing Technology Tiering System The purpose of the Marketing Technology Tiering System is to support the Marketing organization in identifying and understanding the technology utilized across the department. Marketo Marketo is our marketing automation platform used for email marketing, lead management, and program management. Marketo program/campaign support Marketo campaign projects, processes, and notes MQL SLAs SLAs for Sales/Business Development to follow up with MQLs Mutiny Mutiny is is a no-code solution for building microsites. PathFactory PathFactory is an intelligent B2B content experience platform used to create personalized content journeys for your audience. Qualified Qualified facilitates instant sales conversations with visitors on the GitLab marketing website Rev Rev is an speech-to-text company that provides closed captioning, subtitles, and transcription services. Ringlead The Ringlead platform orchestrates Salesforce and Marketing Automation processes like managing duplicates, data normalization, segmentation, enrichment. Self-Service List Imports Automated process developed by Marketing Operations to facilitate self-service list imports Terminus Email Experiences Terminus Email Experiences is a marketing tool used as an advertising channel inside the inbox. Traction Lead Complete Traction Lead Complete Overview Typeform People-friendly forms and surveys UserGems UserGems is a job changes tracking tool which captures and combines signals to help our teams identify the best buyers, have compelling reasons to reach out, and act on those insights with automation Vartopia Vartopia Overview Vartopia is a partner lead sharing and deal registration system designed to ‚Ä¶ Vimeo Vimeo is a video hosting, sharing, and services platform. Workato What is Workato? Workato is an automation platform that enables us to integrate third party apps and ‚Ä¶ YouTube uses and access We use YouTube as our single source of truth for video content including live streaming group conversations, marketing videos, demos, and more. zapier What is Zapier? Most of Marketing Operation‚Äôs Zaps are being migrated to Workato, please ‚Ä¶ Zoominfo ZoomInfo is sales intelligence software that provides a database of business and professional contact information. Last modified July 8, 2025: EUS - Access Requests Update ( b88590d3 ) View page source -  - please contribute .",
    "headings": [
      "Marketing Operations",
      "Charter",
      "Meet the Team",
      "How to Get Help",
      "Handbook Updates",
      "How to Communicate with Us",
      "How We Work",
      "Issue Boards",
      "Issues",
      "OKRs",
      "Labeling",
      "Milestones",
      "Marketing Ops Calendar",
      "Marketing Changelog",
      "Teams We Work Closely With",
      "Working with Channel Partner Marketing",
      "Working with Sales Systems for SFDC Updates",
      "Working with the Integrations team on Workato related issues",
      "Stakeholder Mapping",
      "Why is Stakeholder Mapping important?",
      "What does it mean to be a supporting team member?",
      "What is Discovery research and how do we conduct it?",
      "List Imports",
      "Marketing Technology Stack",
      "Marketing Technology Tiering System",
      "Tools in the Stack",
      "Requesting access to an existing tool",
      "Tool User Management",
      "Tech Stack Status Pages",
      "Renewal process for marketing technology budget owners",
      "MarTech Change Management",
      "New Tool Purchase Process",
      "Roles and Responsibilities",
      "Lead Scoring, Lead Lifecycle, and MQL Criteria",
      "What are MQL SLAs?",
      "Campaigns and Programs",
      "Email Management",
      "Initial Source",
      "Lead and Contact Statuses",
      "Lead Address Fields",
      "Data Cleanliness and Enrichment Process",
      "Lead List Upload Enrichment",
      "Cleaning Test Leads",
      "Communication Compliance Best Practices",
      "Internal DNC (Do Not Call) Lists",
      "External DNC (Do Not Call) Lists",
      "Zoominfo Opt Out Lists"
    ],
    "word_count": 8364,
    "extracted_at": "2025-07-21 20:13:57"
  },
  {
    "document_id": "gitlab-handbook-157340",
    "url": "https://handbook.gitlab.com/handbook/marketing/developer-relations/",
    "title": "Developer Relations",
    "category": "Marketing",
    "content": "Developer Relations The Developer Relations team supports GitLab‚Äôs mission by working with our community to ensure they receive support and recognition for contributing to GitLab. Welcome to the GitLab Developer Relations Handbook What is DevRel? Developer Relations (short: DevRel) operates at the intersection of technology, community, and advocacy, serving as the voice and ears of GitLab in the wider tech world. Their core mission revolves around nurturing and sustaining a vibrant, engaged community of developers, contributors, and users. This involves a multifaceted approach that includes creating educational content, organizing events and workshops, developing programs, and providing platforms for knowledge exchange and collaboration. The team not only focuses on promoting GitLab‚Äôs features and capabilities but also actively listens to and incorporates feedback from the community to inform product development and improvements. Our mission & vision Developer Relations drives platform awareness and adoption by enabling GitLab customers, connecting through community, and engaging developers where they are. GitLab engages with more than 3000 developers every month on GitLab.com alone, and receives more than 250 contributions every month, giving us a unique level of influence in the DevSecOps space and helping accelerate our innovation. Our ultimate goal is to raise awareness of GitLab and drive customer success by winning the hearts & minds of developers through best-in-class technical enablement and an active community of contributors. In Developer Relations, we align our mission and vision with the company‚Äôs three year strategy. We believe that everyone can contribute . To help GitLab reach this goal, we aim to double outreach and engagement, strengthen our community presence, and support a healthy community of contributors. Ultimately, these goals boost awareness, adoption, and power our dual flywheels. Our Strategy Our operational strategy is documented in our internal handbook but is classified as confidential due to business sensitivity, customer impact, and to foster a psychological safe environment for our team members. Below you can find our strategic plans that are open to the wider community and where the Developer Relations team welcomes collaboration. Contributor Program Unification & Growth Plan Co-Creation Initiative Meet the Team Name Role Arianna Haradon Senior Fullstack Engineer Cesar Saavedra Senior Developer Advocate Daniel Helfand Developer Advocate Daniel Murphy Senior Program Manager, Contributor Success Emilio Salvador VP, Dev Relations and Community Fatima Sarah Khalid Developer Advocate Fernando Diaz Senior Developer Advocate Itzik Gan-Baruch Sr. Developer Advocate , Product Management internship John Coghlan Director, Developer Advocacy Lee Tickett Fullstack Engineer, Contributor Success Core Team member Michael Friedrich Staff Developer Advocate Nick Veenhof Director, Contributor Success Raimund Hook Staff Fullstack Engineer, Contributor Success Rostyslav Safonov Fullstack Engineer, Contributor Success William Arias Senior Developer Advocate How to reach us Chat with us Developer Relations team members use three Slack channels: #developer-relations : for all GitLab-related discussion (ex: questions about an issue, announcement of an upcoming event) #developer-relations-hangout : for all social discussion and updates shared via the Community Catch bot (ex: plumbing problems, weekend plans) developer-relations-confidential : (private) for discussion of confidential topics that cannot be shared in a channel with people from outside GitLab (ex: discussing a topic that was shared in #company-fyi-private among our team) GitLab team members and others with Slack access can reach us by visiting the #developer-relations Slack channel, or by tagging the @devrel-team group handle. Members of the wider GitLab community can connect with us in the public Discord rooms Teams within Developer Relations are reachable in these Slack channels: #dev-advocacy-team : the Developer Advocate team shares content updates, thought leadership & product ideas, and support community responses, CFPs, etc. #community-programs : for all inquiries regarding GitLab Community Programs (EDU/OSS/Startups) #contributor-success : for all inquiries regarding Contributor Success Email us Please use the e-mail address specific to each program File an issue File an issue to work with us: See our project management section to find program-specific workboards where you can file an issue Emergency contact Developer Relations emergency contacts Incident management roles Relevant Slack channels for incident/infrastructure: #incidents , #infrastructure-lounge How we work Developer Relations Team resources Developer Relations project management Common program resources Meetup checklist Our handbooks Contributor Success Contributors Program Developer Advocacy Community Programs Open Source Program Education Program Startups Program Leading Organizations Our workflows Community engagement: Code of Conduct Enforcement Community Response Process Events Community platforms: Discourse Forum Discord Reddit StackOverflow Common Room Content: Content Effectiveness Strategy Community newsletter Content Review / Fix Fridays UTM Tracking Strategy Campaign management Organization: Team Budgets Swag operations Automated Community Programs Zapier Zendesk Email Twitter/X Cloud Resources Community Interest If you are working on changes to the company, product, or pricing that are expected to have a meaningful impact on members of the wider GitLab community or the GitLab brand, we encourage you to use the label ~Community Interest so that the Developer Relations team can represent the interests of the wider GitLab community in the planning process. All members of the Developer Relations team should be subscribed to this label in both the gitlab-com and gitlab-org projects. Team touchpoints Our team has a few weekly events that we use to stay connected and aligned on our work: Team meeting (bi-weekly) Team meetings are recorded via Zoom and recordings linked to the corresponding date in the meeting notes. 1:1 meeting between each team member and their manager. Question check-in via Geekbot in Slack for each team member. The responses are shared in the #developer-relations-hangout Slack channel. Monday (weekend social, plans for the week) Thursday (reminder to share achievements, thoughts, blockers, etc.) End of week updates: Results and wins, search for Developer Relations - End of Week updates in Google drive. Our calendars We use team-wide calendars for collective notification and to manage team logistics and events. Additionally, specific teams within Developer Relations may maintain calendars specific to their programs (such as the Developer Advocacy team calendar). Developer Relations Team Community Events Developer Advocacy Team Developer Relations OKRs Every quarter, we work on team Objectives and Key Results (OKRs) that align with company OKRs. OKRs we seek to align with: Marketing OKRs DRI Responsibilities For each quarterly objective and key results, the Developer Relations team will assign a DRI . For our team, we have responsibilities that build upon the GitLab guidance on achieving and updating . Typically, People managers are the DRIs for objectives while ICs are the DRIs for key results. Objective DRI Responsibilities Own strategy for achieving objectives including supporting the DRIs for key results that will help to achieve our objectives. Collaborate with the owners of the key results that contribte to your objective to set a plan to deliver on the KRs and objective. Maintain communication with KR owners - synchronous or asynchronous - throughout the quarter as needed. Provide bi-weekly updates in the epic and in the Developer Relations bi-weekly team meeting agenda on the objective including completion percentage and status. We recognize that there will be no change from the previous report at times. Present overview and status updates in team business reviews. Escalate any urgent needs to your manager. Key Results DRI Responsibilities Create and manage strategy for achieving the key results. Manage dependencies, set actions, and define how your items will be scored. Provide bi-weekly updates in the issues in the GitLab OKRs project including completion percentage and status. The issues are the single source of truth for your KR. We recognize that there will be no change from the previous report at times. Ensure key result information is up-to-date for team business reviews. Escalate any urgent needs to your manager. How we update our OKRs To update our list of current OKRs : Follow the OKRs in GitLab handbook Create OKRs, and KR items. Add the following labels: Division::Marketing , Department::Developer Relations , OKR . OKR Health: We use issue health indicators to help people understand an OKRs status at a glance. These status indicators are: on track needs attention at risk Progress : Edit the progress attribute in KRs to indicate how much progress has been made. Developer Relations KPIs The Developer Relations team monitors several Key Performance Indicators and related Performance Indicators . Unique Wider Community Contributors per Month (target: Above 200 contributors per month) üîó Wider Community merged MRs per release üîó Developer Relations Monthly Outreach Active Community Members GitLab for Education Quarterly Active Seats MRARR (target: Identified in Tableau Chart) üîó Team Logos GitLab Developer Relations team logos can be found in .png and .svg formats by searching for gitlab-devrel-logo in Google Drive. Team Budgets Learn more on the Developer Relations budget page Community Diversity, Inclusion, and Belonging In alignment with GitLab‚Äôs core value of Diversity, Inclusion, and Belonging (DIB) , the Developer Relations team seeks to purposefully design DIB into every facet of its programs and operations. We seek to foster DIB at GitLab and within the wider GitLab community. DEI Strategies As DEI (Diversity, Equity and Inclusion) allies in the open source community, GitLab‚Äôs Developer Relations team is committed to the following DEI efforts within our contributor communities: DEI project badging: Partner with community-wide initiatives to establish a mechanism to recognize, support and promote DEI efforts through a badging system. Highlight the DEI values and inclusion efforts of GitLab‚Äôs projects. Encourage open-source projects hosted on GitLab to do the same. First-time contributor inclusion: Perform user research studies on first-time contributors to learn and improve the experience. Improve documentation from perspectives of first-time contributors. Improve community onboarding for newcomers. DEI group participation: Track DEI group participation among GitLab team members, beginning with the Developer Relations team. Encourage team members to attend open-source DEI working groups and events. Poll team members quarterly to track participation. Expand from Developer Relations to Marketing and then across GitLab. Swag/contributor points coupons at qualifying events: Offer GitLab swag and GitLab contributor points coupons at qualifying events. Incentivize community members and potential contributors with coupon codes. GitLab contributor resource groups: Form GitLab contributor resource groups similar to GitLab Team Member Resource Groups (TMRGs). Include mentoring/coaching opportunities. Consider groups for non-contributing developers or for Developer Relations team members. Consider hosting events/days for specified underrepresented groups. Planning Events and Activities This section is meant to document tips and best practices that the Developer Relations team, and GitLab team, should keep in mind as they plan events and activities. Images: We seek to promote the use of images that represent a diverse group of users, customers, and community members. When we see a lack of diverse representation, we speak up and actively help update those images when possible. Speakers: As event organizers and participants, we seek to include a diverse set of speakers in events that GitLab organizes or touches. We are open-minded: We actively seek feedback and keep an open mind about our current policies. We are open to change and are willing to make structural changes to ensure that we continue to foster DIB among our team and the wider GitLab community. We retain a growth mindset and keep learning: We read articles, attend workshops, and participate in trainings that help educate us about how to foster DIB in our community and how to be inclusive ourselves. We encourage a diverse set of community members to participate in research: We recognize the product inclusivity is important and that we need to build with our community, not just for them. We promote the GitLab Diversity Scholarship program : This scholarship supports Diversity, Inclusion, and Belonging-focused events financially. Communities who inspire us We take inspiration from the great work being done by other communities. Some of the communities who we take inspiration from: Linux Foundation - A large, engaged community that act as custodians for important open source technology. CNCF - A large, engaged community that act as custodians for important open source technology. FINOS - A large, engaged community that act as custodians for important open source technology. Debian - A large, engaged community that act as custodians for important open source technology. GNOME - A large, engaged community that act as custodians for important open source technology. KDE - A large, engaged community that act as custodians for important open source technology. Fedora - A large, engaged community that act as custodians for important open source technology. Drupal - A large, engaged community that act as custodians for important open source technology. Wikimedia Foundation - This community is a champion for free information with a large, engaged community. Kubernetes - This community consists of a large network of user groups and champions that serve to help each other grow and better utilize Kubernetes. AWS - This community consists of a large network of user groups and champions that serve to help each other grow and better utilize AWS. Dev.to - This community creates a welcoming place for the tech community, particularly newcomers, to learn and share content. Hacker News - This community is known for its engaging discussion of the latest tech news and trends. Google Summer of Code - This community inspires us through their work to make the tech community more diverse and inclusive and create new opportunities for people new to tech. Outreachy - This community inspires us through their work to make the tech community more diverse and inclusive and create new opportunities for people new to tech. Grace Hopper Community / Systers - This community inspires us through their work to make the tech community more diverse and inclusive. Lesbians Who Tech - This community inspires us through their work to make the tech community more diverse and inclusive. Techqueria - This community inspires us through their work to make the tech community more diverse and inclusive. Latinas in Tech - This community inspires us through their work to make the tech community more diverse and inclusive. Women in Tech - This community inspires us through their work to make the tech community more diverse and inclusive. Women Who Code - This community inspires us through their work to make the tech community more diverse and inclusive. Rails Girls - This community inspires us through their work to make the tech community more diverse and inclusive. Community Learning Pathway The Community Learning Pathway is a course built to educate the community on how the Developer Relations team works, the different community programs and how to contribute the GitLab. Members of the Community and GitLab team members who complete the course will earn a badge. Community Building Reading Group The Community Building Reading Group is for GitLab team members interested or engaged in building communities at GitLab. Hosted by members of the Developer Relations team, this learning-focused group examines various principles and practices related to imagining, designing, building, nurturing, growing, and supporting communities. Potential topics of study and discussion include: Leading and conducting community activities Welcoming new contributors Managing relationships in and with communities Negotiating community authority and power relations Architecting and enforcing community codes of conduct Cultivating community cultures Measuring community health and success Converting community participants into community contributors Encouraging community mentorship Building community-powered innovation and business models Assessing community infrastructure and governance models Understanding community value propositions and exchanges By collaborating as part of this group, members aim to: Hone their craft. Working with communities requires thoughtful and skillful practice. This group provides a space for collectively reviewing, assessing, and learning from materials that help members become better practitioners. Create space for support and growth. Working with communities requires emotional labor, and people who undertake it often benefit from spaces to discuss the work‚Äôs challenges with like-minded collaborators. This group would function as one such space. Generate and share resources. Working with communities is easier with knowledge of best practices and trusted frameworks. By reading and reviewing materials on the state of the art, members generate a knowledge commons others can access and from which they can learn. Any GitLab team member interested in community-building practices is welcome to participate in and contribute to the group. Unlike typical GitLab book clubs , this reading group: is an ongoing effort rather than a discrete and time-delimited event is focused on a series of works rather than a single one The reading group operates on a cadence group members determine together. Group members also collectively determine the material‚Äîfor example, a book chapter, a white paper, a research report, a presentation recording, or a case study‚Äîthey‚Äôll cover each week. Group members propose materials for the group to study and discuss by opening an issue in the Developer Relations team‚Äôs Community Building project using the reading-group template, then attaching the Reading Group::Proposed label to it. Group members can then browse one another‚Äôs suggestions and collectively select what to study. When they determine what they‚Äôll read, they re-label the issue Reading Group::Up Next. When they begin reading and studying proposed material, they re-label the issue, applying the Reading Group::Now Reading label. And when they‚Äôve finished a selection, they apply the Reading Group::Finished label to the associated issue. A project board tracks all selections. As they read, group members share notes and impressions asynchronously via files stored in the Community Building project. When they have completed a selection, they polish these notes and update the Community Building wiki accordingly. In each cycle, a group member (typically the person who proposed the materials) acts as ‚Äúleader.‚Äù Group leaders pose some basic discussion questions or thought-generating insights to guide the group‚Äôs reading and frame its discussion. Group members meet at regular intervals for live, synchronous discussion of the reading materials (suggested time for discussion meetings: 45 minutes). Recordings of these meetings are available, but because discussions often contain personal details and sensitive issues, these recordings are only access to GitLab team members via an internal Google Drive. Community Learning Pathway: Course Resources Community Learning Pathway The Community Learning pathway is a course on the GitLab Learn platform, ‚Ä¶ Community Programs Meet the Community Programs team at GitLab Contributor Success Team Contributor Success Team Core Team Becoming a Core Team member A new member can be added to the Core Team at any time through the ‚Ä¶ Developer Advocacy Developer Advocates build GitLab's technical brand with deep, meaningful conversations on engineering topics relevant to our community. Developer Relations - Content Effectiveness How the Developer Relations team measures effectiveness of content it creates. Developer Relations Content Requests How to request content from the Developer Relations team Developer Relations Department Performance Indicators Performance Indicators for the Developer Relations Department at GitLab Developer Relations Events Events are a great way for GitLab and the Developer Relations team to connect with customers and the ‚Ä¶ Developer Relations Program Management The Developer Relations team works from issues and issue boards. If you need our assistance with any ‚Ä¶ Developer Relations workflow: UTM Tracking Strategy Overview The purpose of this page is to outline the UTM strategy of the Community team and how it ‚Ä¶ Developer Relations Workflows and Tools Workflows Team Workflows Code of Conduct Enforcement Team Budgets Developer Advocate Community ‚Ä¶ Developer Relations: Program Resources Contact e-mails The team uses a set of contact e-mails, generally one per program, with additional ‚Ä¶ GitLab Co-Create Initiative Goal The Co-Create Program is designed to provide our customers with the necessary support and ‚Ä¶ GitLab Community Apps GitLab Community Apps Overview The GitLab Community Apps is a suite of tools that enables the ‚Ä¶ GitLab Contributors Program Learn about the GitLab Contributors Program from the Contributor Success team under Developer Relations GitLab Meetup Checklist This guide is intended to help Meetup organizers run events that their community will love. Our aim ‚Ä¶ Leading Organizations Leading Organizations are groups and people who consistently make meaningful contributions to GitLab. Strategic Plans Technical Marketing Learn more about the purpose, process and output of GitLab's Technical Marketing. Last modified July 17, 2025: Removes outdated strategy page ( 387298cd ) View page source -  - please contribute .",
    "headings": [
      "Developer Relations",
      "What is DevRel?",
      "Our mission & vision",
      "Our Strategy",
      "Meet the Team",
      "How to reach us",
      "Chat with us",
      "Email us",
      "File an issue",
      "Emergency contact",
      "How we work",
      "Developer Relations Team resources",
      "Our handbooks",
      "Our workflows",
      "Team touchpoints",
      "Our calendars",
      "Developer Relations OKRs",
      "Developer Relations KPIs",
      "Team Logos",
      "Team Budgets",
      "Community Diversity, Inclusion, and Belonging",
      "DEI Strategies",
      "Planning Events and Activities",
      "Communities who inspire us",
      "Community Learning Pathway",
      "Community Building Reading Group"
    ],
    "word_count": 3287,
    "extracted_at": "2025-07-21 20:13:59"
  },
  {
    "document_id": "gitlab-handbook-581090",
    "url": "https://handbook.gitlab.com/handbook/marketing/corporate-communications/",
    "title": "Corporate Communications",
    "category": "Marketing",
    "content": "Corporate Communications Handbook Mission Statement, What We do, Team Norms, Contact Info and Resources for Corporate Communications at GitLab Welcome to the Corporate Communications Handbook Mission Statement We serve as strategic advisors to GitLab executives and cross-functional teams on issues that impact team members, customers, partners, and other business-critical parties. We exist to positively influence the perception of GitLab by reaching economic buyers, technical champions, community contributors, advocates, investors, and industry analysts. We do this by developing and implementing strategic external communications plans that protect the brand, and generate awareness and preference for GitLab. This page is the single source of truth for corporate communications objectives/goals, contact information, messaging, PR/social media guidelines, approval processes, strategy and more. What We Do The GitLab Corporate Communications team is responsible for the following activities and communications channels: Media relations (print/broadcast/podcasts) Media sponsorships Contributed article placement Executive visibility Awards Incident Communications (separate handbook page) Team Norms Celebrate individual wins, along with team wins Support each other professionally and personally Hold each other to a high standard We have short toes and welcome collaboration, feedback, and feedforward We strive for excellence Contacting GitLab‚Äôs Corporate Communications team Please use the #external-comms Slack channel. Speaking on behalf of GitLab Speaking on behalf of GitLab via a public channel such as a media interview (in-person or via phone), on a podcast, in a public issue on GitLab.com, on a forum, at a conference/event (live or virtual), in a blog or an external platform requires prior approval by the Comms team and must follow GitLab‚Äôs SAFE framework. To make a request, please use the #external-comms Slack channel. Spokesperson Criteria Being a designated company spokesperson is a responsibility that should be taken with the utmost seriousness. Spokesperson Criteria: Subject matter expert Business requirement for your expertise Approved by Comms as a spokesperson Trained by GitLab media trainer Manager approval Good company standing If you are new to being a spokesperson for GitLab, the Corporate Communications team may ask you for video examples of past speaking engagements (events, webinars, tutorials, etc.) for assessment. Media mentions, incoming media requests and interviews (including podcasts) Team members may be approached by reporters, podcasts hosts, etc. to comment on the company and/or conduct interviews. If you are asked to be quoted or to provide commentary on any matter as a spokesperson of GitLab, please provide detail of the opportunity to the Corporate Communications team in the #external-comms Slack channel before engaging. While team members may have established relationships with reporters, podcast hosts, etc., engagement on any matter related to GitLab should go through the Corporate Communications team. You can reach the team in the #external-comms Slack channel before engaging. Speaking Opportunities (conferences, meetups, webinars and other events) Developer Relations Speakers Bureau The Developer Relations Speakers Bureau includes GitLab team members who participate in community/user meetups and deliver technical talks. Participation in the Developer Relations Speakers Bureau is distinct from media and analyst relations overseen by the Corporate Communications team. Invited to Speak If you are asked to speak on behalf of GitLab at an event, on a webinar or at a Meetup, please contact the Corporate Communications and Developer Relations teams to ensure that the opportunity aligns with GitLab objectives and key narratives. Inquiries should be initiated in the #external-comms Slack channel before you accept the speaking invitation. Please allow 5 business days for evaluation. Opening an issue under Corporate Marketing to further collaborate on the opportunity may be requested. Submitting to Speak If you are planning to submit an event CFP or request to participate as a speaker for a webinar or Meetup, please ensure the opportunity aligns with GitLab objectives and key narratives. If you are unsure, please reach out to the Corporate Communications and Developer Relations teams. If accepted to speak, please notify the Corporate Communications and Developer Relations teams via the #cfp Slack channel w/link to the accompanying issue and ensure the teams have 7-10 business days to review your final presentations. Pursuing Speaking Opportunities Separate from GitLab We know GitLab team members are multi-faceted, and there may be opportunities to speak publicly that don‚Äôt overlap with your role at GitLab. In these cases, it is okay to do that, assuming the opportunity will not be in conflict with GitLab‚Äôs Code of Business Conduct & Ethics . In these instances, it‚Äôs necessary to keep your role at GitLab and affiliation with the company separate from the presentation. Additionally, you should not use GitLab branding, resources, or time allocated to your work at GitLab to prepare or deliver your presentation. Please add these views are my own to your comments, presentation, or social media. If you‚Äôre considering a speaking opportunity, which includes participating in podcasts or developing your podcast, that could be perceived as being associated with GitLab even if it is not; please share the opportunity with your manager and #external-comms for review before accepting it to avoid any potential conflicts. Event Booth Staffing If you are staffing the GitLab booth at an in-person or virtual event, you are representing GitLab. Please follow the company‚Äôs SAFE framework when engaging with booth visitors and event attendees. Event Support Requests The PR team supports corporate-sponsored industry shows such as RSA, Black Hat, KubeCon NA, Google Cloud Next, and AWS re:Invent, where we make announcements and/or an e-group member attends. Our media strategy focuses on technology publications, business media, and vertical media only if we have a brand-name customer who will speak to the press or a product announcement tied to a vertical. The full criteria for PR support at events includes: Spokesperson Availability: An e-group member or designated delegate is confirmed to be onsite and available for interviews. Geographic Alignment: The event is held in a country or region the corporate communications team currently supports (US, UK, Germany, France, Japan, Australia). Media Presence: At least three journalists from GitLab Top Media will be present at the event. News Hook: The event aligns with a compelling news hook related to a product announcement, significant partnership, or major industry trend for media or analysts in attendance. Additional considerations include: Customer Availability: At least one customer approved to speak with the media on behalf of their brand about their GitLab experience is confirmed to attend. Customer contact information must be provided to the PR team 6 weeks in advance. Analyst Alignment: At least three analysts covering GitLab‚Äôs primary markets will be present at external events. Vertical Industry Support Requests GitLab Corporate Communications takes a strategic approach to vertical industry support in alignment with the broader company strategy. Currently, our focus includes the public sector - a well-established area of our business. Specific support for finserv and telco or other verticals will be considered when there are referenceable customers who are willing to speak with the media and the PR team has allocated the appropriate resources. This ensures that our efforts are aligned with key business objectives. Research-oriented requests Analysts For analyst research-oriented requests, please consult the Analyst Relations handbook section and direct questions to the #analyst-relations Slack channel. Media All media inquiries and requests must go through the corporate communications team via the #external-comms Slack channel. Honorariums If you are approached by external parties seeking to provide payment for a GitLab team member‚Äôs time, please contact the corporate communications team via the #external-comms Slack channel to discuss the opportunity and approval process. Social Media Please consult the Social Media team ( @social on Slack) for guidelines on representing GitLab on your personal social media platforms. If you are contacted on a social media platform and asked to share/retweet or provide commentary as a spokesperson of GitLab, please reach out to the social media team to provide details about the opportunity in the #social_media_action Slack channel. Writing about GitLab on your personal blog or for external platforms It is necessary to keep your role at GitLab and your affiliation with the company separate from your personal blog or other external platforms. Additionally, you should not use GitLab branding, resources, or time allocated to your work at GitLab to prepare materials for personal projects. If you would like someone to check the draft of your personal work that could be perceived as being associated with GitLab even if it is not, please share it with your manager and the Corporate Communications team who will be happy to review it for potential conflicts before it is published. Please post it in the #external-comms Slack channel with a short summary and allow 5 business days for review. Public GitLab Issues Posting in and discussions occurring within a public GitLab issue should follow the same guidelines as if you were posting about GitLab on social media, engaging with community members in a forum or conducting an interview with a media outlet. You are externally representing and communicating on behalf of GitLab. When representing and/or communicating externally on behalf of GitLab, please follow the SAFE framework. Being mindful of how you say things within open issues will help keep the company SAFE. We all represent the company. Sharing Media Coverage Some media outlets (including these ~14,000 newspapers and magazines ) require GitLab to hold a license to share (and do the various other things noted below with) extracts, quotes or headlines of print and online articles - both internally (eg. via slack, email or in confidential GitLab issues) and externally (eg. on GitLab‚Äôs social media channels). The sharing of bare hyperlinks to articles (without extracts, quotes or headlines) does not require a license. A license may be required to do any of the following with extracts, quotes or headlines of print and online articles: Photocopying, faxing, scanning, emailing or copying; Saving on an internal or external intranet or shared drive; Printing, photocopying, emailing or distributing material received from a media monitoring organisation or PR agency; Posting material on internal or external websites or social media accounts. If you are interested in doing any of the above with a media article (or an extract, quote or headline) internally or externally beyond just sharing the bare hyperlink, please reach out to the Corporate Communications team via the #external-comms slack channel before proceeding to confirm if a license is required. Requests for External Announcements Please reach out via #external-comms in Slack if you have a request. Partner Requests for External Communications Support Any use of GitLab‚Äôs name, brand, or logo requires prior email approval by GitLab according to the process outlined below. Partner-led Blog Posts: GitLab is proud of its collaborative partner program, and we encourage partners to showcase their solutions, capabilities, and customer success stories through partner-led blogs. Please send all blog posts, including GitLab, to the GitLab Corporate Communications team at press@gitlab.com or #external-comms in Slack for review and approval. Press Release Criteria and Approval Process: Partners seeking to issue a press release that includes mention of their partnership with GitLab must meet the criteria outlined below and in the GitLab Partner Portal. Partner public relations participation criteria: A signed contract as a Select partner Minimum 10 joint customers and/or a strategic business plan New partners: please reach out to your account representative for guidance. Note that GitLab requires up to 6 weeks of lead time to support external communications requests. Please email your account representative for guidance on the approvals required and copy the GitLab Corporate Communications team at press@gitlab.com . GitLab account representatives: Any requests for public relations support requires approval from your executive sponsor, Nick Cayou. Please reach out via #external-comms in Slack if you have questions about this. GitLab Vendor Reference Requests If you receive a vendor request for GitLab to act as a reference (case study, blog post, GitLab logo on their website, press release, etc.) for the product, service, and/or technology that your GitLab team is using, please refer to the process outlined on the Brand Strategy team‚Äôs handbook. For partner-led blogs or press releases, please refer to the Partner Requests for External Communications Support section of the handbook. Note that due to the volume of requests, GitLab rarely writes joint press releases. Corporate Communications Resources and Trainings This page is being updated. Social Media Trainings Social Media 101 Training + Certification Please ‚Ä¶ GitLab Incident Communications Plan Escalations, Processes, and How to Manage Incidents GitLab Speakers Resources Event Requirements If you have been invited to speak on behalf of GitLab, please reach out to ‚Ä¶ Last modified March 6, 2025: Corp Comms Handbook: Add details to sharing media coverage ( 56c38171 ) View page source -  - please contribute .",
    "headings": [
      "Corporate Communications Handbook",
      "Welcome to the Corporate Communications Handbook",
      "Mission Statement",
      "What We Do",
      "Team Norms",
      "Contacting GitLab‚Äôs Corporate Communications team",
      "Speaking on behalf of GitLab",
      "Spokesperson Criteria",
      "Media mentions, incoming media requests and interviews (including podcasts)",
      "Speaking Opportunities (conferences, meetups, webinars and other events)",
      "Event Support Requests",
      "Vertical Industry Support Requests",
      "Research-oriented requests",
      "Social Media",
      "Writing about GitLab on your personal blog or for external platforms",
      "Public GitLab Issues",
      "Sharing Media Coverage",
      "Requests for External Announcements",
      "Partner Requests for External Communications Support",
      "GitLab Vendor Reference Requests"
    ],
    "word_count": 2084,
    "extracted_at": "2025-07-21 20:14:01"
  },
  {
    "document_id": "gitlab-handbook-736457",
    "url": "https://handbook.gitlab.com/handbook/sales/",
    "title": "Sales Overview",
    "category": "Sales",
    "content": "Sales The GitLab Field team includes multiple functions: Enterprise Sales, Commercial Sales, Customer Success, Channel Partners, Alliances, Field Operations Welcome to the Sales team homepage The GitLab Field team includes multiple functions: Enterprise Sales, Commercial Sales, Customer Success, Channel Partners, Alliances, Field Operations. This page serves as our home base. From here, you can find a wealth of resources from all of the teams in our department. Interested in collaborating with the Sales team? See our How We Work and Communicating with the Team sections. Want to learn more about our goals? Check out our most recent Objectives and Key Results (OKRs) . Quick Reference Guide Where to Begin Field Enablement Resources Sales Processes & Standard Operating Procedures Sales Meetings & Events Sales & Customer Success Onboarding Sales Training Sales Order Processing President‚Äôs Club Commercial Sales Sales Enablement Sessions Engage & Educate the Customer Sales Kickoff Enterprise Sales Command of the Message Facilitate The Opportunity Sales Meetings Inside Sales Most Commonly Used Sales Resources Deal Closure Channels Field Certification Program Retain and Expand Sales Territories Sales Manager Best Practices Forecasting Sales Term Glossary Field Flash Newsletter Investor Sales Support ACV Deep Dive Field Team Recognition Programs Customer Planning ARR Deep Dive Highspot - GitLab Sales Asset Management Tool Rules of Engagement for Selling GitLab & Partner Professional Services Field Operations Teams and Resources Customer Success Resources Helpful Sales Handbook Tips Sales Resources Outside of the Sales Handbook ‚Äî‚Äî ‚Äî‚Äî ‚Äî‚Äî ‚Äî‚Äî Field Operations Customer Success Teams FAQ from Prospects Resellers Handbook Sales Operations How to Engage a Solutions Architect Client Use Cases Customer Reference Sheet Deal Desk Account Planning Template for Large Accounts Dealing with Security Questions From Prospects Customer Reference Case Study Dynamic Board Field Enablement How to Engage a CSM/CSE How to conduct an executive meeting GitLab Support Handbook Sales Strategy CEO Preferences when speaking w/ prospects/customers Sales Systems Best Practices for Building Value with Customers Commissions Understanding How Our Customers Use GitLab Customer Success Operations Prospect Engagement Best Practices Account Ownership Rules of Engagement Parent and Child Accounts Opportunity Stages Growth Resources (Finding Seat Count) Record Ownership Routing Rules Forecasting Definitions and Processes Data Intelligence Associating emails to Salesforce Early to Mid-Stage Late Stage Post Sales Processes Team Member & Manager Resources ‚Äî‚Äî ‚Äî‚Äî ‚Äî‚Äî ‚Äî‚Äî Opportunity Types Submitting an Opportunity for Approval How to Amend a Subscription Quote Leadership Handbook Opportunity Naming Conventions How to Handle Vendor Setup Forms How to Renew a Subscription Quote GitLab Values & Certification Process How to Create an Opportunity True Ups GitLab Competencies & Certification Process MEDDPPICC Qualification Contract Resets GitLab Diversity, Inclusion & Belonging Sales Discovery & Qualification Questions People Business Partner Alignment for Sales GitLab ROI calculator Proof of Value Creating a Quote Quote Approval Matrix Delivering a Quote via DocuSign Marketing Resources Strategic Marketing Product Resources ‚Äî‚Äî ‚Äî‚Äî ‚Äî‚Äî ‚Äî‚Äî Marketing Strategic Marketing Handbook Product Team Handbook Sales Development Handbook Product Marketing Manager Assignments Engaging Product Management GitLab Value Proposition Customer-Facing Presentations Asking Questions/Giving Feedback on a Feature Lead and Contact Statuses Print Collateral Product Categories Inbound Lead Generation Sales Collateral Google Drive Features by Group Finance Process Business Operations Process Legal Process ‚Äî‚Äî ‚Äî‚Äî ‚Äî‚Äî ‚Äî‚Äî Deal Desk: Assistance with Quotes Business Operations Handbook Collaborating with Legal - Sales Deal Desk: Approval Process Data Team Handbook Legal Page Sending a Quote to Zuora Data Quality Process Engaging Legal in Deals How to Initiate a Refund IT Ops Handbook Access Requests Who We Are The Sales team is led by the Chief Revenue Officer (CRO) . Reporting into this individual are the: VP, Enterprise Sales VP, Commercial Sales (Mid-Market and SMB) VP, Field Operations VP, Customer Success VP, Global Channels VP, Alliances Chief of Staff, CRO The Sales team is organized into Large, Mid-Market, and SMB segments. (Descriptions of Sales segments can be found in the Field Operations Handbook - Segmentation section .) The people working with each segment and their quota are: Large: Strategic Account Executive (SAE) Mid-Market: Mid-Market Account Executive (MM AE) SMB: SMB Account Executive (SMB AE) How We Work The GitLab Sales team embodies our CREDIT values in every aspect of our work. Specifically, we constantly work to overperform and achieve strong results . We prioritize efficiency in our processes and operations. We succeed because of transparent , cross-functional collaboration . We are committed to hiring for and celebrating diversity , and we strive to create an environment of inclusiveness and belonging for all. And, we embrace a spirit of iteration , understanding that we can always improve. Sales Tech Stack For information regarding the tech stack at GitLab, please visit the Tech Stack Applications page of the Business Operations handbook where we maintain a quick reference table of who should have access to various tools and the designated owner for each to contact with questions. To see a full list of the tools that make up our tech stack, visit the Tech Stack Details page . Collaborating with the Team Please use the Handbook as much as possible to document important information. You should also use the Handbook as a starting point for any questions. Read here for guidance on how we take notes on the GitLab Sales team. Dogfood GitLab whenever you can ‚Äì to collaborate on ideas, gather feedback, organize projects, and more. When you have to use office applications, always use G Suite applications instead of Microsoft Office; for example, Google Sheets instead of Excel, Google Docs instead of Word, and Google Slides instead of Keynote or Powerpoint. Give the entire company editing rights whenever possible so everyone can contribute. Communicating with the Team The Sales team primarily communicates via Slack in our day-to-day work. Our main team channels are #sales , our general channel, and #field-fyi , our read-only channel for official field team announcements. Email is used in some segments where customer privacy dictates additional security measures. For a full breakdown of all Field Slack groups and the hierarchy of our Google Groups, see the Communicating with the Field Handbook page . Please reference the Sales Support and Sales Operation Handbook page for a summary of how to engage with deal desk resources. Chatter @contracts on the specific record in Salesforce where you will need assistance from the legal team. Please avoid contacting individuals directly so that discussions can be available for everyone to review and learn from. We strongly encourage every team member to review the GitLab Communication Handbook page upon joining the team, and occasionally return to it during your tenure here as a refresher. (You can also get certified on communication at GitLab.) Supporting Teams The Sales team works cross-functionally, both with teams within and outside of our organization. These teams include: Customer Success The Customer Success department is part of the GitLab Sales function and partners with our large and strategic customers to deliver value throughout their journey with GitLab. See our Customer Success page in the Handbook for more details. Inside Sales The Inside Sales department is part of the GitLab Sales function and partners with the sales and customer success teams to deliver maximum value to GitLab customers throughout their journey with GitLab. See our Inside Sales page in the handbook for more details. Channels & Alliances These teams help accelerate GitLab‚Äôs trajectory by connecting our business and customers to companies that can help compliment our product mission and/or drive customer adoption and usage of the GitLab platform. See our Channel and Alliances Handbook pages for more details. Sales Development Organization Sales Development Representative (SDR) - focused on inbound leads Business Development Represenative (BDR) - focused on outbound leads This team sits within the Marketing department and provides territory support to Sales team members through outreach, prospecting, and lead qualification. Key priorities include: Align on accounts and prioritize prospecting targets (both on the account and title levels). BDRs and SDRs are to set ‚Äòat bat‚Äô meetings utilizing sales development best practices Drive brand awareness within target accounts See the Sales Development page in the Handbook for more details. Support This team provides technical support to GitLab.com and Self-Managed GitLab customers. For an overview of support levels based on plan tier, see the Support Page . The Support ‚Üí Customer Success Manager (CSM) escalation process can be found here . During the sales cycle, potential customers who have questions that are not within the scope of Sales can have their queries escalated in different ways depending on the account size: For Strategic/Large accounts that will have a dedicated Solutions Architect, engage the SA so that they can triage and develop the request. For questions that you think technical staff can answer in less than 10 minutes, please use the #questions Slack channel. For more information, see the internal support section of the Support Handbook. By default, trial licenses do not include support. If you‚Äôve been contacted by a prospect whose evaluation of GitLab includes evaluating support expertise or SLA performance, as a member of the Sales team you can grant temporary support for their trial license. See the Internal Support Handbook for more details. If your customer contacts you requiring technical support, please immediately direct them to open a ticket through the Support Portal( https://support.gitlab.com/) . Please do not open a support ticket on behalf of a customer. More details here . For escalating a Support ticket, see the I want to escalate a ticket section. Product We work with the Product team to help drive the GitLab Direction based on customer feedback and needs. When you hear of feedback or you personally have feedback, you are encouraged to comment within the issue, if one exists, or create your own issue on our Issue Tracker . When you have an organization that is interested in a feature and you have commented in the issue and added a link to the account in Salesforce, please follow the process outlined on the Product Handbook to arrange a call with the product manager and account to further discuss the feature request. If a client has a question or suggestion about a particular part of the product, find out which individual on the Product team you need to speak by looking under DevOps Stages on the Product stages, groups, and categories page. Coronavirus Impact to Business Tracking To standardize our messaging around Coronavirus and the impact it is having on our prospects and customers, please reference the below processes: Use this for guidance on a standardized conversation Use this to capture anecdotal feedback from prospects & customers Add the string #covid in the SFDC Opportunity field [CP] Close Plan to indicate you have had this conversation with your prospect/customer and use this report to confirm your Opportunity is tagged correctly: COVID Mentions in CP Close Plan Assess and flag each SFDC Deal using the ‚ÄúCOVID-19 Risk Scale‚Äù field with the following definitions: Blank: No conversation or insight has been gathered yet Pending: Engaged with customer to validate current situation No impact: Oppty proceeding on close plan in customer‚Äôs words Med: Customer validates change to budget or timing but some ‚Äúhigh priority‚Äù purchases still happening High - Budget Change: Customer‚Äôs words: all budget gone in formal response to economy High - Priority Change: Customer‚Äôs words: Timing must push in direct response to economy Add high-level summary of impact to ‚ÄúCOVID Comment‚Äù and original amount prior to impact in ‚ÄúPre-COVID iACV‚Äù SFDC fields on the opportunity A note for Commercial Account Owners: add the string c19 to any activity record where a discussion was held. Export Control Classification, and Countries We Do Not Do Business In GitLab‚Äôs Export Control Classification (or ECCN) is 5D992.c. As a consequence of this classification, we currently do not do business in: Cuba, Iran, North Korea, Syria, Russia, Belarus, and the Crimea, Donetsk, and Luhansk regions of Ukraine. Performance Indicators Sales KPIs are Not Public and documented in the Internal handbook . Account Planning Account planning helps all AE's and the larger account team elevate opportunity-driven conversations into value-based conversations that focus on the customer's value drivers. Associating emails to Salesforce A quick guide on associating emails to Salesforce Best Practices for Building Value with Customers An overview of some of the GitLab Field team's best-practices to build value with customers. Command of the Message GitLab has adopted Force Management's Command of the Message customer value-based sales messaging framework and methodology Commercial Sales Welcome to the Commercial Sales Handbook The Commercial Sales department is part of the overall ‚Ä¶ Commissions Charter Sales Commissions is a part of Field Operations, reporting into Sales Operations. Our goal ‚Ä¶ Communicating with the Field Guide to communicating with and within the GitLab Field team using both Slack and email CRO Career Development Day CRO Career Development Day is a direct result of the feedback we received from you in our FY22 Engagement Survey on Career Development. It will include time to think big about your career, hear from team members across GitLab, and guidance to help you get your plan into writing and talk about it with your manager. Customer & Partner Fireside Chat What is a fireside chat? Fireside chats are less formal than an interview but more structured than a ‚Ä¶ Enterprise Sales The Enterprise Sales department at GitLab focuses on delivering maximum value to strategic and large prospects and customers throughout their entire journey with GitLab. FAQ from prospects See FAQs about GitLab's features, user management, statistics/logs, performance, installation, and support Field Communications The Field Communications team is responsible for creating effective, timely, and easily consumable communications with Sales and Customer Success audiences Field Manager Development Program The Field Manager Development Program equips managers with a foundational set of skills & practices for effectively managing remote teams across GitLab's field organization Field Operations The Field Operation team's vision is to manage field business processes, systems, architecture, enablement, champion data integrity, provide insights and predictability through analytics Field Team Meetings Overview of the primary meetings for the worldwide GitLab Field team GitLab Field QBRs Overview of GitLab's Quarterly Business Review process High Velocity Sales and First Orders Team at GitLab The High Velocity Sales and First Orders is responsible for delivering a cohesive GTM that enables customers and prospects to self-serve: from discovery and adoption, purchasing, expanding, and managing their GitLab subscription Idea to Production Demo Inside Sales Department The Inside Sales department is part of the GitLab Sales function who partners with the sales and customer success teams to deliver maximum value to GitLab customers throughout their journey with GitLab. Interview with an IT Agility Director Clips from an April 2020 interview with an IT Agility Director at a Fortune 500 energy company Manager Operating Rhythm A consistent management operating rhythm (MOR) fosters efficient, predictable growth by codifying best practices for how front-line managers in GitLab's field organization lead their teams MEDDPPICC MEDDPPICC is a proven methodology used for strategic opportunity management and complex sales process orchestration for enterprise organizations Negotiate to Close A sales negotiation is a strategic discussion (or series of discussions) between buyer and seller that ideally leads to a deal being closed. The main goal of the negotiation process is to reach an agreement that's acceptable to everyone. President's Club Predident's Club at GitLab Public Sector Public Sector at GitLab READMEs Sales Discovery and Qualification Questions An effective questioning strategy is critical to engaging customers in dialogue to truly understand their needs, build credibility and trust, and qualify the opportunity Sales Forecasting This page details the Sales Forecasting process Sales Operating Procedures GitLab sales process documentation Sales Order Processing This page has been deprecated and moved to Business Operations Sales Processes Sales Prospecting Prospecting is the process of initiating and developing new business by searching for potential customers, clients, or buyers for your products or services Sales Quick Start Sales and Customer Success Onboarding at GitLab is a blended learning experience focused on what new sales/ customer success team members need to know, do, and be able to articulate within their first 30 days or so on the job Sales Renewals Process Guide Renewals Lifecycle Management Process Guide for GitLab Sales Sales Revenue Programs The purpose of GitLab's Revenue Program is to improve the quantity of opportunities and closed business with defined, cross-functional sales motions to ultimately generate more ARR for GitLab. Sales Term Glossary Definitions of key terms for the WW Field Team Sales Territories Please see the Sales Handbook Definitions Document Sales Training GitLab's sales learning framework and sales training resources Territory Planning Overview Every Account Executive regardless of segment or geo should have a plan for how ‚Ä¶ The Customer-Ready Shadow Program The Customer-Ready shadow program offers a hands-on way to learn how different GitLab roles represent GitLab. We often learn best when we have the opportunity to learn from our peers, practice, and get feedback in an interactive way. It's also a great way to make new hires feel welcome and a part of our sales culture at GitLab. Tips for Selling GitLab or Partner Professional Services Please see the Internal Sales Definitions Document Total Addressable Market Please see the Sales Handbook Definitions Doc Understanding How Our Customers Use GitLab Guidance to GitLab sales team members to gain a better understanding of how customers are using GitLab Using Gainsight at GitLab The key aspects of using Gainsight at GitLab to drive success for your customer Last modified July 8, 2025: EUS - Access Requests Update ( b88590d3 ) View page source -  - please contribute .",
    "headings": [
      "Sales",
      "Welcome to the Sales team homepage",
      "Quick Reference Guide",
      "Who We Are",
      "How We Work",
      "Sales Tech Stack",
      "Collaborating with the Team",
      "Communicating with the Team",
      "Supporting Teams",
      "Coronavirus Impact to Business Tracking",
      "Export Control Classification, and Countries We Do Not Do Business In",
      "Performance Indicators"
    ],
    "word_count": 2910,
    "extracted_at": "2025-07-21 20:14:03"
  },
  {
    "document_id": "gitlab-handbook-285958",
    "url": "https://handbook.gitlab.com/handbook/alliances/",
    "title": "Alliances",
    "category": "Sales",
    "content": "GitLab Alliances Handbook We invite organizations interested in becoming a GitLab Partner to APPLY NOW . Alliance Mission ‚ÄúTo go fast, go alone. To go far, go together.‚Äù - Proverb At GitLab, we collaborate with well-respected, industry-leading cloud, platform and technology providers across all major industries to deliver the best curated modern devops platform. Our partners are a critical element of GitLab‚Äôs mission: to enable our customers with modern software-driven experiences, and to ensure ‚ÄúEveryone Can Contribute‚Äù through a robust and thriving partner ecosystem that cultivates innovation and stimulates transformation. Together, we can help enterprises lead the digital transformation necessary to compete effectively in the market today. The commitment to helping customers and partners succeed - how we contribute our time, technology and know-how to improve the communities where we work and live and grow our business - is a journey that is transparent, ethical and honorable. We demand high performance and high standards from ourselves and our partners. We look forward to working with you - to build and deliver the solutions that delight customers. GitLab Team Members: Please visit the internal* Alliance Handbook Page for additional information. Alliance Partner Program We are firm believers that partnership is the foundation from which collaboration and innovation is built upon. As a GitLab Alliance Partner, you‚Äôll have access to the resources, tools, and support you need to accelerate business growth providing greater customer value through solution offerings that are integrated and interoperable with GitLab. We recognize that not all partners have the same needs or goals, and as such, our program is designed with three Alliance Partner types in mind. Cloud Partners Platform Partners Technology Partners Partners that provide public cloud computing services and software marketplaces where customers can procure and deploy GitLab Partners that provide modern cloud / cloud-native application platforms which increase the modularity and extensibility of GitLab across enterprises and architectures Independent Software Vendors (ISV) Partners with complementary technologies that seamlessly integrate / interoperate with GitLab for more complete customer solutions Pillars for Successful Partnerships Mutually beneficial value exchange drives mutual partner success. We believe these pillars ensure a more sustainable future. Exposure - Partnerships that generate exposure to new markets, segments, and users. Product Knowledge - Partnerships that have product familiarity provide greater advocacy. Adoption - Partnerships, both upstream and downstream, that increase feature adoption and product/platform utilization. Revenue - Partnerships that have a material effect on revenue growth. Results - Partnerships that align on objectives and outcomes. Collaboration - Partnerships that are committed to building reciprocal relationships between organizations and teams. Engagement Models There are a variety of ways to partner together to develop solutions. Partner type, solution and/or services offering, and route to market are all considerations when determining the best option, resale or co-sell. Below are a few examples of how GitLab works with Alliance Partners to deliver consumable customer solutions. Marketplace (resale) Solution listings sold through partner software marketplaces and other digital storefronts OEM/Embedded (resale) Integrated or bundled solution offerings sold through direct and indirect channels ISV (co-sell) Collaborative selling motions that stimulate sales of our respective products, independently Program Benefits GitLab Alliance Partners are a key part of GitLab‚Äôs commitment to the DevOps community. Alliance Partnerships help customers get more value by uniting the capabilities of our products and technologies to provide end-to-end customer solutions. The GitLab Alliance Partner Program provides partners with the following program benefits: Brand Recognition Partner logo displayed on GitLab Alliance Partner Program webpage. Partners benefit from the association and increased exposure to the rapidly DevOps community GitLab brand use. Leverage for marketing purposes on websites, social media channels, and marketing and sales collateral Solution Validation Resources to enable our partners to develop partner solutions that integrate/interoperate with GitLab. GitLab validated solutions help build confidence and trust with customers and channel partners by providing assurance of solution readiness. Sales & Marketing Sales awareness and engagement. Promoting partners and solutions to stimulate sales Go To Market assets and collateral. Equipping partners with resources designed to market and sell our joint solutions to prospects and customers. Additional Resources Alliance Partner Onboarding If you are interested in becoming a GitLab Alliance Partner, you can learn more on our Alliance Partner Onboarding page. License Requests Alliance Partners may be eligible for NFR (not for resale) licenses to develop and test integrations with GitLab. You can learn more about the NFR program here . Acquisitions If you are a Partner interested in inquiring about a potential acquisition of your company please visit our acquisition handbook . GitLab Integration Instructions Learn about integrating with GitLab, as well as partnership, marketing, and licensing opportunities. Last modified June 27, 2024: Fix various vale errors ( 46417d02 ) View page source -  - please contribute .",
    "headings": [
      "GitLab Alliances Handbook",
      "Alliance Mission",
      "Alliance Partner Program",
      "Pillars for Successful Partnerships",
      "Engagement Models",
      "Program Benefits",
      "Additional Resources"
    ],
    "word_count": 789,
    "extracted_at": "2025-07-21 20:14:05"
  },
  {
    "document_id": "gitlab-handbook-359785",
    "url": "https://handbook.gitlab.com/handbook/sales/commercial/",
    "title": "Commercial",
    "category": "Sales",
    "content": "Commercial Sales Welcome to the Commercial Sales Handbook The Commercial Sales department is part of the overall GitLab Sales Division. We focus on delivering maximum value to SMB and Mid-Market customers throughout their entire journey with GitLab. Commercial Team Groups SMB Account Executives Mid Market Account Executives Area Sales Managers Getting Started as a New Hire Please ensure you read the Commercial Sales onboarding page . Top Tips to Onboard Quicker Bookmark the relevant SalesForce dashboard for your region, this is essential to your success. Your Manager will give you the link when you first join. Get familiar with the close date conventions used in Commercial Sales. Ensure you fully understand the Required 7 . Your teammates and manager are more than happy to help you with this if you need it. Read through reviews of GitLab to get an idea of what customers think about the product. Two good places to start are Softwareadvice.com and Gartner Reviews . Watching videos is core to your onboarding. You can watch YouTube & Chorus videos at 1.5x or 1.75x speed to get through them efficiently, you can still retain the information but in less time. Go to the Settings widget > Playback speed. When you first start, searching through Slack is a great way to find useful information as it‚Äôs our primary method of asking questions and announcing things to the company. Some channels that are particularly good for information: #questions #sales #competition Use BuiltWith.com to get an idea of what technologies a customer is using currently (though be sure to verify this with them) You might find it useful to create a Google doc to document all your learnings in your first 30 days, as you will get a lot of information to remember and it will also get you in the habit of taking notes, a key part of GitLab‚Äôs culture . You can never have too many coffee chats with colleagues. You don‚Äôt need to ask permission from people, just put some time in their diary. Make sure your calendar is always up to date so that you can get meetings from SDRs without having to moving them around. Listen to as many Chorus calls as possible. They are an excellent way to onboard. Add your own tips to this page as you onboard to pay it forward for the next new rep! Get familiar with GitLab and seaching for Issues, MR‚Äôs and handbook pages. This will significantly speed things up as you progress through onboarding. Continuous Learning Below is a list of resources considered highly valuable for continuous learning and development by Commercial Sales team members at GitLab. Note, that some of these resources are not publicly available, so consult a fellow teammate for access where necessary. GitLab Direction Includes GitLab‚Äôs Vision, Maturity framework and planned features and their release dates within each of GitLab‚Äôs Paid Tiers . GitLab Blog Monthly articles on Releases, Engineering, Open Source, Culture and other popular topics of interest. GitLab Unfiltered YouTube A YouTube channel private to GitLab employees with video recordings and playlists on company meetings, enablement sessions and other topics. Access GitLab‚Äôs Sales Enablement playlist . Chorus Recordings Our team‚Äôs history of call and demo recordings is a valuable training resource for new and existing sales team members. Sales & SDR Enablement Sessions Weekly training sessions covering popular product, market and sales training topics chosen by the sales and marketing team members. Product Study Guide A study course for team members to understand the current full scope of capabilities offered in each tier of GitLab and reasons for tier upgrades. Sales Training page Commercial Sales Enablement page Events When traveling please consider ROI of both any costs plus your time: If you are going to an event you think first: What is the total you will spend for travel? What is the total you will spend on food and lodging for me? What is the amount you will likely spend on customer meals (meals x customers x # of times)? How many total business hours will you be away from salesforce? 8 hours: then you need to get 5x return on $, and the fact that any event pipeline closes at about 30% How many total personal life hours will you be away from your personal life? Given the rough calculation above, you‚Äôve to be committed driving/booking enough Net ARR at the event prior to you going to the event Note: this doesn‚Äôt mean you can‚Äôt get travel approval without booking meetings. It means once you get travel approval it is on you to go get people to the event/meetings to create pipeline. Trip Notes The ultimate purpose of attending any GitLab field event is to gain insight and add value. Sid Sijbrandij, our co-founder, talks about the importance of conferences and events here . He believes the main goal of GitLab team participation should always be to connect with our customers and prospects and not to solely attend presentations. Trip notes are our internal process for tracking and capturing this data. Why and When? Trip notes are required for the entire Commercial Sales Team anytime a team member travels for the company while working at GitLab. We believe it would be fun and valuable if you also shared trip notes when you traveled for personal reasons; however, that is up to your discretion. How to properly document your trip notes? Please follow the best practice process and use the trip note template as a format to prepare for your future trip. Trip Notes Best Practice Commercial attendee will write up their notes in a google doc. Please save your notes as GitLab internal read only for Commercial Team review in the Commercial Sales Drive Trip Notes Folder . Once saved, please slack and share a link to your notes in the commercial_global_all channel to alert the team of your recent trip. Finally, please share your Post Trip feedback for the entire company and the Field Marketing team directly in the specific Event Issue on the ‚ÄòPost Event Recap & Feedback‚Äô spreadsheet. Give Back Project What is the Give Back Project? The Give Back Project is a self-selected opportunity to help the Commercial Sales team achieve better results. It is a finite project that, upon completion, is to be adopted by no less than 70% of the Commercial Sales team and used at least once a month. The Give Back Project is assigned to all new Commercial Sales team members and is required to be completed as part of their on-boarding process. Why is there a Give Back Project? The goal of the Give Back Project is to allow new team members to be able to instantly contribute to the Commercial Sales team Fosters GitLab‚Äôs values of collaboration and results The Give Back Project gives team members the opportunity to be exposed to problems on the team today and will allow the team to look back and see how we addressed shortcomings in the past How to properly document a Give Back Project Give Back Projects are described and worked by team members in the Commercial Sales issue tracker If it is something that needs to be repeated (like a customer AMA) an associated handbook entry is created with a description on how a new person could achieve this Although the Give Back Project is designed to be finite, there is always room for iteration at GitLab. Be sure to include any necessary instructions on how a different team member would be able to add to your project if necessary Example Give Back Projects Customer AMAs: Meetings for GitLab team members with current customers that provide an opportunity to ask them about anything in regard to their experience with GitLab Customer Meetings: Sharing the best practices for conducting any kind of external meeting at GitLab Trip Notes: allows team members who attend field events to track and capture data in order for the rest of the team to gain insight Doing Business with Partners/Channels: Guidelines on how to work with partners and resellers in order to ensure value is maximized in these areas How to Handle New Customers After They Purchase: Best practices for handling new GitLab customers based on the scope of their purchase Technical Evaluation of Customers: How to properly evaluate a customer‚Äôs current technical environment in order to create organizational alignment and prescribe how GitLab can best solve their problems For a complete list of our Give Back Projects and other Onboarding assignments our team is working on, please click the private link here . Paid Time Off (PTO) and Results We have found following steps beneficial to make the process of time off easy for Sales and keep business continuity. This does not serve as a replacement to the company wide Guide to Paid Time Off or add process for Sick Time Policy . This is the expanded approach to preparing yourself and the team for time off planned specific to the group. Inform Manager as in the GitLab team members guide to time off Ask a regional team member for coverage and share planned time off Select someone ideally in similar role and who has capacity to cover while OOO It may be helpful to create a shared doc of action items, and follow reference from the handbook There may be cases where double coverage or support from your manager is needed if no one else is available Note: For Family & Friends Day , there is no need for backup coverage as it is a publicly visible shutdown for GitLab. Please message in your below OOO auto-reply as such including the handbook page, and contact details for technical support Submit time-off in Time Off by Deel in Slack, and add your chosen team member who is covering for you as the assignee role for all tasks, you can label it something like ‚Äúimmediate and general‚Äù Create calendar invite with title: Ex: ‚ÄúFirst and Last Name OOO - (First and Last Name) is Covering‚Äù. Optional invite to your manager and person covering. Block the morning of your return date on your calendar so you can return to work with catch-up time for things like: Re-submitting forecast in Clari Ranking new accounts that came through Respond to email, support tickets, via Required 7 Optionally schedule time on the return day to sync with the individual covering for you Role responsibilities to prepare being out of office Any quotes that are currently out to clients, resend via docusign with the person covering for you cc‚Äôd on them. Intro AE covering to client in case either have questions via email Run this report , edit the dates field in the top right corner to be the dates you are OOO, then select ‚Äòrun report‚Äô. Make sure ZERO next steps are falling on the dates you are out and cover anything not urgent before PTO. This will ensure you leave you without a huge workload for your backup or you in return. If you have an urgent next step scheduled, reach out before vacation, inform the client you will be OOO and get either the person covering for you or your manager included by cc: on the email w/ intro If you have less urgent next steps approaching, assess if they should be handled before or after vacation and then edit the next steps date based on your assessment Set your email OOO auto-reply including the email of the person covering for you. If your manager is available the days you are out you can add them as well in the email message and any other urgent correspondence On the day before time off: Ensure all required 7 reports are up to date Submit forecast in Clari Options on phone notifications related to work: Encouraged: Delete apps associated with work such as email and slack Recommended if it is difficult to get these apps back on your phone: Silence notifications on apps associated with work Leave your computer closed and have a blast! Area Sales Managers have additional steps to consider before leaving for time off: Set expectations on coverage for 1:1s and team meetings Updating quote approval routing in SFDC to the person covering for you. Navigate to you name dropdown - My Settings - Personal - Approver Settings. Search for the person covering next to Delegated Approver, confirm and select Save In Navan, set Vacation Delegate in Settings - Account Details Submit forecast If planned time off exceeds the 25 consecutive days as outlined in the guide, request temporary ASM coverage for forecasting in Clari by submitting a request in the Sales Operations project. Role responsibilities of covering for a team member as backup Respond within 24 hours to the absent AE‚Äôs customers if they contact you. Address new Required 7 items that appear on your team‚Äôs Required 7 dashboard for the absent AE. Take any urgent customer calls or BDR/SDR calls that have been set up. If you are not able to attend for any reason, you are expected to tell your manager so that appropriate backup can be found. Customer or prospect calls on the calendar should not be delayed or rescheduled. Work on and close deals in the absent AE‚Äôs territory while they are out. Backup AEs are not required to: Cover tasks unrelated to the specific AE role. For example, if the absent AE is a member of a Team Member Resource Group (TMRG), you are not expected to attend TMRG meetings. Outbound campaigns to the absent AE‚Äôs customers (you can if you want to, of course). Agree to be a backup if you do not have time to do so, or cover multiple team members. There are other AEs who can help. Forecast on behalf of the absent AE. Only update their opportunities as needed. Required 7 New team members should familiarize themselves with The Required 7 . These are the 7 tactical skills required to be an excellent Commercial Sales Account Executive: Ranking your accounts - video here Rank all accounts and explain why; log your sources for future efficiency; this needs to be your (recent) ranking, not the previous owners, nor the ranking from the prior fiscal. If it‚Äôs unchanged, make the note that it is unchanged and why Building your (consider changing the deck) custom deck for any opp amount over $5k SMB $10k MM Amount (n.b. amount, not Net ARR) that: Calculates the ROI of using GitLab vs. next best option (this might be vs. do nothing) Provides the 2 options for the customer going forward - normally both with GitLab (example: Ult or Prem) Demonstrates a customised vision for the customer: ‚Äúwhat if you used all of GitLab to do DevOps in a single app?‚Äù Capture the full response, in the customers‚Äô words to that vision and the reasons why they think it is possible, or not possible. This capture can be done in the speaker notes so your customer can validate and then copied into an activity after the call. video here , and be sure to check out this video on creating an effective ROI slide deck and this supporting deck Capturing key information: How did the customer/prospect hear about GitLab and what is their understanding of what we do? Meaningful information on why we won/lost a deal Logging your call notes video on taking efficient notes during a meeting and top tips from a top performer here Updating your next steps - video here Command plans , what needs to be filled in: $5k SMB, $10k MM Amount - All fields in opportunity overview (the whys) and close-plan over this Amount threshold $10k SMB, $20k MM Net ARR - Full Command Plan over this Net ARR threshold If you don‚Äôt yet know the answers or have the data, you will populate the Command Plan fields with your script and next steps to get that information Exception to command plan: for channel managed opportunities we may not have access - put Channel-Managed in the opportunity title ( training session here and training deck here ) Keeping your opportunities up to date at all times video Account Ranking It is a requirement for the Commercial Sales Team to tier their accounts using the fields on the Account Object. This helps prioritize the accounts to go after when prospecting for new or expansion. Please see below definitions specific to SMB and Mid-Market AEs. Ranking Training and Definitions Commercial Sales: Account Ranking Training Clippet SMB Account Executive Definitions for Account Ranking Rank 1: Top 10 Accounts with new business or upselling possibility within the next 12 months Rank 1.5: Future opportunities that we should not lose track of as there is a sales opportunity here with no timeline Rank 2: Believe there is an opportunity, but will take additional work before opening and beginning a sales cycle Rank 3: Greenfield, SDR attention - perhaps a drip campaign SMB AE must have potential user field filled in on the account object for Rank 1, and 1.5 SMB AE must have the notes section filled in on why an account is Rank 2 or 3 Mid-Market Account Executive Definitions for Account Ranking Rank 1: Accounts that I am working to maximize their Net ARR this fiscal year. Rank 1.5 The subset of Rank 2 that is best and trending toward being future Rank 1s. Rank 2 Accounts that I am working to grow and I speak with them at least once a month. Rank 3 Accounts that I keep informed about GitLab and DevOps monthly. Close Date Conventions First, forecasting, down to even the opportunity level, is a routine exercise for accuracy, not motivation or aspiration. Each week on Wednesday it is required to update five values in Clari by close of business (5 PM) local time. This is Renewal Loss Best Case, Renewal Loss Best Case, Gross Net ARR Best Case, Gross Net ARR Commit, and Net 50/50. At this time, it is required to double-check pipeline cleanliness and always follow the close date conventions listed here. The close date should always be in the month that you believe it has the most likely chance of closing (with only one exception as dictated below). At all times the Net ARR amount should reflect your best estimate of the actual amount that the opportunity will have on it when it closes in the month reflected in the close date. There are no exceptions other than returning from an onsite visit, even if you have not spoken with the account. If you get a new opp you should quickly assess the account and, given your experience, make an educated guess on what amount the company will transact at. The Stage represents where you believe the customer is in their buying process, not only the specific steps they have taken with you. The three close dates: Last day of the month it will close in only if you have a compelling event defined The actual day the opportunity will close when the quote goes out for signature. It will appear past due if we don‚Äôt get the signature back and pushes to the Friday of the week it should close. Renewals default to this convention First day of the following month, no compelling event defined Placing the close date on the first day of the month is a temporary status of up to 48 hours during which time the AE would work directly with their Champion / Economic Buyer to confirm the compelling event and client timeline. Once determined, the AE would move the close date to the last day of the month of actual closing. This close date carries a window of roughly 60 days of when you think it will come in Example : It‚Äôs April 23rd, a new business Mid-Market opportunity is identified for a company at 410 employees and growing at an unknown rate (unclear due to being an agency). The company completed their evaluation with a trial ending this month, there are defined problems initially trying to solve, with some people who have used GitLab before. Question for AE and self, what % chance of the purchase occurring in April, May, or June? 90% April, 10% May Chorus recordings A recording Chorus license is mandatory for all Commercial Account Executives. Our intent is to record customer calls for the following reasons: For training, to make sure we are giving customers the best possible experience To give to the customer as a visual record of our conversations with them To verify any details we may have missed in the conversation Mandatory steps required to record calls Follow instructions for using Chorus Scheduler Deal Reviews Project 35 As we continue to grow as an organization, developing our sales skills to deliver an impeccable sales experience is a critical component of the customer experience, either leading them to enjoy working with GitLab or not, depending on the quality of that experience. We‚Äôve created a program called ‚ÄúProject 35‚Äù to help you improve your selling skills. We are utilizing our largest opportunities for the quarter to hone in our selling skills with the goal of these skills being valuable on all other sales opportunities. As part of Project 35 we will be focusing on the following core selling skills: Running excellent sales calls & importance of pre-call prep Stronger discovery to uncover Command Plan (why now, why GitLab, why do anything at all) Building ROI Finding & cultivating champions Negotiation Complex Deal Management Collaboration - amongst peers and leadership Preparation for your next role & large deal management During a Project 35 call, The AE who is discussing their opportunity will answer the following questions: Prep for a no. What are all the questions or reasons they will say no? Are we building a relationship (onsite, something else?) Nail the project name and the timing of the project (sell services) Selling against a ROI slide Based on the information uncovered in the prior questions, use supporting reasons for AEs to update their next steps live. Managers should enter their comments in the Manager Notes section for any deals they review live or asynchronously. Engage wider sales team. Who are, by name, the CSMs, SAs, Partners that are helping sell the deal. Please assign them to the discussion in the document so that they are able to join the call and contribute to the discussion. Opportunity Consults and Lightweight Deal Reviews An Opportunity Consult (OCF) is an in depth, two-way conversation between the AE and the ASM to review the opportunity Command Plan . The AE should expect to provide the ASM with more detailed information about the Opportunity Overview fields, the customer‚Äôs pain points and desired outcomes, challenges or gaps in qualification aligned to the MEDDPPICC opportunity qualification framework, articulate a Close Plan and identify the biggest opportunity risk(s) and action(s) to mitigate those risks. A Lightweight Deal Review (LDR) is a shorter (5-10 minute) deal review that is designed to identify gaps in the Command Plan and specific next steps. At the end of an LDR, an AE and ASM should have a plan in place to capture the information that is not in the Command Plan, and a specific plan of action on and before the next call. Opportunity Next Steps Best Practices Always keep Next Steps Date and Next Steps up to date as an assignment to a future version of yourself on how you will take action to continue the customers buying process. When you start your day you need to check all inputs like email, zendesk, and lead queue so you can triage those requests into your priorities for that day. Allocate times of your day in four ways: Customer meetings scheduled Proactive email and internal efforts Proactive calling efforts Time to check inputs again When beginning a proactive time block, open your opportunities view and sort by Next Steps Date. Your Next Steps should be specific and compelling so that you can take action on them within 3 minutes of reading. Next Steps should contain only the actions you will take next: no dates, no history, just the Next Steps When you update Next Steps , the Next Steps History will automatically capture your prior Next Steps , applying a date stamp and storing them in reverse-chronological order Please Note: If you previously included history in the Next Steps field, the next time you update Next Steps you will need to clear the field completely and input only your Next Steps Opportunity-Specific Slide Deck It is required that all opportunities above $10,000 (Mid Market) and $5,000 (SMB) in total amount (not Net ARR) will have a custom slide deck that is shared with the customer or prospect. The custom deck must be attached to the opportunity by pasting the deck link in the SalesForce field ‚ÄòLink to Custom Pitch Deck‚Äô on the opportunity home page. This will enable Mid Market Account Executives and SMB Account Executives to capture critical account information. Additionally, this will facilitate selling on value rather than features. Custom Deck Requirements Visual Requirements Deck‚Äôs main color will match or resemble that of the customer‚Äôs. Where possible, use the customer‚Äôs logo. It is appropriate to ask the customer for a blank template. Customer Agreed-upon Agenda When meeting with the customer, leverage an agreed upon agenda to aide in co-selling. Calculated ROI of GitLab v. Next Best Option For New Business the next best option could be ‚Äòdo nothing‚Äô or our competition. For Renewals the next best option could be to go back to what they were doing before. Two options (rough plans) with GitLab going forward For new business this takes the form of Two Lane Selling where we give them a high engagement and a low engagement option. For a renewal, this could be a one year v. a three year option, or Premium v. Ultimate. Non-Custom Single Application pitch to the customer This slide should have a visual representation of using GitLab as a single application for the entire software development life cycle. The intent of this slide is to have the conversation with the customer on ‚Äòwhat is possible‚Äô, and to capture their feedback Full capture of the customer‚Äôs feedback on the ‚ÄòSingle Application‚Äô slide Capture the customer‚Äôs actual words in the speaker notes of the ‚Äòsingle application‚Äô slide Red / Green Process and Procedures Red / Green Purpose Effective ASM coaching of the why now, why do anything, why GitLab and specific next steps the Account Executive will take with the prospect/client. The goal of the red/green process is to accurately forecast which opportunities will close for each designated fiscal period (Month/Quarter). The red/green process is meant to most acutely build skills around identifying the timeline that is most comfortable for the customer to close. Red / Green Definition Designating each opportunity that has a shot to close at the end of each fiscal period as either Red (not going to close before the end of the month), or Green (going to close before the end of the month), and updating manager notes with a defense of the color and a specific next step the AE will complete by the next check in (usually the next day). For context, a green account will have a ‚Äúwhy now‚Äù that corresponds with a close before the end of the period. - The threshold (unless otherwise stated) for accounts that will be reviewed during Red/Green is: - SMB: $2,000 NetARR or greater - Mid-Market: $7,000 NetARR or greater Red / Green Tactics Red/Green meetings are held the 15th (or closest non-weekend day prior to the 15th) of each month, and the last five work days of the month. Area Sale Managers should conduct R/G meetings live with each of their Account Executives. This discussion should not be held asynchronously. Checklist of items below in this order. Advance to next question once prior is confident Is this opportunity Red or Green? Why do anything at all? Why GitLab? Why now? (Is there a time-driven reason this opportunity will close within a specific time frame) What level is your closest relationship with? How can they help you: Get accurate information on the ideal time for the customer to buy GitLab? Get you access to someone else in the organization who has access to the above information? What is the AEs immediate next step based on the answer to the items above? If anything less than ‚Äúwait for account to move from closing to closed-won‚Äù, then see ‚ÄúWhy Now‚Äù question. An example of a specific next step would be to ask your closest contact: ‚ÄúIs this at all easier for you if we close this next month?‚Äù Once Red/Green discussion is complete on the account, the ASM will enter notes in the ‚Äúmanager notes‚Äù section of the opportunity to reflect the discussion and the immediate next step the account executive will take. Repeat the same process the following date for all accounts above the threshold. Red / Green Outcome Hit the forecast we commit to and build better sales skills for our AEs and better coaching skills for our ASMs. - Ideal skills that need to be built are: - Understanding the concepts and execution around knowing the ideal timeline the customer wants to close. - Identifying pain and having customers understand both the negative impacts of not switching to GitLab as well as the realized positive business outcomes by switching to GitLab. - Building a time-bound mutual success plan with the customer based on the severity or the ability for the customer to devote resources to a project. Red / Green Lookback Process At the first R/G meeting of the following period, the leadership team will submit their actual closed-won for the prior period as well as their final R/G commitment. Team will then discuss the reasons why each finished where they did and identify any items that led to variation from commitment. SMB Account Executives SMB Account Executives ‚ÄúSMB AEs‚Äù act as Account Executives and the face of GitLab for SMB prospects and customers. They are the primary point of contact for companies that employ between 1 to 99 employees. SMB Roles SMB Account Executives are designated into one of the following pod positions: First Order Pooled Expand Named SMB Account Executives in First Order will assist prospects in their evaluation through the first buying process. Depending on the account, the other three roles will be the customer‚Äôs primary point of contact for any renewal and expansion discussions. Collectively the team is responsible for working new business in their territory as well as handling the customer journey for new and existing customers. AMER SMB Pooled Account Executives are responsible for managing a subset of SMB customers who range from companies on day 1 of using GitLab, all the way to companies who‚Äôve used GitLab since their day 1. The Pooled AEs work collectively in a ‚Äúpooled‚Äù account ownership model meaning customers are aligned at the team level and all AEs are equipped to help. Pooled AEs work with customers to evaluate product and plan expansion, making recommendations to ensure a successful renewal with GitLab based on their needs. Please read below and through the SMB handbook page for more information . Critical Salesforce reports to follow and bookmark SMB AMER Required 7 SMB APAC/EMEA Required 7 SMB APAC/EMEA 1:1 Dashboard New Business Work Initial Qualification Meetings IQM‚Äôs from Commercial SDR Team Accept Sales Accepted Opportunities according to SAO Criteria Nurture and help prospects during their Trial evaluation after Accepting Opportunities Push to Webdirect or help with the Sales Order Process Customer Journey Inbound Queue Management Licensing/Subscription Management Troubleshooting Resource for Licensing/Subscription Management Quotes / Sales Order Processing Customer Health Check Process Gainsight Data in SFDC Definitions Inbound Queue Management Zendesk: Managing incoming requests received through support.gitlab.com The goal and focus of working Zendesk tickets for the SMB team is to help with upselling and renewals Within timezone (WIP), the Support team is responsible to take the lead on all incoming ZD tickets in the Upgrades, Renewals, and AR (refunds) queue . In off-hours, the SMB team will triage and handle any tickets which will breach during their timezone. Support will take the lead on all incoming requests in the queue and only forward to the sales owner when: There is an Net ARR affecting event from a customer -OR- There is a credit or other request which requires sales manager approval Salesforce Pipeline Activity Opportunity Management in Salesforce Prior to working a new opportunity always double-check the Account segmentation is ‚ÄúSMB‚Äù and the employee count for the company is less than 100, by viewing datafox information and verifying with LinkedIn (especially outside of AMER) Direct yourself every day to your Next Steps to know how to prioritize and organize your day. Recommendations on how to work through your next steps for the day: Sort by stage, placing highest priority stage at the top Prioritize the opportunities you are going to work on first by stage, amount, and close date Ensure ‚ÄúNext Steps,‚Äù ‚ÄúNext Step Date,‚Äù and ‚ÄúNext Steps Owner‚Äù are current with actionable and informative information that helps guide you on how to move the opportunity through the pipeline If a potential future opportunity that requires an action is greater than 30 days out, make sure this is detailed in the next steps field Once opportunities in the stages Discovery through Awaiting Signature are updated, begin working on Pending Acceptance. Continue to prioritize with the same criteria as above. Pipeline Generation In weekly communication with your direct management review the health of your pipeline and update records as needed in real-time. You should know at all times what your pipeline multiplier is and if you need to create more pipeline to have a successful month and quarter. Refer to your team‚Äôs Pipeline Generation checklist documents and the associated SFDC reports associated with keeping activity up to date. Commercial Sales Stages Activities and Exit Criteria Pipeline management is key to predictable, scalable revenue attainment and can make the difference between simply hitting your number and overachieving. Proper sales pipeline management helps you allocate your time correctly, increase deal velocity, and increase total deal volume, size, and revenue through accurate forecasting practices. A well-managed sales pipeline requires a clear process with defined activities and exit criteria that serve as a roadmap to getting a deal from discovery to closed won (or qualified out quickly). The following process is specific to the Commercial Sales team and will ensure you have a clean pipeline and accurate forecast. Detailed Exit Stage Criteria Google Sheet Exit Criteria at a Glance Please read through the Commercial Sales Opportunity Stages handbook page for more information. Web Direct Oppty Management in Salesforce Find the report view for all CFQ ‚Äúcurrent fiscal quarter‚Äù Web Direct purchases in your territory ‚ÄúSMB_Web Directs CFQ_name‚Äù: Check that there are no open opportunities that could have been a duplicate by viewing the opportunities listed under the Account If not a duplicate, place the main contact in the opportunity on the outreach sequence ‚ÄúSMB_Web Direct Outreach‚Äù - by: Madeline Hennessy Dependent on the opportunity and company if personal outreach is preferred, you must log your activity and have a next step date to follow up on your activity Licensing/Subscription Management Note: if you need access to a system, open an Access Request GitLab Trials & Subscription Management Access the CustomersDot to provide changes to a user, group, or subscription. Troubleshooting & How-To Resources for Licensing & Subscription Management Detailed instructions on how to handle problems with licenses and subscriptions can be found in these instructions and resources. Quotes | Sales Order Processing More information about sales order processing can be found in the Business Ops handbook section. Mid Market Account Executive Midmarket Account Executives are the primary point of contact between prospective and existing customers of GitLab within a space defined as mid-market, which currently works with companies that employ between 100 to 1,999 employees. These GitLab team members manage the spectrum of project sizes, ranging from small fast growing teams in smaller agile organizations to complex enterprise projects advising on the journey with GitLab to achieve specific business outcomes. Mid-Market AEs work closely in tandem with the business development team and sales management to manage a broad book of business spread over a large opportunity value range and focus on exceeding client expectations. Mid Market Roles New Logo AE : These AEs work on the Base Accounts that are not currently customers of GitLab. Once the customer has signed its first contract, the customer is transitioned to the SMB, MM, or ENT segment depending on the size of the customers. MM Key Accounts Named AE (MMKAN): These AEs work on current customers that have been deemed to be high spending (high CARR) or have the potential to be high spending (high LAM). To be successful the MMKAN AE must expand their accounts more than the standard expansion rate for their named list of accounts. The named list for each MMKAN AE will grow through the fiscal year as the MMKAFO AE wins new high potential customers. MM Territory AE : These AEs work geographic regions of accounts that have not been vetted to be New Logo AE or MM Key Account named AE. The role sells to both prospects and current accounts. ‚ÄúMM Key Accounts‚Äù can be used to refer to MM Key Accounts First Order and MM Key Accounts Named collectively. MM Key Accounts are the sub-set of MM accounts with a higher LAM and potential LAM. Core Responsibilities Own your set of accounts - build & execute your plan. Manage book of business: new business, expansion, renewals. Collaborate with Sales Development channel for handover of inbound qualified opportunities to progress to closure. Execute outbound campaigns. New Business Work Initial Qualification Meetings IQM‚Äôs from SDR Team Accept Sales Accepted Opportunities according to SAO Criteria Nurture and help prospects during their Trial evaluation after Accepting Opportunities Push to Webdirect or help with the Sales Order Process Selecting Target Accounts for marketing Log into Datafox or Sales Navigator Input your territory criteria Establish a list of accounts and sort by Company Head Count Search for keywords like DevOps Look into each account to see if they are actually yours Look into each employee that is either an engineer or technology professionals Add that company name to your list If not enough companies through this process continue below: Look for the intersection of revenue and vertical in Datafox Look at the account in SFDC to see if CE User Filter using signals if using Datafox Assess if they have had recent funding announcements Once selected add the company name, city, and zip code to your sheet Customer Journey Inbound Queue Management Licensing/Subscription Management Troubleshooting Resource for Licensing/Subscription Management Quotes / Sales Order Processing Customer Health Check Process Gainsight Data in SFDC Definitions Account Ownership Rules of Engagement for Commercial Sales updated 2022-09-22 The Commercial Sales Team follows the Account Ownership Rules of Engagement This section provides step by step clarity on how to follow the ROE . Process to follow Account will be organized into the following two categories: Accounts who were customers before February 1st of the fiscal year Accounts who became customers on or after February 1st of the fiscal year Accounts who became customers before February 1st of the fiscal year will follow this process It is the responsibility of the Account Executive who owns the account to qualify how many employees the account has prior to February 1st. Accounts who have less than 100 employees on or before February 1st will be owned by SMB for the fiscal year Accounts who have 100 or more employees on or before February 1st will be owned by Mid Market for the fiscal year As an Account Executive, if you qualify an account and are unsure of the rules of engagement by the number of employees or corporate address, you should screenshot the data you are reviewing, post it on the account in chatter and edit Account Rank Notes. Tag your Area Sales Manager when research is complete for further review by @ mentioning them. If the ASM has reviewed the data provided by the Account Executive as well as doing their own due diligence and is unsure of the rules of engagement, they should screenshot their research, post it on the account in chatter and tag the Regional Director for review by @ mentioning them. Finally, if a Regional Director is unsure of the rules of engagement after reviewing the data provided and doing their own due diligence, they should screenshot their research, post it on the account in chatter and tag the Regional Vice President for review and final decision. All final decisions for Commercial account and opportunity ownership are up to the sole discretion of the Regional Vice President of the Commercial Division. Accounts who became customers on or after February 1st of the fiscal year Accounts will be separated into the following categories Sales Assisted First Order Web Direct First Order For sales assisted first orders, it is the responsibility of the account executive who conducts the initial discovery with the prospect to research and qualify the number of employees and headquarter location for the account. If the account has less than 100 employees the account will be managed by SMB for the remainder of the fiscal year If the account 100 employees or greater the account will be managed by Mid Market for the remainder of the fiscal year If the account has greater than 500 employees or greater than 100 LAM dev please see the Rules of Engagement Between MMKAFO and Mid-Market Territory for FY ‚Äò23 for proper lead routing For web direct first orders we understand there may be a degree of differentiation of actual employee count versus what our systems capture based on the tools utilized to enrich data. It is the responsibility of the Account Executive who owns the first order to identify the correct number of employees after the web direct first order and ensure that the employee count is not ‚Äúwholly wrong‚Äù. Wholly wrong is used only for accounts that upon initial assignment are assigned by automation i.e. no team member reviewed them at first transaction. Wholly wrong is defined as the following Mid Market owned accounts with less than 80 employees SMB owned accounts with greater than 120 employees If an account is wholly wrong, it is the responsibility of the account owner to chatter @sales-support to reassign the first order and the account to the correct segment. If an account is not wholly wrong but above or below the segment line (respectively) is it the responsibility of the account owner to chatter @sales-support to flag the account to move to the appropriate segment at the beginning of the following fiscal year. All accounts that are not researched or identified as being assigned to the wrong segment will be reassigned. If the AE qualifies this and then keeps it, this can lead to disciplinary action. As part of the qualification process tt is expected to qualify the location of company headquarters and employee count so we can best support the customer. It is not acceptable to qualify location and employee count in a manner that jeopardizes the customer experience. If you are unsure, always tag your manager in chatter to review the data before involving the customer. Rules of Engagement Between MMKAFO and Mid-Market Territory for FY ‚Äò23 Fiscal Year 2023 Account Moves For all accounts that are in SalesForce.com as of February 24, 2022 the Mid-Market Key Accounts First Order team will own all accounts that are: Segmented to Mid-Market NORAM or EMEA Marked as ‚ÄúFirst Order Available‚Äù in SalesForce AND Have a full time employee count of 500 employees or greater as marked in the ‚ÄúAccount Demographic Max Family Employees‚Äù field under Account Demographics in SFDC. OR Have a potential user count of 100 users or more as measured by the LAM Dev Count Field. To avoid confusion the logic is [1 AND 2 AND (3 OR 4)] . Note: If an AE suspects that the employee count or potential user count is not accurate in our data sources, it is the AEs responsibility to uncover the employee count and potential user count during the discovery phase. If an account is identified to belong to either territory or First Order and the other party continues to work the lead without doing proper due diligence, the account will be reassigned to the appropriate party. New Accounts to SalesForce.com after Feb 24, 2022 For all inbound MQLs for which an account does not yet exist in SalesForce.com, the routing of that lead and account will be based exclusively on employee count. If the account has 500+ employees it will be routed to the MMKAFO team If the account has less than 500 employees it will be routed to the Mid-Market Territory team MMKAFO AEs are able to go outbound to accounts that are not yet in SalesForce.com that fit the criteria in the Mid Market Key Accounts definition: Mid-Market accounts that have either 500+ employees OR 100 potential users as defined by LinkedIn Engineering + IT personnel count. MMKAFO AEs are able to create the outbound accounts in SFDC that fit the above criteria, and ask Sales Operations to move the account into their name. Note: If it is found out that an AE asks for an account to be deduplicated in order to work said account, disciplinary action will be taken. Account Moves Throughout Fiscal Year 2023 If an MMKAFO AE finds out through discovery that a sub 500 employee account segmented to First Order in reality has less than 100 potential users, they should immediately ask for the account to be moved to Territory. If a ‚ÄúFirst Order Available‚Äù account is segmented to Territory, and the Territory AE finds out through discovery that the account actually has more than 500 employees, they should immediately ask for the account to be moved to First Order. The automation for new accounts in the system means accounts with under 500 employees but over 100 potential users will be routed to territory and left there unless they have no activity at the quarter change over. If it is found out that an AE intentionally ignores rules number 1 or 2 more than twice in a fiscal year disciplinary action is likely to be taken. Co-Selling Co-selling is the responsibility of both the Account Executive and their Area Sales Manager to join sales calls together. This is to ensure the best client/prospect experience, along with jointly finding the highest potential within that account. Area Sales Managers have an expectation to log a minimum of 5 co-selling calls per rolling 7 days, although we are aiming to achieve closer to 10-12 calls over a rolling 7 days. Co-Selling Roles when working with your ASM Primary Seller: Consider this role as the main pitch person. You are directing the conversation, sharing the deck and taking live notes and adding value, while also keeping on track with the agenda decided upon. Co-Seller: This individual is responsible for raw notes in Salesforce, time management, and digging into comments to identify areas where we should be finding additional information. The Co-pilot should be digging into levels and amounts of pain when the Pilot moves on without capturing this. For additional information please visit this reinforcement module Working with Channel Partners The GitLab partner network is ready to work with GitLab Account Executive‚Äôs in order to extend the customer selling and services capacity offered by Commercial Sales. Channel‚Äôs approach to this is called Partner Co-selling and working with Partners involves building a simple, clear, mutual customer opportunity plan establishing ‚Äúwho will do what, when?‚Äù. What are the key benefits from working with partners? AEs Working with Partners for Increased Customer Value & Net ARR Extended reach and capabilities via Partner sales and services capacity and reach via GitLab-trained Partner AE‚Äôs, SA‚Äôs, Engineers, and often a GitLab channel manager to coordinate/assist. Accelerated reach to new customer logos ‚Äú Land ‚Äù: Partners are beginning to bring GitLab new logo opportunities via mining their customer base. In many cases, Partners already have a ‚Äútrusted Partner status‚Äù with their customers, which also serves to accelerate new logo engagements. Increased customer ‚Äú Expand ‚Äù success: In many cases, Partners will sell and deliver the key services called for to ensure customers get the maximum value from their GitLab technology investment and drive stage advance along with user growth. Deployment and related services: For faster delivery and increased capacity, AEs are turning to Partners to sell and deliver these services, also CSM-like customer success services. In the case of OPEN partners via distributors, dramatic reduction in the admin steps associated with quote-to-order process. How do AEs work with partners for increased customer value & Net ARR? GitLab has a mature Partner network with good coverage of GitLab-trained Sales and Technical resources. There are a few ways in which AEs will work with a customer including a Partner. Approved Partner GitLab Deal Registrations As these are received in your territory, in most cases* you will be contacted by a GitLab channel team member to arrange a co-selling kickoff call to develop a simple Partner co-selling plan to share with the Partner. GitLab Channel Managers do not proactively manage all OPEN Partners. AEs can always request Channel Manager support for a Deal Registration by slacking channel-sales or available contacts. If you find themselves thinking 1. ‚Äúa Partner SA could execute on this customer-requested SA task‚Äù, or 2. AEs have customers that could benefit from a ‚ÄúPartner services attach engagement‚Äù, reach out on slack #channel-sales with a Partner engagement request, if possible with a link to the related account or opportunity. A member of the channel team will promptly reach out to learn more about the request, and connect you with a Partner that is pre-qualified to promptly and properly execute on the task at hand, and keep you updated along the way. AEs should lead planning and execution of the joint opportunity/customer pursuit with alignment and support of the partner and GitLab Channel Manager. The plan should be tracked in SFDC with tasks and action items . Partners should always get an email confirmation of any tasks assigned to them (via AE or Channel Mgr). Channel Managers will engage with AE‚Äôs in the following ways: When a new deal registration arrives in the AE‚Äôs pipeline To review 2-3 Partners for the AE to work with for AE-selected joint customer success motions: The Channel Manager will bring the possibilities forward during this call 2 examples of working with Partners are featured in this LevelUp AEs should share their thoughts about prioritizing which Partner activities would be best for which of their customers In the case of Open partners via distributions, when the opportunity is ready, AE‚Äôs email partnersupport@gitlab.com with the link to the opportunity requesting quote-to-order support (chatter alias coming soon) Resources to learn more about teaming with Channel Partners? If this is a first time for an AE, we recommend watching the available training delivered. This Levelup video starts with a basic understanding of the Channel Partner landscape . LevelUp video on Maximizing Value of Partners in a Deal specifically for AE‚Äôs to learn more about co-selling success. Learn more about Partner co-selling best practices, how Partners can help build out key elements of an AE‚Äôs R7 & Command Plans and much more in the Channel Sales Handbook . Slack #channel-sales or reach out to your Channel Account Manager with any questions or requests for assistance. The channel is closely monitored by several members of the channel team who are here to help AE‚Äôs succeed in co-selling in any way we can. List of GitLab-trained OPEN and SELECT channel partners Channel Partner Finder ** Here New Logo Team The New Logo Team is a specialized sales team within GitLab‚Äôs High Velocity Sales & New Logo organization focused on closing first-order deals in MM & ENT accounts. After the first transaction is closed by the New Logo team, the New Logo AEs are responsible to kickstart the handover process. Below are the responsibilities of the New Logo team and the Mid-Market Key Account Named team. When to Pass an Account Mid-Market or Enterprise New Logo AEs will own an account until an account becomes a paid customer. Once this happens, the account will graduate into their respective segment (SMB, MM, or ENT). Handover Process New Logo AE Responsibilities Please refer to the New Logo Team Playbook for additional information about the role and responsibilities. Ensure the opportunity is marked as ‚ÄòClosed-Won‚Äô. Ensure the customer has a working license. Log an activity (naming convention: [NL AE NAME] NL Account Summary for Handoff) on the account level detailing the following: Why the account chose GitLab (use case) The expected NetARR to be sold in the next 12 months Estimated timeframe of the next purchase Why you believe b and c to be the case Work with the Named or Territory AE, the CSM (if known), and the customer to set up a handoff call New Logo AE should take the lead on scheduling this call Note : Should the NL Rep and Named or Territory AE agree ahead of time that an email introduction will suffice, then the team can bypass the handoff call. If the initial amount AND the potential of the next opportunity are less than a combined NetARR of $10,000, or the inheriting AE agrees, a handoff email can be used. Ensure all material like custom decks are added into a dedicated customer sub-folder in the Customers & Prospects drive. Create a sub-folder in one of the folders labeled A-Z based on the first letter of the customer account name. (Example: Acme Inc. would go in the folder labeled ‚ÄúA‚Äù) Add all customer facing or internal documents related to that customer into the folder. This way the entire Account Team will be able to view all related content. For Web Directs without prior engagement :There will be no handover as the FO AE has not had any engagement. Digital Sales Room A Digital Sales Room is a secure, personalized webpage where AEs can share curated content, collaborate with prospects, and track buyer engagement throughout the sales process. It centralizes all sales materials, presentations, and communications in one branded space, eliminating scattered emails and creating a seamless buyer experience. Digital Rooms - Highspot Overview Training Digital Rooms 101 Engage Buyers with Digial Rooms Named/Territory AE Responsibilities Work with the New Logo AE, CSM, and customer to schedule a handoff call (or email). The goal should be to have two-way communication with the customer within one week of the initial close. If an email is used, the Named or Territory AE should respond at their earliest convenience to introduce themselves as the new primary point of contact Look at the account activities for the activity logged by the FO AE. Based on the above notes, open a growth opportunity if scheduled before the first renewal date Read through all notes tagged (ii), the custom pitch deck, and the command plan to gain an understanding of the account and its potential. Engage the CSM on strategic accounts and get them engaged asap For Web Directs: It is the responsibility of the Named/Territory AE to reach out to the new customer. Process to Move Accounts From Base to Named/Territory Please refer to the Go-To-Market Rules of Engagement page for additional information about account graduation for the New Logo Team. When to Consider Involving a Named or Territory AE Before the Initial Deal is Done There may be situations where it is beneficial to either GitLab, the Prospect, or both to introduce the Named or Territory AE before the initial deal closes. These situations include, but are not limited to: Extra support is needed for a strategic account. A CSM may need to be engaged before the initial contract is signed. An onsite meeting may need to happen and the Named/Territory AE is in a better geographical location to handle it. The customer has asked to be introduced to who will handle their account after the initial contract is signed. General Guidelines to Follow When Making this Consideration It is always the decision of the New Logo AE to determine if an introduction should be made pre-contract signature, but there are some general best practices to follow if an introduction is to be made. Ideally, pre-contract introductions would be limited to higher LAM accounts, so this does not become a scale issue. 99 LAMDev for Key Accounts ->49 LAMDev for Territory Accounts In an effort to not waste Named/Territory AEs time, an introduction should not be made unless there is a very high close percentage. Therefore, an introduction is best if made when the opportunity is in stage 5 or 6 . Named/Territory AEs and New Logo AEs should meet often (every other week on average) to identify accounts where a pre-contract introduction would make sense. Commercial Leadership Development Pilot Program This pilot program is for Commercial team members interested in learning more about Sales management and building foundational leadership skills. This program is designed to give team members: Exposure to leadership topics and development of foundational leadership skills Leadership frameworks that they can modify and apply to their teams Experience with the expectations of a sales leader and how that differs from an individual contributor role Opportunity to network with peers and other cross functional stakeholders The program will run for a total of 8 weeks; each week focusing on a new topic. See the proposed topics by week for the pilot program: Week Topic Description 1 Leading People Primary differences between being an individual contributor and a leader, establishing a V2MOM for your newly created team, building an inclusive culture, situational leadership, coaching model, establishing expectations for success and the cadence of events to drive consistent results on a daily, weekly, monthly, quarterly and annual basis 2 Running Effective 1 on 1s Core components for every meeting, how to capture and provide feedback from activities during the week, building consistency in performance through consistent accountability in one on one. 3 A Leaders Responsibility on Sales Calls Structure of an effective pre-call meeting, what roles a leader should focus on during the sales call, expected follow up for coaching and delivering results 4 Running Effective Team Meetings Key components to a great team meeting - recognition, training, results, pipeline creation and current events. How to structure a meeting to bring energy and ensure AEs leave with clear expectations for the week ahead 5 Coaching and Providing Feedback Utilizing different coaching frameworks based on situational need - GROW, SBI, Skill/Will Coaching Model. An HR partner‚Äôs perspective on key professional items that may arise and how to handle them 6 Forecasting & Managing Metrics Understanding what leading and lagging indicators to measure. Implementing programs based on the trends identified in metrics to ensure consistent, positive results. Learning how to forecast effectively and the role Red/Green plays in being a great coach and manager 7 Recruiting and Interviewing How Diversity, Inclusion and Belonging is essential to building a world class team. A recruiter‚Äôs point of view on how to attract top talent. Review and discuss our Commercial interview methodology. Discuss what questions and activities ensure our interview process is inclusive and legal 8 Components of an Effective Pipe Generation Campaign Review the primary reasons consistent pipe gen campaigns are needed for sustainable growth. Key components of an effective pipeline campaign. How to launch, reinforce, measure and recognize for effective results. Expectations of Participants Time Committment: A total of ~40 hours of dedicated time during the quarter between synchronous meetings and asynchronous work. The GitLab Commercial department expects all Team members to uphold the highest standards of moral and ethical behavior in harmony with GitLab‚Äôs CREDIT values. Engaging or promoting activities that are inconsistent with GitLab‚Äôs values is not acceptable. It is expected that Team members who are enrolled will uphold both stated and inferred values of working at GitLab. Items include but are not limited to: Good collaboration with other team members Assuming positive intent Continuing to deliver results in the team member‚Äôs current position Being inclusive during class discussions, accepting alternate views as alternate, not right or wrong, to foster belonging for other team members Additionally, it is our expectation that if participating in the program, team members will make their best effort to attend meetings and learning activities. If they are unable to attend, participants should give the facilitator as much advance notice as possible. If participants are not present in the course, they will be removed from the program. Who is eligible to participate? Any Commercial team member that is in good performance standing (not currently on a performance or behavioral warning) and has been in their current role for over 3 months. We will be selecting 12 participants for this first cohort. It is our itention that this program continue after the first pilot program to continue to give Commercial team members a chance to grow their skills. Other Related Pages Commercial Sales - Customer Success Territories Commercial Sales Enablement Welcome to the Commercial Sales Enablement Handbook Page Commercial Sales Opportunity Stages Sales stages activities and exit criteria High Velocity Sales and First Orders - Feedback Collection and Best Practices Overview of how HVS collects product, systems, and case operations feedback, along with how to best provide feedback High Velocity Sales and First Orders (formerly Global Digital SMB) Overview of the High Velocity Sales and First Orders Sales Model Renewals FAQ Customer Renewals - Frequently Asked Questions Last modified June 18, 2025: Update Commercial Sales HB Page ( d02e0b34 ) View page source -  - please contribute .",
    "headings": [
      "Commercial Sales",
      "Welcome to the Commercial Sales Handbook",
      "Commercial Team Groups",
      "Getting Started as a New Hire",
      "Top Tips to Onboard Quicker",
      "Continuous Learning",
      "Events",
      "Give Back Project",
      "Paid Time Off (PTO) and Results",
      "Required 7",
      "Account Ranking",
      "Close Date Conventions",
      "Chorus recordings",
      "Mandatory steps required to record calls",
      "Deal Reviews",
      "Project 35",
      "Opportunity Consults and Lightweight Deal Reviews",
      "Opportunity Next Steps Best Practices",
      "Opportunity-Specific Slide Deck",
      "Red / Green Process and Procedures",
      "Red / Green Purpose",
      "Red / Green Definition",
      "Red / Green Tactics",
      "Red / Green Outcome",
      "Red / Green Lookback Process",
      "SMB Account Executives",
      "SMB Roles",
      "Critical Salesforce reports to follow and bookmark",
      "Inbound Queue Management",
      "Salesforce Pipeline Activity",
      "Quotes | Sales Order Processing",
      "Mid Market Account Executive",
      "Mid Market Roles",
      "Core Responsibilities",
      "Account Ownership Rules of Engagement for Commercial Sales updated 2022-09-22",
      "Process to follow",
      "Rules of Engagement Between MMKAFO and Mid-Market Territory for FY ‚Äò23",
      "Co-Selling",
      "Co-Selling Roles when working with your ASM",
      "Working with Channel Partners",
      "Handover Process",
      "Process to Move Accounts From Base to Named/Territory",
      "When to Consider Involving a Named or Territory AE Before the Initial Deal is Done",
      "General Guidelines to Follow When Making this Consideration",
      "Commercial Leadership Development Pilot Program",
      "Expectations of Participants",
      "Other Related Pages"
    ],
    "word_count": 10311,
    "extracted_at": "2025-07-21 20:14:07"
  },
  {
    "document_id": "gitlab-handbook-283537",
    "url": "https://handbook.gitlab.com/handbook/customer-success/",
    "title": "Customer Success",
    "category": "Sales",
    "content": "Customer Success Customer Success & Renewals at GitLab The Customer Success department is part of the GitLab Sales function who partners with our customers to deliver value and positive business outcomes throughout their journey with GitLab. The team can be reached in Slack channel (internal only). Mission Statement To deliver value to all customers by engaging in a consistent, repeatable, and scalable way across defined segments so that customers see the value in their investment with GitLab, and we retain and drive growth within our enterprise customers. The mission of the Customer Success Department is to provide these customers with experience in order to: Accelerate initial customer value Maximize long-term, sustainable customer value Improve overall customer satisfaction & referenceability Maximize the total value of the customer to GitLab North Star Metrics Our top-level metrics are: Renewal Rate of ATR (available to renew) Growth ARR Customer Outcomes Realized Customer Success Teams Customer Success Manager handbook Customer Success Engineer handbook Customer Success Architect handbook Renewals Managers handbook Digital Strategy Digital Strategy handbook Demo Systems Demo Systems documentation Customer Success Decision Tree CSMAE Decision Tree - internal only Account Team The account team is comprised of the Strategic Account Executive/Account Executive, Solutions Architect (Enterprise), and Customer Success Manager. More information about the account team Overlap Between Solution Architects and Customer Success Managers or Architects SA owns 1) pre-sales technical evaluation and relationships prior to the initial sale and 2) tier upgrades and new business units (i.e., connected new) within an existing customer. CSM owns 1) post-sales customer relationship and 2) license upgrades within an existing customer. More information on the transition and ownership between Pre-Sales and Post-Sales Other Resources Education and Enablement As a Customer Success team member, it is important to be continuously learning more about our product and related industry topics. The education and enablement handbook page provides a dashboard of aggregated resources that we encourage you to use to get up to speed. Customer Success Playbooks See the Playbooks Page Customer Workshops CSM-Created, Enablement Focus: All CSM-created workshops CSE-Created, Enablement Focus: GitLab User Webinars and Labs Using Salesforce within Customer Success Visit this page for more info on using Salesforce within Customer Success. Using Gainsight with Customer Success Visit this page for more information on using Gainsight within Customer Success. Dogfooding Outside of Engineering the Customer Success team has the largest concentration of tooling development capability. The team has unique needs that can‚Äôt always be solved by GitLab‚Äôs single DevOps platform . However, it is important to dogfood and avoid dogfooding anti-patterns . As a result the Product organization heavily weights internal customers when considering prioritization. If you are considering building tooling in support of Customer Success priorities outside of GitLab, please follow the dogfooding process . Customer Success AWS Test Account In an effort to keep AWS spend down, initiatives are being taken to automatically clean up our AWS account. This account is primarily used as a proof of concept for IaC and creating demos for GitLab customers. An automated cleanup script is currently being tested that will tag, shutdown and delete old resources as they are no longer needed. The automation will: Turn off and Tag Un-named resources. When resources are created a ‚ÄúName‚Äù tag should be created with a value that‚Äôs meaningful and indicates who deployed the resource. Example: {initials}-GitLabRunner New Resources will be automatically tagged with a Discovered and Expiration tag The Expiration tag is 14 days after the discovery. The script will only a tag an instance once. If you need additional time, please change the date to a reasonable date for cleanup (Add a month or two for prospective customers) If a resource needs to be permanent please set termination protection on the instance. This should also include tagging the instance with an explanation on why it‚Äôs permanent and what its for On expiration the resource will be shut off and left for 7 days In 7 days if the instance is still off a snapshot will be taken and it will be terminated If the instance is still on but the expiration has not been changed it will be terminated Customer Success Tools and Scripts By customer or internal request, we sometimes develop tools to automate certain GitLab tasks using the API. The resulting tools and scripts are publicly available for everyone to use and contribute to in the GitLab CS Tools group . Note: Those tools are not supported by GitLab Support. Communities of Practice Community of Practice are cross-functional groups of SME‚Äôs (or aspiring to be!) within the CS organization dedicated to a topic within GitLab or the broader DevOps space. The goal is to build assets, best practices, demonstrations, and share experiences we learn from prospects and customers. In turn, CoP will build broader technical depth within our CS organization to better advise our customers and influence our product roadmap. Customer Terrain Mapping Engagements Terrain Mapping discovery engagements provide customers with the benefit of GitLab‚Äôs experience with DevOps methodologies, Git, GitLab, CI, CD, and monitoring by brainstorming a high level, first draft discovery of the elements of a success plan to address various challenges. They are also mapped to professional services that can help with some of the elements identified in the engagement. See the Terrain Mapping Engagements Page Frequently Asked Questions Customer Success team members maintain a FAQ to keep questions customers ask documented in a place where everyone can view and contribute to. Customer Success resource links outside handbook Customer Reference Sheet Sales Collateral GitLab University Our Support Handbook Customer Collaboration Project template GitLab Demo Portal Workflow SA Demo Scenarios (Internal Only) SA-Created - Hands-On Workshops Other Sales Topics Sales Handbook Sales Operations Sales Skills Best Practices Sales Discovery Questions EE Product Qualification Questions GitLab Positioning FAQ from prospects Client Use Cases Proof of Value Guidelines Account Planning Template for Large/Strategic Accounts Sales Demo Sales Development Group Handbook With Whom to Talk to Ask Questions or Give Feedback on a GitLab feature Customer Success Meetings Customer Success has a few standing meetings: CS Team Monthly All-Hands - Monthly on the second Wednesday CS Skills Exchange - once or twice Monthly The different groups within CS also have standing meetings, including meetings for the Customer Success teams and Renewal Managers, regional groups, and social calls. Account Team The account team works together to drive value, success, and growth for a customer APJ Customer Success The APJ Customer Success department is part of the GitLab Sales function under the WW Customer ‚Ä¶ Commercial Sales - Customer Success The Commercial Sales segment consists of two sales teams, Small Business (SMB) and Mid-Market (MM) Customer Health Scoring Customer Account Scoring overview and methodology framework to improve our understanding of the customer's journey and their ROI attainment. Customer Success Management Handbook The Customer Success Management team at GitLab is a part of the Customer Success department, acting as trusted advisors to our customers and helping them realize value faster. Customer Success Playbooks View the Customer Success homepage for additional Customer Success handbook content. Customer ‚Ä¶ Customer Success Reporting and Dashboarding framework This page describes the underlying philosophy and framework for how to consider and build toward the long term goal of effective and efficient reporting and dashboarding Customer Success Vision Create a company-wide customer success approach, providing an engagement framework for the Customer Success organization Customer Success' Frequently Asked Questions Customer Success FAQ Charter Team members in Customer Success face questions from customers every ‚Ä¶ Customer Terrain Mapping Engagements Customer Terrain Mapping Engagements provide customers with the benefit of GitLab‚Äôs experience ‚Ä¶ Customer Workshops Please reference the Workshops section on the Customer Success page for up-to-date information on ‚Ä¶ Demo Systems The GitLab Demo Systems provide infrastructure for the GitLab Customer Success, Marketing, Sales, and Training teams to demonstrate GitLab features, value propositions, and workflows in a variety of asynchronous and live capacities. Educational Services GitLab Product Training for Customer Success As a Solutions Architect, Customer Success Manager, or Professional Services Engineer, it is important to be continuously learning more about our product and related industry topics. This handbook page provides an dashboard of aggregated resources that we encourage you to use to get up to speed. GitLab Quick Start for New GitLab.com Customers Tasks to complete when your subscription starts Initiatives Partners Product Usage Reporting Vision The page outlines the current and planned utilization of operational data at GitLab, including Product, Sales, Customer Success, and Marketing. Professional Services Team Handbook The Professional Services team at GitLab is a part of the Customer Success department helping customers achieve value faster. Public Sector Renewals Managers Resources to get started with GitLab A 5-day plan to get started with GitLab Success Tiers The Success Tier offerings are part of the Customer Success function that represent enhanced ‚Ä¶ Transitioning Accounts from Pre-Sales to Post-Sales How to effectively transition a customer from the pre-sales engagement to post-sales to ensure the customer is successful. Using Salesforce within Customer Success Using Salesforce within Customer Success (Current) Account Onboarding Customer Success Manager ‚Ä¶ Last modified February 4, 2025: remove messed up description ( a40a9c89 ) View page source -  - please contribute .",
    "headings": [
      "Customer Success",
      "Mission Statement",
      "North Star Metrics",
      "Customer Success Teams",
      "Digital Strategy",
      "Demo Systems",
      "Customer Success Decision Tree",
      "Account Team",
      "Overlap Between Solution Architects and Customer Success Managers or Architects",
      "Other Resources",
      "Education and Enablement",
      "Customer Success Playbooks",
      "Customer Workshops",
      "Using Salesforce within Customer Success",
      "Using Gainsight with Customer Success",
      "Dogfooding",
      "Customer Success AWS Test Account",
      "Customer Success Tools and Scripts",
      "Communities of Practice",
      "Customer Terrain Mapping Engagements",
      "Frequently Asked Questions",
      "Customer Success resource links outside handbook",
      "Other Sales Topics",
      "Customer Success Meetings"
    ],
    "word_count": 1523,
    "extracted_at": "2025-07-21 20:14:08"
  },
  {
    "document_id": "gitlab-handbook-307200",
    "url": "https://handbook.gitlab.com/handbook/customer-success/csm/",
    "title": "Customer Success Management",
    "category": "Sales",
    "content": "Customer Success Management Handbook The Customer Success Management team at GitLab is a part of the Customer Success department, acting as trusted advisors to our customers and helping them realize value faster. Customer Success Segments CSM AMER CSM EMEA CSM APJ CSE Mission Statement Accelerate customer success by aligning passionate CSMs with customers to: Drive adoption aligned with business outcomes Enable customers in current and future GitLab use cases Expand ROI from GitLab What is a Customer Success Manager (CSM) at GitLab? CSMs are accountable for customer adoption, measurable outcomes, customer satisfaction, and creating true customer advocacy. We create successful customers by enabling, training, and nurturing them throughout their journey. The following areas incorporate the remit of a CSM: Customer Adoption - Ensure the customer is working towards or adopting their desired use cases to maturity. Ensure the successful onboarding of all intended users. Identify areas of adoption risk and establish mitigating plays and programs. Delivering Positive Business Outcomes - Ensure customers are meeting and exceeding their desired business outcomes so that customers can quantify and support their investment. Trusted Advisor - Establish ‚Äútrusted advisor‚Äù relationships with the management and technical teams on the customer side while working seamlessly with our account team to deliver a best-in-class customer experience. Account Expansion - Lead adoption expansion beyond the customer‚Äôs desired use cases and further customer return on investment (ROI). Partner with Sales to identify expansion opportunities and ensure we realize the expansion potential of a customer account. Leading Business Reviews - Review and celebrate progress towards, or achievement of, the customer‚Äôs desired business outcomes. Address challenges with a plan for mitigation, align on upcoming and future customer business objectives. High-Level Responsibilities of a CSM Responsibility Context How We Measure DCI Roles Success Plans Mutually agreed (Customer | GitLab) adoption plans that outline desired outcomes (e.g., improve cycle time), technical milestones required (e.g., migrate to GitLab, overcome constraints), timelines and DRIs. These plans enable us to be proactive and ensure progress towards the customer's goals. As trusted advisors, we understand what drives value for our customers and help them achieve it. Every customer must have an active success plan DRI: CSM Consulted: AE, SA, Customer Informed: Leadership Onboarding There are several onboarding steps in both the new and existing customer onboarding playbooks. The CSM's role is to ensure all of these topics and enablements have been covered and documented. All customers are to be taken through the appropriate playbook (New, Existing Customer) DRI: CSM Consulted: AE, SA, Customer Informed: Leadership Cadence Calls The cadence call is a proactive call. For this call to be proactive, the CSM's responsibility includes those listed in the linked cadence call page Call frequency: Customer is engaged weekly or biweekly, monthly at a very minimum A CSM/CSE can expect to conduct a minimum number of calls as follows: CSMs: 5-7 calls per week CSEs: 15 calls per week DRI: CSM Consulted: AE, Customer Informed: SA, Leadership Adoption & Expansion Driving platform adoption (use cases and licenses) in line with a customer's desired business outcomes is at the heart of the CSM role Understand what the customer is currently adopting and partner with the customer on enabling this use case/feature When an enablement or expansion playbook is open, the CSM actively drives the associated motion in the customer account At any given time, a CSM will be actively driving expansion with half of their book (3-4 customers) DRI: CSM Consulted: AE, Customer Informed: SA, Leadership Executive Business Reviews We hold the business review at month 6, giving enough time passed to celebrate milestones achieved and enough time remaining to get adoption back on track where needed. The CSM is the DRI for scheduling, preparing for, presenting, and following up on the EBR, and partners with both the account team and the customer in the creation of the presentation. 1 EBR per customer per year at a minimum DRI: CSM Consulted: AE, Customer Informed: SA, Leadership Renewal It is the job of the CSM to ask the 'soft' renewal question 3-4 months before the renewal This conversation and the outcome of this conversation are tracked in Gainsight using the 'renewal call' meeting type (within the timeline entry) Every customer regardless of segment or region DRI: CSM, AE, Renewals team Consulted: Customer Informed: Leadership Managing Risk A CSM actively manages risk in a customer account, quickly turning a customer to red when there is any potential risk of contraction or churn (even if this is unconfirmed) The CSM is responsible for frequent communication to the account team about risk in their accounts and triggering/leading the escalation process where needed Risk is actively managed for all customers DRI: CSM Consulted: AE, Leadership Informed: Renewals team Please reference this page for an overview of the CSM Rhythm of Business (daily to yearly) Please reference this page for an overview of the areas your CSM will engage with you in: CSM Points of Engagement Customer Journey Journey Stage Activities Pre-Sales & Alignment Value Stream Discovery Sales to CS Handoff Identify Personas Onboard CSM Kickoff & Intro Establish Cadence Calls Create Success Plan Enable Use Case Enablement Workshops Measure Primary Use Case Adoption Expand Expansion Discovery Optimize & Renew Executive Business Review Ongoing Risk Review Renewal Discussions FY25 Vision & Strategy -3 Pillars Vision & Strategy Deck (Internal - GitLab Only) Success At Scale Use Case Adoption Success Plan Services Big Rock (Annual Strategy) Archive FY23 FY24 Handbook Directory CSM Team Metrics Overview (VIDEO) Changelog CSM Process Changelog Gainsight Changelog CSM Learning & Development CSM Objectives and Key Results (OKRs) Overview of available resources, training plans & career paths CSM Aspiring Leaders Program CSM Activities CSM Onboarding CSM Rhythm of Business Using Gainsight CSM Quaterly Business Reviews CSM Responsibilities and Services CSM and Product Interaction CSM and Professional Services Interaction CSM and Support Interaction CSM and Partner Interaction Escalation Process Infrastructure Escalation & Incident Process CSM-to-CSM Account Handoff CSM Roleplay Scenarios CSM Retrospectives CSM PTO Guidelines CSM READMEs (Optional) Driving Platform Adoption Landing Zones CI Landing Zone Customer Metrics Sample Questions & Techniques for Getting to Good Customer Metrics Platform Metrics Customer Use Case Adoption How To: DevSecOps Adoption Tracking in Gainsight Use Case Adoption Metrics The Customer Value Received with Service Ping Product Usage Data - Definitive Guide to Product Usage Data in Gainsight Metrics Based Product Usage Playbooks Other Lifecycle Management Activities Transitioning a Customer from Pre-Sales to Post-Sales Account Engagement and Prioritization Non-Engaged Customer Strategies Account Onboarding Success Plans Cadence Calls Managing Executive Relationships Executive Business Reviews (EBRs) Customer Renewal Tracking Customer Health Assessment and Risk Triage Risk Types, Discovery & Mitigation Workshops and/or Lunch-and-Learns Digital Customer Programs Digital Customer Programs Handbook Page Available Customer Programs CSM Managers CSM Manager Processes and CSM Leadership Team CSM Manager QBR Template (GitLab Internal) CSM Promotion Template (GitLab Internal) CSM Tools The following articulates where collaboration and customer management is owned: Customer Collaboration Projects : Shared project between GitLab team members and customer. Used to prioritize/plan work with customer. Google Drive : Internal. Used to capture call notes and other customer related documents. Chorus : Internal. Used to record Zoom calls. Using Calendly with Chorus : Instructions on Calendly set up with Chorus. Gainsight : Internal. Used to track customer health score, logging customer activity (i.e. calls, emails, meetings) Issue Prioritization Dashboard : Internal. Used to track customer requested issues. Education and Enablement In Customer Success Management, it is important to be continuously learning more about our product and related industry topics. The education and enablement handbook page provides a dashboard of aggregated resources that we encourage you to use to get up to speed. SFDC useful reports Tracking opportunities for your assigned Strategic Account Executive (SAEs) To ensure that opportunities are listed with the correct Order Type, this Salesforce report shows you all of the opportunities that have closed, or are soon to close, with your SAEs. Tracking Order Type is important since CSM team quota and compensation depend on this. Please reference the latest Sales Compensation Plan information to know what is counted. Next steps for you: Customize this SFDC report where ‚ÄúAccount Owner = your SAEs‚Äù; ‚ÄúCSM = You‚Äù Save report Subscribe to report when ‚ÄúRecord Count Greater Than 0‚Äù and Frequency = Weekly (You‚Äôll get a weekly email as a reminder to look at the report) If you find an opp that is tagged incorrectly, chatter (@Sales-Support) in the opportunity and let them know there is a mistake ( example ) Related pages Dogfooding in Customer Success Customer Success & Market Segmentation Responsibility Matrix and Transitions Customer Success‚Äô FAQ Using Salesforce within Customer Success Customer Success Vision GitLab Positioning Product Stages and the POCs for each How to Provide Feedback to Product Sales handbook Support handbook Workshops and Lunch-and-Learn slides Researching Customer Questions Account Engagement View the CSM Handbook homepage for additional CSM-related handbook pages. Managing the Customer ‚Ä¶ Account Handoff CSM-to-CSM Checklist View the CSM Handbook homepage for additional CSM-related handbook pages. CSMs will need to ‚Ä¶ Adoption Landing Zones Cadence Calls View the CSM Handbook homepage for additional CSM-related handbook pages. Overview One of the ‚Ä¶ CSM and Support Interaction View the CSM Handbook homepage for additional CSM-related handbook pages. Objective Define the ‚Ä¶ CSM Aspiring Leaders Program A guide to help CSMs level up their skills to be ready for leadership CSM Development Available development paths and resources for Customer Success Managers at GitLab. CSM Executive Relationships View the CSM Handbook homepage for additional CSM-related handbook pages. At GitLab, successful ‚Ä¶ CSM FY23 Big Rocks View the CSM Handbook homepage for additional CSM-related handbook pages. FY23 Goals (Big Rocks) ‚Ä¶ CSM Internship Program This page describes best practices for an internship for learning with the CSM team. Internships are ‚Ä¶ CSM Issue Tracking and OKRs Field guide for CSMs on team OKRs CSM Manager Handbook Field guide for CSM Managers on standard and recurring practices. CSM November 2021 Engagement Survey Results and action on the annual GitLab Engagement Survey for Customer Success Managers. CSM Onboarding View the CSM Handbook homepage for additional CSM-related handbook pages. Onboarding for Customer ‚Ä¶ CSM Paid Time Off View the CSM Handbook homepage for additional CSM-related handbook pages. As part of GitLab‚Äôs ‚Ä¶ CSM Quaterly Business Reviews (QBRs) Overview of CSM's Quarterly Business Review process CSM Responsibilities and Services There are various services a Customer Success Manager will provide to ensure that customers get the best value possible out of their relationship with GitLab. CSM Rhythm of Business View the CSM Handbook homepage for additional CSM-related handbook pages. CSM Rhythm of Business A ‚Ä¶ CSM Strategies for Mitigating Risk In Customer Accounts CSM Strategies for Mitigating Risk In Customer Accounts Customer Health Assessment and Management This page covers the factors to consider for customer health, guidelines for selecting the appropriate rating, communication guidelines, CSM responsibilities and instructions for the account triage issue creation. Customer Onboarding View the CSM Handbook homepage for additional CSM-related handbook pages. Customer Onboarding is the ‚Ä¶ Customer Renewal Tracking The Renewals team at GitLab is a part of the Customer Success department. Customer Success Escalations Process View the CSM Handbook homepage for additional CSM-related handbook pages. Background Escalations can ‚Ä¶ Customer Success READMEs Learn about the Customer Success teammates Customer Success Teams View the Customer Success Handbook homepage for additional related handbook pages. Overview The ‚Ä¶ DevSecOps Adoption Tracking in Gainsight CSM guidance on how to track and log progress on DevSecOps usecase adoption Digital Customer Programs The following Digital Programs constitute ‚ÄúCustomer Success Services‚Äù as included with ‚Ä¶ Engaging with Partners Process for Engaging with Partners in CSM-Assigned Customer Accounts CSM-Assigned Customer Accounts ‚Ä¶ Engaging with Professional Services Guidelines for CSMs on how best to engage with professional services. Executive Business Reviews (EBRs) View the CSM Handbook homepage for additional CSM-related handbook pages. Overview An Executive ‚Ä¶ FY24 Big Rocks CSME (Customer Success Management and Engineering) View the CSM Handbook homepage for additional ‚Ä¶ FY25 CS Retrospective Program Retrospectives Program Objective The objective of this retrospective program is to facilitate a ‚Ä¶ Leadership Recurring Check-Ins View the CSM Handbook homepage for additional CSM-related handbook pages. What is a Leadership ‚Ä¶ Researching Customer Questions Strategies on how to research customer questions to find answers. Roleplay Scenarios This handbook page collects links to all roleplaying scenarios, for CSMs to utilize to improve their conversations and enable them to be audible-ready. Service Ping FAQ View the CSM Handbook homepage for additional CSM-related handbook pages. What is Service Ping ‚Ä¶ Stage Adoption Metrics View the CSM Handbook homepage for additional CSM-related handbook pages. 2023-06-15 Note The ‚Ä¶ Success Plans A success plan is a roadmap that connects a customer's desired business outcomes to GitLab solutions. It is a living document, developed by the CSM. Using Calendly as a CSM Best practices and setup guide for Customer Success Managers using Calendly to manage customer requests for meetings. Using Gainsight as a CSM The key aspects of how Customer Success Managers use Gainsight to drive success for customers. Using Issue Prioritization Dashboard as a CSM The key aspects of how Customer Success Managers use Sisense Issue Prioritization Dashboard to drive success for customers. Using the Customer Collaboration Project as a CSM Best practices and setup guide for Customer Success Managers using Customer Collaboration Projects to manage customer data, requests, and collaborations. Workshops and Enablement Sessions View the CSM Handbook homepage for additional CSM-related handbook pages. Overview The CSM ‚Ä¶ Last modified March 7, 2025: Fix broken links ( b1d67d8e ) View page source -  - please contribute .",
    "headings": [
      "Customer Success Management Handbook",
      "Customer Success Segments",
      "Mission Statement",
      "What is a Customer Success Manager (CSM) at GitLab?",
      "High-Level Responsibilities of a CSM",
      "Customer Journey",
      "FY25 Vision & Strategy -3 Pillars",
      "Big Rock (Annual Strategy) Archive",
      "Handbook Directory",
      "Changelog",
      "CSM Learning & Development",
      "CSM Activities",
      "Driving Platform Adoption",
      "Other Lifecycle Management Activities",
      "CSM Managers",
      "CSM Tools",
      "Education and Enablement",
      "SFDC useful reports",
      "Tracking opportunities for your assigned Strategic Account Executive (SAEs)",
      "Related pages"
    ],
    "word_count": 2255,
    "extracted_at": "2025-07-21 20:14:10"
  },
  {
    "document_id": "gitlab-handbook-624555",
    "url": "https://handbook.gitlab.com/handbook/sales/field-operations/",
    "title": "Field Operations",
    "category": "Sales",
    "content": "Field Operations The Field Operation team‚Äôs vision is to manage field business processes, systems, architecture, enablement, champion data integrity, provide insights and predictability through analytics Welcome to the Field Operations Handbook ‚ÄúManage field business processes, systems, architecture, enablement, champion data integrity, provide insights and predictability through analytics‚Äù The term ‚Äúsales‚Äù refers to the Sales Team and ‚Äúfield‚Äù includes the Customer Success, Channel, and Alliances Teams. Key Tenets Clarity : for definitions, processes and events Predictability : of the business by leveraging data and systems Scalability : for processes and systems that allows for growth Teams Sales Operations Deal Desk Order Management Sales Commissions Data Intelligence Sales Systems Sales Strategy Field Enablement Channel Operations Customer Success Operations Customer Success Strategy & Analytics RSOE Growth & Development For guidance and resources on RSOE Career Growth & Development Field Operations Calendar Field Operations utilizes a team calendar to communicate team member availability as well as office hour meetings. How to add the Field Operations Calendar To add the Field Operations Calendar to your Google Calendar click on the + Next to Other Calendars on the bottom left hand side of you Google Calendar. From there type in Field Operations into the search box and the Field Operation calendar should be the only calendar available to select. What are Office Hours? Office hours is a weekly meeting that is set up where the hosting team is available to field questions from individuals who they may not generally sync with. The goal is to offer wider availability and support to the greater operations teams and to GitLab as a whole. Office hours are NOT a dedicated time for team members to join to check in on the status of a project or to be used as a recurring project meeting. Current Office Hours Sales Systems currently holds office hours every Wednesday at 10:30 AM PST Field Operations Releases and Changelog Field Operations works to deliver Field Ops changes related to Sales Ops, CS Ops, Channel Ops & Deal Desk (QTC) in a batched, bi-weekly release cadence. To learn more, see the Field Ops Release Schedule page . For a running log of Field Ops changes related to Sales Ops, CS Ops, Channel Ops & Deal Desk since Q3-FY22, see the Field Ops Changelog page . Business Operations - Salesforce Reference The purpose of this page is to provide insight into the internal workings of our Salesforce instance, how fields are populated, how fields are calculated, where they are used and more. Career Development at GitLab & RSOE This page provides guidance and resources for the RSOE team related to Growth & Development Customer Success Monthly Metrics Dashboard  Overview Use Cases Metrics Definitions Financial Measures Adoption & ‚Ä¶ Customer Success Operations The Customer Success Operations team's handbook page. This covers our mission, strategies, responsibilities, and processes. Customer Success Strategy & Analytics GitLab Handbook page for the Customer Success Strategy & Analytics (CSSA) team Data Intelligence Charter Data Intelligence (DI) is a part of Field Operations reporting to Revenue Operations. Our ‚Ä¶ Ecosystem Operations This page serves as the Ecosystem Operations team page and includes standard channel reporting links, and details for managing partner opportunities Enterprise Applications - CRM Team The Enterprise Applications CRM Team implements and supports specialized applications that support our business processes within GitLab. Field Enablement The Field Enablement team's mission is to design and deliver effective enablement solutions to field team members and partners that grow expertise and confidence needed to drive efficient, predictable, and scalable growth for GitLab Go to Market Operations, Procedures, Documentation Growth Resources Finding Customer Seat Counts Seat expansion is at the heart of our revenue growth. This has a strong ‚Ä¶ Requesting Internal Support in Salesforce How to Get Help Workflow for internal GitLab users on how to get help when working on an opportunity ‚Ä¶ Sales Operations Sales Operations aim to help facilitate new and existing processes throughout our field organization via the use of systems, policies, and direct support. Sales Order Processing This page outlines the Quote to Cash process, starting from account and opportunity creation, quote configuration, approvals, booking requirements and to the ultimate closure of a deal. Sales Strategy and Analytics Handbook To drive sales success by providing data, reporting, analytics, and actionable insights to leadership across GitLab Spekit for Operations/Process/Tools Updates RSOE uses the Spekit tool to update the Field team on operational, process and/or tools changes. Last modified April 30, 2025: Add folder and file name linting ( 8a6b33a1 ) View page source -  - please contribute .",
    "headings": [
      "Field Operations",
      "Welcome to the Field Operations Handbook",
      "Key Tenets",
      "Teams",
      "RSOE Growth & Development",
      "Field Operations Calendar",
      "Field Operations Releases and Changelog"
    ],
    "word_count": 756,
    "extracted_at": "2025-07-21 20:14:15"
  },
  {
    "document_id": "gitlab-handbook-620758",
    "url": "https://handbook.gitlab.com/handbook/finance/",
    "title": "Finance Overview",
    "category": "Finance",
    "content": "Finance Welcome to the GitLab Finance Handbook The GitLab Finance Department includes multiple Teams: Accounting, Financial Planning & Analysis, Tax and Business Operations Programs. Quick Links Finance Issues Please use confidential issues for topics that should only be visible to team members at GitLab. Accounts Payable Expense Guidelines Operating Metrics Procurement Sales Comp Plan Signature Authorization Matrix Authorization Matrix Policy Stock Options Forms 2025 GitLab Inc W-9 Document and Certificate of Residence Form CA-590 - Please request by email to tax@gitlab.com Correspondence Please use the #finance chat channel in Slack for questions that don‚Äôt seem appropriate for the issue tracker or internal email correspondence. Accounts Payable - inquiries which relate to vendor and merchant invoices, or team member‚Äôs expenses should be sent to our Accounts Payable mailbox - ap@gitlab.com . You can also reach the AP team on Slack in the #accountspayable or #expense-reporting-inquiries chat channels. Invoices that require payment processing should be sent to ap@gitlab.com . Billing Operations - customer billing inquiries should be sent to our Billing mailbox ‚Äì billing@gitlab.com . Accounts Receivable - customer payment/remittance inquiries should be sent to our Accounts Receivable mailbox - AR@gitlab.com Payroll - inquiries which relate to contractor invoices should be sent to our Payroll mailbox - nonuspayroll@gitlab.com . CFO Approvals Please use the #cfo-approvals chat channel in Slack for alerting the CFO to a request for his approval Tag the CFO‚Äôs Staff EBA in the Slack request for visibility and followup Appropriate Finance team members in the approval flow must approve prior to requesting CFO approval All requests must go through the appropriate approvals process, include a link to the Issue or description and receive all approvals prior to requesting CFO approval We Finance Finance Handbooks Accounting Business Technology Financial Planning & Analysis Investor Relations Tax General Topics Legal and Financial Information For commonly requested company information, please visit our wiki page . Company Accounts Login information for the following accounts can be found in the Secretarial vault on 1Password: FedEx Amazon IND (Immigratie en Naturalisatie Dienst, in the Netherlands) company number If you need this information but cannot find it in your shared vaults, check with the People Connect Team members to get access. Fiscal Year A fiscal year is a one-year period that corporations use for accounting and budgeting. GitLab‚Äôs Fiscal Year runs from February 1 to January 31. The fiscal year naming correlates to the ending month of the given fiscal year, for example FY26 is GitLab‚Äôs fiscal year running February 1, 2025 to January 31, 2026. Q1: February 1 through April 30 Q2: May 1 through July 31 Q3: August 1 through October 31 Q4: November 1 through January 31 Fiscal Year Calendar Year FY26-Q1 2025-02-01 to 2025-04-30 FY26-Q2 2025-05-01 to 2025-07-31 FY26-Q3 2025-08-01 to 2025-10-31 FY26-Q4 2025-11-01 to 2026-01-31 Refer to our writing style guidelines for proper use of date formats. Revenue non-committee Internal Management Members: Chief Financial Officer (DRI), Chief Executive Officer, Chief Revenue Officer (model, guidance, plan, target) Invoice template and where to send Vendor invoices are to be sent to ap@gitlab.com and payroll@gitlab.com for contractors. An invoice template can be found in Google Docs by the name of ‚ÄúInvoice Template‚Äù. Non-US contractors not from Hungary, Italy, Japan, New Zealand, Nigeria, South Africa, Switzerland, and Ukraine will get pay their monthly wages and expenses through iiPay. Here is the process: enter bank information in Workday under Bank Information tab. Note - new contractor should enter their bank information within 3 business days from their start date. enter VAT number if it is available submit monthly salary/bonus/commission invoice in through Google form by the 8th of each month (as described to you during onboarding) submit expenses through Navan Expense by the 8th of each month the scheduled payment date is the 22nd of each month iiPay will send out remittance advice along with the scheduled payment via your GitLab email address Non-US contractors from Italy, Nigeria, South Africa, Switzerland, and Ukraine will need to send their monthly invoice for salary/bonus/commission and any expenses by the 15th to payroll@gitlab.com . In many cases, VAT will not be payable on transactions between GitLab BV and EU-based vendors/contractors, thanks to ‚ÄúShifted VAT‚Äù. To make use of this shifted VAT: The vendor/contractor writes the phrase ‚ÄúVAT shifted to recipient according to article 44 and 196 of the European VAT Directive‚Äù on the invoice along with the VAT-number of GitLab IT BV (NL860316828B01). On the vendor‚Äôs VAT return the revenue from GitLab BV goes to the rubric ‚ÄúRevenue within the EU‚Äù. It goes without saying that vendors are responsible for their own correct and timely filings. GitLab BV files the VAT on the VAT return, and is generally able to deduct this VAT all as part of the same return. Timesheets for Hourly Employees People Ops and Finance will share a private Google Sheet with you where you will log your hours for each day in the ‚Äúhours‚Äù column. There is a dropdown in the ‚Äúpay type‚Äù column, with the default being Regular. There are also options for Overtime, Vacation, Sick, and Bereavement. Choose the appropriate pay type for your time. If you work overtime or more hours than agreed upon in your contract, please obtain approval from your manager and forward to Finance before payroll cutoff. Your timesheet is due one day prior to the submit payroll date, which is outlined for the calendar year on your timesheet. How spend is allocated to departments Budgets are aligned to departments, and budgets follow the owner who requested the spend. When determining who should request the spend, consider the owner of the outcome. For example, work to enable a sales partner that will not be incorporated into the product would go to Sales. Work that will be part of the product and supported by engineering, should be charged to the Engineering budget. Finance Business Partner Alignment Function Name Customer Support R&D Finance R & D R&D Finance Sales Sales Finance Professional Services Sales Finance Marketing Marketing Finance G & A Ellen Boyd and Jess Smith Types of Work that the team does Level 1: Keeping the lights on activity. Always striving to make this area as efficient as possible so more Layer 2 focus can be attained. Example: closing the books. Level 2: Operational Efficiencies, Business Engagement and Partnering, actionable insights for the organization. Examples: improving close process, partnering with sales to make a business decision Accounting and Reporting This page contains GitLab‚Äôs accounting and reporting policies, which can be made public. ‚Ä¶ Accounts Payable This page contains GitLab‚Äôs Accounts Payable department policies, procedures and guidelines. ‚Ä¶ Authorization Matrix Please refer to the authorization matrix here Committee Composition Disclosure Committee Composition Chairperson: Chief Executive Officer, Chief Financial Officer, ‚Ä¶ Finance Growth and Development Welcome to the GitLab Finance Growth and Development Page The GitLab Finance Department is dedicated ‚Ä¶ Finance Team Performance Indicators Executive Summary KPI Health Status Recurring revenue variance ex-JV Confidential Confidential ‚Ä¶ Financial Planning & Analysis Welcome to the FP&A Team Handbook. Our missions is to maximize GitLab's long-term valuation by enabling e-group and FP&A to plan, prioritize, and execute effectively GitLab Finance Team READMEs Learn more about working with various members of the Finance team Global Travel and Expense Policy 1. POLICY GitLab‚Äôs Global Travel & Expense Policy is meant to provide guidance to all Team ‚Ä¶ Investor Relations We have an externally facing investor relation website. The page you are on now the handbook that ‚Ä¶ Payroll Please refer to the Payroll internal handbook page ‚Ä¶ Sales Compensation Plan FY23 Compensation T&Cs can be found in the Internal Handbook: ‚Ä¶ Spending Company Money All team members and contractors must protect our Company assets, such as equipment, supplies, cash, ‚Ä¶ The GitLab Procurement Team What is Procurement? The Procurement team manages GitLab‚Äôs Supplier Lifecycle through the ‚Ä¶ The GitLab Tax Team The tax department is responsible for GitLab's overall tax strategy including all components of tax compliance, tax planning and accounting for income taxes. In addition, the tax department manages GitLab's statutory requirements including statutory audits, filing of entity-level financial information, transfer pricing, and ensuring intercompany transactions are recorded appropriately. The Internal Audit Function Please refer to the Internal Audit page in the internal handbook. Timekeeping Policies and Procedures Internal handbook link Travel Safety and Security Travel Safety and Security Team member safety and security are a top priority for GitLab. If a team ‚Ä¶ Last modified April 25, 2025: Remove key reviews ( 41c68411 ) View page source -  - please contribute .",
    "headings": [
      "Finance",
      "Forms",
      "Correspondence",
      "CFO Approvals",
      "Finance Handbooks",
      "General Topics",
      "Legal and Financial Information",
      "Company Accounts",
      "Fiscal Year",
      "Revenue non-committee",
      "Invoice template and where to send",
      "Timesheets for Hourly Employees",
      "How spend is allocated to departments",
      "Finance Business Partner Alignment",
      "Types of Work that the team does"
    ],
    "word_count": 1417,
    "extracted_at": "2025-07-21 20:14:19"
  },
  {
    "document_id": "gitlab-handbook-285917",
    "url": "https://handbook.gitlab.com/handbook/finance/accounts-payable/",
    "title": "Accounts Payable",
    "category": "Finance",
    "content": "Accounts Payable This page contains GitLab‚Äôs Accounts Payable department policies, procedures and guidelines. Our goal is to enable payments in a timely manner to both our team members and our external partners. We also provide useful links to other areas of the handbook that are relevant to the Accounts Payable procedures. Introduction Welcome to Accounts Payable, commonly referred to as AP. You should be able to find answers to most of your questions in the sections below. If you cannot find what you are looking for, then please connect with us: Chat Channel : #accountspayable Email : ap@gitlab.com General Guidelines Vendors must be onboarded in Coupa to process invoices. All purchases/services with a total contract value over $5000 are required to have a purchase order, unless it falls under the PO Exception Policy . One-time or purchases totaling <$5000 annually may be processed without a PO per the PO Exception Policy Ensure to indicate the PO number in the invoice copy. For Non-PO invoice, provide the related department to be charged. Vendors are highly encouraged to directly upload their invoices and match it to their PO using the Coupa Supplier Portal- in the event the vendor is unable to submit invoices via Coupa then they can email PDF copies to ap@gitlab.com . Payment Runs are completed on Thursdays. Invoices that are selected for payment on Thursday must be fully approved and vendors successfully on-boarded by end of day Tuesday of that week to be included in Thursday‚Äôs payment run. The payments go out in the following days and may take 1-5 business days to reach the vendor‚Äôs bank. This depends on the country, currency and the method of payment chosen. Invoices are paid strictly by the invoice due dates. Any ‚ÄúUrgent Payment‚Äù requests will be paid in the next available payment run as long as they have been fully approved and the vendor has been successfully on-boarded. AP cannot accommodate same day payment requests . Suppliers are to be paid via CoupaPay, ACH or Wire only. AP does not issue check payments. The cutoff for customer refund payments is the 25th of each month. Any customer refund requests received after the 25th will be paid the following month. Accounts Payable Processing Vendor Invoices - These invoices are processed in Coupa either PO Backed or Non PO backed. Vendors must be set up or onboarded in Coupa and invoices must contain all required information like Invoice Number, Invoice Date, Payment Terms, PO Number, Invoice Amount, Currency, and Service Dates/Period to proceed with processing. Quotations, Order Forms, Agreements, Contracts are not valid for invoice processing, only ‚ÄúInvoice‚Äù is allowed. If the invoice doesn‚Äôt fall under the PO Exception Policy, please ensure the invoice has a corresponding PO before sending it to the AP Team for processing. For PO Backed invoices, kindly ensure that the PO is already approved to proceed with processing and do not attach the invoice in the PO as AP Team will not be able to check/monitor that section. Kindly ensure that the PO has enough balance to process the invoice. Do not provide a PO number that has been fully matched or already closed to the vendor as it may create confusion on both sides. If you need to do a PO Change Request (e.g. to add funds in your current PO), please refer to this video tutorial from Procurement Team. Vendors can process their invoice in their Coupa Supplier Portal using the PO Flip method. On this link please find ‚ÄúCreate an invoice from a PO‚Äù for the video tutorial. Vendors can also send their invoices to AP@gitlab.com . PO numbers are required to be reflected on the invoice copy or in the email body to avoid delays in processing. For Non-PO invoices sent by GitLab DRI, please indicate the department to be charged instead and the Coupa approver. If the invoice is received without a PO, the AP Team will reach out to the GitLab DRI and request to create a PO. Once the PO is created, DRI must email the AP Team for the PO number to proceed with processing. External Supplier Forms are to be final approved by AP Team so that the vendor will be activated in Coupa, to provide our final approval, the vendor must comply with these two important documents so we can properly check the supplier form in our queue. W9 for US vendors and W8 for NON US vendors Bank details in a signed bank letterhead You can learn more about Coupa in this Coupa Guide Link and if you need further assistance you may also check the Procurement Handbook Page . Payroll Invoices - These are invoices provided by the Payroll Team for processing and will be manually input in Netsuite. Approval signatures are indicated on the invoice. Invoices with amounts greater than or equal to USD $500,000 are required to have 2 signatories from the Payroll Team (Manager and Director). Codings must be provided on the payroll banking tracker. Special Invoices - Mostly these are related to reimbursements (e.g. Speaker Reimbursement, Interview Candidate Reimbursement, Ex-Team Member Reimbursement and BOD Reimbursements). A template is required and must contain all the necessary information such as Vendor Name/Name of the person to be reimbursed, Invoice Date, Payment Terms, Invoice Amount, Currency, and Service Dates/Period. Receipts are required as a supporting document for any reimbursement requests. All templates must contain the full banking information of the beneficiary. If not applicable please put N/A. Bank Name: Beneficiary Name: Beneficiary Address: Account Number: IBAN: Routing/ABA number: Wire Number: Swift Code/BIC: Sort Code: Transit Number And Institution Number: IFSC Code: (For India) BSB Code: (For Australia) For Speaker Reimbursement, kindly advise the related PO of the event that the speaker attended as we will align the recording of the expense same as the PO. The PO details can be indicated on the reimbursement template or in the email. Accounts Payable Payments The first step to getting an invoice paid is to review the appropriate procurement process . Make note that invoices are paid per the due date on the invoice or per the vendors payment terms in their contract, whichever comes first. Please note that AP cannot process same day requests for payments . We must follow the process outlined above and ensure all approvals are attained before paying. Payments are set up each Thursday and the money is released to vendors through the respective payment systems. It may take a few days for transfers to reach vendors depending on their location and the bank they use. In order for an invoice to be included on the Thursday payment run, it must have been received and fully approved by the Tuesday. For example , if we are doing a payment batch on Thursday June 3rd, the invoice would have to be approved by end of day on Tuesday, June 1st in order to be included. Manual Payments are only applicable to the following: Payroll Invoices Speaker Reimbursement Ex-Team member reimbursement Interview Candidate Reimbursement BOD Reimbursement Coupa Virtual Card GitLab‚Äôs preferred method of payment for suppliers is electronic funds transfer with supplier invoice provided as supporting documentation. In the instances where this option is not available with the supplier, Virtual Card , which is a temporary credit card, can be used as an alternative payment method. Fedex When needing to send a package on behalf of GitLab our main courier account is with FedEx. The first step is to contact AP in the #AccountsPayable channel to request the corporate account number. When sending a package the Shipper MUST put their name under GitLab Inc in the sender field, or their full Cost Center for ex. Marketing - Field Marketing. If you are unsure of your full cost center please go into your Workday application (click Profile icon > click Job > select Organization . look for Cost Center). Anyone failing to provide the correct information which will hinder AP‚Äôs ability to properly code courier charges will not be allowed to use the company account in the future. Global Travel and Expense Please review the page on Spending Company Money to ensure that your spend is within GitLab‚Äôs Expense policy . GitLab utilizes Navan Travel for all travel related Flights, Hotels, Train Travel and Vehicle Rental bookings and Navan Expense for all Employee reimbursable expenses. It also includes the preparation for Navan Purchase Card and Physical Cards . Navan Purchase Card - These are virtual cards only utilized by the AP team, and they are used solely for providing new Team Members with a $1,500 USD (or local currency equivalent) stipend for their home office set up upon onboarding. Physical Cards - The purpose of this Navan Physical Card policy is to facilitate purchases necessary for the company operations and expedite the process in an efficient manner. Limit is set to $10,000 USD and provided upon request of an approved issue. If you have general questions about your expenses please submit a ticket to HelpLab . With the launch of HelpLab - We are kindly requesting that all questions be directed to the AP Admin team via the HelpLab ticket Process for General Expenses Related Inquiry . Please also review the Expense Policy and FAQ page for more guidance on the Expenses. These helpful information links can be found in the HelpLab tool under the Expenses > Quick links section. QuickLinks Invoicing and Payment Corporate Credit Card Procurement Reference link Coupa Tech Stack Guide Navan Expense Stack Guide Coupa Virtual Card guide for Accounts Payable Coupa Tech Stack Guide Reference for how Coupa is implemented. Navan Expense Tech Stack Guide Reference for how Navan Expense is implemented. Navan Physical Card 1. POLICY The purpose of this Navan Physical Card policy is to facilitate purchases necessary for ‚Ä¶ Virtual Card Guide for Accounts Payable Virtual Card Guide for Accounts Payable Last modified June 27, 2025: Updated Language for processing invoices <$5K ( 84bd7bdb ) View page source -  - please contribute .",
    "headings": [
      "Accounts Payable",
      "Introduction",
      "General Guidelines",
      "Accounts Payable Processing",
      "Accounts Payable Payments",
      "Coupa Virtual Card",
      "Fedex",
      "Global Travel and Expense",
      "QuickLinks",
      "Reference link"
    ],
    "word_count": 1665,
    "extracted_at": "2025-07-21 20:14:21"
  },
  {
    "document_id": "gitlab-handbook-475364",
    "url": "https://handbook.gitlab.com/handbook/business-technology/",
    "title": "Business Technology",
    "category": "Finance",
    "content": "IT Enterprise Applications About Us The IT Enterprise Applications oversees the business technology architecture and systems that power GitLab as a business entity. We ensure that the systems are fit-for-purpose, available, reliable, integrated and secure. We continue to build business aligned technology to run operations, layering integration and automations to support remote work, enhance team member and customer experience, and generate value. Our Vision Be a trusted business partner providing world-class solutions and value. Our Mission Provide a stable, secure, compliant and highly integrated solutions ecosystem to empower business with technology and services that enables productivity to fuel growth of GitLab. Strategic Objectives & Operating Principles Breakdown Silos: As a centralized team we talk to every part of the business. Business partners effectively connect the dots and bring people together to solve business problems. Architect & Iterate: Know where you are going and then work toward the goal in small parts. This is true for finance, analytics or engineering work. Be The Solution: Be empowered to drive change within our team and the company. We want to solve the most interesting problems. This leads to one of the best career experiences of our lives. Lead With Data: Our teams have tier 1 metrics to define success. Create strong business processes and systems that capture data. Use the data to drive optimal business decisions across GitLab. GitLab for GitLab: We keep to our core values and the belief that everyone can contribute, we are committed to dogfooding, actively use, give feedback and contribute to the development of the GitLab our product. Our Functional Structure IT PMO Architecture, Integrations & Automation G&A Systems & CRM Systems Services & Operations IT Strategy & Planning AOP & Budget Management Portfolio & Project Management Business Analysis Enterprise & Applications Architecture Integrations Application Management GTM, L2C, ERP, HCM Application Engineering Systems Administration Data & Application Reporting Global Support Services RPA and AI Operations Vendor Management IT Compliance & Governance (SOX & Security Compliance) What do we do? Company-wide Business Technology - Tech Stack Application EcoSystem We Support Zuora (CPQ & Billing) Zuora Revenue Tesorio NetSuite Coupa Stripe Navan Travel Navan Expense Avalara Adaptive Planning Xactly Mavenlink DocuSign eSignature ServiceNow Tropic Supplier IO UI Path Workato Salesforce Ownbackup Services IT Strategy and Management IT Portfolio, Program & Project Management Enterprise Architecture Discovery & Research Application Implementations Application Engineering Integrations & Automation IT Compliance SOX Training Operations Technical SaaS Production Support Systems Administration Release Management Change Management Internal Major Incident Management Business Systems Analysis: Research and evaluate existing and emerging technologies to understand where new systems can be used to achieve organizational objectives and plan for how the organization will utilize systems for its gain in the near- and far-term future. Procurement and Technology Acquisition Vendor & Contract Management New Technology Evaluations: Evaluate, negotiate and purchase technology. Set criteria for when, others within the organization can purchase, implement and deploy technology Digital Transformation: The adoption of digital technologies to innovate and reimplement existing business, talent, and operating models to drive growth, business value, and improved customer experience. Services We Support: Finance Systems Service Desk New SKU Request Open a New SKU issue using the CM: Add_New_SKU template or CM: Add_New_PS_SKU for a Professional Services SKU. Retire SKU Request Open a Retire SKU issue using the CM: Retire_SKU template. EntApps System Configuration Change If the system change is a quick change which does not require additional cross-functional alignment, scoping, or testing, and is not an output of a larger project, submit a Change Request. Open a Configuration Change issue using the CM: Configuration Change [Generic] template. Department Change Request Open a Department Change issue using the CM: Department Request template. EntApps System Incident Log Open an Incident issue using the IM: FinSys Incident template. Coupa Sandbox Refresh Open a Coupa Sandbox Refresh issue using the Sandbox - Coupa Refresh template. NetSuite Sandbox Refresh Open a NetSuite Sandbox Refresh issue using the Sandbox - NetSuite Refresh template. Zuora Central Sandbox Refresh Open a Zuora Central Sandbox Refresh issue using the Sandbox - Zuora Central Refresh template. Partnerships & Collaborations with: Data Team : Empower and generate business value from our data assets by using the data to drive optimal business decisions across GitLab. Procurement Team People Operations Systems Team Security Team : Conform to the established cybersecurity framework and requirements Join Our Team - Current Job Openings Contact Us For Technical Support, Service Requests or General Questions: HelpLab - IT Break/Fix Request Slack Channels # enterprise-apps # business-technology Other References Quote to Cash Documentation Enterprise Application Guides: GitLab‚Äôs Enterprise Application Guides for Finance Systems Business Technology - Tech Stack Details A list of tools and applications used internally at GitLab and how to access them. Documentation This is the landing page for Enterprise Applications policis, procedures and documentation Enterprise Applications READMEs Infrastructure Reference Links This page provides helpful links and reference material for the infrastructure team. Organizational Structure The Enterprise Applications Team implements and supports specialized applications that support our business processes within GitLab. Rolly A handy automation tool to generate status rollup issues for large projects and programs Services This page lists down the services which IT Enterprise provides GitLab Tech Stack Applications Instructions for how to access the GitLab tech stack and request updates to it Tech Stack Guide Reference Reference for how to create and maintain Tech Stack Guides. Tools Last modified January 17, 2025: Fix Broken PMO Link on Enterprise Applications Handbook Page ( ba05f8f0 ) View page source -  - please contribute .",
    "headings": [
      "IT Enterprise Applications",
      "About Us",
      "Our Vision",
      "Our Mission",
      "Strategic Objectives & Operating Principles",
      "Our Functional Structure",
      "What do we do?"
    ],
    "word_count": 918,
    "extracted_at": "2025-07-21 20:14:26"
  },
  {
    "document_id": "gitlab-handbook-927885",
    "url": "https://handbook.gitlab.com/handbook/finance/expenses/",
    "title": "Expenses",
    "category": "Finance",
    "content": "Global Travel and Expense Policy 1. POLICY GitLab‚Äôs Global Travel & Expense Policy is meant to provide guidance to all Team Members to ensure that we act in the best interest of our Company at all times. The purpose of this policy is to: Provide guidance around allowable reimbursable expenses. Ensure the best utilization of our Team Member‚Äôs time. Drive transparency across all business travel related spend. Help Team Members understand that a centralized travel program results in improved safety, visibility, support and savings. Prevent violations of applicable anti-bribery and corruption laws. 2. Responsibilities Team Members : As a public company, GitLab has an obligation to act in the best interests of the corporation and its shareholders. This obligation is shared by all Team Members and is the basis of our global travel and expense policy as a public company; Team Members must be thoughtful in spending the company‚Äôs money. Use best judgment to ensure that all travel is business critical and all expenses are deemed ‚Äúordinary and necessary‚Äù. Team Members should consider conducting meetings via audio or video conferencing when appropriate. Read, understand and adhere to GitLab‚Äôs Global Travel & Expense policy. Team Members are also expected to inform their direct manager of all business trip plans prior to booking to ensure that the proposed trip is within their departmental budget. Team Members must receive Manager approval for any proposed business critical trips. Submit all expenses timely. All Team Members should submit expenses by the end of the fiscal quarter in which the expense was incurred. GitLab‚Äôs fiscal quarter end dates are January 31, April 30, July 31, October 31. Follow-up with your manager or the AP team if they haven‚Äôt approved your expense report. Managers and/or Budget Owners : Ensure that Team members‚Äô expenses are in compliance with GitLab‚Äôs Global Travel & Expense policy. We ask that managers set pre-trip awareness expectations within their teams to ensure that trips are business critical and budgeted for. Please work with your respective Finance Partner to know your specific team‚Äôs budget and amount spent to date. Managers are expected to review their team‚Äôs expenses in their entirety every month, and must flag any concerns immediately to the Accounts Payable team. Potential violations of GitLab‚Äôs expense Policy as it relates to gifts and entertainment should also be flagged to the Legal department in a manner consistent with GitLab‚Äôs Whistleblower Policy . Managers will be required to sign off that they have reviewed their team‚Äôs expenses. Managers will be held accountable for any unreported abuse by their Team Members. AP will flag Managers if further information is required for their direct reports. Please see the attached Manager Policy for more details. Accounting : Maintain and communicate the Global Travel & Expense Policy out to the Company on a regular cadence as updates occur. Ensure that expense reports are in compliance with the Global Travel & Expense Policy. Provide clear and timely feedback to Team Members and managers regarding missing information, general questions, or ‚Äúout of policy‚Äù issues, and escalate potential violations of the gifts and entertainment expense rules to the Legal department in a manner consistent with GitLab‚Äôs Whistleblower Policy . Review and process all expense reports that require AP Admin review, within 7 working days from the date submitted. Finance : Maintain departmental budgets for Travel and Entertainment and Offsites. Work with respective Business Partners to provide specific team budgets and amounts spent to date. 3. General Guidelines Team members should submit receipts for every business expense. For Non-US Team Members, receipts are required for all expenses. US Team Members are required to only submit receipts for any expenses over $50 USD. Receipts must contain vendor name, date of purchase, listing of what was purchased, and contains a full breakout of the subtotal and tax amounts. Snapshot from phone/computer screen of Applications, Card/Bank Statements are not an acceptable form of receipt. Team Members are not allowed to expense items on behalf of their managers. Payments, gifts, favors, or entertainment for officials, employees, or representatives of government-owned entities are strictly prohibited, regardless of value. Expense claims for a single item up to $5,000 can be expensed via Navan. >$5,000 needs to go through the procurement process in Zip. Expense claims over 90 days from purchase date will not be reimbursed unless approved by the Manager. Navan Description box: Expense items must have a description filled out. This box is showing as optional but we require this to be filled in. This helps to correctly record the transaction and assist any reporting purposes downstream. When filling in the description box , we ask for you to enter details of the expense so anyone looking at the line on a report can tell immediately (without the need of looking at the receipt) what the expense relates to and why it is claimed. Please fill in the description box with details like : Items Purchased/Claimed, Period service relates to, Trip Details this claim relates to, Reason for trip, Clients Name, etc. If left blank, the expense will be bounced back to the team member to complete this portion. The maximum monthly limit to be reimbursed is $10K USD (or local currency equivalent). Once this limit has been reached, all expense items will need to be approved by the A/P team in Navan. This limit may be increased for Team Members whose positions require more spend (eg. Field Marketing), but the increase request needs to be submitted via an issue for approval by the VP or higher in the Accounting Organization. Due to the nature of their roles, E-Group members have a maximum monthly limit to be reimbursed of $20K USD before additional approvals are required. Expenditures related to client entertainment or marketing must be necessary, prudent, and job-related. Expenses that span longer than a month must be submitted on a monthly basis (eg. Although you paid for a year upfront for the internet, you must divide the total by 12 months and submit the cost monthly), with the exception of VPN. Gift cards are not accepted as a form of payment for business expenses. Expense items must clearly state if the spend includes amounts for clients / non-Team Members. Tax requirements in certain countries require us to account for client spending differently. Anything submitted outside of these guidelines will be flagged as Out of Policy. All work-related expenses (internet, co-working space, other monthly subscription, etc.) are not reimbursable while on Leave of any kind. For PEO‚Äôs, as you are aware with Navan, the system will automatically reimburse in the currency of the GitLab organization you are employed. To ensure you are reimbursed in the currency in which your PEO needs to be invoiced please submit your expenses in the payment currency you will be invoicing the PEO in. i.e. if you invoice your PEO in USD, then convert the expense into USD prior to submitting the expense report in Navan. This will then allow you to know the exact amount to invoice the PEO every month. If this is not doable then we will convert the currency using the FX rates from Netsuite on the day this expense is transferred to payroll for payment to the PEO. To find out the actual amount submitted in Navan, we can provide you a list of the expenses submitted for each month. Please request this monthly by submitting a HelpLab ticket so we can provide you the needed information. As with any third-party, it is best practice to limit the amount of personal data shared. The inclusion of personal data on your receipts is not required to submit an expense, so feel free to redact personal data for increased privacy. However, this is not a required step. For those that choose not to redact personal data from your expense receipts, the privacy and security controls in place at Navan were evaluated and they are designed to adequately protect your information. 3.1 Out of Policy Transactions Note that when expenses are flagged as ‚ÄúOut of Policy‚Äù in Navan, this does not necessarily mean the expense is ‚ÄúOut of Policy‚Äù. It can also mean that additional review is needed due to a requirement for certain attachments (eg. an approved issue) and/or additional approvals. Upon review, if more clarification is needed for a certain expense, the AP team will contact the Team Member in the Navan tool to ask for justification of the transaction before approving or rejecting the expense. The AP team will reach out to the Team Member‚Äôs manager if additional approval is needed. If the claim is over the advised guidance, the claim will be rejected with a note for the Team Member. The Team Member should be able to rectify the claim and resubmit. Where the Team Member has already received approval from the manager, that approval should be attached as a receipt on the claim transaction. Any claim made which does not fall into the policy is not reimbursable. If an item is out of policy and approved by your manager, then please obtain and attach your manager‚Äôs approval email prior to submitting the expense. This will then be reviewed by the Expense team Admin and could need further approval from VP or higher in the Accounting Organization. There will be occasions where if you have claimed an item and it needs to be reimbursed back to GitLab, you will need to follow the repayment process in Navan for submission of the funds. 3.2 Trip Purpose Guidance When booking travel in Navan, it‚Äôs important to select the proper trip purpose type from the ‚ÄúTrip Purpose‚Äù dropdown menu. Selecting the correct trip type is essential for accurate data reporting. The options for trip purpose include: Company meeting - any travel for internal meetings or events (that are not listed separately) with no customers present Customer visit - any travel for meetings or events where GitLab customers and prospects are in attendance including conferences, roadshows, field events, and customer meetings Partner visit - any travel for meetings or events where GitLab partners are in attendance Specific events - these will be visible in the trip purpose dropdown, ex: FY25 GTM Onsite 3.3 Other Out of Policy Transactions for all E-Group Members needs to be approved by VP or higher in the Accounting Organization. Any exceptions to the policy must be documented via an issue or an email with proper approvals from their manager and Finance team. 4. PROCEDURES Payment method GitLab‚Äôs default payment method in Navan is a central company card. Payment varies based on travel transaction type - air, hotel, car or rail (where applicable). Airfare: All airfare is charged immediately at the time of booking to the card on file. GitLab‚Äôs central card is the default payment method in the system and will always be available. Following expenses are categorized for reimbursement purposes with specific policy definition attached to it. The limits below are in USD, please use local currency equivalents when considering other currencies. 4.1 TRAVEL RELATED EXPENSES Airfare All business related flights need to be booked through Navan, and will be paid by GitLab travel card. For each flight search, Navan determines the price in real time. Also to note that while it is sometimes possible to find a cheaper flight outside of Navan, we get overall better rates in the aggregate with the buying power of the whole company. Even if a flight is cheaper outside of Navan, please book in Navan. Also submit a request under the Expenses -> Travel Related Expenses page of HelpLab with screenshots of Navan‚Äôs rate and the other airlines rate so the Expense team can address with Navan. Advance Purchase Team Members should make air reservations as early as possible, in order to take advantage of discounted fares. Travelers will ideally book: Domestic: At least 14 days in advance International: At least 21 days in advance The airfare policy in Navan is set up as a ‚ÄúDynamic Policy‚Äù which calculates a fair market price for every search based on travel dates and destinations. Any purchases that are over 20% of the Dynamic Policy will be flagged for further review by your manager. Also note that anything booked outside of Navan will flag as ‚ÄúOut of Policy‚Äù, and will need to be reviewed by your manager and the AP team. Class of Service One class of upgrade is permitted with Manager approval for team members over 6'5\"/2m in height. Domestic Flights Flights over 5 hours of consecutive flight time - For domestic flights with a duration greater than 5 hours of consecutive flight time (each segment must be 5+ hours), team members are authorized to book the next class up from standard economy as long as it is below business class. International Flights Flights greater than 5 hours of consecutive flight time - For international flights with a duration greater than 5 hours of consecutive flight time (each segment must be 5+ hours), team members are authorized to book the next class up from standard economy as long as it is below business class. Flights exceeding 8 hours of consecutive flight time - For those who travel frequently, defined as 3 or more trips per quarter internationally on flights of 8 hrs+ continuous flight time (minimum 6 flight segments with 8+ hours per segment), business class is permitted when traveling for any of the following reasons: Meeting with customers Speaking engagement Representing GitLab at a conference Frequent Flyer Programs Participation in frequent flyer programs must not influence airfare selection if it results in an out-of-policy option. Team Members may use personal frequent flyer miles or points for upgrades on business travel, however, Team Members will not be reimbursed for any respective charges. Cancellations, Unused Tickets and Exchanges Team Members are responsible for canceling trips that they will no longer be able to attend. Flight cancellations typically result in flight credit/unused tickets that can be used going forward. Unused tickets must be used for future business travel whenever possible. If the Team Member knows they won‚Äôt be able to use the ticket, please submit a request under the Expenses -> Travel Related Expenses page of HelpLab . Team Members may not personally benefit from any unused airline tickets. Please reach out to Navan Support if you need to change a flight. Common Out-of-policy Airfare Flags in Navan The system automatically flags the following as out-of-policy: Flight price selected is more expensive than the cheapest option + our buffer Out-of-policy air class is selected Flights booked less than 14 days in advance If the flight selected triggers any of these criteria, an email will automatically be sent to your manager for approval. Please provide sufficient reasoning to make approval easier and faster. After 24 hours without any manual action (approved/denied) the booking will automatically be accepted. Coding Expense Type / Navan Policy Category: Airfare Car Rental Rental Cars are reimbursable and should be booked through Navan, up to the intermediate car class, with a 7 day booking lead time. Rental Cars are reimbursable and should be booked through Navan, up to the intermediate car class, with a 7 day booking lead time. Please note that anything booked outside of Navan will flag as ‚ÄúOut of Policy‚Äù, and will need to be reviewed by your manager and the AP team. Navan Confirmation should be attached to the claim along with the Car Rental Receipt. Team Members can claim gas expenses but not mileage, when renting a car. Fuel at $300 limit per day. Additional Car Rental Guidelines A. Third Party Liability Purchase the liability insurance that is excess of the standard inclusion of State minimum coverage in the rental agreement at the rental agency. GitLab‚Äôs insurance policy provides liability insurance for rental cars while conducting company business, but it may be excess over any underlying liability coverage through the driver or credit card company used to purchase the rental. Purchase the liability offered at the rental counter if there are Non-US Team Members renting autos in the US or Canada. While workers‚Äô compensation would protect an injured US Team Member, other passengers may have the right to sue. To ensure that GitLab has protection when a Non-US Team Member invites another person into the car we recommend the purchase of this insurance when offered at the rental counter. B. Physical Damage - Collision Damage Waiver Do Not purchase the Collision Damage Waiver offered at the rental counter. GitLab purchases coverage for damage to rented vehicles. If travel to Mexico is required, purchase the liability insurance for Mexico offered at the rental counter. You should verify that the rental agreement clearly states that the vehicle may be driven into Mexico and liability coverage will apply. Countries other than the US and Canada: Third Party Liability Purchase the liability insurance offered at the rental counter when traveling outside the US and Canada. Automobile Bodily Injury and Property Damage Liability insurance are required by law in almost every country. Please verify this coverage is included with the rental agreement. Physical Damage - Collision Damage Waiver Purchase the Collision Damage Waiver or Physical Damage Coverage offered by the rental agency when traveling outside the US and Canada. In the event of an accident resulting in damage to the rental car, the Non-US rental agency will charge the credit card used to make the reservation with an estimated amount of repair costs if insurance is not purchased. If this happens, GitLab does not purchase Foreign Corporate Hired Auto Physical Damage Coverage to reimburse for damages. Coding Expense Type / Navan Policy Category: Rental cars Hotels To be booked in Navan. When booked outside Navan - approval required by Manager and AP Admin. When you book Hotels through Navan Travel, the costs will need to be charged to a personal credit card. For business related bookings, you can submit the costs for reimbursement via the Navan Expense reimbursement tool. Please attach the Navan Reservation email confirmation to the claim. Hotel stays are reimbursable up to $300 USD (or equivalent local currency) inclusive of tax per night for standard rooms, with a 7 day booking lead time. However, the lodging policy in Navan is set up as a ‚ÄúDynamic Policy‚Äù which calculates a fair market price for every search based on travel dates and destinations. This allows for some room in price in case the $300 USD limit is really not applicable to that area. And similar to airfare, any purchases that are over 20% of the Dynamic Policy will be flagged for further review by your manager. Always choose the refundable room booking unless the only available option is a non refundable room. The exception is the Corporate Events hotel room blocks organized by the internal team or if the conference hotel room block has better pricing than Navan. The hotel room block‚Äôs pricing is generally within the bounds of the $300USD/night and in the event it is over that amount, please contact the AP team for an exception to be granted. Conference hotel room blocks or Corporate Events organized blocks will still need to be charged to a personal credit card and then submitted for reimbursement via Navan Expense. Always bring a credit card with you when traveling for company business if you have one. Hotels will generally expect you to have a physical credit card to present upon check-in. This credit card will be kept on file for the duration of your stay. Even if your lodging was pre-paid by the company or by using a company credit card, the Hotel may still require a card to be on file for ‚Äúincidentals‚Äù. Additional Hotel Guidelines Dry cleaning is allowable if the stay is over 5 days. Room service is allowable as a meal for e.g. breakfast/lunch/dinner. Meals are to be segregated from the hotel bill and tagged under ‚ÄúMeals Company Provided‚Äù Category. Parking must be segregated and tagged under ‚ÄúTransportation‚Äù. Movies, mini bars are not allowed as a claim. Booking accommodations through Airbnb To be booked on the AIRBNB platform. Same restrictions in amount applies as the hotel expense. Booking through Airbnb is permitted if it is cheaper than a hotel stay for your trip Team Member to submit a manual expense in Navan using expense type ‚ÄúLodging‚Äù and attach the receipt/invoice. Self Stay Incentive Policy If you decide to stay with friends or family instead of a hotel / Airbnb for a business trip, you may expense up to a $50 appropriate host/hostess gift. Coding Expense Type / Navan Policy Category: Lodging Meals: Company Provided while Traveling Meals while traveling on Company business are reimbursable, up to $100 USD (or local equivalent currency) per day. Each Team Member must submit their own receipts for reimbursement, so ensure to separate billing when going to meals with groups of Team Members. If this is not practicable to do due to the group size, then the most senior Team Member present should pay the bill and submit for reimbursement. To be used for team activities and food/beverages associated with travel on Company business. Refer to our Travel Handbook Page. Tips are acceptable up to 20% and should be detailed accordingly in the description box. This should be included in the final price to stay within the Policy limits. For US team members, cash tips under $50 do not need a receipt. Please also add a description for the trip/reason for travel. Coding Expense Type / Navan Policy Category: Traveling: meals for myself Traveling: Team Events and Meals To be used for team activities and food/beverages. Each Team Member must submit their own receipts for reimbursement, so ensure to separate billing when going to meals with groups of Team Members. If this is not practicable to do due to the group size, then the most senior Team Member present should pay the bill and submit for reimbursement. $80 limit per person per meal. Tips are acceptable up to 20% and should be detailed accordingly in the description box. This should be included in the final price to stay within the Policy limits. For US team members, cash tips under $50 do not need a receipt. Please also add a description for the trip/reason for travel. Coding Expense Type / Navan Policy Category: Traveling: Team Events and meals Mileage Based on Mileage driven and calculated by Navan. Team Members are prompted by Navan to enter their start and end locations. Mileage is reimbursed according to local law, e.g. US rate per mile, rate per km in the Netherlands, or rate in Belgium. Refer to ‚ÄúHow Mileage Rates are Based‚Äù section below. Should Show Start and End point of trip in Navan. Please include a reason for the trip in the description box. Team Members cannot claim both mileage and Electric Vehicle charging fees. How Mileage Rates are Based The mileage rate is based on your legal entity‚Äôs mileage rates for the current year. These will be updated yearly for tax compliance. However, for the following entities (due to limited visibility online), the default rate is set at $.50/mile‚Ä¶ so please update the rate on your mileage if needed to match your local compliance laws: GitLab IT BV, GitLab Korea and GitLab Japan. Coding Expense Type / Navan Policy Category: Distance Driven Train The Train policy in Navan is set up as a ‚ÄúDynamic Policy‚Äù which calculates a fair market price for every search based on travel dates and destinations. Any purchases that are over 20% of the Dynamic Policy will be flagged for further review by your manager. Also note that anything booked outside of Navan will flag as ‚ÄúOut of Policy‚Äù, and will need to be reviewed by your manager and the AP team. Trains booked through Navan will be paid by GitLab travel card. Train rides must be standard cabin class with a 14 day booking lead time. If you travel more than 3 train trips (6 segments) per quarter, and they are over 5 hours in duration; we will allow you to upgrade one class on the train. Yearly or Monthly Rail Discount cards are not reimbursable. Please note that anything booked outside of Navan will flag as ‚ÄúOut of Policy‚Äù, and will need to be reviewed by your manager and the AP team. If booked within Navan and is flagged as ‚ÄúOut of Policy‚Äù, please also refer to the ‚ÄúBooking shows Out of Policy‚Äù section below. Coding Expense Type / Navan Policy Category: Train travel Transportation/Parking Parking, Tolls, Taxi, Uber pertaining to travel to/from GitLab events, clients, or conferences is acceptable. Team Members are not permitted to expense both fuel/EV charging fees and mileage. Full Description of Trip should be stated in the Description box. Ground Transportation (taxis, ubers) at $300 limit per round trip and $150 limit for single trip. Parking and tolls at $150 limit per day. All items booked which are over the limits set will need to have manager approval attached to the claim. Coding Expense Type / Navan Policy Category: Public transport, tolls & parking Travel (Other) Travel Dates - Days before and after The company will cover all work-related travel expenses. This includes lodging and meals during the part of the trip that is work-related. Depending on the distance of your travel, it can also include one day before and one day after the work related business. For example, if you are attending a 3 day conference in a jet lag-inducing location, the company will cover your lodging and meals those 3 days as well as one day before and one day after. Internet - Travelling Internet while traveling is reimbursable for up to $50 USD (or local equivalent currency) per day. Please provide trip details on the description box. Coding Expense Type / Navan Policy Category: Traveling: internet access Supporting nursing mothers If you are nursing while traveling on GitLab approved business, you can reimburse costs in order to travel with breast milk or ship your breast milk back home. You can expense: Fees associated with a milk shipment service, such as MilkStork. If a milk shipment service is unavailable, you may expense the cost of checking a bag while flying Coolers or containers to store breast milk while traveling Shipment costs and materials, including dry ice, packaging, styrofoam coolers, and labels. Check with your health plan to see if you are eligible for reimbursement for the cost of a breast pump or any other supplies. Coding Expense Type / Navan Policy Category: Other GL Code NON-COGS: 6080 - Other Travel- Visas, Permits, Covid Tests GL Code COGS: 5080 - Other Travel- Visas, Permits, Covid Tests COGS Personal Bookings In Navan, you have the ability to book Personal trips. Note that when selecting this option, a personal credit card will be required at time of booking. Personal trips will not have the option to be added to the GitLab invoice. 4.1 NON-TRAVEL RELATED EXPENSES Books (Audio/E-Books included) Books are reimbursable if used to optimize your job position. Limit is set to $60/year. Coding Expense Type / Navan Policy Category: Books, dues & subscriptions Business Cards Business cards are ordered from Moo as per the instructions provided by the People Connect team. To be ordered via Moo, attach a receipt from Moo. Refer to the Ordering Business Cards handbook page. Limit is set at $150 per quarter. Expenses higher than this limit require manager‚Äôs approval via email. The email should be attached to the expense transaction as an additional receipt. Coding Expense Type / Navan Policy Category: Office Supplies Co-Working Space Coworking space is reimbursable for monthly space and one-off days during business travel. $700.00 Limit per month. The space should be located within a commutable distance of the Team Member‚Äôs primary residence in their country of employment, with exception to One-off days (day passes) if the Team Member is traveling for business. This is for tax reasons. Co-working spaces need to be a professionally managed space. Leasing of apartments or private properties is prohibited. Coworking space is not reimbursable while on personal travel. Up to 5 One-off Days in a calendar month related to co-working space do not require Manager or Finance approval. If more than 5 days are booked in the month, then Manager and Finance approval (via submitting a request under the Expenses -> General Expenses page of HelpLab ) is required and needs to be obtained prior to submission of expenses. Copy of approved email must be submitted with first month submission. No contracts are allowed to be under the GitLab name and it must be under the Team Members name. The co-working space must be submitted monthly in the month it pertains to with full receipts to be provided. GitLab will not cover security deposits or advance payments for co-working space. Travel to and from the co-working space, parking, meals, beverages, access cards, insurance and other additional expenses in a co-working facility are not reimbursable. Only the rent for the space is reimbursable. If co-working space is used together with a combination of working from home, we will allow the reimbursement of the internet cost for where you spend most of your time. i.e. if you expense a co-working space for a full month then internet for home cannot be expensed. If you expense co-work for a few days in a month then home internet can be expensed in full. Coding Expense Type / Navan Policy Category: Other GL Code NON-COGS: 6076 - Coworking Space GL Code COGS: 5076 - Coworking Space COGS Conferences All costs associated with attending a conference to represent GitLab are reimbursable and an approved completed G&D issue will need to be noted in the expense report upon submission. Please refer to the Growth and Development handbook page for further details and requirements. The reimbursement limits currently denoted in the Growth and Development handbook page do not include the cost of travel to and from the conference, so please ensure you have Manager approval for the cost of the travel. Select classification or tag ‚ÄúGrowth and Development‚Äù in Navan when you create expenses. Needs to have approved G&D Development issue which will be reviewed by AP Admin. No conference expense, with the exception of travel, should be allowed outside of G&D, unless the Team Member is a speaker for an event or required to attend an event for job related responsibilities (i.e. staffing or sales). Coding Expense Type / Navan Policy Category: G&D (Growth & Development) Equipment These amounts were set after a thorough analysis and review of Team Members‚Äô expense data during the previous two years and benchmarked with other remote companies. Anything over this amount will be at the expense of the Team Member and no exceptions will be made. As you onboard and start your GitLab journey, new hires will receive a 1,500 USD (or equivalent local currency) stipend to help you towards setting up your home office in your first year. This will be issued to you as a Virtual Card, and you will be able to use that card to purchase items. The Virtual Card information will be sent to you by the Accounts Payable team via your Onboarding Issue. Please refer to the Navan End Users Guide for instructions on using and accessing your Virtual Card. Existing Team Members will get a yearly refresh of 500 USD (or equivalent local currency) to purchase upgrades, replacements, or enhancements to your home office setup. This only applies to Team Members who have been employed the entire previous fiscal year. This excludes laptops - please connect with the IT team if you require a replacement laptop. We want you to set up your office the way you want it. Although we don‚Äôt want to put any restrictions regarding which office equipment you may purchase, we would like to outline what is covered under the term Office Equipment. What‚Äôs included - Essential items which you will need to ensure you are able to perform your role in GitLab should include chair, desk, monitor, Laptop (provided), headset, external mic, external keyboard and external mouse. Further to this, items like additional monitors, laptop stand, external webcam, supplementary lighting, laptop bag/case, can also be considered and expensed using the Stipend/Allowance. Any items outside this will fall under an exception to the policy and will be subjected to review. In addition the following items are not reimbursable : Phones, watches, smart speakers, smart TVs/smart monitors, walking pads/treadmills and tablets. Purchasing from Private Sellers (e.g. either new or used equipment) is allowed. To expense them, attach the screenshot of your transaction with the seller showing the amount agreed upon, payment method, and item details in the description field. If paid via online transfer, attach the receipt for back up. If you have any doubts please connect with the Expense Team by submitting a request under the Expenses -> Home Office Equipment page of HelpLab . Please note that these purchases are still reviewed by your manager and accounting teams, and any misappropriation of these funds will be flagged. New Hires- 1,500 USD (or equivalent local currency) Guidelines The virtual card provided will expire after one year of issue. Any unused funds will not roll over to the next year. The local currency FX rate will be calculated using the OANDA Currency Converter as of the date the virtual card is issued. Existing Team Members- 500 USD (or equivalent local currency) Refresh Guidelines This is a yearly refresh amount. It will reset at the beginning of each calendar year (January 1 to December 31). The Navan Virtual Card cannot be used for the yearly refresh. Team Members should use their own method of payment and submit their expenses in Navan. Any unused funds will not roll over to the next year. Team Members hired within the previous fiscal year are not eligible. For example, a Team Member who started 2023-05-10 will get their first refresh amount on 2025-02-01. Coding Expense Type / Navan Policy Category: Work from home Team Member Significant Life Events and Team Member Gifts Cash or cash equivalents, such as gift cards, are not allowed; Qualified gifts are capped at $125 per transaction. Managers are able to send Gifts and Flowers on behalf of their team members in acknowledgment of significant life events such as well wishes ahead of surgery, or the loss of a loved one. Baby gifts are not reimbursable as GitLab already sends them a gift . Any People Manager can send a gift or flowers to any Team Member at GitLab to let them know they are thinking about them. Examples include: A new Team Member recently purchased a new home and shared their news with others. A People Manager sends a ‚ÄúHome Sweet Home‚Äù doormat as a congratulatory gift. While working a People Manager noticed a Team Member‚Äôs children in the background of a Zoom call and surprised the kids with a new game. A Team Member wasn‚Äôt feeling well, which was noticed by a People Manager who sent a care package of food as a ‚Äòget well soon‚Äô gesture. Baby gifts are not reimbursable, as the GitLab People team already sends team members a congratulatory gift. The cost of the gifts and flowers provided to GitLab Team Members will be allocated to the senders departmental budget. The allowable cost for gifts is up to $125 USD (including shipping) per gift. If you would like to buy holiday gifts for your team, these need to be done personally and should not be expensed. People Managers are to use their own personal card for expense reimbursement. People Managers will need to be sure to use Team EmployeeGiftsFlowers and the account 6028 in Navan Expense for the expense. For further questions regarding expensing of gifts and flowers, please reach out to the AP team by submitting a request under the Expenses -> General Expenses page of HelpLab . Coding Expense Type / Navan Policy Category: Gifts - internal Classification: EmployeeGiftsFlowers Internet Monthly service charges for the internet are reimbursable, but GitLab will not reimburse for any initial setup, equipment, change fees, or monthly insurance charges. Please expense internet costs monthly, reflecting current charges only (even if you pay by a different cadence). For Team Members in the Netherlands: If you have not already completed the form as part of onboarding with our Netherlands payroll provider, fill in and sign the Regeling Internet Thuis form and send it to the HRSavvy team at payroll@savvy-group.eu . Please do not expense your Internet costs via Navan - these will be rejected. If your address changes or the amount changes, please send a new form to the HRSavvy team, along with the invoice/letter for processing. This is a taxable expense for GitLab Ltd. United Kingdom Team Members assuming that the internet connection is used partially for personal use as well as business use. Policy is set at $80, anything over that amount will still be considered for approval as we know there are exceptions, and will be checked and approved on an individual basis depending on the user‚Äôs circumstances, i.e. location etc. Itemized Receipt required. If an itemized bill is not available, costs will only be reimbursed for the element relating to Internet Access, i.e. if you pay for tv, internet and phone, the invoice should be divided by 3/# of services and we will pay this value only. No hardware costs for internet service is reclaimable. This includes routers, extenders/boosters, etc. If co-working space is used together with a combination of working from home, we will allow the reimbursement of the internet cost for where you spend most of your time. i.e. if you expense a co-working space for a full month then internet for home cannot be expensed. If you expense co-work for a few days in a month then home internet can be expensed in full. Team members for GitLab GmbH (Germany) should refer to this page for their country‚Äôs specific guidelines of this expense. Coding Expense Type / Navan Policy Category: Internet access Laptops, insurance and repairs All laptops are purchased through GitLab unless a Team Member is in a region where GitLab cannot deliver a laptop. Team Member laptops can be refreshed after three years of employment. If a Team Member needs a replacement laptop due to damage, they must reach out to IT via an issue before purchasing a new one. See Laptop handbook page for your reference. Repairs to company issued equipment If you need to replace a battery, laptop charger, or something small that does not affect the productivity or speed of the device, please go ahead and get that small item replaced and expensed. The category to use in Navan is ‚ÄòOffice Supplies‚Äô. Please get approval from your Manager if your equipment appears to be damaged, defective, or in need of repair Business Operations can advise on next steps to ensure you have the proper equipment to work. For loaner laptops: Do not hesitate when expensing a loaner laptop while your primary laptop is being repaired. Use your best judgment identifying a local vendor. Please check out our Laptop Repair page for more info. Needs to have an approved issue from the IT team. AP Admin needs to review expense for approved issue. Coding Expense Type / Navan Policy Category: Office Supplies Marketing- related expenses Small purchases for marketing events which are under $5,000 USD and which cannot be paid through the Procurement Process (Zip) are reimbursable. Up to $5,000 can be expensed via Navan. $5,000 needs to go through the procurement process in Zip . Coding Expense Type / Navan Policy Category: Other GL Code NON-COGS: Multiple- will be required to choose GL account GL Code COGS: Multiple- will be required to choose GL account Meals with Clients and Partners Team Members are prohibited from providing anything of value, including meals, to any government official, government Team Member, or government representative (including any government prospects and government customers). Meals are otherwise reimbursable, however Team Members should be mindful of budget while claiming meals with clients and partners. $80 limit per person per meal. All Participants should be added (both internal and external participants) in the section provided. Please also add a description for the meal/event. The bill should be paid by the most senior Team Member present and submitted for reimbursement by that Team Member. Coding Expense Type / Navan Policy Category: Entertaining clients Office Supplies & consumables To maintain your home office equipment, items like compressed air to clean keyboards, pens, etc may be required from time to time. Limit is set at $50.00 per month. Coding Expense Type / Navan Policy Category: Office Supplies Phone Service Monthly service charges for cell phones are reimbursable for Team Members whose phones are vital to their position. Actual cell phone, phone accessories and family plans are not reimbursable. Policy is set at $80, anything over that amount will still be considered for approval as we know there are exceptions, and will be checked and approved on an individual basis depending on the user‚Äôs circumstances, i.e. location etc. A note that Team Members using their phone service outside of their country should try to obtain a contract which includes roaming services. Itemized Receipt required. If itemized bill is not available, then the costs will only be reimbursed for the element relating to Phone Service, i.e. if you pay for tv, internet and phone, the invoice should be divided by 3/# of services and we will pay this value only. No monthly hardware costs for phone service is reclaimable. In addition Tablets, Watches, Phone Devices are not reimbursable. Coding Expense Type / Navan Policy Category: Cell phone Postage/Shipping/Customs Fees Postage/shipping/custom charges related to the sending and or receiving of work documentation or special packages can be reimbursed. Limit is set at $100.00 per transaction before being flagged for approval. Coding Expense Type / Navan Policy Category: Shipping & postage Professional dues, membership fees For bar license dues / fees, Team Members who are employed by GitLab as an attorney will supply evidence of payment for such fees and expensed via Navan. Other costs associated with professional dues and membership fees are reimbursable and an approved completed G&D issue will need to be noted in the expense report upon submission. Select classification or tag ‚ÄúGrowth and Development‚Äù in Navan when you create expenses. AP Admin needs to review expenses for approved issue. Coding Expense Type / Navan Policy Category: G&D (Growth & Development) Software No software subscriptions are reimbursable. Team Members that would like to purchase software will need to go through the Procurement process. Please follow the Guidance from the Individual Use Software Handbook Page . Swag All Swag related to customers, your team, events, giveaways, TMRG‚Äôs, etc., are not to be expensed. For conferences, any gifts or swag related items to be given out are not to be expensed. Please refer to the Merchandise Workflow Guidance in the Handbook. Exceptions are only reimbursable with approval from the VP of department or the Swag team. Team Building To be used for team activities and food/beverages associated with special team events. Amount allowed is dependent on their department budget for the year. Team members to please use T&E accounts for their own individual expenses relating to any team building events (ie meals, travel, transportation) and tagging the classification to ‚ÄúFY25 Team Building Budget‚Äù In FY25, each e-group member has been allocated a budget per quarter for FY25-Q2 to FY25-Q4 for team building events. Each e-group member can use their discretion when using the budget. The budget should be used within the quarter the funds are allocated and unused funds cannot be moved to a different quarter. This budget should cover leadership offsites, Team Members get togethers, the holiday party and other virtual fun events. In Navan, the Team Member must code any related expense to GL code ‚ÄúTeam events & meals‚Äù and Classification (under optional details) ‚ÄúFY25 Team Building Budget‚Äù. The expense needs to be submitted in the same month as the event or if not possible due to the timing of the event, the latest acceptable submission will be before the end of the fiscal quarter that the event took place. Coding Expense Type / Navan Policy Category: Team members to please use T&E accounts for their own individual expenses relating to any team building events (ie meals, travel, transportation) Classification: FY25 Team Building Budget Training/Tuition All costs associated with training or tuition are reimbursable. An approved completed G&D issue will need to be noted in the expense report upon submission. The Growth and Development benefit is managed in partnership by the Total Rewards and Learning and Development team. Select classification or tag ‚ÄúGrowth and Development‚Äù in Navan when you create expenses. AP Admin needs to review expense for approved issue. Coding Expense Type / Navan Policy Category: Other GL Code NON-COGS: 6065 - Training & Development GL Code COGS: 5065 - Training & Development COGS VPN Subscription Please read Why We Don‚Äôt Have A Corporate VPN , and check out our Personal VPN page regarding usage at GitLab. Policy is set at $150 per year. Yearly subscription can be submitted in one claim. Monthly subscriptions to be submitted monthly. Valid receipts to be submitted for all claims. Multi year Policy - only current year subscription can be claimed. Coding Expense Type / Navan Policy Category: Other GL Code NON-COGS: 6060 - Software Subscriptions GL Code COGS: 5060 - Software Subscriptions COGS Visas/Permits/Covid Tests Travel Visas, Travel Permits, Covid Tests pertaining to travel to/from GitLab events, clients, or conferences is acceptable. Please provide a detailed description of expenses in the description box. Will flag approval required by AP Admin. Coding Expense Type / Navan Policy Category: Other GL Code NON-COGS: 6080 - Other Travel- Visas, Permits, Covid Tests GL Code COGS: 5080 - Other Travel- Visas, Permits, Covid Tests COGS 4.3 Missing Receipt Affidavit If a Team Member is missing a receipt, a Missing Receipt Affidavit will need to be completed and attached to the expense when submitted. Missing Receipt Affidavit located here (please ensure to make a copy). When attaching the receipt affidavit, the Team Member should attach the document as a PDF. 4.4 Reimbursement Payout Timelines The procedure by which reimbursable expenses are processed varies and is dependent on contributor legal status (e.g. independent contractor, Team Member) and subsidiary assignment. Legal entities Team Members must submit their expenses through Navan. Expenses for GitLab Inc, GitLab Federal, GitLab Ltd (UK), GitLab BV (Belgium and Netherlands), GitLab GmbH (Germany), GitLab PTY Ltd (Australia and New Zealand), GitLab GK (Japan) GitLab LTD (Ireland), GitLab Korea Limited and GitLab Singapore PTE. LTD. are reimbursed via Navan within 7 business days for the expenses within policy or after approval by the Accounts Payable team (for out of policy expenses). The Team Member‚Äôs bank account must be set up in Navan in order for payment to complete. Expenses for GitLab Canada Corp must be submitted and approved by the Accounts Payable team (for out of policy expenses) before the 1st day of each payroll period. Expenses for GitLab France S.A.S and GitLab BV Finland must be submitted and approved by the Accounts Payable team (for out of policy expenses) on or before the 6th of each month to ensure it is included in the current month‚Äôs payroll. Navan will be implementing a Batched Payment system for team members who are reimbursed directly through Navan. If you submit multiple expenses during the week, Navan will batch these expenses into one single weekly payment that will be paid out on Mondays. These payments will include all approved expenses up until the Sunday evening prior, and should hit the team member‚Äôs bank accounts on Tuesday or Wednesday. PEO (Professional Employer Organization/ Employer of Record and not a GitLab entity or Branch) PEO Locations The list of locations under a PEO can be found here . Team Members must submit their expenses through Navan. All expenses must be submitted and approved by the Accounts Payable team (for out of policy expenses) on or before the 6th of each month to ensure it is included in the current month‚Äôs payroll. iiPay Team Members must submit their expenses through Navan. All Individual contractors or C2C, with exception of Nigeria will be reimbursed by iiPay by the 22nd of each month. All expenses must be submitted and approved by the Accounts Payable team (for out of policy expenses) by the 6th of each month to be included in the current month payment. For contractors with C2C status, be sure to contact the Payroll team via HelpLab and submit a request under the Expenses -> General Expenses page of HelpLab if you need to set up a separate bank for your expense reimbursement. CXC Global The list of CXC countries can be found here . Team Members must submit their expenses through Navan. All expenses must be submitted and approved by the Accounts Payable team (for out of policy expenses) on or before the 6th of each month to ensure it is included in the current month‚Äôs payroll. GitLab Payroll Team will send the approved expense amount to CXC EMEA Payroll to include with the monthly salary. Team Members must include the approved expense amount on their monthly invoice as well. 4.5 Submitting Expenses on Behalf (or Requested By) Team Member‚Äôs Manager A Team Member submitting expenses on behalf of their manager is a violation of our Expense policy and GitLab‚Äôs internal controls. The AP team will review these on a quarterly basis during their review of the quarterly Manager issue. If this is found during the expense review process, the following actions will take place: AP Admins to notify the Team Member, the Team Member‚Äôs manager, the Team Member manager‚Äôs manager, and Finance leadership team of the violation. The expense is to be repaid to GitLab immediately and the Team Member‚Äôs manager will need to resubmit the expense themselves. 5. Physical Cards Please see Navan Physical Card policy here . 6. Purchase Cards Navan Purchase Card These virtual cards within Navan are only utilized by the AP team, and they are used solely for providing new Team Members with a $1,500 USD (or local currency equivalent) stipend for their home office set up. These cards were set up to ensure that Team Members do not spend outside of this amount, as well as ensuring the stipend is only available during their first year of employment. Within the controls in Navan, these cards are only accessible to the AP Admins team, and are not accessible to Team Members. 7. OTHER Setting up your Navan Account Below is some more information to help you get set up with your Navan account. Log into Okta and click the Navan tile. Once you are in your dashboard, make sure to set up your info in your profile (see link from drop down menu under your name). Add your passport information to your profile (only passport information is accepted), this will populate your info directly when booking a flight. Team members can view if their reimbursements have been processed successfully or failed on both mobile and desktop versions. If the reimbursement fails, the team member will receive a notification and how to fix it in Navan. Now let‚Äôs start booking! Navan Loyalty Program Travelers earn Navan Loyalty Points s when booking hotels in Navan. Users who book hotels for others will also earn loyalty points. The Navan Loyalty Program is visible in the platform, with a new loyalty program profile page to track your earn and redemption activity. Team members are able to redeem loyalty points for personal travel hotels. Users can redeem as little or as many loyalty points as desired - they can pay partially with loyalty points and partially with a personal credit card if team members don‚Äôt have enough loyalty points to cover the full cost of the booking. Loyalty Points will be a form of payment on checkout when selecting a prepaid hotel rate. All loyalty points can be retained by a user when they leave their company by activating a personal-only account. Companies cannot take back earned rewards. Sustainable travel considerations Even as an all-remote company, GitLab recognizes that some travel is necessary. These considerations aim to reduce the environmental impact of travel: Prefer virtual meetings and attendance over personal meetings, except when the event‚Äôs objective is enhanced by meeting in real life. For short-distance travel, consider ground travel over air travel for information on short distance travel recommendations visit these examples from the University of Bern, University of Lund. Select trips with lower carbon emissions. When booking travel through Navan Tripactions you can view the total CO2 footprint for at the checkout screen. If you organize an in-person meeting, aim for a location that allows as many people as possible to travel in a sustainable way. Carbon offsets offered by airlines have dubious value, so aim to avoid air travel where it makes sense. Domain Name Registration and Maintenance Policy Scope and Purpose This policy applies to all GitLab team members registering, or maintaining a registration for, GitLab-related Domain Names, including GitLab-related Domain Names registered or used for sandbox or testing purposes. Domain names are key assets in GitLab‚Äôs intellectual property portfolio. Centralizing the registration and maintainance of domain names under the Infrastructure Shared Services group using GitLab‚Äôs approved domain name registrar helps us track and protect these valuable assets. Please refer to the Domain Names and DNS Records Handbook Page . ‚ÄúGitLab-related Domain Names‚Äù when used in this policy means any domain name: registered or used for any purpose related to a team member‚Äôs role at GitLab; containing the GitLab trademark (GITLAB) or one of its derivatives (like, amongst other things, git, glab, gtlb, gl); and/or containing any GitLab key messaging term (like, amongst other things, DevOps, DevOps platform, all remote). Registration of new GitLab-related Domain Names All GitLab-related Domain Names must be registered using the process outlined in the dns-domain-purchase-request issue template maintained by IT Operations. Expense reports submitted by team members for expenses incurred on or after 2022-03-01 in registering new GitLab-related Domain Names will be rejected. Transfer of existing GitLab-related Domain Names All GitLab-related Domain Names currently registered in the name of team members, or registered with unapproved registrars, should be transferred to GitLab using the process outlined in the dns-domain-transfer-request issue template as soon as possible. Expense reports submitted by team members for expenses incurred on or after 2022-08-01 in maintaining registrations of GitLab-related Domain Names in the name of team members, or with unapproved registrars, will be rejected. Team Member Expense Temporary Advances This relates To Laptop Advances only - If more information is required please email the AP team on AP@gitlab.com Expense Reimbursement for Terminated Team Members If a team member whom you manage has left GitLab and comes to you with final expenses that are valid for reimbursement, please verify that they were not already processed in Navan and then contact Accounts Payable. You must submit valid receipts and a completed copy of the Expense Reimbursement template along with your approval. Please note that we may also ask the terminated team member to provide valid banking details in order to process the payment to them. AP will do their best to process and pay the reimbursement to the individual within 1 week. Last modified July 8, 2025: EUS - Access Requests Update ( b88590d3 ) View page source -  - please contribute .",
    "headings": [
      "Global Travel and Expense Policy",
      "1. POLICY",
      "2. Responsibilities",
      "3. General Guidelines",
      "3.1 Out of Policy Transactions",
      "3.2 Trip Purpose Guidance",
      "3.3 Other",
      "4. PROCEDURES",
      "4.1 TRAVEL RELATED EXPENSES",
      "Car Rental",
      "Hotels",
      "Meals: Company Provided while Traveling",
      "Traveling: Team Events and Meals",
      "Mileage",
      "Train",
      "Transportation/Parking",
      "Travel (Other)",
      "4.1 NON-TRAVEL RELATED EXPENSES",
      "Team Member Significant Life Events and Team Member Gifts",
      "Internet",
      "Laptops, insurance and repairs",
      "Marketing- related expenses",
      "Meals with Clients and Partners",
      "Office Supplies & consumables",
      "Phone Service",
      "Postage/Shipping/Customs Fees",
      "Professional dues, membership fees",
      "Software",
      "Swag",
      "Team Building",
      "Training/Tuition",
      "VPN Subscription",
      "Visas/Permits/Covid Tests",
      "4.3 Missing Receipt Affidavit",
      "4.4 Reimbursement Payout Timelines",
      "Legal entities",
      "4.5 Submitting Expenses on Behalf (or Requested By) Team Member‚Äôs Manager",
      "5. Physical Cards",
      "6. Purchase Cards",
      "7. OTHER",
      "Setting up your Navan Account",
      "Navan Loyalty Program",
      "Sustainable travel considerations",
      "Domain Name Registration and Maintenance Policy",
      "Team Member Expense Temporary Advances",
      "Expense Reimbursement for Terminated Team Members"
    ],
    "word_count": 9236,
    "extracted_at": "2025-07-21 20:14:27"
  },
  {
    "document_id": "gitlab-handbook-618904",
    "url": "https://handbook.gitlab.com/handbook/finance/financial-planning-and-analysis/",
    "title": "Financial Planning & Analysis",
    "category": "Finance",
    "content": "Financial Planning & Analysis Welcome to the FP&A Team Handbook. Our missions is to maximize GitLab‚Äôs long-term valuation by enabling e-group and FP&A to plan, prioritize, and execute effectively Our mission Maximize GitLab‚Äôs long-term valuation by enabling e-group and FP&A to plan, prioritize, and execute effectively Our objectives Facilitate aligned cross-functional execution of GitLab‚Äôs strategy Bring predictability and operational rigor to GitLab Ensure financial and operational goals of GitLab are defined, documented and achieved Evangelize awareness of strategy and each departments role in achieving it Ensure sound data-driven decision support Ensure our public company narrative aligns with operating strategy How GitLab‚Äôs FP&A plans to get there‚Ä¶ Manage the budget and planning processes for GitLab‚Äôs Board Plan Build and maintain a long-term financial model that identifies long-term strategy and financial targets Define business drivers and KPIs in our operating and long-term models in collaboration with the business and measure efficacy of the business plan Own the rolling forecast process and provide actionable insights to ensure departmental performance vs. plan and strategy Drive quarterly earnings process as public company, including guidance and investor narratives Provide insights on the business drivers to constantly look for opportunities to improve performance Process Improvements Analytics Education Our team FP&A comprises five different sub-teams to support our FP&A goals: Corporate FP&A Sales Finance Marketing R&D G&A Common Links Finance Issue Tracker Analytics Issue Tracker for all data, dashboard, or reporting requests FP&A Job Ladder Adaptive Insights Key Slack Channels #fpanda #fpa-ap-gl-collaboration #month-end-close-and-gl-team #key-review FP&A Processes Annual Operating Plan (‚ÄúAOP‚Äù) What : The AOP includes the annual strategy, business plans/budgets for each function, plans for how we will achieve our key metrics and forecasts for all of our key metrics. The AOP is a three statement (Income Statement, Balance Sheet, and Statement of Cash Flow), non-GAAP bottoms-up plan that spans the current fiscal year. The revenue is forecast off of the bookings plan and expenses are planned at the headcount and vendor level. Purpose : GitLab‚Äôs AOP identifies GitLab‚Äôs company goals for the next year and strategies for achieving them. Provide guidelines to understand how much capital is needed to achieve these goals. Governance : The AOP is approved by the board of directors every year. Annual Planning Steps Align executive team on strategic priorities Prioritize efforts aligned with three year strategy and annual themes Sign-off on financial priorities for the year Build out bottoms up integrated sales and marketing financial model with key assumptions documented so they can be tracked Set targets agreed upon by Product, Marketing and Sales Review product investments vs expected revenue generation Set expected amount for annual compensation increases Set targets for any contributors on a company based performance plan Provide a budget envelope to each e-group leader based on dollars that they can allocate into headcount and program spend Generate the expense Plan based on a headcount list, TBH list, vendor level spend list Headcount list communicated to talent acquisition, proposed vendor list communicated to procurement (future with Purchase Orders in place for existing vendors) Generate and document key assumptions Show trending of key metrics as output of the Plan Capture Plans to drive key metrics Capture X-functional dependencies of execution Document business plans for key drivers and initiatives of the year, e.g. new products Revise and update the annual sales compensation plan Set annual quota assignments for revenue producing roles FY26 AOP Milestones Key planning milestones are listed below. For a more detailed timeline and planning checklist please engage your FP&A business partner. 2024-09-09 (week of) CFO/CRO Meeting: Discuss range of bookings, % expense, and agree on Q4 overattain/underattain scenarios impact 2024-09-23 (week of) FP&A Meeting: Kickoff with Bottoms-up Targets with FP&A 2024-11-15: Bottom-up Envelope submissions and Investment Area business cases are due 2024-12-06: XFN eGroup Skips alignment on projects and dependencies 2024-12-09 (week of) eGroup Offsite: FY26 AOP Alignment Meeting 2024-12-12 Q3 Board Meeting: update planning progression and preview FY26 AOP 2025-01-21 eGroup Meeting: update planning progression and Q4 Board Deck preview 2025-02-12 eGroup ASYNC: FY26 AOP Final review 2025-03-27 Q4 Board Meeting: Final Formal Approval of FY26 AOP Long Range Outlook (‚ÄúLRO‚Äù) What : The Outlook is a three to five year strategic and financial plan Purpose : Identify and agree on long-term investments and capabilities that will position GitLab for success over the long-term. Determine whether near-term priorities and funding need to change in order to achieve long-term goals and financial targets. Outlook : Refresh and reaffirm the company‚Äôs three year strategy. Make recommendations to identify and categorize strategic investment options which adjust our strategy. Focus on areas where decisions today meaningfully impact growth trajectory and/or investment needs. Identify blockers to LT targets and drive to resolution, including incremental funding and/or reprioritization. Financial plan : Set the financial envelope needed to achieve GitLab‚Äôs long-term targets, including bookings, revenue, P&L and cash metrics. Ensure healthy tension between funding investment needs and fiscal discipline / company efficiency. Launch workstreams to resolve areas of tension before annual planning kick-off for the following fiscal year. Principles : Focus on identifying drivers which would bend or shift growth curves, for both top-line and expense Is a tops-down strategic and financial plan, not a bottoms-up operational plan Cross-functional leadership buy-in required; not a finance-only numbers exercise Public company benchmarking drive decisions around GitLab long-term targets Governance : The Outlook is reviewed and discussed by the board of directors every year. LRO Updates The LRO is refreshed on an annual basis, occurring shortly after the fiscal year plan is finalized. After the LRO is refreshed, there may be additional updates throughout the remainder of the year, on a quarterly and ad-hoc basis to determine whether near-term priorities and funding are needed in order to achieve long-term goals and financial targets. As part of the quarterly and ad-hoc updates to LRO, the following are included: Comparison to last LRO refresh across bookings, P&L, and cash flow 6 quarter rolling forecast, including bookings, P&L, and cash flow Comparison to peer benchmarking of similar revenue size for growth and efficiency metrics The following are inputs in the LRO refresh and subsequent LRO updates: Capabilities and key investments across each business function (GTM, R&D, G&A), along with key cross-functional dependencies, risks/blockers GTM modeling: demand, productivity and supply capacity Total rewards strategy Expense YoY and % of revenue targets, HC/non-HC spend by department Book to bill to cash collection assumptions Seasonality of bookings and expenses Cash commissions PP&E/Capex purchases The Corporate Finance team leads the LRO refresh and updates in collaboration with: e-group members to determine key investments, capabilities, and dependencies; GTM Finance team for sales productivity/capacity models, CTB, and bookings attainment; G&A Finance team for total rewards strategy, benefit assumptions; and the R&D Finance team to help inform on allocations, hosting/infrastructure expenses. Business Planning Business Planning Goal For GitLab‚Äôs top growth drivers and new products, drive and document alignment between contributors to success. Writing a business plan drives clarity of thought and operations. Agree on governance models to manage initiative success and cross-functional accountability. At a minimum, each business plan should cover: Explain what an initiative is, why we should be focused on it. Identify how each function will support its success, what are dependencies & risks. Identify how we measure success, e.g. pipeline or bookings goals. Business Planning Details Product plan - what are product features to ship, by when? What is committed and what is at risk? What are competitive considerations? If there are phases, what is in scope for each phase? Pricing plan - what is the pricing strategy, what are open decisions, what is the margin structure? Marketing plan - how will product marketing and demand generation support the business plan. Sales plan - what are the drivers of the sales plan? What is the quarterly Plan for bookings? What are assumed attach rates, penetration rates, adoption rates, where is there uncertainty? What is the field enablement plan? Services plan - if applicable, how can enhanced services improve sales and adoption? Operational plan - what infrastructure do we need (fulfillment, IT, rev rec, legal, security, etc.) Financial plan - gross margin and contribution to P&L, if applicable Key Contributors Driver: FP&A Contributors Product: lead PM(s), pricing lead Marketing: leads within both Product Marketing and Demand Gen Sales: Regional VPs, RS&A, GTM FP&A Support/Services As needed: fulfillment, IT, accounting, legal, security Approvers / Informed: CFO, CRO, CMO, CPO, e-group Review and Governance Contributors (above) agree on business plan and review with e-group members for feedback. Include proposed measurement plan (e.g. bookings or pipeline goals) On a defined cadence (monthly or other), review product accomplishments vs. plan On a defined cadence (monthly or other), review GTM measures of success vs. plan On a defined cadence (quarterly or other), review P&L impact vs. plan Each quarter, refine success goals/metrics based on learnings to iterate on plan of record Quarterly & Monthly Cycle (incl. close, variance, forecast, guidance) GitLab‚Äôs FP&A team participates in a rigorous monthly close process. Goals Set clear deadlines to best support our accounting team and ensure timely delivery of information to executives Analyze the performance of our budgets and forecasts against actuals, identify insights which enable our executives to better make decisions. Update our internal forecasts and update our investor guidance to prepare for the quarterly earnings call Improve forecasting methodologies and approaches to hold ourselves accountable and drive accountability to the business owners of the budget Key Definitions Actuals What : Actuals are results that have been reported or exist in a system that is designated as a single source of truth for the item that is being measured. Each month accounting closes the month and financial results are recorded in our ERP system and are published in our financial statements. These actuals are compared to the Plan and our forecasts. Forecast at FYyyyy-mm Purpose : In a dynamic high-growth business, GitLab‚Äôs needs may change through the year and we need to be able to predict what is going to happen. What : Forecast is a dynamic assessment based on current expectations of financial performance. The FP&A team will publish a monthly forecast for revenue driven by bookings and other key inputs and expenses driven by headcount and vendor spend. A monthly forecast does not extend the forecast period. For example in March 2020, the forecast will span from February 2020 to January 2021 with February actuals and a forecast for the period March 2020 to January 2021 ‚Äî this will be called the (1+11) forecast. Governance : The Forecast at FYyyyy-mm is approved by the Head of FP&A and reviewed with the CFO. Note: Prior to locking and archiving any version in Adaptive, Corporate FP&A will update the FX rates in Adaptive using Google Finance FX Rates . Forecast at FYyy-Qx Purpose : In a dynamic high-growth business, GitLab‚Äôs needs may change through the year and we need a guidepost to hold business leaders accountable. We plan our expenses at a high level (e-group) and we expect this group to make prioritizations and trade-offs while remaining accountable against the plan parameters. By formally reforecasting quarterly, we can quickly evaluate and incorporate new initiatives into our forecasting model. That being said, we do follow an annual plan to set our goals and measurement for our top-level targets of revenue, profitability and expense management and ensure we continue to meet any public guidance previously communicated What : Forecast at FYyy-Qx is a dynamic assessment based on current expectations of financial performance. The (3+9), (6+6), and (9+3) quarterly forecasts include revenue driven by bookings and other key inputs and expenses driven by headcount and vendors. Governance : The quarterly forecast is approved by the Head of FP&A and reviewed with the CFO. It is then reviewed with e-group and the board of directors. e-group will be held accountable to the quarterly forecast for expenses. Forecast Snapshots in Months 2-3 of each Fiscal Quarter Purpose : As a public company, GitLab needs to maintain a pulse on the P&L and key financial metrics. As a fiscal quarter develops, the snapshots inform the CFO and e-Group of our latest forecast and any adjustments from the previous snapshot view. Cadence : In Month 1 of the quarter : once in week 2 (the week before FP&A‚Äôs Month 1 forecast version lock) In Month 2 of the quarter : weekly starting week 2 (the week before FP&A‚Äôs Month 2 forecast version lock) In Month 3 of the quarter : weekly What : P&L snapshots track company metrics against Wall Street expectations related to revenue, non-GAAP operating income and non-GAAP earnings per share and enable GitLab to make in-quarter spending decisions based on the latest estimates from FP&A. The forecast snapshots are developed by FP&A and presented to the CFO in order to facilitate decision-making. The P&L snapshot follows the Finance Business Partners / Talent Acquisition Managers Headcount Forecast Interlock process and is delivered to the CFO via a slide deck tracking week over week changes in the snapshot. A summary is also communicated to the CFO and FP&A team via the #fpa_private Slack channel. Monthly FP&A Close Timeline These dates are based on an 8-day accounting close. Corporate FP&A will confirm the close date with the accounting team and update the FP&A Close calendar in Google accordingly. For FY23, the target is to close by WD 5 with full consolidation (including tax entries, eliminations) by WD 10. Close timeline WD -3: AP Closed. WD -2: All accruals and JEs are due from FP&A WD -2: NetSuite Actuals for current month close included in Adaptive (performed by Corporate FP&A) WD 1: Headcount actuals loaded into Adaptive (performed by Corporate FP&A) WD 2: FP&A Flux distributed and is due one week after and/or one day after Accounting close WD 2: FP&A sends flash to the board (quarter only) - Bookings, revenue estimate and NGOI estimate WD 5: Revenue Closed. Start revenue, billings, collections variance analysis. WD 7: Final entries and allocations booked WD 8-9: FP&A review of AvF complete WD 9: Adaptive forecast locked Other Key Dates Day 8: Snapshot ARR, customer count, net retention (note this is captured on Day 8, not WD 8) 2nd Tuesday every month: Variance deck shell distributed 3rd Tuesday every month: Variance deck pencils down and due to the Head of FP&A 3rd Thursday every month: CFO Variance meeting, with distro to FP&A Slack channel 24 hours before After accounting close: Revenue Committee Sync meeting between CEO, CRO, and CFO. Accounting close expectations for FBPs FBPs will obtain a daily report with open invoices/POs from Misty and drive obtaining the required approvals and invoices from respective business partners. If you have questions for AP GL team, please ask in the #fpa-ap-gl-collaboration channel. The Accounting close calendar can be found here . Variance Meeting with CFO Each month after the financials have been published, GitLab reviews all aspects of the business including Corporate Metrics, Bookings, Revenue, Gross Margins, Expenses. The goal of this meeting is to do a comprehensive review so that finance leadership has a pulse on the business and signs off on the financials. Based on insights from variance analysis, the FP&A team makes actionable recommendations to the CFO and e-group to ensure continued performance to Plan/Forecast. The variance analysis will compare department budgets with actual results and examine any material differences between budgeted and actual costs. Additionally, the actuals for expenses will be compared to the quarterly rolling forecast. The expenses are reviewed at the divisional department level, allowing GitLab to measure progress in meeting its Plan or rolling forecast. The team also evaluates the accuracy of forecasts and will make adjustments to the next rolling forecast. Variance and Flux Analysis The study of differences between actuals and the Plan or Forecast. During the variance analysis processes the GitLab FP&A team analyzes and isolates any variance in question to the lowest level possible. The team reviews detailed items in order to identify the root cause of the variance. This could include transaction date, cost center, vendor, location, department or additional low level details. The FP&A team takes the following into consideration while evaluating variances in relation to materiality thresholds: The percentage size of the variance (i.e. what was the overall variance by percentage) The correlation to other variance (i.e. did a immaterial difference in one place cause a material difference in another) The inherent character of the variance (i.e. does the expense correlate to the traits of the business) The FP&A team delivers an FP&A expense flux review document at each monthly close, documenting and quantifying business drivers for variance. The goal is two-fold: Control : ensure accuracy of actuals. Analysts should aim for 90% coverage in explanations, e.g. if variance is $100, aim to list drivers for net $80 of the variance for any particular intersection above threshold. List drivers in descending order of impact, followed by large offsetting drivers. Insights : leverage insights gained from closed month to inform rolling forecast. Changes in business strategy/model, new accounting policies, and refinements on forecast methodology should be documented and incorporated into the new forecast. Performance Indicator : Variance percentage We measure our team performance based on our forecast accuracy, also known as variance percentage. Variance percentage is defined as the difference between actuals and Plan or rolling forecast. We calculate it as follows: Variance Percentage (Plan) = (Actuals - Plan)/Plan or Variance Percentage (Forecast) = (Actuals - Rolling Forecast)/Rolling Forecast Variance analysis should address any inputs or additional requests from the last Variance meeting , as applicable. Types of Threshold and Materiality Generally accepted accounting principles (GAAP) does not provide definitive guidance in distinguishing material information from immaterial information. Therefore, GitLab uses a percentage based approach for defining materiality thresholds and can be found below. The Plan vs Actuals vs Forecast Sisense dashboard provides the data for the threshold analysis via a color coded legend. Our goal is to have revenue and EBIT variance percentage within +/- 2% on a quarterly basis. Key accounts and expenses by division should be within +/- 2% versus Plan or rolling quarterly forecast every quarter. Variance Meeting with EVPs EVPs are held accountable to meet the budget in dollars that they are given. The budgets typically are broken into headcount and program spend. Each finance business partner will run a meeting with their Finance leader and the EVP to review the past month. The information should be presented as timely as possible. Given the accounting close is 8 days, the team is asked to use pre-close numbers for the review to increase the speed of information. During the meeting, the Finance Business Partners will review GitLab results in addition to a detailed overview. Each division can expect to review the following during the monthly meetings: Company results Spending OpEx vs Plan Divisional level review including an executive summary with relevant insights and watchpoints Last month vs plan/rolling forecast Projection for the current quarter Detailed variance details that helps the EVP understand the financial picture of their expenses Discuss upcoming changes to financial processes that EVPs need to be aware of Discuss upcoming changes to help Finance Business Partner update the rolling forecast Discuss any budget lines that underspent and if money can be reallocated before quarter-end. Noting that converting program dollars to headcount is usually difficult as it impacts future periods. At quarter end, review the upcoming quarter vs Plan for the Division and for each department on the quarter Following the month-end close, the Finance Business Partners will create a variance deck and distribute department income statements to the related budget owners and the e-group members. Each department is then responsible for comparing these reports, which contain actual costs, to the budget. Departments, with guidance from the Finance Business Partners, should analyze their data and if necessary, discuss items of interest and take appropriate action. Any questions regarding the cost data should be discussed with the Finance Business Partner. Quarterly FP&A Close Timeline The close timeline for each quarter follows the timeline above for monthly close and includes additional key dates and processes: Guidance Overview : We provide quarterly guidance on key metrics of the business. At the earnings call for the previously concluded quarter, we provide guidance for the following quarter and the full fiscal year. For example, at the Q1-FY23 earnings, we will provide guidance for Q2-FY23 and updated FY23 guidance. We report guidance based on dollar ranges (except for weighted average shares outstanding which is given as a share estimate). We provide quarterly guidance on the following metrics: Revenue Non-GAAP Operating Income (NGOI) Non-GAAP Earnings Per Share (Non-GAAP EPS, or NGEPS) Weighted Average Shares Outstanding (WASO) Cadence : Following accounting close, the Corp team provides guidance proposals to the Head of FP&A for review. Following that review and any necessary iteration, the Corp team meets with the CFO and the Head of Investor Relations to review the guidance proposal, iterate, and finalize guidance figures. Deliverable : The deliverable to the CFO and the Head of Investor Relations is a slide deck with the proposed guidance range, implied guidance for the following quarters, comparable company benchmarking, and sensitivity analyses. The guidance proposed is also included in the Audit Committee and Board of Director deck materials. Quarterly Earnings Process As a public company we share financial results publicly after the close of each fiscal quarter or fiscal year. The purpose, timeline, and deliverables can be found on our Investor Relations page here . Headcount Forecast and Hiring Plan Definitions Single Source of Truth (SSOT) Headcount Forecast and Hiring Plan Financial Planning & Analysis (FP&A) team is the owner of SSOT for GitLab‚Äôs Hiring Plan which contributes to our Headcount Forecast. Headcount Forecast is a live forecast in Workday Adaptive (a financial planning software) Headcount Forecast includes all approved positions in AOP (i.e. Active, Planned and Backfill positions) Hiring Plan is subset of Headcount Forecast (i.e.Planned and Backfill positions only) Hiring Plan is maintained by the Finance Business Partners (FBPs) and shared with Talent Acquisition (TA) team and Business Partners (BPs) Finance owns the Hiring Plan to ensure there is only one Headcount Forecast and Hiring Plan for the business Hiring Plan increases our predictability as a company and streamlines the hiring process Based on historical time to start data, new requisitions released via RLOA in a quarter can be expected to start in the following quarter at the earliest For questions specific to TA‚Äôs process and REQ creation, please refer to TA‚Äôs section of the handbook Position ID (PID) Position ID is a unique identifier and is the link between approved headcount and the Hiring Plan Each position is approved and allows TA to open a role for the business Positions are all approved headcount in the Hiring Plan. All approved headcount includes Active, Planned and Backfill positions Only Planned and Backfill positions are included in the Hiring Plan All positions in the Hiring Plan are approved through: Annual Operating Plan (AOP) cycle (beginning of each fiscal year) RLoA cycle for any incremental roles through the year Backfill due to attrition in the business Positions may be updated/changed during weekly interlock process (e.g. reallocated to different team, changed for different Role level) Each position is assigned with an unique identifier called Position ID (PID) PID increases visibility and accuracy for headcount forecasting (count and dollars) PID simplifies and provides transparency on modeled headcount (attrition and backfill) PID is an unique identifier for positions assigned to all current and future approved headcount PIDs are created and assigned by Corporate FP&A (Corporate) when Hiring Plan is finalized or upon change request of existing position(s) All approved Planned and Backfill positions are assigned with an GHPID (please refer to TA‚Äôs section on GHPID ) Not all positions are assigned with GHPIDs Key difference between GHPID and PID GHPID has 1-to-1 relationship with an Opening ID in Greenhouse (please refer to TA section on Opening ) PID has 1-to-1 relationship with an approval headcount Each PID has 1-to-1 relationship with a GHPID at any given time Illustrative example: Employee A departs and business decides to backfill the same role Departing employee A will have PID: FIN-FY24-9999 (tied to Headcount Forecast) GHPID: GH-FY23-999-0001 (issued to hire Employee A in the past ) To open the new requisition, we will need SAME PID: FIN-FY24-9999 NEW GHPID: GHPID: GH-FY23-999-0002 Starting from FY25 AOP cycle, GHPIDs will be generated through a consolidated process All GHPIDs are system-generated by a FP&A internal Google Sheet, maintained and audited by Corporate Each Planned and Backfill position will have a unique GHPID assigned by FBP(s) GHPID will allow TA to open a requisition in Greenhouse. If an approved role is not assigned with a GHPID, the job will not be opened in Greenhouse Finance Business Partners (FBPs) work with Business Partners (BPs) to discuss details of each approved headcount and enter final decisions of each position to Adaptive as SSOT Hiring Plan Details of the position include, but are not limited to, Department, Job Title, Job Grade, Salary, Location FBP include all PIDs (assigned by Corporate) for approved Planned and Backfill positions in Hiring Plan FBP include all GHPIDs for roles eligible to be opened in Greenhouse Adding/removing/exchanging position(s) requires FP&A‚Äôs approval through existing RLOA or rolling forecast. FBP will submit change request Google Form PIDs and GHPIDs are audited and reconciled by Corporate regularly PIDs are reconciled monthly before each rolling forecast lock GHPIDs are reconciled weekly before each weekly interlock Upon approval of the Hiring Forecast, FBPs share: Headcount Forecast with Business Partners (BPs) through monthly review Hiring Plan with both BPs and TA through live interlock sheets and release GHPIDs TA partners will contact HMs and open a requisition in Greenhouse after GHPIDs are released Role Approval and Release Process Process Overview Hiring Plan Finance Business Partners (FBPs) work with Business Partners (BPs) to discuss role details and enter final decisions to Adaptive as Hiring Plan Hiring Plans are approved by Board of Directors (during AOP) or CFO & e-group (during RLOA). All approved positions will be communicated by FBPs to TA partners, PBPs, and BPs Requisition Release Role details are added to Live Interlock sheets. Details allow TA to open a requisition in Greenhouse Backfill requisition requires separate approval (below) Hiring Manager create/review Job Family Talent Acquisition partner opens requisition in Greenhouse Formal approval to open role When a requisition is opened in Greenhouse it is routed for approvals. The job approval requires approvals from Total Rewards, FP&A and Department Lead (VP+) This allows the FBPs to check all details of the role and ensure consistency to SSOT Hiring Plan If role details in Greenhouse do not reconcile to Hiring Plan in Adaptive, FBP will reach out to both TA and HM to resolve discrepancies FP&A is also a required approval on all job offers (before the role is officially filled). This approval allows FP&A to confirm details of the job offer and ensure reconciliation to Hiring Plan Run kick-off (aka Intake) with Hiring Manager FP&A and TA discussed and agreed upon the above process. This SSOT process ensures consistency in Hiring Plan execution Planned Positions Planned Positions include all Net New positions to existing GitLab active employees. Hiring Plan Approval of any Planned Positions are from: Annual Operating Plan (AOP) cycle RLoA cycle for any incremental roles through the year Requisition Release Hiring Manager create/review Job Family Open requisition in Greenhouse Formal approval to open role Run kick-off (aka Intake) with Hiring Manager Backfill Positions Backfill Positions include all positions created due to departure or termination of an existing employee. Hiring Plan Approval of any Backfill Positions While GitLab strongly believes that a HM should be able to backfill each role upon termination and/or departure, HM should check with his/her leadership to discuss and decide whether there are changes to the backfill role If changes are approved by leadership, please work with your FBPs to update details of the backfill positions. FBPs evaluate change and ensure neutral dollar impact from role change/update FBPs brief Corporate and request new/remove PID if applicable Upon final decision, FBPs enter details into Adaptive and update Hiring Plan Requisition Release Upon a resignation, Hiring Managers (HMs) submit official notice to Workday (WD) WD backfill notification will send to both TA and FBPs WD backfill notification will allow Recruiter to create a backfill issue All final decisions and details of the role(s) will be documented in the backfill issue Recruiter can create a requisition in Greenhouse and move to the next step of the process Hiring Manager create/review Job Family Open requisition in Greenhouse Formal approval to open role Run kick-off (aka Intake) with Hiring Manager Hiring Plan Process Both PID and GHPID are created and maintained by FP&A team as unique identifiers in Hiring Plan Creating a Position ID (PID) All PIDs are created by the Corporate FP&A team and are tied to Headcount Forecast (including Hiring Plan) FP&A Position IDs increase visibility and accuracy for headcount forecasting (count and dollars) and simplify & provide transparency on modeled headcount (attrition and backfill). PID is an unique identifier for positions assigned by Corporate to all positions in Hiring Plan Add/remove/exchange positions requires FBP approval via existing process, e.g. RLOA or rolling forecast and submit change request Google Form here Positions reconciled regularly, e.g. monthly before each rolling forecast lock Position ID follows ‚Äú FIN-Fiscal Year-0000 (4-digit PID code) ‚Äù as naming convention For example, if a role is opened in FY24, the PID is ‚ÄúFIN-FY24-0000‚Äù Creating GHPID All GHPIDs are system-generated by a FP&A internal Google Sheet Google Sheet GHPID generator is maintained and audited by Corporate FP&A weekly FBPs will refer to GHPID generator and assign GHPIDs to all approved positions Future State: Corporate will migrate GHPID generator to Workday (pending on Workday/Adaptive integration and Workday Position Management) GHPID is updated during weekly forecast interlock and regular forecast cycles. Starting FY25 Annual Operating Planning, GHPID will follow ‚ÄúGH-Fiscal Year-Department Internal ID-0000 (4-digit GHPID code)‚Äù as naming convention. For example, if sales and/or marketing is hiring a role, the GHPID will be\"GH-FY25-100-0001\". When a role is pushed into next fiscal year, the GHPID won‚Äôt change When a role is re-allocated into a different department, the GHPID won‚Äôt change Each GHPID is unique to each opening of a requisition Department internal ID is from Netsuite as SSOT and consistent to Adaptive department code Once a number has been used in Greenhouse for a job, it can not be reused. If the role is a future role and has been deleted, but was never input into Greenhouse, the FBP can use that number for its replacement or a different role since it was not used yet. Maintaining Hiring Plan FP&A team is the owner and maintainer of SSOT for GitLab‚Äôs Hiring Plan Objective of this control is to ensure completeness, accuracy, and consistency of Hiring Plan Completeness : all approved positions are assigned with PIDs and GHPIDs Accuracy : no PID and GHPID is assigned to duplicated or deprecated positions Consistency : ensure Hiring Plan in Adaptive is fully reconciled to details in Live Interlock Google Sheet and details in Greenhouse requisition PIDs and GHPIDs are stored in Workday Adaptive (Adaptive) and are required fields in Hiring Plan FBPs will update Hiring Plan weekly in Adaptive & update TA through weekly Interlock. FBPs may update their Headcount Forecast on a more frequent basis (more than weekly) depending on their individual department‚Äôs business needs Updating Hiring Plan could require adding new roles, deleting roles, trading off roles, or adding backfills Hiring Plan audit and reconciliation is performed by Corporate, including Weekly GHPID audit and reconciliation through TA and FP&A Interlock Monthly PID audit and reconciliation through monthly forecast lock Corporate will reach out to FBPs if noticing any discrepancies and resolve them before monthly forecast lock Finance Business Partners / Talent Acquisition Managers Forecast Interlock Purpose The FP&A team and Talent Acquisition Managers collaborate to ensure understanding and implementation of the most up-to-date view of forecasted headcount-related expenses. This interlock enables GitLab to respond quickly and make live decisions through a weekly P&L forecast and the rolling list of asks (RLOA) process . This process also ensures alignment and accuracy of headcount forecasts when FP&A locks its annual plan and monthly rolling forecasts. This process also tracks company metrics against Wall Street expectations related to non-GAAP operating income and non-GAAP earnings per share. Please see the Headcount Metrics and Processes page for definitions and key metrics. Headcount Live Dashboards The Hiring Plan data is divided into four headcount forecast templates, one for each cost center with Cost of Goods Sold allocated among Sales and R&D. The data and analysis from the four templates roll into the Summary file. The four templates can be found in the Headcount Live Summary Dashboard . Cadence / Process Unless otherwise noted in the HC Forecast calendar or communicated via Slack, the interlock process occurs weekly as follows: By noon (PST) Monday , the Corp FP&A team downloads the data from Adaptive and refreshes the headcount forecast templates. Talent Acquisition also refreshes the headcount forecast templates with the latest data from Greenhouse. By end of day (PST) Wednesday , the Talent Acquisition Managers and Recruiters review their respective roles line by line and make adjustments and comments related to expected start dates and other role details provided by the Finance Business Partners. If no indication is made for a specific role in the headcount forecast template, Talent Acquisition signals that the current indication is reasonable and indicative of a 50/50 ‚Äúmost-realistic‚Äù forecast. The Talent Acquisition Managers also pay close attention to any recruiting capacity restraints within any given quarter. In order to maximize transparency and understanding of any changes, the Talent Acquisition Managers and Recruiters provide comments (e.g., wrong GHP ID, rejection of an offer, delay due to business decision, etc.) for specific roles. By end of day (PST) Thursday , the Finance Business Partners update Adaptive with their best estimates of the start dates of all planned personnel for the forecast period based on the input from Talent Acquisition in the headcount forecast templates. This reflects a 50/50 ‚Äúmost realistic‚Äù view of headcount expenses/timing. By end of day (PST) Friday , the Corp FP&A team sends a P&L snapshot to the CFO incorporating any headcount forecast adjustments. Note: P&L snapshots are not provided during accounting close. Communication Communication related to the interlock takes place in the #fpa-ta_headcount_forecast Slack channel. All parties involved in the interlock are also granted access to the ‚ÄúHC Forecast‚Äù Google Calendar. Deliverables The Finance Business Partners and Talent Acquisition Managers collaborate to provide the most current and 50/50 ‚Äúmost-realistic‚Äù view of headcount-related expenses. This is done through the interlock process in the headcount forecast template and is ultimately uploaded into the Planned Personnel sheet in Adaptive. The inputs loaded into Adaptive are then used to provide the CFO a weekly P&L snapshot in order to facilitate in-quarter spending decisions and ensure the company tracks vs. guidance and consensus expectations. Expense Controls The primary mechanism to ensure efficient spend of company assets is the Procure to Pay process, and specifically completion of the vendor and contract approval workflow prior to authorization. The procurement team or your finance business partner can assist with questions related to this process. The second mechanism is the budget vs actual review to determine reasons for variances vs plan. See the section on Variance Meeting with CFO and Variance Analysis . Adaptive Planning A manual on how to update and maintain Adaptive integration can be found here . This document is maintained by the Corporate FP&A team. Adaptive Quarterly Roadmap The current Adaptive roadmap can be found here We expect to transition roadmap and requests into GitLab issues by Q2-FY23. Corporate FP&A will host Adaptive intake sessions with the larger FP&A team to intake, align and prioritize current and future projects. Rolling List of Asks (RLOA) Intent of RLOA Process Reinvest back into the business when company expects to beat expectations Enable e-group and leaders to make informed and fast business decisions Create a repeatable and transparent quarterly process into incremental investments Expectations for Business Partners Your FP&A partner will assist in maintaining a rolling list of asks (RLOA). This list includes prioritization/sequencing, rationale/ROI, and considerations against current FvP In weeks 0-2 of each qtr (quarterly fcst), work with FP&A to make a final proposal, if needed, for additional investment over the rest of the fiscal year By week 4 of each qtr (earnings guidance), funding decisions reviewed, prioritized, and decided by CFO and e-group Detailed Expectations for FP&A Throughout quarter, FP&A maintains alignment with business needs. FBPs, with the functional leader(s), maintain a RLOA file of key incremental investments from the business FBPs, with the functional leader(s), prioritize the RLOA and develop a recommendation following the below timeline During quarterly RLOA process, FP&A team finalizes RLOA proposal to share with e-group, and communicates decisions to functional leaders to enable business execution. Below is the timeline WD-1: Corporate FP&A locks Prelim Forecast version and shares detailed daily calendar with FBPs WD+1: FBPs prepare prelim variance package and review with BPs (Async) to help the business prioritize the asks Acct Close +2: Forecast pencils down Corporate FP&A and VP of Finance review Forecast prior to Final Forecast Lock Corporate FP&A provide Prelim Forecast vs. Final Forecast view to FBPs Acct Close +3: Final Forecast Lock, used for guidance, tax, etc. 3 days prior to CFO Variance Review: FBPs finalize prioritized RLOA list and submit to Corporate FP&A 2 days prior to CFO Variance Review: Corporate FPA creates a brief RLOA section (~2-3 slides) to include in CFO Variance Review package. RLOA section should include: P&L from Final Forecast Lock and RLOA summary Comparison of the functional expenses as a % of revenue after RLOA vs plan, guidance, and consensus Comparison of headcount requests against recruiting capacity Rationale for each request and Finance POV At CFO Variance Meeting (typically third Thu): FP&A team reviews RLOA proposal with CFO & VP of Finance. Discussion around: Incremental investments required from RLOA proposal Make recommendation to e-group thereafter At e-group Review Meeting (typically Mon after CFO Variance Meeting), CFO shares proposal for formal approval and inclusion into investor guidance After e-group Review Meeting, FP&A team communicates approved incremental investments to functional leaders to begin execution Note: WD is defined as Working Days, which are Mondays through Fridays, excluding Federal holidays. RLOA Timeline Throughout the quarter, FP&A drives alignment with business needs through RLOA: FBPs, with the functional leader(s), maintain a RLOA file of key incremental investments from the business FBPs, with the functional leader(s), prioritize the RLOA and develop a recommendation following the below high-level timeline Week 1: Corporate FP&A kicks off RLOA and shares calendar with FBPs Week 2: Forecast pencils down FBPs submit prioritized RLOA asks Corporate FP&A provide forecast preview to FBPs Corporate FP&A and VP of Finance review forecast and RLOA submissions to determine funding Week 3: CFO review RLOA proposal based on forecast vs. street consensus performance FP&A reviews RLOA asks with TA to determine recruiting feasibility Pre-tax forecast lock used for earnings call preparation (pending on RLOA changes in Week 4) CFO reviews RLOA proposal based on forecast vs. street consensus performance Week 4: At e-group meeting, CFO shares proposal for formal approval and inclusion into final forecast lock and investor guidance After formal approvals, business, FP&A, and TA collaborate to execute on RLOA approved asks Adaptive Insights Discover how GitLab uses Adaptive Insights to plan, budget, and forecast GitLab's planning cycles Corporate FP&A GitLab's Corporate Financial Planning and Analysis FP&A Definitions GitLab Financial Planning and Analysis Definitions FP&A Metrics GitLab's Financial Planning and Analysis Metrics FP&A Processes GitLab's Financial Planning and Analysis Processes FP&A Team Structure GitLab Financial Planning and Analysis Team Structure G&A Finance GitLab General & Admininstrative Finance GTM Analytics Hub Common Links Sales Finance Sales Strategy & Analytics (SS&A) Reports and Dashboards File ‚Ä¶ Headcount Metrics and Processes Public Company Headcount Metrics and Processes R&D Finance Welcome to the R&D Finance Handbook! Finance Business Partner Alignment Ellen Boyd, Director, ‚Ä¶ Last modified July 17, 2025: Removes outdated strategy page ( 387298cd ) View page source -  - please contribute .",
    "headings": [
      "Financial Planning & Analysis",
      "Our mission",
      "Our objectives",
      "How GitLab‚Äôs FP&A plans to get there‚Ä¶",
      "Our team",
      "Common Links",
      "Key Slack Channels",
      "FP&A Processes",
      "Annual Operating Plan (‚ÄúAOP‚Äù)",
      "Long Range Outlook (‚ÄúLRO‚Äù)",
      "LRO Updates",
      "Business Planning",
      "Business Planning Goal",
      "Business Planning Details",
      "Key Contributors",
      "Review and Governance",
      "Quarterly & Monthly Cycle (incl. close, variance, forecast, guidance)",
      "Goals",
      "Key Definitions",
      "Monthly FP&A Close Timeline",
      "Types of Threshold and Materiality",
      "Quarterly FP&A Close Timeline",
      "Headcount Forecast and Hiring Plan",
      "Definitions",
      "Position ID (PID)",
      "Role Approval and Release Process",
      "Hiring Plan Process",
      "Maintaining Hiring Plan",
      "Finance Business Partners / Talent Acquisition Managers Forecast Interlock",
      "Expense Controls",
      "Adaptive Planning",
      "Rolling List of Asks (RLOA)",
      "Intent of RLOA Process",
      "Expectations for Business Partners",
      "Detailed Expectations for FP&A",
      "RLOA Timeline"
    ],
    "word_count": 6696,
    "extracted_at": "2025-07-21 20:14:29"
  },
  {
    "document_id": "gitlab-handbook-145954",
    "url": "https://handbook.gitlab.com/handbook/finance/payroll/",
    "title": "Payroll",
    "category": "Finance",
    "content": "Payroll Please refer to the Payroll internal handbook page https://internal.gitlab.com/handbook/finance/payroll/ . Last modified August 21, 2024: Fix incorrect links ( fc0f5a61 ) View page source -  - please contribute .",
    "headings": [
      "Payroll"
    ],
    "word_count": 30,
    "extracted_at": "2025-07-21 20:14:31"
  },
  {
    "document_id": "gitlab-handbook-670674",
    "url": "https://handbook.gitlab.com/handbook/finance/procurement/",
    "title": "Procurement",
    "category": "Finance",
    "content": "The GitLab Procurement Team What is Procurement? The Procurement team manages GitLab‚Äôs Supplier Lifecycle through the process of strategically vetting and selecting vendors, negotiating commercial terms, the purchasing of goods and services, and managing the renewal or vendor offboarding process. Procurement Team Alignment Division alignment for spend over >$25k USD / year: Marketing - Ashley Abbate Sales - Ashley Abbate Product - Adrienne Ruhaak Engineering - Adrienne Ruhaak People - Adrienne Ruhaak Finance - Adrienne Ruhaak Legal - Adrienne Ruhaak All division spend <$25k USD - Dasha Yarmusik Individual Software Purchases - Anam Shaikh Shared Goals Procurement is a cross-functional team that supports GitLab as a public company. We have four key objectives monitored in the following ways: Strategic partnerships with business stakeholders - meet on a quarterly basis to review new or renewing third party spend and supplier management opportunities Metric(s): Supplier segmentation tiers Achieving annual cost avoidance (soft) savings and year over year (hard) savings Metric(s): Soft Savings (cost avoidance) is mitigating proposed cost increases or any negotiations for new purchases. Hard Savings (year over year) is a decrease in cost from last year and is only valid for renewals. This can include decreasing unit costs, removing users and/or scaling back services and scope Third party risk management and ensuring we are getting the best commercial terms with the least amount of risk for GitLab Metric(s): the number of active and new vendors each quarter, and reported and monitored via internal and external audit Responsible sourcing/purchasing and supplier diversity - managed through the Zip and Coupa onboarding and purchasing process Metric(s): Zip SLAs and diverse suppliers Vendor Lifecycle Management The Procurement team is responsible for ensuring there is a process for suppliers to be managed throughout their lifecycle of doing business with GitLab from initial selection and contracting to recurring reviews and renewals to cancellation. 1. RFP and Vendor Selection All new spend, changing of vendors for existing services, and market reviews every 3 years for existing contracts should follow the RFP and Vendor Selection process , unless approved by your Procurement Category Manager, to ensure we are choosing the best partner for GitLab with the best commercial terms. This must be done prior to verbally agreeing to terms or contracting with any new or existing vendor. Follow the RFP process outlined in the internal handbook . You will find resources and templates for RFP events at any level, whether it is a quick bid or a full procurement-led RFP with 5+ vendors. Always reach out to your Procurement Cateogry Manager to notify them that an RFP is being conducted- they can assist in the process and can answer any questions. As part of this process, create an issue with the RFP Intake template and tag your Category Manager . Before sharing details and/or confidential information regarding GitLab business needs, obtain a Mutual Non-Disclosure Agreement from the potential vendor(s). Refer to the Signature Authorization Matrix for signing authority. All vendors must adhere to the GitLab Partner Code of Ethics . It is mandatory all vendors contractually adhere to this if they would like to do business with us. (Note these are typically not required in event related agreements unless the vendor is providing services). 2. Negotiation, Privacy, Security, and Compliance Review Depending on the amount of spend, Procurement will assist or lead in negotiating the pricing and commercial terms of the contract. Depending on the types of data shared with the vendor, Privacy and Security will need to complete a review of the vendor. Depending on nature of vendor‚Äôs services and/or whether the vendor has been recommended to us, the Ethics and Compliance team will need to complete an anticorruption/antibribery review and, potentially, recommend additional measures to mitigate that risk. For more information on these requirements and steps, see the Review Steps, Timeline, and Considerations section 3. Contracting All work that is done with a vendor must have a completed contract to be compliant and work may not be started until a contract is in place. Contracts include NDAs , Master Service Agreements and Statements of Works. Our legal team assists with this step in the process. Please see the legal review process for more details. Additionally, please note that a small number of team members can sign agreements on behalf of GitLab - please see the Authorization Matrix for more details. 4. Vendor Onboarding In order for vendors to be paid, they need to complete their onboarding in our systems. Please see the New Vendor Onboarding section for more details. 5. Recurring Vendor Reviews and Management Procurement will work with you through the Quarterly Procurement & Business Spotlights to review upcoming renewals and cancellations, new spend projects, and identifying vendor‚Äôs segmentation tier: Strategic, Niche, Commodity, or Transactional. Identifying the Segmentation Tier your supplier(s) falls within helps determine the right vendor management approach, e.g. renew the contract, RFP, business reviews on a recurring cadence, continuous improvement plans, etc. If holding a business review with a vendor, the following topics should be discussed: Success criteria of the contract What is going well What can be improved Review of any issues and remediation expected Overview of the contract and its utilization Vendor Renewals On a quarterly basis, the Procurement team will meet with business stakeholders in each department to review a rolling 12 month list of renewals, focusing on the upcoming 2 quarters. This list is pulled from Zip and Coupa. The list should be reviewed and prioritized with the business owners. The renewal process should start at least 90 days ahead of the renewal date providing ample time to review the terms and decide: Are there any additional security requirements for the vendor? Has our sanctions screening tool, Risk Rate, detected any potential matches since the vendor was originally onboarded? Has the anticorruption risk profile changed? Has the vendor had an RFP for pricing in last 3 years? Do we want to terminate or reduce spend and need to proactively notify per the contract? Do we want to change any terms of our contract? 6. Cancellation The following methods will be used to capture cancellations (which include terminations and/or non-renewals): Automated Notice: The DRI for the purchased item will receive notification of an upcoming renewal; Procurement Led: The Procurement Team will review upcoming renewals, and active purchases, during the quarterly ‚ÄúCategory Spotlight‚Äù meetings. DRI Led: DRI‚Äôs and other stakeholders may determine that products, events and/or services are no longer needed. For each of the above, if a cancellation is desired (which include terminations and/or non-renewals) please follow the ‚ÄúCancellation Process‚Äù outlined below: Submit a Termination/Non-Renewal Request through Zip by completing the intake form and providing copies of the existing contract(s) that you are canceling. Through Zip, Procurement and Legal will work with the requester to provide instructions on how, when, and who should notify the vendor. For most non-renewal notices, the business owner will notify the vendor via Legal‚Äôs guidance. Security and Privacy will also be added for awareness and review if data is being shared with the vendor to determine the requirements of returning or deleting the data. For certain cancellation requests, like Software for example, IT will be included in the Zip workflow to determine and complete the proper deprovisioning and system offboarding requirements. This includes removal of the system from our Tech Stack . If necessary, the requester and/or business owner will need to create and execute on a communication plan to notify all or impacted team members of the cancellation. Upcoming terminations/non-renewals should be discussed with Procurement during the Quarterly Category Spotlight meetings that Procurement holds with category leads/budget owners. As Procurement is made aware of upcoming cancellations during these meetings, Procurement will review on a quarterly basis any known cancellations with Legal to ensure notification requirements are met. Procurement and Legal will then work with the business owner on completing the above process. If a cancellation is determined outside of this quarterly cadence, notify your Procurement Category Manager and complete the above process as soon as possible. The Procurement Process Anytime a group of suppliers are being evaluated for services/goods or a purchase is being made on behalf of GitLab that does not qualify as a personal expense or meet the list of exceptions , Procurement must be engaged BEFORE a purchase and/or work can begin. Start the Procurement Process Before agreeing to any business, legal and/or pricing terms with a supplier, whether in conversation or email Immediately when you receive a contract and/or quote for new and/or recurring business If you have received a contract from a supplier, tell them you will send to your procurement team for review When evaluating a group of suppliers and/or starting the RFP Process . If unsure where or when to begin, tag the @procurement_team in the #procurement slack channel for support. You can also reach out to your Procurement Category Manager directly. How to start the Procurement Process Majority of the Procurement Process lives within our Procurement system called Zip. You can access Zip via your Okta home page , or if you need Zip access, submit an access request here . For more Zip training materials, review the Zip End Users Guide and the Tips for Submitting a Zip Request page . Depending on a few factors of your purchase, there are different ways to engage Procurement and start the Procurement process: Submit a Zip Request for Purchase Requests for renewals of existing vendor‚Äôs services Purchase Requests for new spend under $25k Change Requests to existing POs $0 contract reviews including demos and trials Partner Revenue Payments Individual Use Software Providing Termination or Non-Renewal Notice For new spend, changing vendors for existing services, or after 3 years of renewing a service, follow the RFP Process Over $250K: Procurement led RFP, typically 5+ vendor bids $100K - $250K: Business led RFP, 2-3 vendor bids required $25K - $100K: Business led quick-bid, 2 vendor bids required Under $25K: no bid required Hiring a Contingent Worker? If you‚Äôre hiring a contingent worker, please read GitLab‚Äôs Contingent Worker Policy , which provides comprehensive guidelines on engaging with different types of contingent workers. The policy outlines three main categories: Staff Augmentation Workers (agency-provided temporary resources), Consultancy Services (third-party professional services), and Independent Contractors (used by exception only). You‚Äôll find detailed information about each worker type‚Äôs characteristics, duration limits, country hiring guidelines, contractor extension processes, and background screening requirements. This policy is designed to help team members understand when and how to properly engage contingent workers while mitigating classification risks. Note: For subcontractors for the Professional Services team, please use the process for Revenue Partner Payments. Review Steps, Timeline, and Considerations Requests can take 5 days to 3+ weeks for processing depending on a number of factors that will impact the time for review of a Purchase Request including, but not limited to: New or existing vendor If negotiation is required Types of data being shared with the vendor and if Security and Privacy need to review Contract complexity and alignment with GitLab‚Äôs Vendor Terms and Conditions Vendor‚Äôs response time and willingness to negotiate Each review‚Äôs targeted approval time is outlined below, but as mentioned above, this is dependent on many factors and the accuracy and completeness of information provided by the requester. If your request meets any of the additional approval criterias outlined below, please plan accordingly and submit your Zip request allowing each cross-functional team enough time to complete their review. Please follow the steps outlined for urgent requests that cannot meet the below timeline and have specific and quantifiable impact to the business. 1. Sanctions Screening (Ethics & Compliance): 30 minutes - 3+ Days, if required Use the vendor‚Äôs complete name in your Zip request, as this will be the basis for sanctions screening which automatically happens in our sanctions screening tool, Risk Rate. Incomplete names (e.g., ‚ÄúEY Germany‚Äù rather than ‚ÄúErnst and Young GmbH‚Äù) may result in false positives and unnecessary delay. If Risk Rate detects no matches between the vendor and applicable sanctions lists AND the vendor is not located in a high-risk country, the vendor will be auto-approved. If Risk Rate detects a potential match or is located in a high risk country, the vendor may require escalation to and manual review by GitLab‚Äôs Trade Compliance Counsel. Include the vendor‚Äôs website or LinkedIn page in the relevant Zip field, in advance, to help counsel evaluate the match more quickly. 2.A. Buyer Review (Procurement): 2 days Ensure you have the appropriate contract documents uploaded when you submit your request The $ amount of the req matches the contract value and the correct billing codes are selected 2.B. New Supplier Onboarding: 2-3+ Days, if required This is entirely dependent upon the suppliers response time. Once supplier information has been submitted in Zip and the Procurement team sets the vendor up in Coupa, the supplier receives an email from Coupa requesting banking and tax information to facilitate payment. The Procurement team cannot complete this on the supplier‚Äôs behalf since we do not know this information. If we did, it would be a violation of SOX Compliance guidelines. If your supplier isn‚Äôt onboarded after 2 days, contact your supplier directly requesting they do so ASAP since their contract cannot be reviewed or approved until this is completed. Carbon copy procurement@gitlab.com 3.A. FP&A Review: 2 days FP&A is included as an initial reviewer to ensure the requested spend is within budget and that the Billing Code entered in Zip is correct so it can be pushed to Coupa when ready for final approvals. 3.B. IT Review: 2 days if purchasing new software or for contractors Requester should have vendor complete the IT New Software Questionnaire and submit with the purchase request so IT can complete their review 4.A. Legal Review: 3 to 21 days The amount of time for review and reaching execution is based on the details below. Use these SLAs as guidelines, noting that each contract review is unique. If additional terms, requirements, and/or risks are identified, the timeline may be extended. The ability for GitLab to work efficiently through an agreement negotiation relies on the vendor and their counsel responding promptly to GitLab redlines and comments. Delays from the supplier will delay approval. Types of Vendors and Review Times Existing vendors for renewals or upsells: 3-5 days Existing vendors generally require much less time as existing terms are in place which will underline the products and/or services being offered. That said, in the event GitLab is adding a new product and/or service, additional cycles may be required in order to amend the existing agreement. ‚ö†Ô∏è You must either upload all complete contract terms (including attachments and amendments) or provide a direct link to an existing agreement. Indicate which sections cover your current request. For example, ‚ÄúSee existing Master Service Agreement with Vendor XYZ (Zip req #67890), Amendment #3 covers the new software modules we‚Äôre requesting‚Äù. Do not provide general references like ‚Äúcovered under existing agreement with vendor‚Äù or assume legal can locate terms without guidance. New vendors: 1-3+ weeks New vendors require the most amount of time as GitLab will be establishing terms and conditions for the first time, which will govern the use of the products and/or services being procured. All contract documents must be provided in Word (.docx) format in English. PDF versions are not acceptable for legal review as they cannot be efficiently redlined. Contact the vendor to request the Word version before submitting your request. Negotiations can vary from 1 week to multiple months based on the level of detail and modifications required to reach executable terms. If vendor doesn‚Äôt readily accept the GitLab standard terms , additional rounds of redlines and negotiations may be required, extending this SLA. Whenever possible, the legal team hopes to achieve redlines provided back to the vendor no less than five (5) business days after being assigned. Types of Agreements Software (SaaS & On-Prem): Requires the most rigorous review to ensure the rights and obligations placed upon GitLab are, (i) reasonable given the software being provided, and (ii) align with GitLab contracting and industry standards. Professional Services / Training: Requires detailed review to ensure intellectual property ownership aligns with our intentions, and reasonable obligations being placed upon GitLab. Marketing / Events: Generally, requires the least amount of time to review as the obligations are standardized given the event in question and program provided. Details regarding events may include negotiations with regards to Force Majeure, cancellation (including penalty), and ensuring the terms align with those of the requesting GitLab team members. Data Processing Agreement (DPA)/Standard Contractual Clauses (SCCs): Required when personal data is shared with, accesssed, or collected by the supplier on behalf of GitLab. DPA/SCCs are generally affixed to an agreement but may be required as a separate agreement upon the determination of Privacy (see the Privacy review process below). Negotiation, Security, Privacy, and PeopleOps reviews are only required if the purchase request meets certain criteria, as described below. In the event two or more of these activities are required, they will happen in parallel to one another and Legal‚Äôs review. 4.B. Negotiation: 12 days The Procurement team negotiates SaaS contracts >$25k and one-time contracts >$100K If this step is not taken, purchase orders will not be approved until Procurement is able to negotiate SLA can extend based on level of negotiation required for large and/or complex contracts, and the suppliers willingness to meet budget and benchmark indicators. For larger spend purchases, it is beneficial to engage Procurement prior to submitting the request in Zip so negotiations can start earlier. For communicating Legal‚Äôs redlines to the vendor, If the contract value is >$100k or Procurement is already actively negotiating or communicating with the vendor, Procurement will take responsibility for sending any legal redlines to the vendor. Procurement will comment in the req if/when they have sent redlines to the vendor for visibility. Otherwise the Stakeholder/Requester will be responsible. Review here for more details on when and who is responsible 4.C. Security Review: 4-14 Days Security Third Party Risk Management reviews are required for vendors that collect, process, or store Orange / Red Data, software providers (SaaS and On-premise), and independent contractors / consultants. (Excluding field marketing events) This activity cannot begin until after the supplier completes the security questionnaire and supplies their security documentation. Oftentimes, it can take 1-2 weeks for the supplier to respond and complete the requested materials. The security review SLA begins once that is completed. Time before this activity can begin is entirely dependent upon the supplier‚Äôs response time and maturity of security protocols. TIP: To increase speed of approval, upload any security compliance documentation (SOC-2 Report, ISO27001 Certificate) to the ZipHQ Request and notify your supplier contact they will be receiving a request from GitLab‚Äôs Security Risk Team for completion ASAP. For any inquiries and questions, please tag @securityrisk in the #procurement slack channel. 4.D. Compliance Review: 4-14 Days The first page of the Zip request includes anticorruption gating question (e.g., will the vendor interact with government agencies on our behalf, was this vendor recommended by a government official, etc.). If the answer to any of these questions is ‚Äúyes,‚Äù the Ethics & Compliance team must consider whether the vendor presents unacceptably high compliance risk. To do this, the Ethics & Compliance team will conduct additional due diligence, which may, in part, consist of sending a questionnaire directly to the vendor. This questionnaire asks about the vendor‚Äôs ownership and history with applicable regulatory agencies, to better understand the risk, and asks whether the vendor has an anticorruption program in place, to understand whether the vendor has already taken measures to mitigate that risk. Turnaround time largely depends on the vendor‚Äôs responsiveness. When risk is present, the Ethics & Compliance team will consider whether anything can be done to mitigate that risk. Risk mitigation could, for example, consist of additional provisions in the vendor agreement. 4.E. PeopleOps Review: 1-4 Days PeopleOps serve as reviewers on all professional services requisitions to determine if a background screening is necessary. Per GitLab‚Äôs People Policies contractors are subject to complete a background screening. GitLab will accept a completed background screening from a contractor‚Äôs employer. However, if a background screening was never conducted GitLab will either complete one or ask that one be completed. A background screening can be requested by opening an issue in the Lifecycle Management project by using the background_check_request template. Approval will occur once proof of a completed or an initiated background screening has been shared or once the contractor has submitted their background screening for processing. The Sr. Background Check Specialist will only follow up if a result of concern returns on the background screening. Questions and/or proof regarding background screenings on professional service requisitions in Zip can be sent to backgroundchecks@gitlab.com . 4.F. Privacy Review: 4-14 Days A Privacy Review is required for all SaaS purchases and other purchase types where the supplier will receive from GitLab or collect on GitLab‚Äôs behalf red/orange data. For existing vendors, a full privacy review is required every 24 months, provided the vendor completed a full and satisfactory privacy review during the prior procurement cycle This activity begins after the supplier completes a Privacy and Trade Compliance Assessment form and a Transfer Impact Assessment Form (where personal data is transferred from the EU to the U.S.) Oftentimes, it can take a week for the supplier to respond and complete the requested forms. The SLA begins once that is completed. Time before this activity can begin is entirely dependent upon the supplier‚Äôs response time and whether a DPA/SCCs are required. A DPA/SCCs are often made part of the agreement with the supplier. Generally, Privacy would prefer to use our DPA/SCCs but if the supplier provides their DPA/SCCs as an exhibit to the main agreement, Legal and Privacy may use the supplier‚Äôs version to arrive at a final agreed upon version. Procurement will obtain executed versions of DPA/SCCs in the Final Buyer Review stage. TIP: To increase speed of approval, add a link to the suppliers privacy notice; upload the suppliers Transfer Impact Assessment Guide; and upload a word version of their DPA/SCCs if the supplier requuests us to use their version. 5. Final Buyer Review and Coupa Req Creation: 2 days Procurement completes a final check that all information is accurate and agreement(s) have been stamped before creating the req in Coupa for final approvals. 6. Coupa Approvals and Execute Contract: 4 days At this point, the req has been created in Coupa for final FP&A, Functional, and Executive approvals (as applicable). Once these approvals are received, Procurement will route the contract for GitLab and vendor signatures and will comment in the Coupa req when it is routing. After both parties have signed the Agreement(s), Procurement will attach a copy of the executed agreement in Coupa, approve the Purchase Req, and release the PO. Note: only certain GitLab team members can sign contracts based on the Authorization Matrix To see how to check approval status in Coupa, visit the Zip End Users Guide . Note: the completion of this step is dependent on how quickly the required approvers approve in Coupa and the contract is signed 7. Finalize Request Details Your purchase req has been approved! The supplier will receive a copy of the PO and a communication from Coupa indicating how to submit invoices, one of two ways: Directly in their Coupa portal (preffered) Sending invoices to ap@gitlab.com with the PO number included on the invoice Failure to follow these instructions will delay payment and invoices uploaded to Coupa by a GitLab team member are not routed for payment. During this approval step, Procurement is finalizing any request details, such as final contract term dates based on signature effective date, and setting up Zip renewal alerts for the request if needed. Since the contract has been signed and PO is released at this point, you may now begin work and/or obtaining services from the supplier. What if I have an Urgent Request? If you are unable to plan and have a legitimate reason to escalate a purchase request, follow the process below. Post in #procurement slack channel request for escalation with: Link to your Zip Request Date needed Specific and quantifiable impact to the business if date is missed. ‚ÄúSupplier wants it signed today‚Äù does not qualify as a reason for escalation and these requests will be denied. ‚ÄúPrice will increase $45K if not signed by Friday‚Äù or ‚ÄúMaterial negative brand impact if not signed by Friday due to missed PR deadlines‚Äù are specific, tangible, business impacts that will be reviewed. Truly urgent and business critical requests will be evaluated, please note these are disruptive to our workflow and our ability to meet SLA‚Äôs for requests opened on time. We may or may not be able to accommodate your urgent request based on the risk and bandwidth available. When you know you have a critical request with a deadline, enter the request into Zip 1-2 weeks prior to standard approval times to avoid needing escalation. Do this even if the contract isn‚Äôt final yet to help expedite the process. What are the exceptions to the PO Policy? Exceptions to the PO Policy are: One time purchases under $5K (or less than $5K annually) Charitable Contributions (Donations) Interview Candidate Reimbursement Confidential outside counsel legal fees Statutory Tax fees PEO Providers AR/Customer Refunds Board of Director Payments Financing, Banking and Investing (incl interest, debt, FX, fees) Corporate Credit Card Urgent Payments not included on list above (approval required from VP, Corporate Controller and/or PAO) Third Party Risk Management The procurement team from a compliance and risk perspective has developed a process to handle third party risk to reduce the risk of the following: Financial Fraud or exposure created by third party behavior such as: Data leakage Security breach Business continuity Etc. Failure of financial viability of third party impacting delivery Reputational damage arising from third party behavior Breach of regulation or law through third party action Disruption in customer service due to third parties When do we require a financial viability check? When any of the following is met: Vendor is a private company, LLC or self-employed Services provided are required for continued operations Cloud hosting services Services directly related to servicing customers with an uptime requirement Storage of data that is not recoverable if vendor goes out of business Software or services where it would take over 1 week to replace or swap How do we ensure terms to establish GitLab (and our Vendors) rights and responsibilities? Any time GitLab engages with a third party for the procurement of goods and/or services, which require GitLab to engage in a contract, the GitLab Legal Procurement team will review the terms and conditions. The purpose of this team is to review the contract which GitLab will enter into, and ensure the following: Terms and conditions which are fair and reasonable given the type(s) of products and/or services being procured; and Adequate obligations on behalf of GitLab vendors to ensure compliance with GitLab‚Äôs Code of Conduct and other company policies, applicable laws, rules and regulations (including protection of personal data), and the delivery, support and provision of goods and/or services In addition to ensuring terms and conditions, the GitLab Legal Procurement team collaborates frequently with procurement and business stakeholders to ensure any (and all) contracts align with the needs of the team. The GitLab Legal Procurement team addresses the needs of stakeholders ranging from complex technical application and platform services, to creating and drafting event contracts to meet the needs of GitLab events. How do we prevent disruption in customer service? As GitLab does with its own customers, agreements with third parties include obligations that vendors have to GitLab. These can include, but are not limited to: Uptime / downtime commitments (for SaaS providers) SLAs (for support) Termination rights And other commercial contract provisions which would enable GitLab to seek relief in the event of disruption Large Internal Events Process For any large internal events with a total cost greater than $1M, such as SKO, President‚Äôs Club, Commit, etc, the following should be completed before any contracts are executed or any work is conducted. The planning stages for events of this size should be completed at least 18-24 months prior to the actual event. This allows for ample time to get the necessary internal approvals, run any RFPs needed, and book large hotel blocks or buyouts. Connect with your Procurement Category Manager and FP&A Business Partner to determine the various vendors needed to run the event and line item detail in the total event budget. This would include lodging, food & beverage, event planning, on-site support, excursions, travel, etc. Determine with your Procurement contact how these vendors will be selected and the timeline to run any necessary RFPs . RFPs should be conducted at least 20 months prior to the event dates. Upon completion of RFPs, the top 2-3 location options and their total pricing will be presented to the E Group DRI (CRO/CMO) and VP of Finance to determine the preferred location choice and corresponding budget. All information should be summarized in an issue where these approvals may be documented. Once preferred location and budget are tentatively chosen, this information will be presented to the CFO for approval, and will then be presented to the Board for approval at their quarterly meeting, or via email as necessary. Please note that Board approvals may take multiple weeks. CFO and Board approvals should be obtained no less than 18 months prior to the event dates. After all executive approvals are received, the Zip request(s) should be created to document official approvals, obtain signatures on contracts, and release PO(s). Helpful Documents and Templates Contract Templates GitLab Vendor Terms and Conditions Logo Authorization Template Data Processing Addendum (unlocked for editing) EU Standard Contractual Clauses US Contractor Agreement SOW Template Change Request Template Documentation Non-Disclosure Agreement (NDA) Process Certificate of Insurance Request Process Uploading Third Party Contracts to ContractWorks Company Information - general information about each legal entity of the company Trademark - information regarding the usage of GitLab‚Äôs trademark Authorization Matrix - the authority matrix for spending and binding the company and the process for signing legal documents Other Services Home Office and Supplies Individual Use Software RFP and Vendor Selection Process Vendor Terms and Conditions Non-Disclosure Agreement (NDA) Charitable Contributions Non-Cost Related Agreements (Including Trials/Demos) Charitable Contribution Requests If you have a request to donate GitLab funds to a charitable cause, please refer to the Philanthropy ‚Ä¶ Contingent Worker Policy 1. PURPOSE This policy has been designed to provide Team Members a high-level overview and ‚Ä¶ Coupa FAQ General FAQ What is Coupa? Coupa is a cloud-based purchasing and payment platform that will be used ‚Ä¶ External Consultant Orientation & Access Deprovisioning GitLab will from time-to-time bring in the expertise of External Consultants to work on a specific ‚Ä¶ Field Marketing and Events Important to Know If you are looking to work with a new service provider, review the policy for ‚Ä¶ Home Office Equipment and Supplies For questions on our policy and how to submit your home office expenses, including which categories ‚Ä¶ Individual Use Software Individual Use Software Overview Individual use software is characterized as software essential for ‚Ä¶ Non-Cost related Agreements If you have documents from a vendor that are not cost-related, such as a Trial/Demo Agreement, ‚Ä¶ Tips for Submitting a Zip Request If purchasing Home Office Equipment and/or Software for your individual work use that is <$5K ‚Ä¶ Vendor Guidelines When procuring goods/services, GitLab will enter into an agreement with its vendors. This agreement ‚Ä¶ Virtual Cards Last modified July 15, 2025: Update Legal Review Section ( 3060b6a5 ) View page source -  - please contribute .",
    "headings": [
      "The GitLab Procurement Team",
      "What is Procurement?",
      "Procurement Team Alignment",
      "Shared Goals",
      "Vendor Lifecycle Management",
      "The Procurement Process",
      "How to start the Procurement Process",
      "Hiring a Contingent Worker?",
      "Review Steps, Timeline, and Considerations",
      "What if I have an Urgent Request?",
      "What are the exceptions to the PO Policy?",
      "Third Party Risk Management",
      "When do we require a financial viability check?",
      "How do we ensure terms to establish GitLab (and our Vendors) rights and responsibilities?",
      "How do we prevent disruption in customer service?",
      "Large Internal Events Process",
      "Helpful Documents and Templates",
      "Contract Templates"
    ],
    "word_count": 5290,
    "extracted_at": "2025-07-21 20:14:33"
  },
  {
    "document_id": "gitlab-handbook-66413",
    "url": "https://handbook.gitlab.com/handbook/board-meetings/",
    "title": "Board meetings",
    "category": "Finance",
    "content": "Board of Directors and Corporate Governance This page is intended to capture GitLab Board practices, but we evolve these over time and the page may not capture all changes. The source of truth for Board details is GitLab‚Äôs Investor Relations site . Board and Committee Composition Board of Directors Current members of the Board of Directors Board of Directors Job Description Audit Committee Audit Committee Charter Meeting Process The Staff EBA to the CFO is the DRI of scheduling the quarterly Audit Committee meeting in conjunction with the Chairperson, Management DRI and their Sr. EBA Timing: 2-3 weeks prior to the formal Board of Directors Meeting Duration: 110min (Q1-Q3) 140min (Q4) Agenda document to include links to all material being reviewed during the meeting All Audit Committee materials being reviewed during the meeting will be uploaded into Boardvantage 5 business days prior to the Committee meeting by the Corporate Paralegal. Committee members will be notified of such by the Management DRI. Audit Committee meetings are attended by: The Chairperson of the Audit Committee, Audit Committee Members, CLO, CFO and Finance Leadership are all required attendees Other Team Members may be invited if needed or requested, depending on subject matter External Auditors and Outside Counsel All Board Members including the CEO are invited to all Committee meetings as optional attendees Compensation and Leadership Development Committee Compensation and Leadership Development Committee Charter Meeting Process The Legal and People Group EBAs are the DRIs of scheduling the quarterly Compensation and Leadership Development Committee meeting in conjunction with the Chairperson, Management DRI and their Sr. EBA Timing: 2-3 weeks prior to the formal Board of Directors Meeting and aligned with Audit Committee Duration: 80min Agenda document to include links to all material being reviewed during the meeting All Compensation and Leadership Development Committee materials being reviewed during the meeting will be uploaded into Boardvantage 5 business days prior to the Committee meeting by the Corporate Paralegal. Committee members will be notified of such by the Management DRI. Compensation and Leadership Development Committee meetings are attended by: The Chairperson of the Compensation and Leadership Development Committee, Compensation and Leadership Development Committee Members, CPO, CFO and CLO are all required attendees Certain members of the People Group or other Team Members may be invited if needed or requested, depending on subject matter Outside Compensation Consultant and Outside Counsel All Board Members including the CEO are invited to all Committee meetings as optional attendees Nominating and Corporate Governance Committee Nominating and Corporate Governance Committee Charter Meeting Process The Staff EBA to the CEO is the DRI of scheduling the quarterly Nominating & Corporate Governance Committee meeting in conjunction with the Chairperson, Management DRI and their Sr. EBA Timing: Twice yearly in March and September. Ideally 3-5 days in advance of the formal Board of Directors meeting Duration: 50min Agenda document to include links to all material being reviewed during the meeting All Nominating & Corporate Governance Committee materials being reviewed during the meeting will be uploaded into Boardvantage 5 business days prior to the Committee meeting by the Corporate Paralegal. Committee members will be notified of such by the Management DRI. Nominating and Corporate Governance Committee meetings are attended by: The Chairperson of the Nominating and Corporate Governance Committee, Nominating and Corporate Governance Committee Members and CLO are all required attendees Director of Legal, Corporate or Team Members may be invited if needed or requested, depending on subject matter Outside Counsel All Board Members are invited to all Committee meetings as optional attendees Mergers and Acquisitions Committee Chairperson: Members: Merline Saintil, Godfrey Sullivan and Sundeep Bedi Management DRI: Chief Product Officer Mergers and Acquisitions Committee Charter Meeting Process The Staff EBA to the CEO is the DRI of scheduling the Mergers and Acquisitions Committee meeting in conjunction with the Chairperson, Management DRI and their Sr. EBA Timing: As needed Duration: 50min Agenda document to include links to all material being reviewed during the meeting All Mergers and Acquisitions Committee materials being reviewed during the meeting will be uploaded into Boardvantage 5 business days prior to the Committee meeting by the Corporate Paralegal. Committee members will be notified of such by the Management DRI. Mergers and Acquisitions Committee meetings are attended by: The Chairperson of the Mergers and Acquisitions Committee, Mergers and Acquisitions Committee, CPO, CFO and CLO are all required attendees Team Members may be invited if needed or requested, depending on subject matter Outside Counsel All Board Members are invited to all Committee meetings as optional attendees Revenue non-committee Internal Management Members: Chief Financial Officer (DRI), Chief Executive Officer, Chief Revenue Officer (model, guidance, plan, target) Location Board meetings can happen remotely or in-person. We establish the meeting calendar in advance of the coming fiscal year. During this time, we agree on meeting locations. Board Meeting Schedule Board of Directors meetings are held quarterly. Meetings are scheduled on/around the Thursday 6 weeks after the end of the quarter, assuming availability of the Directors. The Staff EBA to the CEO shall ensure that there are separate calendar invites for all attendees within each session, all including exact session start and end times, the appropriate Zoom link, and links to the agenda document. Any supplemental materials are required to be linked in the agenda document for each session. This is the outline of a past agenda, but we adapt agenda based on what is important to discuss: Session 1: Closed Session (Part 1) Duration: 15 minutes Attendees: GitLab Board of Directors Session 2: Administration Session Duration: 30 minutes Attendees: GitLab Board of Directors, GitLab CFO, CPO and CLO, outside legal firm, Board observers Session 3: Board of Directors Meeting - General Session Duration: 75 minutes Attendees: GitLab Board of Directors, E-Group, CoS to the CEO, Staff EBA, outside legal firm representatives, Board observers Session 4: Closed Session (Part 3) (optional, if needed) Duration: 20 minutes Attendees: GitLab Board of Directors Session 5: Board Only (without GitLab CEO) Duration: 20 minutes Attendees: GitLab Board of Directors (without the GitLab CEO) Board Meeting Process Timeline The Staff EBA to the CEO is the DRI for scheduling the Board meetings The CFO is the DRI for assembling the deck. Four weeks in advance of the Board meeting, the CFO sends the templates for the materials to be created to the E-Group and EBA team. 7 weeks before the Board meeting, the Lead Independent Director will reach out to the Board via email to discuss agenda topics. 6 weeks before the Board meeting, the Lead Independent Director, CEO, and CFO will have a meeting to discuss and finalize the agenda. Once finalized, the CFO will share the agenda with E-Group. The CFO sends a reminder to the E-Group 3 weeks in advance of the meeting. The E-Group has the complete presentation materials ready 10 business days prior to the meeting. All materials are submitted to the CLO and CFO for review within 48 hours of receipt. Once approved by the CLO and the CFO, the CFO authorizes the Corporate Paralegal to upload the materials into Nasdaq Boardvantage (NBV) and attach them to the corresponding NBV Meeting. All presentations and content should be finalized at this time with no further changes. The Corporate Paralegal is responsible for ensuring parity between the NBV Meeting and calendar invite. The Staff EBA to the CFO is responsible for the sharing settings on all materials. Materials should be shared with the E-Group, the Board (not via the @board alias), Board Observers, and the outside legal firm. Any exceptions must be confirmed by the CLO and relayed to the Corporate Paralegal before shipping. The deadline for the document upload is 2p PT 7 days before the Board meeting. The Staff EBA to the CFO is responsible for linking all materials in the agendas for each session of the board meeting. Materials should always be linked in the agenda and shared with the appropriate attendees. 7 days before the meeting, the CFO emails the Board notifying them that the materials are ready for review in NBV and includes any highlights or asks within the email. The CFO is the DRI for the Administrative deck and will share this with the CLO, the Corporate Paralegal, the Staff EBA to CFO, and the Staff EBA to the CEO at least 1 week before the Board meeting. The Corporate Paralegal will upload the materials into NBV and then the CFO will notify the Board of their availability for review in NBV 4 business days prior to the Board meeting. The day before the Board meeting, the Staff EBA to the CFO ensures that the Introduction section of the agenda is up to date with the latest attendees and ensures that the agenda document is up to date. Questions from the Board are verbalized during the meeting. The CFO is responsible for ensuring that the Board meeting runs according to the time allotted. The CLO is responsible for maintaining the Minutes of the meeting and submitting for Board approval. The CLO ensures that PDF versions of the materials including presentations, exhibits, approved Minutes, and Administrative materials are securely stored in NBV and on Google Drive labeled with the date of the meeting. The Staff EBA to the CFO updates the Next Meeting‚Äôs Timeline section of this page. The E-Group debriefs in the first E-Group Meeting after the Board Meeting. Next Meeting‚Äôs Timeline This section is updated after every Board Meeting by the Staff EBA to the CFO for the next Board Meeting. Meeting is scheduled for 2025-06-27. 2025-05-05 - The Lead Independent Director will reach out to the Board to discuss agenda items. 2025-05-12 - The Lead Independent Director, CEO, and CFO finalize the agenda. [At least 6 weeks before BoD Meeting] *TBD pending Godfrey‚Äôs availability 2025-06-04 - The CFO adds another reminder to the E-Group. [A week before pencils down] 2025-06-11 - The E-Group has completed all materials by 12pm Pacific time for review by the CLO and CFO. [A week before BoD Meeting materials distribution] 2025-06-18 - Once approved by the CLO, CFO and CEO, the CFO authorizes the Corporate Paralegal to upload the materials into NBV and attach them to the corresponding NBV Meeting. The CFO then notifies the Board via email that materials are ready for review in NBV 7 days before the meeting. The Staff EBA to the CFO is responsible for sharing settings on all materials linked in the Google doc BOD Agenda. Materials should be shared with the E-Group, the board members, and the outside legal firm. Any exceptions must be confirmed by the CLO and relayed to the Corporate Paralegal before shipping. 2025-06-18 - The Staff EBA to the CFO is responsible for linking all materials in the Google document agendas for each session of the board meeting. Materials should always be linked in the agenda and shared with the appropriate attendees. 2025-06-18 - The Staff EBA to the CFO ensures that the Introduction and Materials section of the agenda is up to date with the latest attendees. 2025-06-27 - Board of Directors Meeting; CFO ensures the meeting runs according to the time allotted. 2025-06-30 - The CLO ensures that PDF versions of the materials including presentations, exhibits, approved Minutes, and Administrative materials are securely stored in NBV and on Google Drive labeled with the date of the meeting. 2025-06-30 - The Staff EBA to the CFO updates this section of the Handbook page with the timeline for the next Board meeting in April 2025. 2025-07-01 - The E-Group debriefs in the first E-Group Meeting after the Board Meeting. Board Materials GitLab uses Nasdaq‚Äôs Boardvantage (NBV) portal for the electronic dissemination and storage of materials relating to GitLab‚Äôs Board Meetings. For a more detailed overview of navigating the NBV portal, please click here to view the Internal Reference Guide . Agenda Details Key Board material is presented during Board Meeting sessions. This includes: E-Group and CEO memos Each E-Group member has a memo with up to four pages with four additional exhibits. Each discussion topic has a memo with unlimited exhibits. Finance has unlimited exhibits in the memo. Annual Operating Plan can be a memo or slide deck. The Administration Session for Board Committee readouts by the Committee Chairperson updating the Board as to the Committee‚Äôs activities and highlighting the items requiring Board approval, if any. Questions can be asked throughout the meeting. 30 minutes are reserved at the end of the General Session for Q&A / Discussion. At the conclusion of the General Session the E-Group, Observers, CoS to the CEO, Staff EBA, CEO Shadows depart the zoom meeting and the full Board shall meet for a Closed Session. Board Dinner We usually have a Board Dinner on the evening before a Board Meeting. The EBA to the CEO is responsible for coordinating this dinner. Board Members, Local E-Group members, and the CoS to the CEO are all optional attendees. Bios for attendees of the Board Dinner should be sent by the EBA to the CEO 3 business days in advance of the Board Dinner. Each quarter, E-Group can choose to invite an additional team member as a Key Talent Guest. If this is desired in a specific quarter, at least a month before the dinner, the CoS to the CEO will gather nominations and ensure that E-Group has identified an invitee. Criteria for consideration includes: Key Talent High performance Clear results Function (should have representation across functions throughout the year) Diversity (participation from members in GitLab Team Member Resource Groups ) Once the Key Talent Guest has been identified, it is the relevant E-Group team member‚Äôs responsibility to ensure that managers of this person are aware of the invite. The EBA to the CEO will then confirm that the guest is able to join. If not, the invite will go to the runner up. Once a Key Talent Guest is confirmed, the EBA to the CEO should enter their name in the Key Talent Board Dinner Guests . GitLab will cover this person‚Äôs travel expenses. A person‚Äôs location will not be considered in the selection criteria though the person‚Äôs travel must be allowed under GitLab‚Äôs travel policies and guidelines . As part of joining the dinner, the Key Talent Guest should come prepared to discuss: Their background (both at GitLab and before joining) What they have accomplished thus far at GitLab What their plans are both now and in the future and what they see as a future for themselves at GitLab Though no formal presentation is required, the Key Talent Guest should advise on how they want to discuss these topics with the Board and E-Group and coordinate with the EBA to the CEO. The EBA to the CEO will ensure that the Key Talent Guest has dedicated time at the dinner. Key Talent Board Dinner Guests Past and future Key Talent Dinner Guests are listed below. Date Key Talent Guest 2021-09-29 David DeSanto 2021-12-13 Sherrod Patching 2022-03-21 Christine Lee 2022-12-12 Sherida McMullan Quarterly AMA with the Board Board Selection Process Roles and Responsibilities Nominating and Corporate Governance Committee - Collaborate on Board evolution. Provide recommendations for potential new GitLab BoD members; meet and vet potential new board members; provide feedback on candidates. CEO and Selected Members of E-Group also meet and vet potential new Board members; provide feedback on candidates. CLO - Nominating and Corporate Governance Committee DRI. CEO‚Äôs Staff Executive Business Administrator - DRI for Board and Committee scheduling. Executive Recruiter - Responsible for drafting communication to potential Board members as well as drafting email communication with Nominating and Corporate Governance Committee when questions arise. Board Onboarding Process GitLab New Director Checklist Board member onboarding from an internal processes checklist perspective: CLO DRI To be completed prior to onboarding: Resume for our files (can be a printout of LinkedIn) Outside counsel to run background check D&O questionnaire Executed offer letter Indemnification agreement If applicable, UWC to increase Board size Inform External Communications and Investor Relations External Comms DRI Press release CEO DRI Inform E-Group Inform Team Members via Slack announcement GitLab New Director Onboarding Checklist Board member onboarding from a GitLab orientation perspective: CLO DRI New Director will be provided with: Links to relevant Handbook pages, including: Committee Membership Committee Charters Code of Conduct Related Party Transactions Policy Bylaws Certificate of Incorporation Access to the Legal Board Drive Org chart Summary of Director and Officer Liability Insurance Executed Indemnification Agreement Staff EBA to the CEO Responsibilities Update Board distribution list with Board Member and support staff Send calendar invites to Board member and support staff for: Board meetings as well as a Board calendar covering meetings for next fiscal year Board dinners Board Committee Meetings (as needed) Commit Contribute Sales Kickoff President‚Äôs Club Update Board Member contact information list and circulate to Board and support staff Schedule AMA with New Board member Schedule Functional Reviews within the first month: Corporate Strategy (CEO) - 50 mins Materials for meeting: Most recent Board of Directors meeting presentation, Key Review slides, current quarter OKRs. Please do not generate new content. The Staff EBA to the CEO sends material to the new Director at least 72 hours in advance. The meeting is centered around the new Director‚Äôs questions GitLab Strategy 3 year strategy Company KPI‚Äôs Mitigating Concerns Finance (CFO) - 80 minutes suggested Financing profile, liquidity, creditworthiness, credit ratings Current issues, Board oversight issues Risk assessment Disclosure controls, internal controls Information systems Internal audits Role of independent auditor Current topics, Board oversight Discuss separate meeting with Auditors Audit Committee Overview Legal, Compliance, Regulatory, Governance (CLO) - 50 minutes suggested Legal matters, if any Compliance and regulatory, generally Current topics, Board oversight Nominating Corporate Governance Overview People Group (CPO) - 50 minutes suggested Compensation philosophy Benefits structure Equity plans Executive compensation structure and policy DIB overview Compensation Committee Overview Sales (CRO) - 80 minutes suggested The Staff EBA to the CRO sends material to the new Director at least 72 hours in advance. Materials and key topics include: Sales Key Review slides, Sales KPI dashboard, most recent CRO Board Appendix slides and Sales section of the BOD deck, market definition, current organization design, current sales motion, customer motion, sales philosophy and current CRO priorities. Marketing (CMO) - 50 minutes suggested Product Overview (EVP, Product, EVP, Engineering, CEO) - 80 minutes suggested Product review Roadmap Security Investor Relations (Sr. Director of IR) - Optional 50 minutes suggested IR strategy, shareholder base, external perceptions Overview of large investors If available/applicable: Share analyst reports from any new banks Share copies of recent investor presentations Last modified July 17, 2025: Removes outdated strategy page ( 387298cd ) View page source -  - please contribute .",
    "headings": [
      "Board of Directors and Corporate Governance",
      "Board and Committee Composition",
      "Board of Directors",
      "Audit Committee",
      "Compensation and Leadership Development Committee",
      "Nominating and Corporate Governance Committee",
      "Mergers and Acquisitions Committee",
      "Revenue non-committee",
      "Location",
      "Board Meeting Schedule",
      "Board Meeting Process",
      "Timeline",
      "Agenda Details",
      "Board Dinner",
      "Quarterly AMA with the Board",
      "Board Selection Process",
      "Roles and Responsibilities",
      "Board Onboarding Process",
      "GitLab New Director Checklist",
      "GitLab New Director Onboarding Checklist"
    ],
    "word_count": 3106,
    "extracted_at": "2025-07-21 20:14:37"
  },
  {
    "document_id": "gitlab-handbook-351543",
    "url": "https://handbook.gitlab.com/handbook/product/",
    "title": "Product Overview",
    "category": "Product",
    "content": "Product Handbook Most of the content in the product handbook talks about how we do product at GitLab. Welcome to the Product Team Handbook The Product Team is led by David DeSanto . The Product Handbook focuses on how we do product at GitLab. Please see Product Direction to learn about what the Product Team plans to build. Product Team Functions Product Management User Experience Product Team Mission We create products and experiences that customers love and value. Consistency wins as you scale . Our organizational goal is to create a Product Manager (PM) system that maximizes the chances of success across new products, new features, and new team members. We are shipping an experience , and not just a product. Don‚Äôt forget about the links between the product and the website, pricing & packaging, documentation, sales, support, etc. It‚Äôs about our customers and doing a job for them , not the product itself. Think externally about customer problems, not internally about the technology. It‚Äôs about love AND value . Will customers value what we are building? We need to make sure what we build helps build and extract customer value. Contributing to the Product Handbook The product handbook is widely referenced by product managers and cross-functional team members. Therefore, we want to follow a consistent change management process so all affected collaborators are aligned and informed when there are changes (specially new requirements, processes, meetings, etc.) that affect their workflow. It is helpful to indicate which type of change you are suggesting: Small improvement (typos, clarifications, etc.) Adding a new section Modifying existing section Documenting a new process Adding a new page or directory Other For a small improvement, please feel free to merge the MR yourself. Otherwise, please tag the appropriate code owner for review and approval. The guidance below should be followed for driving awareness: Informing team members about the changes It is your responsibility to communicate with relevant team members about your merge request. Here are some best practices to follow: For significant changes affecting the whole Product or Engineering team, consult your manager or product leader for the best communication strategy. For changes specific to product management, tag @gl-product-pm in the merge request before merging. Indicate in the comment whether you are requesting contributions and feedback or simply providing information. For changes relevant to other teams, tag department leads such as the VP of UX, VP of Development, or the Director of Quality Engineering in the merge request before merging. Share and cross-post the merge request link with a brief description in relevant channels such as Slack #product , #product-leadership , #eng-managers , and #ux-managers . For more guidance on communication, refer to the GitLab Communication tips and best practices . Product Management If you‚Äôd like to collaborate with product management see How to Engage guide. Product Principles The Product Principles section is where you can learn about our strategy and philosophy regarding product development here at GitLab. Product Processes For a detailed view on how we do Product Development, read up on our established Product Processes . Product sections, stages, groups, and categories To learn how the GitLab product and our Teams are organized review our Product Categorization section . About the GitLab Product Learn about GitLab as a product , including what does it mean to be a single application, our subscription tiers and pricing model, and the basics of permissions in the platform. Product Manager Responsibilities Understand the roles and responsibilities of product managers . Being a Product Manager at GitLab Want to know more on what being a Product Manager at GitLab is like? Checkout our Product Management guide for helpful information like our Career Development Framework and learning/development resources. Product Performance Indicators Learn how we measure success in Product via our Product KPIs , which are tracked in our Product project . For best practices and guidance on how to add instrumentation for features please review our Analytics Instrumentation workflow . Our Product Leadership Team Learn about our Product Leadership Team and learn about them via their personal README‚Äôs. Communicating with the Product Division Below are team emails and handles that can be used for different departments and sub-departments in the Product Division. These groups are used for internal communication and the @mention can only be used by project members. Please remember that tagging @mention on issues will generate in-product to-do items and email notifications to all team members in that project, so use it only when you need to communicate with the entire team. For communication specifically for product managers, please leverage How to Engage . @gl-product-leadership tags all group managers, directors and VPs in the Product Division @gl-product-plt tags all direct reports to the VP Product in the Product Division @gl-product-pm tags to all members of Product Management, Product Monetization and Program Managers in the Product Division @gl-product tags to all members in the Product Division: Product Management, Product Monetization, Program Management, Product Design, User Research, and Technical Writing product@gitlab.com emails all members of Product Management, Product Monetization and Program Management in the Product Division ux-department@gitlab.com emails all members of UX (UX Research, Technical Writing and Product Design) in the Product Division @gitlab-com/gitlab-ux tags all members of UX (UX Research, Technical Writing and Product Design) in the Product Division @gitlab-com/gitlab-ux/managers tags all people managers within UX (UX Research, Technical Writing, and Product Design) @gitlab-com/gitlab-ux/designers tags all Product Designers and Design Managers in UX @gl-docsteam for all Technical Writers in UX ‚Äò#technical-program-management‚Äô a place to reach the entire TPgM team across organizations When you are tagging @mention : Clearly state why you are tagging the entire product team and what action you need product team members to take. Write a short summary in the same comment so team members can quickly understand the necessary context. Review the issue title and description to ensure it has relevant details other product team members need BEFORE submitting the comment. The issue title will be the subject of email notifications and in-product to-do items. If asking team members to review a change, please directly link to the specific page on the review app and any relevant issues or MRs. AI-assisted features This page contains information about AI at GitLab. Collaboration on shared feature and experience areas Collaboration process and documentation of shared feature areas for product groups GitLab Product Management This document describes what Product Management does, where, when, and how to engage with the ‚Ä¶ Personas Roles vs personas Personas describe the ideal target for GitLab. They help us define our messaging ‚Ä¶ Product Group and Team Pages Purpose Each team is empowered to work efficiently and document their practices in the GitLab ‚Ä¶ Product Leadership Team Resources Overview This section of the handbook collects all the resources related to the Product Leadership ‚Ä¶ Product Principles These are core principles we believe world class product organizations exhibit. The goal is to build a PM system that fosters and honors these principles, in a way that works for GitLab. Product Processes As a Product Organization, we work to create a flexible yet concise product development framework for developing products that customers love and value. Product READMEs Product sections, stages, groups, and categories Principles - Processes - Categories - GitLab the Product - Being a PM - Leadership Interfaces We ‚Ä¶ UX Department The GitLab UX department comprises four areas to support designing the GitLab product: UX Research, Product Design, Technical Writing, and Foundations Last modified June 30, 2025: Create New R&D PMO Handbook Pages and Remove Outdated Pages ( a698de10 ) View page source -  - please contribute .",
    "headings": [
      "Product Handbook",
      "Welcome to the Product Team Handbook",
      "Product Team Functions",
      "Product Team Mission",
      "Contributing to the Product Handbook",
      "Informing team members about the changes",
      "Product Management",
      "Product Principles",
      "Product Processes",
      "Product sections, stages, groups, and categories",
      "About the GitLab Product",
      "Product Manager Responsibilities",
      "Being a Product Manager at GitLab",
      "Product Performance Indicators",
      "Our Product Leadership Team",
      "Communicating with the Product Division"
    ],
    "word_count": 1266,
    "extracted_at": "2025-07-21 20:14:44"
  },
  {
    "document_id": "gitlab-handbook-955795",
    "url": "https://handbook.gitlab.com/handbook/product/product-principles/",
    "title": "Product Principles",
    "category": "Product",
    "content": "Product Principles These are core principles we believe world class product organizations exhibit. The goal is to build a PM system that fosters and honors these principles, in a way that works for GitLab. Principles - Processes - Categories - GitLab the Product - Being a PM - Leadership Our Product Principles These are core principles that we believe will deliver world-class products through customer-centric innovation. Our goal is to build a practice that fosters these principles with the customers‚Äô voice at the core. Everything we do is for our customers, and we are only successful when they succeed in delivering secure software faster to their customers and internal users. We are customer zero, therefore we use our own product: Everything you put into the product should be a feature you or our Engineering team would use as part of our daily work. If the answer is no, then challenge your ‚Äúwhy‚Äù, as there might be a better solution that will have a bigger impact for our customers. We are not our only customer: Meet with customers as much as possible as everything we do is for them. It is tempting to assume that we understand our customers through our own usage and dogfooding, but that only gets you so far and we can be wrong. Validate assumptions through strategic user research, customer interviews, and feedback sessions. We are design-led: It does not matter what customer pain points you work with Engineering to resolve if what is provided to customers is hard (or almost impossible) to use. User experience is our top priority as we have a very technical product, however it should be easy enough for someone new to DevSecOps to get started quickly. This includes everything from onboarding to shipping secure software leveraging GitLab. We value quality over velocity: Delivering incomplete features and capabilities to ensure your team achieves a defined velocity is not acceptable. Everything we ship to customers must be user validated, bug free, not introduce security vulnerabilities, be able to achieve GitLab.com scale, include documentation, and be available on all customer deployment choices simultaneously. Accruing additional technical debt in favor of velocity is also not acceptable as this leads to future quality issues around availability, scalability, reliability, and security. We value data over intuition and anecdotes: Everything we build must have success metrics we can track to ensure we are providing value to our customers. We measure outcomes, not launches, and this is only possible with experimentation and proper instrumentation. All features must be instrumented so success metrics can be tracked and adjustments to plans can be made through product usage. We fail fast and iterate with intention: Define a hypothesis on how to address a customer use case or pain point and validate (or invalidate) it quickly through problem validation. Take the outcome of the problem validation cycle and build an iteration strategy to deliver it with a focus on usability and quality. Revalidate your hypothesis through solution validation with each iteration so you can adjust plans as needed. Problem and solution validation ensures the customer voice is key in making decisions. We believe in product-led growth over unguided experiences: Our product should be GitLab‚Äôs best Sales team member, and its own biggest champion. Enable feature discovery moments to let customers know there is more value based on their usage, actions taken, or configuration choices. The more customers adopt our product‚Äôs capabilities, the more return on investment they experience, which builds more internal GitLab champions. We like to win‚Ä¶and we only win as a team: We win when our customers are able to successfully ship secure software faster with GitLab. This requires us to hold ourselves to the highest levels of execution and collaboration within Product across our Product Management, UX Research, Product Design, and Technical Writing teams. While teamwork within Product is necessary, it is also not sufficient. We require that same standard of execution and collaboration with our cross-functional team members across R&D and GTM. Together, as a global GitLab team, we can drive Results for Customers. How we follow our Principles Enabling Collaboration From development teams to marketing organizations, everyone needs to collaborate on digital content. Content should be open to suggestions by a wide number of potential contributors. Open contribution can be achieved by using a mergeable file format and distributed version control. The mission of GitLab is to allow everyone to collaborate on all digital content so people can cooperate effectively and achieve better results, faster. Bringing Ideas to Reality Ideas flow through many stages before they are realized. An idea originates in a chat discussion, an issue is created, it is planned in a sprint, coded in an IDE, committed to version control, tested by CI, code reviewed, deployed, monitored, and documented. Stitching together all these stages of the DevOps lifecycle can be done in many different ways. You can have a marketplace of proprietary apps from different suppliers or use a suite of products developed in isolation. As a single-application for the entire DevOps lifecycle, GitLab strives to enable you to bring ideas to production rapidly. We will do so AND avoid demonstrating our capabilities with toy app demos and simple trivial examples. That‚Äôs because we understand that building a prototype is easy, but building a production line is hard . The Minimal Valuable Change (MVC) Minimal Valuable Change (MVC) is the GitLab path to delivering the smallest measurable improvement for our users, customers, and the wider community. Our approach requires four pillars: Relentless customer focus and commitment to understanding their workflows, using research and validation Measurable outcomes that use established metrics for success in tracking adoption, usage, or other business outcomes. Product functionality that adheres to GA criteria listed in the levels of support Future vision to expand the MVC beyond the initial release When considering how to scope a feature for a release, remember that it is not ok to ship an ‚Äúincomplete‚Äù feature to customers (see the definition of done ). Consider the use of Pajamas components for UI in your MVCs. When introducing a new component or pattern not found within Pajamas, it is the responsibility of that team to follow our component lifecycle guidelines to determine whether it should be added and, if so, contribute the addition/update back to Pajamas. MVC means reducing the scope so we can ship quickly. It doesn‚Äôt mean shipping something that hurts the usability of GitLab. First impressions are important. A feature that does not offer enough value or hinders the user experience may have a negative effect that discourages users from trying that feature again in the future. If there are obvious gaps in your MVC or you can anticipate follow-up requests, consider whether your feature is complete enough to be released to users. If you are unsure whether your feature is complete enough to be an MVC (or if you know your feature is not complete enough to be an MVC and you want to gather additional feedback), you can use approaches such as dogfooding, beta programs , feature flags, and/or user research to help build confidence in your decision. In terms of talking about your feature, it‚Äôs ok to add a release post item that announces your incomplete feature (making clear that it is an early iteration, and points to the direction for the feature) and follow up in a later release post with a new item when you‚Äôve completed more of the functionality. As long as you call it cookie dough, not a cookie, it manages user expectations. Examples: Ship a feature through the API and not the UI - See this release post as a great example of this approach was used to build a GraphQL endpoint for deleting attachment from a project. Exposing a minimal set of functionality - See this release post where a basic read-only page displaying queued jobs was added and more capabilities were added in subsequent releases. There are scenarios when an MVC approach is not advised. These include: When changing core parts of the experience - An example of a core experience is comments . When building this out for work items, we waited to release the new feature to end users until we reached parity with comments in Issues and MRs. Iteration An MVC approach is a byproduct of our spirit of iteration. That means we break problems down as small as possible , and focus on reduced cycle time . Thinking iteratively is not always intuitive, and breaking certain topics or projects down can be challenging. Here‚Äôs a helpful video from our CEO with guidance on how to think more iteratively. Here is a great video that illustrates how to build MVCs using Iteration. It shows Lego climbing obstacles. The first design fails. The second one can climb a book and so on. It also illustrates how modularity and good interfaces help with iteration as things get complex. Iteration speed and product excellence To ensure that our efforts consistently deliver value to our users, each iteration must adhere to the following guidelines: Define Expected Impact: Clearly articulate the expected measurable positive impact of the iteration on users, ensuring alignment with our overall product direction and guided by a vision that has been informed by user research. Establish Metrics for Success: Identify specific metrics that will be used to evaluate the success of the iteration before declaring the feature GA or an iteration shippable. These should be concrete, measurable indicators that directly relate to the intended outcomes of the iteration. These metrics should define a measurable quality bar as part of the initial scoping as that allows the cross-functional team to understand what the success/quality criteria are before beginning to build, while also allowing these metrics to be measured during the entire development and post-release lifecycle. As part of defining the quality bar a test plan should be defined and agreed that it can measure against these measures for success. Quality targets include: No S1 or blocking S2 defects/bug that prevents the customer from using the feature Not impacting or severely degrading the stability of the GitLab instance Success of an initiative is not measured by the deployment of a change or the completion of an iteration. True success is determined by whether the iteration achieved its predefined objectives, as evidenced by tangible business and product metrics. Example: Effort: Reduce latency in Service A. Iteration A: Implement regional upgrades in key locations. Success Metrics: Evaluate the iteration‚Äôs success by measuring increased usage and user satisfaction with Service A. Relevant metrics might include service usage rates, user adoption levels, repeat usage statistics, and revenue increases following the upgrade. We celebrate achievements when we can clearly see that an iteration or launch has resulted in tangible value for our users. Subtractive thinking Humans tend to favor solutions that add features than solutions that remove them, even when removing features is more efficient - great PMs recognize this bias and utilize subtractive thinking to create great user experiences. Customers will tell us when we‚Äôre missing something they need, but they‚Äôre unlikely to explicitly tell us when we‚Äôre overwhelming them with unwanted features. However, we do have evidence that this challenge is already a consideration for us, as reflected consistently in our System Usability Scale verbatims . Here is an episode on the Hidden Brain podcast that explores this bias further. SaaS First Our customers choose SaaS because it reduces their operating costs, helps them adopt the latest capabilities without performing upgrades, and provides them peace of mind of high availability. This principle implies the following: Design features so that they can be released without downtime. Release features in SaaS before self-managed or alongside it. This principle does not mean SaaS only. For more information on parity between SaaS and self-managed, see our parity principle . Feedback issues An MVC approach allows for maximum feedback while iterating. To help gather that feedback, Product Managers are encouraged to create feedback issues ( example ) to consolidate suggestions and experiences from users. Consider mentioning the feedback issue in any release post items and related implementation issue(s) for awareness. Feedback issues allow GitLab team members and the wider GitLab community to offer thoughts and suggestions for future iteration. Feedback issues are particularly encouraged for major new customer-facing features. These issues can be closed at the end of the milestone following the milestone when they were introduced. Celebrate and Learn from Failures It‚Äôs important that team members know they are encouraged by E-group to continue moving fast as GitLab grows and gets bigger as a company. This involves moving quickly even in the face of risk and complexity. In alignment with our transparency value , we‚Äôd like to celebrate examples of failures or mistakes that were made while moving fast, where we ultimately learned from it and moved on. The following failures provided by the product team are celebrated as opportunities to gain insight, share learnings and move on with additional knowledge: We initially believed we should create a lift and shift translator for Jenkins, but learned from users and technical experts that it wasn‚Äôt technically feasible and it would be better to invest in more detailed documentation and guidance. With Auto DevOps, we discovered the desire for composability and the need to iterate on your DevOps platform makes a one-pipeline fits all capability miss the mark for tackling that user pain. We integrated with some monitoring and observability tools as MVCs (Jaeger) that were just too MVC to give us data points on their success. We relied upon ‚ÄúMVC‚Äù not including on by default and usable by default - resulting in lots of MVCs that we thought would garner us new information, but did not. We spent time delivering a marketplace offering, and had very little traction. We learned marketplace offerings alone are not a vehicle for adoption, and we need a sales alignment with the marketplace vendor to achieve success. We had duplication of effort between Quality and Distribution. We didn‚Äôt recognize / resolve this for too long. We have learned to better integrate Quality into the planning process. Data telemetry in general has been one of our failures. We didn‚Äôt invest in telemetry seriously or early enough, and we attempted to accelerate via a 3rd party, but didn‚Äôt do a good enough job talking to our community on the best ways to roll that out. We failed to capture significant users with APM. Internal Deck for Reference Historically, designers had been instructed to not spend time on problem validation, but we had a PM who realized in order for her group to be successful, she needed her design counterpart to be deeply involved in validation work. We learned that GitLab‚Äôs original Serverless strategy was dependent on immature technology and not necessarily aligned with the market winner Lambda. This resulted in GitLab stopping investment in Serverless. We recognized a big gap in security concerns with GitLab managed clusters, which was prohibiting this feature from being adopted by customers. Once we learned from this ‚Äòfailure‚Äô we introduced the Kubernetes agent instead. If you have a failure that can serve as a learning opportunity, please make an MR to this page Avoid ‚ÄúNot Invented Here‚Äù Syndrome Just because something is not invented here doesn‚Äôt mean it doesn‚Äôt have a perfect home within our solution. GitLab is an Open Core product and is part of the broader ecosystem of Open Source tools in the market. Every day there are new innovative open source tools out there that solve real-world customer problems; we should not be afraid of embedding these tools into our own products in order to solve those same problems for our customers too. Leveraging existing technology allows us to get to market much more quickly, to contribute to Open Source (and help strengthen Open Source as a whole), and allows us to focus our own people on making GitLab itself better. Building professional relationships with these tool creators also is a positive for GitLab since they may have important user perspectives around your categories. We have achieved many successes following this approach: Code Quality in CI/CD pipelines by embedding CodeClimate Feature Flags by using the Unleash client library Mobile publishing by writing about how to utilize FastLane with GitLab There are also many more examples throughout the company where this has been successful. As a product manager you should be monitoring the world of Open Source as it relates to your area to see where new innovative tools are being developed, and not be afraid of integrating those. One thing to keep in mind, integrating could be anything from a blog post describing how the tool works together with GitLab all the way up to bundling it inside of our own installation, and this can evolve iteratively. Convention over Configuration We understand that a natural inclination when using application development tools is to create an array of buttons to press and knobs to turn. We believe, however, that adding options to an application does not necessarily improve the user‚Äôs experience of that application. The best way to serve our users is to create an application that reduces complexity while still offering the features they need. Inspiration We admire other ‚Äúconvention over configuration‚Äù tools‚Äîlike Ruby on Rails (the doctrine of which perfectly describes the value of integrated systems ), Ember , and Heroku ‚Äîand we strive to offer the same advantages for continuous delivery of software. Furthermore, Ruby on Rails has significantly and positively influenced the Ruby community, uplifting the tool and making it more powerful and useful than ever before. We want GitLab to be to Kubernetes what Rails is to Ruby. You should prefer well-considered choices based on current best practices. Avoid unnecessary configuration. Avoid configuration to support fragile workflows. Configuration Principles When considering adding new configuration, we follow the following principles: Ensure a great experience by default - GitLab should work perfectly right out of the box for most users. While it should be resisted, sometimes configuration is inevitable or preferable. Your configuration must not make that experience worse and should always get out of the way of the user . GitLab.com values should be the default - the settings used on GitLab.com should be the defaults for self-managed. Not only does this provide a consistent experience for users, but we get the highest fidelity feedback via GitLab.com. If we find that the GitLab.com setting is wrong, it is usually wrong for self-managed too. If you believe you have a strong case for using custom (non-default) settings for GitLab.com, please document the justification in alignment with your Product Section Lead. Any custom (non-default) settings for GitLab.com need to be tracked here . Encourage favorable behaviors by limiting configuration - Convention also implies that we‚Äôre encouraging our customers to do things in a certain way. A very concrete example of this is the ability to disable pipelines. We believe that our integrated solution will give a superior user experience and we‚Äôre motivated to encourage this behavior. For this reason, adding a configuration to allow disabling this permanently (be that in a template or instance-wide), is something that should be avoided. Design for users not intermediaries - GitLab should avoid falling into the Blackboard trap of building a product that administrators of GitLab love because it is configurable, but developers and other users of GitLab hate because it is overly complex and confusing. Working by Default - From the perspective of someone using GitLab, the feature does not exist until it works by default. This means, with few exceptions, features should simply work on GitLab.com and self-managed installations of GitLab without setup, toggling feature flags, modifying GitLab Omnibus ( gitlab.rb ) or Charts configurations, or installing extra components. This is more difficult than ‚Äúenabled by default,‚Äù which implies that features may be available by default but then require additional effort to set up. Working by default is worth the extra thoughtfulness and effort, because it enables an extremely important outcome: It allows customers to easily adopt our entire platform and experience the benefits of a single app for the entire DevOps lifecycle. In order to be properly working by default a feature needs two things: Enabled-by-default - it must not require modifying GitLab Omnibus ( gitlab.rb ) or Charts configurations, installing extra components on the host machine, or be behind a feature flag. When features are not enabled-by-default most people will never benefit from it because admin access to the GitLab application or the host machine will be needed. Feature flags should be consistently ON for both GitLab.com and self-managed users whenever possible. Enabled-by-default can be rolled out incrementally. A feature can sometimes be activated within days via a feature flag on GitLab.com . Other times a feature can take months to prove that it has the performance and visibility enterprises need. Setup-by-default - it should not require the setup before the feature can be used. We should ensure every feature has sensible defaults, and automatically migrate existing users/groups/projects to have the new features setup by default, while ensuring that the security and infrastructure costs would not be substantially affected. It is important to remember that most people are not likely to take the extra effort to setup a new feature, nor will they be aware that the feature has been added. The vocal proponents of issues who a Product Manager might interact with would likely be inclined to take the extra effort to setup a feature, but most people will not. Avoid Limits - Limits should be in place to protect the system but not to ‚Äúslowly try out‚Äù a feature. By limiting the usefulness of a feature right from the start the only thing you are achieving is limiting its adoption and usefulness. If you are going to default to OFF or limited, you must have a good, documented reason for this. Avoid configuration completely when possible - Requests for configuration can be a proxy for trying to support a fragile workflow. Rather than enabling bad habits and incurring product debt, effort should be spent helping customers adopt best practices. Configuration builds up over time - Every configuration option in GitLab multiplies its complexity, which means the application is harder to use, harder to develop, and less friendly to users. Configuration is hard to remove - Removing a configuration after it shipped and in use is much more work than not introducing it in the first place. This is because you change the behavior for customers that selected the less popular option. Configuration is an expensive testing mechanism - It‚Äôs a natural reaction to propose a big change to be configurable, as you worry it‚Äôll negatively affect certain users. However, by making a feature configurable, you‚Äôve now created two problems to maintain going forward. Adding a configuration is a one way door that should be avoided if possible. As a result, consider using feature flags instead of configuration. Always Allow for Deploying to Production Sometimes fast deployments are needed to fix a service or application outage that can cost a business money and reputation, we understand time is of the essence in these situations. That‚Äôs why we believe giving the team control over this is important in crucial moments of the development lifecycle. Controls that prevent changes from reaching Production are okay as safeguards, but they should be able to be quickly removed or disabled if necessary. When controls are changed in this way, logs or records should be created to support post-mortem analysis and allow for understanding why the control needed to be removed or disabled. Design for self-managed for feature parity between deployments We want to provide the same capabilities to end users regardless of the method they choose to use GitLab (GitLab SaaS, Dedicated or Self-managed). All GitLab SaaS environments leverage the same installation method available to self-managed users, with a different licensing structure. By designing and implementing features for self-managed, we achieve maximum parity between the various installations. A few examples: Design features to avoid downtime since it‚Äôs not acceptable for SaaS nor self-managed users. It is ok to release functionality to SaaS first, as long as the solution is applicable for self-managed too. While a feature can be enabled first on SaaS via a feature flag or setting, the underlying implementation must also exist, although disabled, on self-managed. In line with our SaaS-first principle, some features may be released on SaaS to gain operational experience and apply learnings prior to recommending and supporting customers using it. Features would be present on self-managed codebase but are disabled until General Availability. For functionality where implementation may be especially challenging without cloud services, for example with AI, self-managed functionality may be dependent on an underlying SaaS service. This allows us to provide end users the same capabilities regardless of deployment type, and not overly constrain our feature set or impose significant operational complexities on each deployment. Product managers need to be aware that this may impact the adoption of these features, as not all customers may be willing or able to leverage underlying SaaS services, such as air-gapped deployments. Principled adherence to the established knowledge architecture Exception to this product principle requires CEO approval. Work with VP, Product Management to add your request to the Product Scale agenda describing the situation and request for exception to gain CEO approval. Our simplicity and SaaS/Self-Managed Parity principles require that we adhere to our established knowledge architecture. Our established architecture is Organization , Group and Project . When we need to add capabilities that an admin needs to apply across the entire organization, then we provide them at the organization level. When we need to add capabilities that need to apply across all projects in a group, but not applicable to all groups in an organization, then we provide them at a group level. When we need to add capabilities that need to apply across a specific project, but not all projects in a group, then we provide them at a project level. For capabilities our users want applied to a set of groups, it is tempting to create another aggregation concept for a ‚Äúset of groups‚Äù. We do not consider that until it is available both at the project and group level for a few months. The solution is to implement it for all groups at the organization level or for each group in the set individually. For capabilities our users want applied to a set of projects, it is tempting to create another aggregation concept for a ‚Äúset of projects‚Äù. We do not consider that until it is available both at the project and group level for a few months. The solution is to implement it for all projects at the group level or for each project in the set individually. Note: This implies that we will take pains to avoid instance-level features as we expect to move all capabilities from instance to organization over time. Take pains to avoid instance-level features After making a tier decision on a new feature, we should strive to maximize the number of users who can use it. As part of this objective, we should avoid building instance-level features when possible. Building at the instance level (in the admin area ) leads to a separation between GitLab.com and self-managed and limits your audience to self-managed customers only: Historically (and even net-new proposed features) we‚Äôve often started with an ‚Äúinstance-wide‚Äù mindset which then means we need to iterate and adjust features to work at a group-level. This often delays functionality for our SaaS customers and makes GitLab.COM feel like a second-class citizen. There are factors that may justify an instance-level feature, like engineering efficiency and high infrastructure cost , but we should always have a clear view on how we might bring the feature to GitLab.com and clearly document why we started with the instance-level in the issue. Deciding whether to add configuration For a GitLab instance in gitlab.yml Product Managers at GitLab are frequently confronted with the choice of whether to add new configurations or not. These can frequently be times where an outside perspective is important. That‚Äôs why we‚Äôve created the option to request a New Config Review . Here‚Äôs an example of how to consider whether to add new configuration. Let‚Äôs say you are proposing we add a checkbox or two radio boxes in a feature dialog box. Think carefully about what users really want. Most of the time, you‚Äôll find you really only need one solution, so remove the other option. When two possible choices really are necessary, the best or most common one should be the default, and the other one should be available. If the non-default choices are significantly less common, then consider taking them out of the main workflow for making decisions, by putting them behind an Advanced configuration tab, for example. Avoiding configurations is not always possible. When we have no choice, the secondary priority is to configure something in the GitLab interface. A configuration should only appear in a file ( gitlab.rb or gitlab.yml ) as a last resort. gitlab.yml is the configuration file used by the Rails application. This is where the domain is configured. Other configurations should be moved to the UI as much as possible and no new configurations should be added here. gitlab.rb is the configuration file for Omnibus-GitLab. It acts not only as an abstraction of the configuration of gitlab.yml for GitLab-Rails, but also as the source for all configurations for services included and managed within the Omnibus-GitLab. Newly introduced services probably need to be configured here. When you have to add a new configuration, make sure that the features and services are on by default. Only add a configuration line to either of these configuration files if the feature or service cannot be fully disabled from the admin UI. For a GitLab CI configuration in .gitlab-ci.yml If the decision to add a configuration follows the principles above , add it to the repository-specific CI configuration options and be sure to default it to the option that results in the best user experience. We are much more liberal with additions to CI configurations than Instance configurations. Every feature is owned by a group Features should be owned by one group, including the respective DRIs of that group. Make sure that the documentation metadata and the features.yml for your team are kept up to date to make it easier for other teams to find the correct owner. This principle is important because unowned product features are unsupervised, and continue to accrue technical debt over time. This increases the risk of performance and maintenance issues, which tend to only get resolved once the situation has become critical. In addition, by having clear DRIs for our entire surface area, teams are able to advocate for investment and/or removal of features. If you encounter a feature that does not seem to be owned or documented, work with the team that originally introduced the functionality to decide on ownership. If the feature is large and needs to be broken down, document which elements are owned by which team. If you cannot decide who should own the feature, escalate the decision to the lowest common reporting line between the involved teams. If there are features that no group wants to own, or features that a group no longer wants to own, that feature should be considered for deprecation and removal. User Experience A highly usable interface with cohesive workflows and comprehensive documentation is a must to stay ahead of our best-in-class competitors. Work closely with the individuals in UX to achieve our user experience goals. The UX team has a high level of expertise in Product Design, Technical Writing, and UX Research. They can help decipher or decide how to simplify or avoid complexity. While our Product Designers review user interface changes in merge requests , they are not limited to just the UI. Anything that impacts the user journey is relevant to them. Keep in mind these general user experience principles. Strive for simplicity: Using GitLab should be easy. Users should think about the applications they are building and the teams they are collaborating with, not how to make our app work. Here‚Äôs a great read on ‚ÄúDon‚Äôt make users think!‚Äù Depth over breadth: A world-class experience requires deep, powerful, useful features. To remain balanced, we must also identify capabilities that can be deprecated so we are adding depth while encouraging subtractive thinking . Better than before: Our MVC principle pushes back against the notion that something must be better than nothing. Instead, we assess if the user experience is better than before by considering its value. Work with a Product Designer to evaluate tradeoffs and minimize deferred UX . Timeless design: The user experience should be relevant both today and years from now, so each release should encapsulate the best experience possible. Ask yourself, ‚ÄúHow would we build something if we knew this was the last time a team could touch it?‚Äù Additionally, you can familiarize yourself with the UX team mission and GitLab‚Äôs Pajamas design system principles . Be Ambitious Many crazy, over-ambitious ideas sound like they are impossible just because no one else is doing them. Since we have amazing engineers and a culture of shipping minimal valuable changes, we are able to accomplish many more ‚Äúimpossible‚Äù things than other organizations. That‚Äôs why we‚Äôre shipping merge conflict resolution, why we shipped built-in CI before anyone else, why we built a better static pages solution, and why we‚Äôre able to compete. How this impacts Planning Here at GitLab, we are an ambitious company and this means we aim for big things with every release. The reality of taking chances and planning aspirationally means that we won‚Äôt always be able to deliver everything that we wanted to try in every release, and similar to our OKRs , we believe this is a good thing. We don‚Äôt want to shy away from challenging ourselves and always want to keep a sense of urgency, and aiming for more helps us do that. Also see the importance of velocity We arrived at our preference for ambitious planning after measuring our velocity and finding that our velocity was unchanged whether we scheduled ambitiously or scheduled for providing slack. Discoverability without being annoying Discovering new features can enhance the experience and unlock significant value for users. And the more users see and try our features, the faster we can get feedback to improve them. However, excessive feature discovery efforts can become irritating for users. This erodes trust and reduces engagement with other UI elements in the future. Even worse, they might leave GitLab due to this deteriorating experience. Context plays a significant role in how users engage with new functionality. By presenting features in a way that resonates with a user‚Äôs current situation and needs you increase the liklihood of them using this new functionality. Work with your product designer to improve the discoverability of your features. The Pajamas Design System has best practices and examples to support feature discoverability . We can also design new patterns. The Growth team can also help you with this, as they think about things like onboarding new users and promoting feature use within the app while supporting, not annoying, the user. Product Qualified Leads (PQLs) As the GitLab userbase and team members who work on GitLab continue to grow we need to support both our users and team members by helping to connect users who may be interested in speaking with a member of the sales team to that particular person. We can call this a Product Qualified Lead or a PQL. A PQL can be further broken down into two types, usage and hand-raise Usage: A usage-based PQL is a user or a team (group or instance) that adopted the product to the level that we had data to support that they are statistically more likely to upgrade to a subscription compared to our remaining userbase. When this level of product adoption is achieved by the user or team an alert is triggered for the sales team to follow up with the user and/or team. The level of usage that triggers a usage-based PQL is something that will be determined and agreed upon between Product, Marketing, and Sales as the goal is to generate quality leads for the sales team. When the usage-based definition is agreed upon it will be added here. Hand-Raise: A hand-raise PQL is a user who requests to speak to sales from within the product. Our goal is to introduce these hand-raise moments throughout the product at feature discovery moments, or moments where a user is learning more about a paid feature or tier of GitLab that they may find valuable. These moments should be contextually relevant to their usage and non-obtrusive see Discoverability Without Being Annoying . A hand-raise moment in the product should be accompanied by either a trial CTA or a touchless upgrade CTA or both. We want to always provide options to our users as we want them to decide the path that best suits their needs. Clarifiying out what a PQL is not A PQL is not a user that has only signed up for the product, they have not achieved a qualified status. A PQL is not a trial, a trial is a separate user adoption path. It‚Äôs important to note that a user could start a trial and then become a PQL or vice versa. The future vision of PQLs within the GitLab product Our goal is to develop a world-class PQL system whereby we monitor product usage to understand and constantly iterate on what constitutes a usage-based PQL and provide a unified intelligent interface in the product where users can submit a hand-raise, start a trial or upgrade touchlessly. By monitoring product usage, usage PQL volume, SAO rate, and ASP we will be able to work in partnership with marketing and sales to ensure we‚Äôre sending high quality leads to the sales team. In the product experience, we will develop an intelligent module for feature discovery moments whereby we help recommend what we believe should be the preferred option for the user whether it‚Äôs a hand-raise, trial or touchless upgrade by updating the default CTA based on their usage of the product along with demographic and firmographic data. This experience will be present on both SaaS and self-managed instances for air-gapped instances the CTAs will provide the user with external URLs to visit to complete the associated step. This experience should be able to be deployed by any stage to further their paid adoption rate. Drive Product Usage Users can only experience GitLab‚Äôs value when they actively use the product features. Therefore the Product team‚Äôs mission isn‚Äôt only shipping features and building products, but also driving usage and delivering value. There are two frameworks we use to think about driving GitLab‚Äôs product usage: we use the AARRR framework to think about how to drive a single feature‚Äôs usage, and use the Customer Adoption Journey to think about cross-adoption of product features. These two frameworks are also interconnected with each other. Single Feature usage: AARRR framework AARRR stands for Acquisition , Activation , Retention , Revenue , and Referral which is often referred to as ‚ÄúPirate Metrics‚Äù . These five words represent the customer journey and the various means a product manager may apply Product Performance Indicators to drive a desired behavior in the funnel. While the AARRR framework is commonly used to drive overall active users, it is also a great way for PMs to think about how to drive feature usage. Acquisition measures user actions that show awareness of the feature Activation illustrates a user has begun to apply the feature Retention is the continued use of the feature over time Revenue captures the monetary value acquired from feature usage Referral focuses on measuring behaviors that drive users to encourage others to consume the feature classDiagram Acquistion --|> Activation Acquistion : Are users aware of the product or feature set? Acquistion: Measurement (Insert Metric) Activation --|> Retention Activation : Are users applying the feature? Activation: Measurement (Insert Metric) Retention --|> Revenue Retention : Are users applying the feature over time? Retention: Measurement (Insert Metric) Revenue --|> Referral Revenue : Are users paying for the features? Revenue: Measurement (Insert Metric) Referral --|> Acquistion Referral : Are users encouraging others to use the feature? Referral: Measurement (Insert Metric) Add AARRR funnels for your stage or group‚Äôs Product Performance Indicators directly with mermaid markdown. It‚Äôs easy if you use this live editor . Product managers can use these various states to prioritize features that drive a desired action. This could mean focusing on the Activation metric to drive awareness and generate more top of funnel leads. As an example, in the Release stage the Release Management group tracks actions on the Release Page in GitLab. Users that view a Release Page have been acquired and those that create a release on a Release Page are activated users. The Product Manager can choose to target features that drive users to view the Release Page more, resulting in a greater interest in the number of users that become activated and create their own Releases. Multi-feature usage: Adoption Journey GitLab is a complete DevOps platform. Our customers get the most value out of the GitLab product when they use multiple features together. Below is the most common path our customers follow to adopt GitLab‚Äôs product stages. As PMs, in addition to driving usage of individual features, we should also proactively think about how to design product and user experiences to help users adopt more stages and features, therefore benefiting more from using GitLab. graph TD; id1(Create - 99%) --> id2(Plan - 91%) id3(Verify - 84%) --> id4(Secure - 36%) id1 --> id5(Manage - 35%) id1 ==> |Golden Journey|id3(Verify - 86%) id3 ==> |Golden Journey|id6(Release - 54%) id3 --> id7(Package - 7%) id6 --> id9(Monitor - 8%) id6 --> id10(Configure - 2%) id6 --> id11(Software Supply Chain Security - 28%) The percentage here is defined as % of monthly active paid ultimate-tier self-managed instances that adopted that stage. The data is captured directly in the Golden Journey Paths chart (which has been deprecated). The Golden Journey: The bolded path is the ‚ÄúGolden Journey‚Äù where we observe as the most common stages adopted by paid customers and serve as foundation to adopt other stages: it starts from Create, then goes to Verify and Release. If the Golden Journey is complete, all stages of GitLab are available for use. Our biggest opportunity is to improve Verify to Release adoption rate. Note: There are numerous potential variants to this adoption journey, but it‚Äôs important to keep this representation simple and consistent. Please check with David DeSanto first before making any changes to the adoption journey image. Flow One Shipping only MVCs can result in a large set of loosely connected pieces that don‚Äôt necessarily combine into a single, great user experience. An obvious solution to this would be to plan out the future in detail, creating a long-term detailed plan. However, this is unwanted as it can restrict your flexibility and ability to respond to changing needs or feedback. Flow One offers an alternative. You draw out a workflow consisting of MVCs (that can be shipped individually). The workflow should only cover a specific, narrow use-case, and nothing more. This means you: avoid creating an inflexible, long-term plan can more easily construct a full feature/ capability, which is more easily marketed can provide context to each individual change (‚Äúwe need this as part of X‚Äù) can continue to ship MVCs work concurrently on several items, none of which are blocking Flow One should cover the first iteration of a particular workflow. After this, individual MVCs can be introduced to expand the use-cases or loosen the assumptions (e.g. from a feature that can only be used if you‚Äôre using feature branches, to one that works for other git strategies). Data-driven work Using data to learn from our users is important. Our users are spread across GitLab.com and self-managed instances, so we have to focus our efforts on learning and providing benefit to both when we decide to collect more data, or build and use additional analytics tools. If we do this, we can help make the rest of the company successful as well. This means that we should: Build and use tools that work for both GitLab.com and self-managed. Start from a question, and build / collect what we need to answer that question. This avoids wasting time with data we don‚Äôt need. Use and improve existing tools we have inside of GitLab before leaning towards off-the-shelf products. Our customers, sales team and customer success teams all benefit greatly from similar insights into their usage as the product team does. Make things that help all of these people. No artificial limits in Core Per GitLab Stewardship , we will not introduce artificial limits in Core. Artificial means arbitrarily setting a small number (such as: 1) as a limit on a given GitLab object category, that would incur no additional effort or cost had we chosen a larger number. The additional effort includes product, design, and engineering effort to create the feature in the first place, and to maintain it over time. For example, GitLab Core has the issue board feature in every project. In GitLab EE, each project supports multiple boards . This does not mean that Core has an artificial limit of one board per project, because there is additional effort to manage multiple boards such as supporting the navigation interface, and all the associated engineering work. This principle does not apply to our SaaS offering as limits are occasionally introduced to limit our hosting costs and protect other users from potential abuse. As an example we have shared runner minute quotas and implement rate limiting . Avoid enforced workflows but allow enterprise flexibility We‚Äôre discussing enforced workflows in this issue . Enforced workflows should be avoided in GitLab. For example, there are three issue states ( Open , In Progress (as of 10.2), and Closed ), and any issue should be allowed to transition from one state to any other state without workflow restrictions. (Roles and permissions is a separate concern.) Enforced workflows restrict GitLab to a smaller number of use cases, thus reducing the value of GitLab. Enforced workflows require overhead to maintain in the product. Each new feature must account for any existing enforced workflows. We should trust our users to use GitLab responsibly, giving them freedom, instead of imposing enforced workflows that we think made sense at the time of design and implementation. A comment on Hacker News perfectly details what can go wrong when enforcing workflows: ‚ÄúThe down side for the true end-users, those who actually use the software day-to-day, is that most business processes are awful. If your experience is the hellish existence that I see strolled about on threads where JIRA comes up ‚Ä¶: Your admin(s) set it up once and hasn‚Äôt bothered to iterate on those workflows. The business mapped their autonomy stripping processes onto JIRA intentionally. I‚Äôd guess that most of your work experience is similar. Process stifled nonsense.‚Äù But that comment also specifies the advantage: ‚ÄúJIRA‚Äôs most powerful feature is that it affords for mapping businesses processes onto software. This is incredibly compelling to enterprise customers. Software that enforces workflows, procedures and requirements can be an incredible lever and JIRA‚Äôs price point makes build vs buy decisions an absolute no-brainer.‚Äù We should ensure that GitLab makes it easy to help with enterprise workflows: When starting a branch with an issue (number) we link it to the branch. When merging an MR you automatically close the issue(s) it fixes. In GitLab CI you can define your deployment stage progression (staging, pre-production, production) including manual approval. We run quality and security tools automatically and provide dashboards to check status instead of making it a step in the process. We limit the impact of mistakes with incremental rollout and automatic rollback. When considering a customer need for enforcement or limitations: Deeply understand and document the underlying customer problem. It‚Äôs our responsibility to understand the need we are solving for before we even consider imposing controls. Solve for individual use cases first. Trying to solve a specific problem with a non-specific solution is risky and not iterative . Instead, start with a single use case and build a specific, non-enforced solution in GitLab. Consider the smallest group of users first. Don‚Äôt reach for instance-wide controls, but instead iterate from the smallest segment possible (e.g. a sub-set of projects). Provide simple workarounds and overrides. Consider extreme scenarios like recovering from a SEV-1 incident; there should always be a simple, fast escape hatch. As an example, customers requested instance-wide enforcement through required CI jobs. Doing this would have been a mistake. Instead: We understood their problem more deeply, and realized we could build capabilities to perform these checks in existing primitives (like external rules in MR approvals). We limited the scope of the problem, and avoided any limitations at the instance-level. Instead, we planned to keep the impact as small as possible by requiring customers to scope this feature to only projects with a particular compliance framework . We intentionally planned for workarounds. A developer should be able to override these limitations inside merge requests, such as with two-person approvals . They should also be able to create subgroups that aren‚Äôt subject to these controls. While workflow enforcement should be avoided in most cases, there are organizations that rely on enforced workflows for a variety of reasons. These organizations have problems adapting existing workflows as they move to GitLab and as a result, we should consider allowing some enforcement at the group level in order to balance team efficiency and organizational policy. Page 79 of [Accelerate](https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339) outlines \"teams that reported no approval process or used peer review achieved higher software delivery performance.\" As we implement features to allow organizations to enforce workflows, we should do so at the group level and default them off. GitLab should be a product teams use to accelerate product development, but flexible enough to solve for requirements of all sizes of organizations. Prefer small primitives Small primitives are building blocks in GitLab. They are an abstraction not at the technical level, but truly at the product level. Small primitives can be combined, built-upon further, and otherwise leveraged to create new functionality in GitLab. For example, the label lists in issue boards use the smaller primitive of labels . They are especially powerful because they usually take less effort and provide higher leverage than you would get from a more ‚Äúcomplete‚Äù but standalone feature. Think of how simple Unix command line utilities can be chained together to do really complicated things, much easier (and certainly more flexibly) than you could have done with a dedicated tool. When iterating on GitLab, strongly consider using small primitives instead of creating new abstractions, especially when considering MVC features that will provide the foundations for further improvements. To do this you can start with easy to apply concepts that meet the needs of intermediate to advanced users; from here document the usage clearly and be sure to think about discoverability. The UX can very often be refactored or enhanced later when there‚Äôs a demonstrated need for refinement, onboarding for less sophisticated users, or other new abstractions needed that were identified through real-world usage. Component Principles In GitLab the product, it is sometimes the case that optional software or infrastructure is required to enable new capabilities. Some examples include: Infrastructure in the form of Runners are required to enable use of GitLab CI/CD Infrastructure and software in the form of Elasticsearch is required to enable Advanced Search Software in the form of the Kubernetes Agent is required to enable GitOps pull-based workflows The following are best practices we consider when building such components. Start with enabling Developers As we learned with GitLab CI/CD, the ability for developers to quickly attach needed Runners to enable their own use of GitLab CI/CD allowed for rapid adoption of GitLab CI/CD within an organization. When considering the workflow to enable additional capabilities, start with enabling developers first. A guiding principle should be low-friction developer enablement, which will positively impact adoption. Build for production use, not demo use As we learned from the certificate-based Kubernetes Integration, building starting experiences that support demoing a getting-started process doesn‚Äôt necessarily translate into real usage. For example, the certificate-based integration lacked strong security primitives and the ability to manage the integration on an ongoing basis. As a result, we should build capabilities that target real-world production use first, even as part of MVCs. Integrate other applications thoughtfully GitLab‚Äôs vision is to be the best single application for every part of the DevOps toolchain. However, some customers use tools other than our included features, and we respect those decisions. With this in mind, it‚Äôs sometimes valuable to integrate with 3rd-party services and products to help bridge the gaps in their toolchain. While a single application is the best approach, multiple applications that work well together is better than ones that don‚Äôt. With this in mind, below are some product guidelines to consider: Don‚Äôt clone everything Don‚Äôt feel like we need to clone every feature of an integrated product. Ultimately, this approach costs us the most possible resources, while creating an experience that will always be sub-par compared to the native one offered by the other application. We should focus our efforts on places where we can deliver value by helping bridge the gap between the two applications. Here are some potential (completely theoretical) examples, highlighting the difference between cloning vs. bridging: In an event log, surface only recent activity and link to a full log on the other system, instead of trying to display all records inside of GitLab. In an issue/ticket, offer only the most used functionality, like commenting or status changes, instead of trying to replicate all possible actions. Prevent broken workflows for free Based on the quote above: ‚ÄúWhile a single application is the best approach, multiple applications that work well together is better than ones that don‚Äôt.‚Äù Features and UX that might break a customers workflow should be offered freely. In particular, we should offer features that help customers avoid productivity antipatterns like allowing multiple sources of truth (multiple wikis) or duplicating work (not showing work activity on an issue). Charge for adding value to an interaction By having such an incredible breadth, GitLab has the opportunity to add value to external features that they could never otherwise have , if not integrated with GitLab. For example, our excellent To Dos feature puts actionable work at the fingertips of developers, and it‚Äôs a feature somewhat unique to GitLab. Many other tools make it harder to identify work that needs immediate action, so by integrating those tools with this part of GitLab, we can make them even more powerful than they‚Äôd be alone. Consider the right buyer for pricing While we typically think about who is using the functionality as an indicator of our buyer, this may not be appropriate for your integration. When an integration is driven by an organizational requirement (such as having all teams in the company use Jira), Buyer Based Tiering likely indicates that the integration is for multiple team (Premium) or strategic organizational (Ultimate) use. When an integration is extending GitLab capabilities , the buyer is more likely to be the end-user, similar to how we‚Äôd think about pricing other GitLab functionality. Low level of shame still applies here When we start to integrate with another product, it‚Äôs almost like opening a whole new Category of work. With this in mind, a friendly reminder that low level of shame applies, just like it would anywhere else. The integration may not be very valuable today , but it‚Äôs just a starting place, and we should use our first iteration to validate what belongs in the next one. Track the maturity of the integration Like any other category of work, we should track the maturity of the integration somewhere that‚Äôs visible. Consider adding your integration to the Ecosystem Integrations direction page, which contains a table that tracks our high-priority integrations and their maturity levels. Respect security and permissions External applications may have security and permissions concerns that we don‚Äôt have in our application. We should take careful consideration of these, since ignoring them could be potentially disastrous for our users. For example, if we ask a user for an administrative token with full access and then display content in our UI based on those privileges, we could potentially display sensitive data that shouldn‚Äôt leave that application. Navigation Integrations should be as discoverable as any native GitLab feature, if they‚Äôre enabled. In cases where the two features are mutually exclusive, we should allow the user to hide our native functionality to prevent confusion. For example, having two project management tools is a (generally) bad idea. Collaborators may end up filing issues in the wrong tool, slowing down their velocity and worsening their overall experience. Reducing velocity is antithetical to the value GitLab provides. When features aren‚Äôt mutually exclusive (there‚Äôs nothing wrong with using multiple security scanning services, for example), we should group navigation to those integrations near our own. Use empty states for feature discovery Consider adding an empty state that highlights the availability of this integration. If someone is not using the GitLab feature and also not integrating their tool of choice, that‚Äôs the worst possible experience. We should respect the choices of our users, and if they‚Äôve decided to use a 3rd-party tool that we integrate with, we shouldn‚Äôt hide that option in a dark corner. This is also a great opportunity to educate the user on what GitLab can offer relative to other products. It‚Äôs the best of both worlds: promoting our own features while helping them improve their current experience, regardless of choice. Use our own design language Just because we‚Äôre leveraging functionality from a 3rd-party service doesn‚Äôt mean we should allow that service‚Äôs UI to dictate what ours looks like. GitLab has its own design language , and by keeping it cohesive across the application, we create a significantly better experience for our users. Be transparent about the data source When data is populated from an external source, make it clear that it comes from elsewhere. This prevents confusion, reduces cognitive load, and ensures that users are well informed about the choices they‚Äôre making when interacting with the application. Avoid plugins and commercial marketplaces Note - We intend to provide a place where everyone can contribute, such as code snippets , project templates and CI components in the CI/CD Catalog . Marketplaces are traditionally transaction based, where users are purchasing solutions. GitLab CI/CD components on the other hand, will offer an in product experience for consuming components for YAML configuration from a library of GitLab maintained components . Closed source software vendors commonly depend on plugins and commercial marketplaces because: These allow third parties the ability to add functionality without needing access to the underlying codebase. Third parties can charge for the plugins, which gives them an incentive to build them. Because GitLab is an open core product , third parties can add functionality directly to GitLab. Adding directly to the GitLab codebase (as opposed to building a plugin) may mean more work for them and will limit the ways in which they can charge for that functionality. However, for users of GitLab , this has significant advantages: They are more likely to use this functionality, because it‚Äôs distributed to all users by default. The functionality always works out of the box, requiring no additional software . Users don‚Äôt have to search for what plugins are available, or test multiple options to see which one works the best. Installations can‚Äôt have varying combinations of plugins, making it easier to use and support the product. Administrators never have to avoid an upgrade for fear that it might break an important plugin since all code is tested together. And for developers of GitLab including the third parties, this has significant advantages as well: Their work isn‚Äôt limited in functionality, because they‚Äôre changing the code of the product itself. Their code will be tested along with the rest of the product as things change refactoring is easier, reducing the likelihood that it suffers from software atrophy because something is hard to change. Community effort is not wasted on developing multiple plugins that all ultimately do the same thing and compete with each other for usage. Developers don‚Äôt have to sacrifice velocity in favor of predictability , since they don‚Äôt have to worry about breaking the plugin API. Overall, we believe that this approach creates the best possible experience for both the users of and the contributors to GitLab, and to that end we encourage people to contribute functionality to GitLab directly . If adding code directly to GitLab isn‚Äôt an option, we encourage third-parties to integrate through our APIs . Note: GitLab does support plugins that respond to system hooks , which tie directly to application events and are primarily used for administrative purposes such as auditing, logging, and other administrative tasks. Product and feature naming guidelines Give products and features descriptive, not distinctive, names GitLab is a DevOps Platform, not a collection of DevOps point solutions; the naming of GitLab products and features should reflect this. Adopting descriptive names brings other advantages: It‚Äôs efficient . Descriptive names are generally not eligible for trademark registration, avoiding the time, effort, and expense of clearing, filing, and maintaining trademark registrations. It‚Äôs inclusive . Descriptive names are most accessible to a global audience because they can be directly translated into other languages, reducing the risk of loss of meaning inherent in translating abstract, metaphorical, or colloquial names. As an example , CI/CD Components Library is a descriptive name while CI/CD ATOM is a distinctive name. Exceptions to this principle are considered in limited circumstances - if a product or feature is a differentiator in the market, adopting a descriptive name risks it getting lost in the sea of same . Here, a distinctive name may be justified. To discuss an exception, reach out to #marketing in Slack. Use prepositions when referring to third-party products and services in names When naming a GitLab extension, plugin, app, or integration for a third-party product or service (a ‚Äútool‚Äù), either include the third-party service name with a preposition like for , or don‚Äôt include it at all. A preposition is important as it indicates that the third party isn‚Äôt officially affiliated with the tool. For example, our integration with Jira Cloud is called GitLab.com for Jira Cloud . Provided we use the tool‚Äôs full name in marketing materials and technical documentation, as exceptions to this general principle we can: (1) refer to the tool solely by the third-party service name in places where we list GitLab‚Äôs tools in product; and (2) refer to the tool solely as ‚ÄúGitLab‚Äù in the third-party product‚Äôs app directory. For example, we refer to the GitLab for Slack app as ‚ÄúSlack‚Äù in our lists of GitLab integrations, and as ‚ÄúGitLab‚Äù in the Slack App Directory . For more guidance on the feature naming process, see naming features . Next Generation While our big, hairy, audacious goal spans all development processes, personas, and use-cases, there are primary targets in each one of these venues. When considering prioritization we should first aim to provide complete maturity for developers building cloud native applications in a modern way prior to moving to other development methodologies, personas, and application types. Modern first When developing features to compete with existing competitors, make sure to solve problems for modern development teams first, and then see what‚Äôs missing for legacy teams. e.g. For project management, make great project management capabilities for teams doing conversational development, lean, or even agile development before doing Scaled Agile Framework (SAFe) or waterfall. It‚Äôs important that modern first does not mean non-modern never. It means that we should first learn how teams are using the feature in a modern way, and then see what‚Äôs missing. The modern way provides the path forward, and then we can add customizability or the path to modern for teams who are not quite there yet. Developer first Our strategy includes going after a lot of new personas, going from developers to operations, security, product managers, designers, etc. But when developing features in these new areas, it‚Äôs important to remember to start with the developer. If we can make security great for developers and then great for security professionals, we‚Äôll be much more successful. Cloud-native first Development teams deploy to tons of different platforms, from bare metal to cloud VMs to cloud-native Kubernetes clusters. We build features for cloud-native first, and then support the rest. This allows us to focus on where development is going, and deliver solutions that every company aspires to use eventually, even if they‚Äôre not ready to today. Prioritize current adopters By focusing on next-generation development flows, personas, and use cases - we build features and experiences where our initial users are in the relatively small population of early adopters. While we might build experiences to support them today, we presume there will always be a much larger population of future users of these experiences. Therefore, we optimize GitLab to support the larger number of current and future adopters of next-generation principles - those who are beginning to operate in the workflow (modern), team setup (developer first), or application architectures (cloud native) we support. We focus our investment in the most modern workflows that will best support those current adopters. This will come at the cost of sustained investment in initial workflows for early adopters. When doing so we will ensure we clearly communicate with our users what the preferred path is. For example - We first provided the ability to attach Kubernetes Clusters via the Certificate method. After realizing this wasn‚Äôt optimal for production use cases we added the GitLab Agent for Kubernetes method of cluster attachment. As soon as we were certain that the certificate method was no longer the preferred method we communicated via our docs and in the product that the Agent was the preferred path for current adopters. This should not mean an immediate deprecation , but a clear signal that the legacy method will become deprecated once the alternative approach is able to substitute it. Customer Support on all features We provide customer support to paying customers on all features that are in the tier of their paid license as well as any lower tiers. This means a feature in Core, should get customer support in all paid tiers. For example, when there is a feature that is available in the lowest paid tier, but only has customer support in higher tiers, the feature should be removed from that lowest paid tier. In accordance with our stewardship policy we can never remove features from Core into paid tiers, but we can build additional features around it which are available to paying customers only. Last modified July 4, 2025: Move division specific includes to folder ( a74a8182 ) View page source -  - please contribute .",
    "headings": [
      "Product Principles",
      "Our Product Principles",
      "How we follow our Principles",
      "Enabling Collaboration",
      "Bringing Ideas to Reality",
      "The Minimal Valuable Change (MVC)",
      "Iteration",
      "Celebrate and Learn from Failures",
      "Avoid ‚ÄúNot Invented Here‚Äù Syndrome",
      "Convention over Configuration",
      "Take pains to avoid instance-level features",
      "User Experience",
      "Be Ambitious",
      "Discoverability without being annoying",
      "Product Qualified Leads (PQLs)",
      "Drive Product Usage",
      "Flow One",
      "Data-driven work",
      "No artificial limits in Core",
      "Avoid enforced workflows but allow enterprise flexibility",
      "Prefer small primitives",
      "Component Principles",
      "Integrate other applications thoughtfully",
      "Product and feature naming guidelines",
      "Next Generation"
    ],
    "word_count": 11217,
    "extracted_at": "2025-07-21 20:14:50"
  },
  {
    "document_id": "gitlab-handbook-473874",
    "url": "https://handbook.gitlab.com/handbook/product/product-processes/",
    "title": "Product Processes",
    "category": "Product",
    "content": "Product Processes As a Product Organization, we work to create a flexible yet concise product development framework for developing products that customers love and value. Principles - Processes - Categories - GitLab the Product - Being a PM - Leadership Our Product philosophy As a Product Organization, we work to create a flexible yet concise product development framework for developing products that customers love and value. The Product Principles section is where you can learn about our strategy and philosophy regarding product development, here we discuss the processes we use tactically. Product Development Flow Introducing changes requires a number of steps, with some overlap, that should be completed in order. GitLab follows a dual-track product development flow spanning product, engineering, UX, and quality. We use GitLab to power product development flow . When changes are released, we follow the release post process to communicate externally about new capabilities. This process should be both up front and on an on-going basis when building features. The Importance of Direction Documenting a Section, Stage, Group and Category direction is critical to communicating where we are heading and why to all of our stakeholders. We document our direction in direction pages. Read more about related processes under Planning and Direction . Understanding Milestones and Releases Interpreting release dates clarifies how product teams use milestones and labels to indicate the likelihood of feature delivery within certain time frames. The release definitions are maintained by the Engineering Team and we run the end of each Milestone on the release date . Relevant links Engineering release definitions Feature flag lifecycle Product Launch process Communication Product Org Communication Touchpoints In November 2024 we adjusted our communicated touch points based on feedback from our FY25-Q2 Engagement Survey , AMAs, skip levels, and 1:1s. The two key areas we are prioritizing: Embedding more asynchronous touchpoints to reach team members across time zones Implementing additional opportunities to cascade information from E-Group and PLT Synchronous Product Org Communication Touch Points Product All-Team Meeting: We have a quarterly synchronous meeting for the Product Org. As of Nov 2024, we are expanding on the existing content and structure to ensure key strategic updates from each PLT department head are effectively cascading through the organization regularly. Product Key Review: We follow the company wide key-review format which covers key updates to the product division and is shared with cross-functional stakeholders. Asynchronous Product Org Communication Touch Points CPO Fortnightly Update: David posts a slack message in #product-private every two weeks. This is a way for him to share what is top of mind for E-group and across the product team. New Hire Intros: New hires to the product org are encouraged to post their introduction in the #new-team-members slack channel. Once per month, a member of our Product Leadership Team will post a consolidated list of new hires and their intros into the #product-private slack channel. Monthly Showcase: On a 4-week cadence we have an async monthly showcase, facilitated in the #product-private channel, where people can share what they‚Äôre working on with the rest of the Product Org. This is a low-key competition with prizes to incentivize folks to contribute videos. Team members can add videos throughout the month, then the entire Product Org can vote on their favorite video via google form. At the end of the 4-week period, there will be a prize for the winner, announced in David‚Äôs fortnightly update. In the case of a tie in number of views, David will make the final call on who wins. We hope that this encourages team members to share their wins and exciting developments in their feature areas! Note: We‚Äôre doing this on a 4-week cadence (rather than calendar month) so that it aligns with David‚Äôs fortnightly updates, which are posted every other week. This should still be roughly aligned to the calendar month. Other Communication Channels Product Function Issue Tracker - please use confidential issues for topics that should only be visible to team members at GitLab. Product Function GitLab Group - @gl-product Product Management GitLab Group - @gl-product-pm [ Chat channel - #product-private ]. This is a private slack channel for members of the product-org; new team members are automatically added to this channel as part of onboarding. Chat channel - #product . All GitLab internal team members can use the #product channel for any product-related questions but you‚Äôll also find more direct assistance in the various Product Group channels. Communicating with the Entire Product Management Function At Once When communicating change or a request for action to the entire product function, utilize the following levels and corresponding activities. Level Description Activities One Suggestion for review from interested PMs and FYI Post MR/issue in #product Two Request for action from all PMs Post in #product and mention @gl-product-pm in MR/issue with specific action instructions. Three Confirmation of understanding Post in #product and mention @gl-product-pm ; checkbox for each @gl-product-pm member in an MR/issue description to confirm; assign MR/issue to all @gl-product-pm members Internal and external evangelization Before shipping a new or updated feature, you are responsible for championing it, both internally and externally. When something is released, the following teams need to be aware of it as they will all need to do something about it: Marketing: depending on the importance of the feature, we need the help of marketing to promote this feature on our different communication channels. Sales: sales needs to know what‚Äôs new or changed in the product so they can have better arguments to convince new or existing customers during their sales process. Support: as they are in constant contact with our users and customers, support should know exactly how our products work. You can promote your work in several ways: start with documenting what will be released and share this documentation with the different teams schedule meetings, if you think it‚Äôs important, with the teams listed above. When referencing issues in written communication using just the issue number #123456 and a link is not low-context communication . Instead use the title of the issue and the link or the issue number and description of the problem that issue will solve: Good: We will next be working on [Detect and display code coverage reports on MR](https://gitlab.com/gitlab-org/gitlab/-/issues/21549) . OR We will next be working on [gitlab#21549](https://gitlab.com/gitlab-org/gitlab/-/issues/21549) which will help developers view code coverage reports directly in GitLab instead of losing context by looking in another tool while reviewing an MR . Avoid: We will next be working on #21549. . In order to support findability and to clearly articulate when we change our minds especially when it comes to product direction, category changes, shifts in investment themes, or priorities for engineering, Product Managers must evangelize these changes in multi-modal communication channels to ensure our users and customers aware. Some internal methods for communication include: Sharing the updates various product-based Slack channels such as: #product , #s_ , #g_ , or #f_ Slack channels Cross-posting changes in direction or categories into #customer-success and if they impact use cases tag @cs-leadership for awareness Recording a quick video and sharing with Customer Success that discusses direction updates. Use sync meetings as needed to facilitate efficient communication. Collaborate with the Field Communications team to determine if a larger internal communications plan/approach is necessary for the Field (Sales, Customer Success, Channel & Alliances) team. Aggregating and sharing highlights of monthly direction page updates at the Section-level across the organization External channels for consideration linking direction pages to: Twitter, LinkedIn, or other social accounts Sharing outreach emails via account teams Recording walkthroughs on Unfiltered and promoting on social accounts Writing a blog about the changes, if they are significant or disruptive Writing to inspire action As a PM, it is important to remember a bias towards action (and other value actions like sense of urgency , make a proposal , boring solutions , write things down , don‚Äôt wait , and make two way doors decisions which enables PMs to drive an async discussion to being action oriented. Every time you write a comment or create an issue ask yourself: Will this allow us to take an action and move us forward? Writing about features As PMs we need to constantly write about the features and upgrades we ship: in a blog post, internally to promote something, and in emails sent to customers. There are some guidelines that one should take into account when writing about features, the most important being a clear communication of the problem we‚Äôre solving for users. When writing about a feature, make sure to cover these messaging guidelines which help produce clear internal and external messaging. Please also keep in mind that we should avoid using acronyms that others my not recognize, such as ‚ÄúMVC‚Äù for Minimal Valuable Change. For more guidance you can visit our writing style guidelines . Let‚Äôs highlight the messaging guidelines mentioned above with a concrete example, Preventing Secrets in your repositories, that we shipped in 8.12 . Start with the context. Explain what the current situation is without the feature. Describe the pain points and connect back to our Value Drivers (in this case Reduce Security and Compliance Risk ). It‚Äôs a bad idea to commit secrets (such as keys and certificates) to your repositories: they‚Äôll be cloned to the machines of anyone that has access to the repository. If just a single one is insecure, the information will be compromised. Unfortunately, it can happen quite easily. You write git commit -am 'quickfix' && git push and suddenly you‚Äôve committed files that were meant to stay local! Explain what we‚Äôve shipped to fix this problem. GitLab now has a new push rule that will prevent commits with secrets from entering the repository. Describe how to use the feature in simple terms. Just check the checkbox in the repository settings, under push rules and GitLab will prevent common unsafe files such as .pem and .key from being committed. Point to the documentation and any other relevant links (previous posts, etc). Here are some additional examples of well written release blog posts for inspiration: Issue Board Work In Progress Limits Parent-Child Pipelines Drag-and-drop Design badges Render charts in GitLab issues using a Grafana URL Recording videos to showcase features In addition to the written medium, video is an important medium that caters to the different goals you are trying to accomplish and learning styles of your audience. Depending on the type of video you are recording, there are some guidelines to keep in mind. As our documentation guidelines actively encourage linking video content, please consider following the Documentation Style Guide section on language , and working with your technical writing team to include links to your speed runs, walk-throughs and demos at relevant locations in the product documentation. Using GIFs Animated GIFs are an awesome way of showing of features that need a little more than just an image, either for marketing purposes or explaining a feature in more detail. Checkout our guide to Making Gifs ! Speed Run Speed runs are informal videos meant to focus on a single workflow and the experience for performing that workflow. It should not require much planning and is typically short in duration (less than 5 min.). This video type is meant to inform and not necessarily to influence buyers. Examples: GitLab Unfiltered Speed Runs Playlist Remove docker images via CI/CD speed run Demo Demos are scripted recordings meant to influence buyers. Generally has higher production value and typically involves both a slide-style presentation and/or live screen-sharing. Duration varies depending on the topics being covered. Examples: GitLab for the Enterprise Demo Walk-through Product walk-throughs are informal videos meant primarily for an internal audience as a recorded, visual form of product critique. Walk-throughs typically focus on the user experience across categories and workflows within a Product Manager‚Äôs product scope . There are particular benefits to walk-throughs which span product hierarchy boundaries (multi-category, multi-stage, multi-section) as they help highlight disjointed experiences across our single-application. Walk-throughs are typically longer in length as they cover more ground and often involve some ‚Äúlive‚Äù troubleshooting and are best performed with no planning. Use the Product walk-through issue template when creating a walk-through. Examples: Auto DevOps setup and usage walk-through QA Release Candidates on staging and elsewhere After the feature freeze, it‚Äôs expected of each product manager to test their own features and perform quality assurance to the best of their ability and follow up where necessary. Product managers can use the staging environment once the release managers have deployed a release candidate (RC) to staging. Release managers should post in the #product channel in Slack that a new release candidate is available. Product managers can also use other environments as needed, such as GitLab provisioned on Kubernetes with GKE. Feature assurance Before a new feature is shipped, the PM should test it out to make sure it solves the original problem effectively. This is not about quality assurance (QA), as developers are responsible for the quality of their code. This is about feature assurance (FA). FA is necessary because sometimes there are misunderstandings between the original issue proposal and the final implementation. Sometimes features don‚Äôt actually solve the intended problem, even though it seemed like it would, and sometimes solutions just don‚Äôt feel as useful as intended when actually implemented. If you can test out the feature during development, pulling down branches locally (or with a review app!), that‚Äôs great. But sometimes it‚Äôs not feasible to test a feature until it‚Äôs bundled into a release candidate and deployed to GitLab.com. If so, make sure to test out features as soon as possible so any new issues can be addressed before final release. Also, take the FA cycle into account when scheduling new milestone work. If you are looking to test code that has not been merged to GitLab.com or is not yet part of an RC, you can pull the branch down locally and test it using the GitLab Development Kit (GDK). Dealing with security issues Quality Engineering Managers (QEM) are the DRIs for prioritizing bugs. These include security issues which are prioritized in conjunction with the security team. Product Managers must work with their QEM to set Milestones for issues marked with the bug::vulnerability type label to guarantee they are shipped by their due date, as defined in the Security Team process . While Product Managers are the DRIs for milestone planning , they must respect the prioritization order for bugs and maintenance issues as determined by their QEM and EM, respectively. As such they should deeply understand the implications and risks of security-related issues and balance those when prioritizing a milestone work. Addressing a serious security issue by its due date may require temporarily adjusting the desired work type ratio for one or more milestones. Priority labels and Due Date designations for security issues should never be modified by Product Managers as they are directly managed by the Security Team and used to track metrics and progress. Foundational Requirements When thinking about new features, we must not only think about the functional requirements of a feature (defining what the feature will do), but also to think about foundational requirements (defining how the feature works). At the highest level, foundational requirements define items such as performance, scalability, compatibility, maintainability and usability characteristics of a feature. It is important to have foundational requirements in place up front, as this is much easier than trying to add them later and change expectations, or break existing workflows. Our definition of done contains specific areas of consideration that are required for the acceptance of new contributions. For an in depth review of foundational requirements (often referred to as non-functional requirements), see this resource . To deliver features, we must have both functional and foundational requirements defined. Introducing application limits To enhance availability and performance of GitLab, configurable limits should be put in place for features which utilize storage, or scale in a manner which could impact performance. For example, we limit the number of webhooks per project , and we allow admins to set rate limits on raw endpoints . These limits ensure more consistent performance, reduce the likelihood of outages, and offer admins tools to limit abuse or enforce specific standards. While these limits can be configurable, sensible default limits should be defined for our GitLab SaaS and GitLab dedicated offerings. There is a guide about developing application limits in the GitLab Docs. When implementing application limits See Rate Limiting::Managing Limits . Managing data lifecycle and growth As we continue to scale our product, we need to consider the amount of data being stored for new features. Data storage is not an infinite resource, so we should think carefully about what data needs persistent storage to provide the desired user experience. We also need to consider the cost implications around data storage. Everything we store impacts our bottom line, and we should therefore be careful to ensure we are only storing necessary data for well thought out time-frames. We are working on defining a sustainable data retention policy , and will iterate on this section as more general guidelines are developed. Data storage comes in three main forms for GitLab ‚Äì object storage, database storage, and Git repository storage. While we have dedicated teams devoted to ensuring we can scale these storages appropriately, it is in our best interest to only store what is required for a feature to perform as intended. Additionally, there are situations where storage should be subject to data retention policies. Considerations around data storage When evaluating feature data storage, the following data storage topics should be considered. What quantity data needs to be stored? - What amount of data will need to be stored for the feature to function as intended. Is this level of data storage bounded, or is there a potential for unbounded growth? Unbounded growth should be avoided if possible. How long should data be retained? - We should consider carefully the need to store data indefinitely. For many features, removing certain data after a specified time period won‚Äôt impact the functionality of the feature. In these instances, we should put retention policies in place. These retention polices should have a sane default value which is considered best practice for operating the feature long term. Note: it is easier to iterate toward longer data retention time frames, but far harder to reduce retention time frames. Consider starting out with a conservative time frame. How often will this data be accessed? - Much like the quantity of data stored can lead to scalability issues, so can the increased load on the data stores when the data is accessed frequently. There are ways to ease the burden on our infrastructure by properly forming queries, caching often used data, or carefully considering how repository data is accessed. If there are questions, consider reaching out to the Database Group or the Git Group for assistance. A good example where we‚Äôve successfully evaluated data storage is our CI/CD Artifacts. We‚Äôve set some sane default values for both maximum artifact size and for default artifacts expiration , while making these both configurable for administrative users. Cross-stage features See this page for details on working across stages at GitLab. Stages, Groups, and Categories Stages, groups, and categories serve as a common framework for organizing and communicating the scope of GitLab. How to work as a PM If you follow the principles and workflow above, you won‚Äôt be writing long, detailed specs for a part of the product for next year. So how should you be spending your time? Invest the majority of your time (say 70%) in deeply understanding the problem. Then spend 10% of your time writing the spec for the first iteration only and handling comments, and use the remaining 20% to work on promoting it. A problem you understand well should always have a (seemingly) simple or obvious solution. Reduce it to its simplest form (see above) and only ship that. Prioritization See the Cross-Functional Prioritization page for more information. Prioritization Framework Priority Description Issue label(s) 1* Security bug::vulnerability 2* Data Loss data loss 3* Resilience, Reliability, Availability , and Performance availability , infradev , Corrective Action , bug::performance 4 OKR‚Äôs 5 Usability Usability benchmark , SUS::Impacting , Deferred UX 6 Instrumentation instrumentation 7 xMAU / ARR Drivers direction 8 All other items not covered above *indicates forced prioritization items with SLAs/SLOs Forced Prioritization Any of the items with a ‚Äú*‚Äù are considered issues driven by the attached SLO or SLA and are expected to be delivered within our stated policy. There are two items that fall into Forced Prioritization: Security Issues labeled with bug::vulnerability must be delivered according to the stated SLO Issues supporting our product‚Äôs scale which include bug::availability with specific SLOs as well as infradev , Corrective Action , ci-decomposition::phase* that follow the stated type::bug SLO Any issues outside of these labels are to be prioritized using cross-functional prioritization . Auto-scheduling issues based on automation or triage policies are not forced prioritization. These issues can be renegotiated for milestone delivery and reassigned by the DRI. Engineering Allocation While we have moved to the cross-functional prioritization process to empower teams to determine the optimal balance of all types of issues, we will keep Engineering Allocations as a way to allow teams to quickly shift to a critical priority, designating the EM as the DRI to drive the effort. Engineering is the DRI for mid/long term team efficiency, performance, security (incident response and anti-abuse capabilities), availability, and scalability. The expertise to proactively identify and iterate on these is squarely in the Engineering team. Whereas Product can support in performance issues as identified from customers. In some ways these efforts can be viewed as risk-mitigation or revenue protection. They also have the characteristic of being larger than one group at the stage level. Development would like to conduct an experiment to focus on initiatives that should help the organization scale appropriately in the long term. We are treating these as a percent investment of time associated with a stage or category. The percent of investment time can be viewed as a prioritization budget outside normal Product/Development assignments. Engineering Allocation is also used in short-term situations in conjunction and in support of maintaining acceptable Error Budgets for GitLab.com and our GitLab-hosted first theme. Unless it is listed in this table, the Engineering Allocation for a stage/group is 0% and we are following normal prioritization . Refer to this page for Engineering Allocation charting efforts. Some stage/groups may be allocated at a high percentage or 100%, typically indicating a situation where all available effort is to be focused on Reliability related (top 5 priorities from prioritization table ) work. During an Engineering Allocation, the EM is responsible for recognizing the problem, creating a satisfactory goal with clear success criteria, developing a plan, executing on a plan and reporting status. It is recommended that the EM collaborate with PMs in all phases of this effort as we want PMs to feel ownership for these challenges. This could include considering adding more/less allocation, setting the goals to be more aspirational, reviewing metrics/results, etc. We welcome strong partnerships in this area because we are one team even when allocations are need to resolving issues critical to our business. During periods of Engineering Allocation, the PM remains the interface between the group and the fields teams & customers. This is important because: It allows Engineering to remain focused on the work at hand It maintains continuity for the field teams - they should not have to figure out different patterns of communication for the customer It keeps PMs fully informed about the product‚Äôs readiness Group/Stage Description of Goal Justification Maximum % of headcount budget People Supporting information EMs / DRI PMs Broadcasting and communication of Engineering Allocation direction Each allocation has a direction page maintained by the Engineering Manager. The Engineering Manager will provide regular updates to the direction page. Steps to add a direction page are: Open an MR to the direction content Add a directory under the correct stage named for the title Engineering Allocation Add a file for the page named index.html.md in the newly created directory To see an example for an Engineering Allocation Direction page, see Continuous Integration Scaling . Once the Engineering Allocation is complete, delete the direction page. How to get a effort added to Engineering Allocation One of the most frequent questions we get as part of this experiment is ‚ÄúHow does a problem get put on the Engineering Allocation list?‚Äù. The short answer is someone makes a suggestion and we add it. Much like everyone can contribute, we would like the feedback loop for improvement and long terms goals to be robust. So everyone should feel the empowerment to suggest an item at any time. To help with getting items that on the list for consideration, we will be performing a survey periodically. The survey will consist of the following questions: If you were given a % of engineering development per release to work on something, what would it be? How would you justify it? Have you tried leveraging cross-functional prioritization process before considering an engineering allocation? We will keep the list of questions short to solicit the most input. The survey will go out to members of the Development, Quality, Security. After we get the results, we will consider items for potential adding as an Engineering Allocation. Closing out Engineering Allocation items Once the item‚Äôs success criteria are achieved, the Engineering Manager should consult with counterparts to review whether the improvements are sustainable. Where appropriate, we should consider adding monitoring and alerting to any areas of concern that will allow us to make proactive prioritizations in future should the need arise. The Engineering Manager should close all related epics/issues, reset the allocation in the above table to the floor level, and inform the Product Manager when the allocated capacity will be available to return their focus to product prioritizations. When reseting a groups Engineering Allocation in the table above, the goal should be set as floor % , the goal should be empower every SWEs from raising reliability and security issues , percentage of headcount allocated should be 10% , and N/A in place of a link to the Epic. All engineering allocation closures should be reviewed and approved by the VP of Development . Feature Change Locks A Feature Change Lock (FCL) is a process to improve the reliability and availability of GitLab.com. We will enact an FCL anytime there is an S1 or public-facing (status page) S2 incident on GitLab.com (including the License App, CustomersDot, and Versions) determined to be caused by an engineering department change. The team involved should be determined by the author, their line manager, and that manager‚Äôs other direct reports. If the incident meets the above criteria, then the manager of the team is responsible for: Form the group of engineers working under the FCL. By default, it will be the whole team, but it could be a reduced group if there is not enough work for everyone. Plan and execute the FCL. Inform their manager (e.g. Senior Manager / Director) that the team will focus efforts towards an FCL. Provides updates at the SaaS Availability Weekly Standup . If the team believes there does not need to be an FCL, approval must be obtained from either the VP of Infrastructure or VP of Development. Direct reports involved in an active borrow should be included if they were involved in the authorship or review of the change. The purpose is to foster a sense of ownership and accountability amongst our teams, but this should not challenge our no-blame culture. Timeline Rough guidance on timeline is provided here to set expectations and urgency for an FCL. We want to balance moving urgently with doing thoughtful important work to improve reliability. Note that as times shift we can adjust accordingly. The DRI of an FCL should pull in the timeline where possible. The following bulleted list provides a suggested timeline starting from incident to completion of the FCL. ‚ÄúBusiness day x‚Äù in this case refers to the x business day after the incident. Day 0: Incident: Business day 1: relevant Engineering Director collaborates with VP of Development and/or VP of Infrastructure or their designee to establish if FCL is required. Business day 2: confirmation that an FCL is required for this incident and start planning. Business days 3-4: planning time Business days 5-9 (1 week): complete planned work Business days 10-11: closing ceremony, retrospective and report back to standup Activities During the FCL, the team(s) exclusive focus is around reliability work , and any feature type of work in-flight has to be paused or re-assigned. Maintainer duties can still be done during this period and should keep other teams moving forward. Explicitly higher priority work such as security and data loss prevention should continue as well. The team(s) must: Create a public slack channel called #fcl-incident-[number] , with members The Team‚Äôs Manager The Author and their teammates The Product Manager, the stage‚Äôs Product leader, and the section‚Äôs Product leader All reviewer(s) All maintainers(s) Infrastructure Stable counterpart The chain-of-command from the manager to the VP (Sr Manager, Sr/Director, VP, etc) Create an FCL issue in the FCL Project with the information below in the description: Name the issue: [Group Name] FCL for Incident #### Links to the incident, original change, and slack channel FCL Timeline List of work items Complete the written Incident Review documentation within the Incident Issue as the first priority after the incident is resolved. The Incident Review must include completing all fields in the Incident Review section of the incident issue (see incident issue template ). The incident issue should serve as the single source of truth for this information, unless a linked confidential issue is required. Completing it should create a common understanding of the problem space and set a shared direction for the work that needs to be completed. See that not only all procedures were followed but also how improvements to procedures could have prevented it A work plan referencing all the Issues, Epics, and/or involved MRs must be created and used to identify the scope of work for the FCL. The work plan itself should be an Issue or Epic. Daily - add an update comment in your FCL issue or epic using the template: Exec-level summary Target End Date Highlights/lowlights Add an agenda item in the SaaS Availability weekly standup and summarize status each week that the FCL remains open. Hold a synchronous closing ceremony upon completing the FCL to review the retrospectives and celebrate the learnings. All FCL stakeholders and participants shall attend or participate async. Managers of the groups participating in the FCL, including Sr. EMs and Directors should be invited. Agenda includes reviewing FCL retrospective notes and sharing learnings about improving code change quality and reducing risk of availability. Outcome includes handbook and GitLab Docs updates where applicable. Scope of work during FCL After the Incident Review is completed, the team(s) focus is on preventing similar problems from recurring and improving detection. This should include, but is not limited to: Address immediate corrective actions to prevent incident reoccurrence in the short term Introduce changes to reduce incident detection time (improve collected metrics, service level monitoring, which users are impacted) Introduce changes to reduce mitigation time (improve rollout process through feature flags, and clean rollbacks) Ensure that the incident is reproducible in environments outside of production (Detect issues in staging, increase end-to-end integration test coverage) Improve development test coverage to detect problems (Harden unit testing, make it simpler to detect problems during reviews) Create issues with general process improvements or asks for other teams Examples of this work include, but are not limited to: Fixing items from the Incident Review which are identified as causal or contributing to the incident. Improving observability Improving unit test coverage Adding integration tests Improving service level monitoring Improving symmetry of pre-production environments Improving the GitLab Performance Tool Adding mock data to tests or environments Making process improvements Populating their backlog with further reliability work Security work Improve communication and workflows with other teams or counterparts Any work for the specific team kicked off during this period must be completed, even if it takes longer than the duration of the FCL. Any work directly related to the incident should be kicked off and completed even if the FCL is over. Work paused due to the FCL should be the priority to resume after the FCL is over. Items created for other teams or on a global level don‚Äôt affect the end of the FCL. A stable counterpart from Infrastructure will be available to review and consult on the work plan for Development Department FCLs. Infrastructure FCLs will be evaluated by an Infrastructure Director. Please also note the corresponding Engineering handbook section about the relative importance and prioritization of availability, security, and feature velocity. To ensure we‚Äôre providing an appropriate focus on security, data loss, and availability, PMs should consider: tracking the appropriate labels for each prioritization category : Use a standing item to discuss these issues with an engineering manager and ensure you understand the impact of related issues in your area before planning a release. optimizing for quality once a merge request is ready for review : This means ensuring that Engineering has sufficient time to meet our definition of done - including a high-quality code review - without cutting corners to get something into production. Prioritization sessions To help PMs plan, stage group stable counterparts can participate in prioritization sessions. They serve mainly as an internal sensing mechanism for PMs to make more informed prioritization decisions for different planning horizons. Usually, teams focus on the product releases horizon, but can also focus on the FY themes or strategy horizons. This group exercise also boosts team morale, improves communication and empathy, and broadens individual‚Äôs perspectives. Besides, it can be a more informal and joyful way of connecting the team and discussing work. The output of these sessions is a priority matrix that shows the relative priority of a set of items based on two weighted criteria. Generally, the criteria are importance and feasibility , each one visualized as an axis of the matrix. You can change the criteria depending on the planning horizon or goals. To better understand how the sessions work, see an example mural and session recording . Always consider asynchronous sessions first, in an effort to be more inclusive and respectful of others time. That said, if possible, synchronous sessions can be ideal, as they allow limiting the time spent and make great use of the activities‚Äô momentum for a more efficient discussion and voting. Use our Mural template for prioritization sessions , built for product releases but adaptable for other planning horizons or criteria. Process template Adapt this process as needed, and consider changing it to an asynchronous mode of communication. For example, participants can review the items async, add questions as comments in Mural , and vote using dot voting or in voting sessions held on different days for each criterion. Before: The facilitator creates a mural from our template for prioritization sessions , with the stage group and milestone in its name. The facilitator invites the stage group counterparts for a 50-minute call, scheduled sometime before the team finalizes the release scope (see the product development timeline ). Includes the URL of the mural and planning issue in the event description. The facilitator shares the preparation work with the participants, preferably in the group‚Äôs planning issue (see the template after this list and an example . Participants do the preparation work (see the template after this list). During (see an example session recording ): The facilitator starts recording the call . Present : For each participant, the facilitator sets the timer for 10 minutes (adapt per the no. of participants). A participant then presents their issues, preferably using the RICE framework . Only after the participant presents all issues should other attendees ask questions. Once in a while, the facilitator announces how much time remains. When the timer goes off, repeat this for another participant. Vote : After all participants have presented, the facilitator runs two voting sessions : first for importance , and then for feasibility . Each participant has 5 votes (adapt per the no. of issues). The facilitator sets the timer for 2 minutes, repeating for each voting session. Visualize : Review your voting session results and everyone helps place the stickies on the matrix, depending on their number of votes for each criterion. If there‚Äôs still time, discuss the most-voted issues as a group. After: The facilitator uploads the recording to GitLab Unfiltered , sets its visibility (see SAFE framework ), adds to relevant playlists, and includes the URL of the mural and planning issue in the description. The facilitator shares the recording URL and voting results in the planning issue, preferably with a screenshot of the matrix and links to the highest voted issues (see an example . Preparation work template ## :map: Prioritization session `@-mention participants` for our [ prioritization session ]( /handbook/product/product-processes/#prioritization-sessions ), here's the [ **Mural** ]( URL ) for us to add the issues we want to see in **MILESTONE** . I scheduled our 50-minute session for **DATE** . 1. Add your issues to the Mural before the call. Let's try to limit to **5 issues per person** , so it's easier to vote on them and keep things focused. You can find instructions on how to add them in the \"Outline\" panel on the right side of the Mural UI. 1. Try not to add Security or Availability issues. This is also noted in the [ product processes page ]( /handbook/product/product-processes/#prioritization ), as those issues have forced prioritization with SLAs/SLOs. 1. If you can, mark issues that appeared in previous sessions by changing their sticky color to **orange** . Thanks and see you soon :bow: Using the RICE Framework RICE is a useful framework for prioritization that can help you stack rank your issues. The RICE framework is a great tool for prioritizing many issues that seem to be of equal value at first glance. In order to drive clarity and alignment in the prioritization of work across the entire DevOps platform, and to help prioritize items that may compete for resources from different teams, we have set a standard for the RICE factors so all prioritization decisions based on RICE are using the same metric. Reach How many customers will benefit in the first quarter after launch? Data sources to estimate this might include qualitative customer interviews, customer requests through Support/CS/Sales , upvotes on issues, surveys, etc. Higher reach means a higher RICE score: 10.0 = Impacts the vast majority (~80% or greater) of our users, prospects, or customers 6.0 = Impacts a large percentage (~50% to ~80%) of the above 3.0 = Significant reach (~25% to ~50%) 1.5 = Small reach (~5% to ~25%) 0.5 = Minimal reach (Less than ~5%) Impact How much will this impact customers and GitLab? Impact could take the form of increased revenue, decreased risk, and/or decreased cost (for both customers and GitLab). This makes it possible to compare revenue generating opportunities vs. non-revenue generating opportunities. Potential for future impact should also be taken into account as well as the impact to the GitLab brand (for example unlocking free-to-paid conversion opportunities). Higher impact means a higher RICE score: Massive = 3x High = 2x Medium = 1x Low = 0.5x Minimal = 0.25x Confidence How well do we understand the customer problem? How well do we understand the solution and implementation details? Higher confidence means a higher RICE score. High = 100% Medium = 80% Low = 50% Effort How many person months do we estimate this will take to build? Lower effort means a higher RICE score. Calculating RICE Score These four factors can then be used to calculate a RICE score via the formula: (Reach x Impact x Confidence) / Effort = RICE Here is an example RICE calculation you can use to help prioritize work in your area. Feel free to embed this at the Epic level to provide context for why you did or did not prioritize. RICE Factor Estimated Value Reach 10.0 Impact .5 Confidence 80% Effort 2 month ‚Äî‚Äî ‚Äî‚Äî Score (10.0 x .5 x .80) / 2 = 2.0 Other important considerations: Is this in support of a company or team OKR ? Does it bring our vision closer to reality? Does it help make our community safer through moderation tools ? Does it meaningfully improve the user experience of an important workflow? Is it something we need ourselves? Is it particularly important to customers ? The technical complexity is acceptable. We want to preserve our ability to make changes quickly in the future so we try to avoid complex code, complex data structures, and optional settings. It is orthogonal to other features (prevents overlap with current and future features). The requirements are clear. It can be achieved within the scheduled milestone. Larger issues should be split up, so that individual steps can be achieved within a single milestone. Refer to research participant gratuities section to understand if your study qualifies for incentive distribution . We schedule a prioritized issue by assigning it a milestone; for more on this see Planning a Future Release. Async RICE Exercise Conducting a RICE prioritization exercise with your cross-functional counterparts is a powerful way to make the process more inclusive and improve the quality of your rankings. Consider making this an async-first process to accommodate team members across different timezones. For an example of how to do this async-first, see this issue that the Geo team used to collaborate on a RICE prioritization exercise. This blank async RICE template is also available for you to copy for your own async prioritization exercise. Issues important to customers For prioritizing most issues, we should utilize the RICE framework noted above , which will capture an aggregate of customer demand. You can also augment RICE scores with the Customer Issues Prioritization Framework Dashboards : Customer Requested Issues (Product) for product managers Customer Requested Issues (CSM) for Sales, CS and CSM These dashboards provide several inputs for calculating RICE and aggregate all customer requested issues and epics into a single dashboard. These dashboards are not meant as a replacement or sole input for Top ARR Drivers for Sales/CS . Further requirements such as the integration of themes need to be implemented before this framework can be used to fully inform or replace tools such as the Top ARR tracker . In some cases however, we may become aware of a feature which is particularly important to deliver on by a certain date. Examples of this could include an issue necessary to embark on a new GitLab rollout, a feature needed by a partner to launch an integration, or a method to import data from a service which is being discontinued. In these instances, the responsible PM can apply the customer or customer+ label along with a due date and initial milestone . This set of labels can serve to indicate externally that the issue is particularly important, as well as a reminder for internal teams of its importance. It is important to note that the customer and/or customer+ label does not constitute a promise for the issue to be delivered in any given milestone or time frame. Community Considerations GitLab is open-source, encouraging and promoting a large ecosystem of contributors is critical to our success. When making prioritization decisions, it‚Äôs important to heavily weight activities which will encourage a stronger community of contributors. Some of those activities are: The creation of small primitives that can be utilized and iterated on by community members The building of integration points which can entice independent third parties to contribute an integration The addition of tools or features which make the contribution experience easier Product managers are not responsible for prioritizing contributions outside of their group. These contributions should be reviewed and merged swiftly allowing everyone to contribute, including non-product teams at GitLab. SaaS-First Framework The SaaS-First product investment theme will put us in a better position to support our customer base who is expected to accelerate adoption of SaaS products in the coming years. Features will also end up more secure, resilient, performant, and scalable for our self-managed customers if initially built to the expectations of SaaS. Therefore, it is important for PMs to understand and prioritize needs related to the SaaS business. When prioritizing SaaS related issues, we follow the same guidelines above . Within those guidelines there are a few areas that are especially important for PMs to focus on to ensure the success of our SaaS users. Availability Downtime of GitLab.com has a material impact on our customers. From a 2014 report Gartner estimates that downtime costs companies on average ‚Äú$5,600 per minute, which extrapolates to well over $300K per hour.‚Äù Furthermore, SaaS downtime can severely disrupt the productivity of GitLab Inc since we rely heavily on GitLab.com to run our business. Finally, downtime can also lead to customer churn and damage to our reputation. Thus, it is crucial as a company we collectively work towards consistently maintaining our 99.95% SLA on GitLab.com . There are a few things that PMs can do in partnership with their engineering team to help ensure overall Availability for GitLab.com. Make sure each new feature that gets built has full end-to-end test coverage. Before rolling out a new service to support a major new feature launch, ensure that your team has gone through the readiness review process . The effort and timing for a readiness review will vary depending on the complexity of the feature. It is recommended to start this process as early as practical when a significant number of the questions can be answered but not too late to further develop the feature based on learnings from the review. Ensure there are application limits for your product areas enabled on GitLab.com to reduce abuse vectors . Infradev The infradev process is used to triage issues requiring priority attention in support of SaaS availability and reliability. As part of the broader effort to responsibly manage tech debt across the company, PMs should partner with their EMs to identify and incorporate infradev labeled issues of all severities . Note, issues labeled with a severity must be mitigated and resolved within specific time frames to meet the SLO. As EMs are the DRIs for prioritizing infradev work, PMs should familiarize themselves with the infradev process and Board . Other resources PMs can consult to identify and prioritize Infradev issues include: Error Budgets and associated dashboards The weekly triage report emailed to PMs now includes infradev items to prevent missing SLOs. Largest Contentful Paint metrics to monitor application performance. While not required, PMs are encouraged to listen in on Incident Management calls for incidents related to their product areas to 1) build empathy with the SRE team by gaining insight into how they handle incidents 2) gain a better sense of the impact of the incident to their customer base, and 3) identify improvements to their product areas, whether technical or feature-related, that could have prevented the incident. PMs are not expected to be in the decision-making path on actions taken to resolve the incident. They are there to listen and learn rather than attempting to decide/influence the course of resolution. After incidents involving their product area, PMs are also encouraged to engage in the Incident Review , including attendance at the Sync Incident Review call if their incident is scheduled. PMs can periodically review incidents via the Production Incident Board Enterprise Customer Needs Enterprise customers interested in adopting SaaS may have common hard requirements to be able to use the product. For example, large enterprises may need certain security related features, such as Audit Logs, available before their security team will agree to the use of GitLab.com. This can also be about more than just features; it may include how and where we apply features so they can administrate their GitLab instance at enterprise-scale. For instance, permission management and shared configurations are best implemented top-down first instead of Project-up to meet the requirements of large organizations who may have 100s or 1000s of projects and only a small handful of people to perform these system-wide administrative tasks. In order to encourage more Enterprise adoption of GitLab.com, prioritize these common ‚Äúhard-blockers‚Äù to adoption over ‚Äúnice to have‚Äù features. PMs can use customer interviews to hone in on which issues are hard blockers to adopting SaaS vs more ‚Äúnice to have‚Äù features that can be delivered later. To track hard adoption blockers, use the ~‚ÄúGitLab.com Enterprise Readiness‚Äù label within the GitLab-Org and GitLab-com groups. SaaS Features There are a few special considerations when it comes to delivering features for SaaS. In order to achieve parity between SaaS and Self-managed installations PMs should prioritize efforts to eliminate existing feature gaps that exist across the two installations . Additionally, new features should ship for SaaS and self-managed at the same time. Features should be implemented at the group level first, before being implemented at the instance level, so that they will work across both self-managed and SaaS . Finally, in order for new features to be adequately monitored, they should include appropriate logging and observability , which makes troubleshooting much easier. Working with Your Group As a product manager, you will be assigned as the stable counterpart to a single group . At GitLab we abide by unique, and extremely beneficial guidelines when interacting with our groups. These include: Product managers are the DRIs for overall work prioritization but work collaboratively with their EM, UX, and QEM stable counterparts to ensure the right priorities from each work type are considered as each has a different DRI. Product Managers are responsible for communicating overall priority. Product Managers provide the what and when for feature work. Engineering (UX, Backend, Frontend, Quality) provide the how. This process is documented as part of our monthly product , engineering and UX cadence. We define stable counterparts for each of these functions within a group. As an all-remote company, our crispness when it comes to responsibilities throughout the Product Delivery process was born out of necessity, but it pays untold dividends. Some of the benefits include: We avoid the ambiguity in handoffs between teams We avoid the confusion of many responsible individuals We avoid the slowness of consensus driven decision making We avoid the disruption of frequent context switching We gain the rigidity to be consistent We gain the freedom to iterate quickly From Prioritization to Execution As described above, prioritization is a multi-faceted problem. In order to translate the priorities of any given group into action by our engineering teams, we need to be able to translate this multi-faceted problem into a flat list of priorities for at least the next release cycle. Product Managers are responsible for taking all these prioritization considerations and creating a clear, sequenced list of next priorities. This list should be represented as an issue board so that each team has a clear interface for making decisions about work. From this list, Product Designers, Engineering Managers and Product Managers can work together to determine what items will be selected for work in the immediate future. This does not mean that items will be addressed in strict order - Product Designers, EMs and PMs need to be cognizant of dependencies, available skill sets, and the rock/pebbles/sand problem of time management to make the best decisions about selecting work. Reviewing Build Plans Together with your Engineering Manager, you will have an important role in ensuring that the Build Plans defined for issues are created with iteration in mind. Iteration is highly valuable for the following reasons: It can result in discovering ways to parallelize effort, resulting in less team WIP and increase throughput It can result in shipping something of value during an iteration rather then delaying everything It can re-risk unknown unknowns by bringing them to light sooner in the development process Prioritizing for Predictability As a company we emphasize velocity over predictability . As a product manager this means you focus on prioritizing, not scheduling issues. Your engineering stable counterparts are responsible for velocity and delivery. However, there are instances when there is desire for predictability, including: Security , Bugs and Infra priorities with SLOs Customer Commitments Infrastructure projects with IACV driver impact or those that result in significant cost savings for gitlab.com Infrastructure projects with customer commitment or heavily upvoted should be given a priority indicative of other customer commitments Vision or Direction items for a launch As the DRI for milestone prioritization , it is the Product Manager‚Äôs job to prioritize for predictability when it is needed. You should do so by ensuring you prioritize a deliverable, and its dependencies, so that it can reasonably be expected to be delivered by any committed dates. If there is time pressure to hit a date, the PM should also explore de-scoping the issue to meet the deadline, rather than pressuring engineering to move abnormally fast or cut corners. Private tools and dashboards for monitoring and KPI tracking These information sources may be useful to help you prioritize. Feature usage EE usage : dev.gitlab.org account Grafana : Google gitlab.com account Kibana : dev.gitlab.org account S3stat : GitLab 1Password account Sentry : dev.gitlab.org account Global Prioritization Individual product managers must consider, and advocate for global optimizations within the teams they are assigned to. If your assigned team requires expertise (remember everyone can contribute) outside the team you should make all reasonable efforts to proceed forward without the hard dependency while advocating within the product management team for increased prioritization of your now soft dependencies. Execution of a Global prioritization can take many forms. This is worked with both Product and Engineering Leadership engaged. Either party can activate a proposal in this area. The options available and when to use them are the following: Rapid action - use when reassignment isn‚Äôt necessary, the epic can have several issues assigned to multiple teams Borrow - use when a temporary assignment (less than 6 months) to a team is required to help resolve an issue/epic Scope Reassignment - use when scope that will take longer than 6 months to deliver is a high priority and the team member reporting structure does not need to change to accomplish the effort. Realignment - use when a permanent assignment to a team is required to resolve ongoing challenges. This has the highest impact to team members and should be considered if other options cannot achieve the desired goal. We strive to hire team members in the groups that will need them most. We have found the following methods less successful in ensuring completion of work that warrants global prioritization: Working Groups - This method involves convening a group of individuals who maintain full-time responsibility to other Product Groups and completing work as part of the working group structure. This method isn‚Äôt preferred for completing product improvements, instead it can be utilized to scope work, or determine plans for future product delivery. Fan Out Prioritization - This method of prioritization involves communicating a global prioritization to a number of Product Groups in an effort to ensure each individual product group‚Äôs PM prioritizes the work in the time frame you‚Äôd prefer. This method requires significant coordination costs and puts delivery at risk due to the lack of central prioritization responsibility. In most cases it is preferred to execute a scope reassignment, borrow or realignment to complete the improvements. Planning and Direction As a PM, you must plan for the near term milestones (more detailed) as well as for the long term strategy (more broad), and everything in between. While monthly milestone planning is done in GitLab, longer horizon planning (1-3 years) is done in direction pages. This will enable you to efficiently communicate both internally and externally how the team is planning to deliver on the product vision . Managing your Product Direction Documenting a Section, Stage, Group and Category direction is critical to communicating where we are heading and why to all of our stakeholders. This is especially important to the members of your Product Group. Establishing a direction for stakeholders (including team members) to participate in, and contribute to ensures there is a concrete connection to ‚ÄúWhy‚Äù we are iterating and how it furthers GitLab‚Äôs mission . Here are some of those connections: Improving Product Performance Indicators - Usage represents market capture (whether paying or not), and the start of our dual fly-wheel. For existing customers that market capture in new capabilities also represents increased retention and because of the benefits of a single application - user satisfaction. Improving Competitiveness against alternative DevOps tools - Leads to increased Stages Per user, and sales as they add to our ‚ÄúIncrease Operational Efficiency‚Äù As a Product Manager you can highlight these connections in: Direction Content and Overview Videos Weekly Meetings Individual Issue Descriptions Planning Issues Kickoff Videos Customer Discovery Interview Summaries Communicating this connection requires a multi-channel approach. We should strive to share and communication about the connection to our Direction warrants consistent reinforcement. Section and Stage Direction Section leaders are responsible for maintaining Direction pages that lay out the strategy and plan for their respective section and stages. The direction pages should include topics outlined in this template . Category Direction A category strategy is required which should outline various information about the category including overall strategy, status, what‚Äôs next, and the competitive landscape. The category strategy should be documented in a handbook page, which allows for version control of the category strategy as well as the ability to embed video assets. One of the most important pieces of information to include in the category strategy is a tangible next step or MVC and a clear description of focus and out-of-focus/maintenance areas. Your category strategies should contain short paragraphs with lots of references to specific epics and issues. Referencing topics, instead of features is encouraged as it‚Äôs more stable over time. We use this category strategy template as the outline for creating the handbook pages. If additional headings are needed you are empowered to create and populate them in your category strategy. You must keep these categories in sync with categories.yml and for new categories. Category direction should be reviewed on a regular basis (at least monthly) by the responsible product manager. To indicate the last time a category direction page was reviewed, please ensure pages include Content Last Reviewed: yyyy-mm-dd at the top of the category content. Update this date with every review, even if other content on the direction page has not changed. You should link to your category strategy from your stage strategy page. For categories that have already shipped, and that have a marketing product page, categories.yml should link to the product page. Inside of the categories.yml file there are dates assigned for either achieved or anticipated maturity achievement. These should be kept inline with communicated dates for achievement and updated as required. If the category has developed a UX Roadmap we recommend the product designer to create a merge request to incorporate UX Roadmap themes into the category direction page roadmap. Assign the MR to the PM for review and merge. Navigating cross-stage or cross-section direction pages In some cases there may be direction pages that span multiple stages or sections. A direction page that summarizes the collective vision as well as all the contributors of that direction is critical to maintain transparency and adequate assignment of ownership. There are several examples of these types of direction pages today: Software Supply Chain Security Direction AutoDevOps Direction Monorepo Product Direction Versioned Dependencies Direction Customizable Dashboards Direction The steps for creating and managing a cross-section or stage direction are: Create a direction page merge request adding the direction page to the GitLab direction directory Select the category change template in the merge request Follow the process for category changes Add CODEOWNERS by adding an entry with the direction page link and the page DRI GitLab Handle. Once approved, @ all relevant product managers on the addition Once the direction page has been added, there needs to be an assigned DRI for maintaining monthly updates for the page. It is the DRIs responsibility to ensure the shared direction page is regularly reviewed and is up to date. This requires cross-section / cross-stage collaboration from the DRI. What makes a Product Direction issue? You should use the ~direction label together with category and section labels to mark epics and issues that fall into the given direction. Product Direction items (i.e., with the label) should be direction-level items that move the strategy forward meaningfully. This is up to the PM to set the bar for, but there should be a clear step forward with real user value. It‚Äôs important to note here that your plan is not simply a list of new features and innovation. Those are included for sure, but so are issues related to all of your sensing mechanisms . A category upgrade from minimal to viable or delivery of a top customer issue (for example) can contribute to your plan just as much as a brilliant new innovative feature can. It‚Äôs up to PMs to balance this through a coherent longer-term strategy. Conversely, in a broad sense anything could move the plan forward in a general way. Finally, issues are the substance of your plan. Ensure you are applying the label to both revelant epics and its issues. Communicating dates As product managers, a core job is to set the correct expectations. We do this typically through discussing our direction and assigning issues to milestones. When you need to communicate specific dates, it‚Äôs recommended doing it with limited visibility internally or directly to the customers. When you need to communicate specific dates use calendar year (CY) dates . Fiscal year (FY) does not translate well outside the company. Accordingly, the direction pages are expected to refer to specific issues only for the next 3-4 months. Everything beyond that should discuss the topic, not specific issues. Planning is indispensable but adjust, iterate Creating a thoughtful direction for your section, stage, or category is a useful thought exercise that can help focus efforts, aid in prioritization, and get large groups of people on the same page. But beware of simply executing your long term plan. Our industry is incredibly dynamic, and we learn new things every day that can and should cause us to re-think our long term plans. Delivery follows discovery We should ship what brings value to our customers, not what is easy to ship. Stay focused on creating value each and every milestone, and be quick to adjust your longer term direction as you learn more. When working on a larger theme, you should start with validating the end state knowing that it will change as you start shipping features and you learn more from actual usage. Once the final vision is validated, you should work with your designer and engineering counterparts to break it down to the smallest possible iterations in order to ship value quickly. You might still prefer to validate the first ‚Äúmilestone‚Äù before getting into delivery. It‚Äôs totally fine to never ship the initial vision and refine the vision after every iteration. A feature not built is much more valuable than a feature that is built but never used. Maturity Plans For each category, we recommend tracking the improvements required to advance to the next level of maturity . You are welcome to track maturity plans either with ~maturity::... labels or maturity issues. Maturity plans are highly encouraged - but not required - for non-marketing categories. Planning and OKRs Product groups may choose to have OKRs . To use them effectively, you should have plans for the next three months in terms of driving specific product metrics through discovery and delivery actions. You should discuss the product metrics with your manager, your design and engineering counterparts and the actions to reach the results with your design and engineering counterparts. Planning Issue for Milestone For each milestone, the planning quads come together to scope and plan work for the group for the upcoming milestone. Planning begins asynchronously with the creation of the planning issue. The planning issue is the SSOT for communication and all resources that are needed to plan a successful milestone. There are many ways to achieve to plan a milestone that should be curated based on the needs of the team. Below are a few examples of planning issues from groups acorss R&D to aid you in creating one that works best for your team. Verify::Pipeline Execution Verify::Testing Monitor::Respond Create::Code Review Create::Editor Data Stores::Database As you adapt your own issue, it is recommended you apply the label planning issue to aid in tracking and to incorporate our Product Principles into the process. Managing Upcoming Releases Refer to the Product Development Timeline for details on how Product works with UX and Engineering to schedule and work on issues in upcoming releases. Planning for Future Releases There are two non-exclusionary ways to plan and communicate work for future releases Planning with boards As a Product Manager you can maintain prioritization of your groups issues using a fully prioritized issue board where the ordering of the issues reflects their priority. Planning with milestones Product Managers can assign milestones to issues to indicate when an issue is likely to be scheduled and worked on. Still, whether an issue can be delivered within a milestone is the decision of the engineering team. As we consider more distant milestones, the certainty of the scope of their assigned issues and their implementation timelines is increasingly vague. In particular, issues may be moved to another project, disassembled, or merged with other issues over time as they bounce between different milestones. The milestone of an issue can be changed at any moment. The current assigned milestone reflects the current planning, so if the plan changes, the milestone should be updated as soon as possible to reflect the changed plan. We make sure to do this ahead of starting work on a release. Capacity is discussed between the PMs and the engineering managers. There are helper labels to signals these plans like ~next::1-3 releases and its variants. Special milestones In addition, we have two special milestones: Backlog and Awaiting further demand . Product Managers assign these issues to milestones that they have reviewed and make sense, but do not fit within the upcoming release milestones due to either a lack of comparative urgency or because we have not yet seen enough user demand to prioritize the item yet. The best way to demonstrate urgency on either of these items is to vote on them and, if possible, add comments explaining your use case and why this is important to you. Recommendation for when to change ‚ÄòAwaiting further demand‚Äô: Always focus on the overall value of the feature. Do you have a good understanding of the user problem? Do you have a good understanding of the impacted user base? Was the proposed solution validated? Issues with the ‚ÄòAwaiting further demand‚Äô label often mean poorly understood requests that require more information from our users and the market. Often public feedback only comes from a small percentage of people using or evaluating a feature or product. You should always consider reaching out directly to our users to learn more about their use cases. Recommendation when changing a previously planned issue to Backlog : When moving a previously planned issue to Backlog , especially one planned for within the next release or two, consider the message that this may be sending to parties that were interested in this feature. In some cases, they may have been depending or planning upon the issue to be delivered around the assigned milestone, and with the change to Backlog that is now unlikely to occur. In these instances, it is best to concisely explain the rationale behind the change in a comment, so the community can understand and potentially respond with additional justification or context. It is also encouraged to move the issue to the Backlog as soon as it is clear that it will not be scheduled in the near future. This will help with understanding the change, as it will not seem like a last minute change. Communicating clearly changing priorities might encourage the community to contribute the issue to GitLab. Again, the milestone of an issue can be changed at any moment, including for both of these special milestones. Shifting commitment mid-iteration From time to time, there may be circumstances that change the ability for a team to ship the features/issues they committed to at the beginning of the iteration. These steps also apply when an issue is broken into multiple issues. When this happens, as a PM you must coordinate with your EM counterpart that the impacted issues and their milestones are updated to reflect the new reality (for example, remove deliverable tag, update milestone , etc.). Additionally, notify your manager of the shift. Utilizing our design system to work autonomously Our design system provides the means to work autonomously, without always needing UX insight, feedback and design. When problems can be solved using an already documented paradigm, you don‚Äôt need to wait for UX approval to bring an issue to a reasonable state within a first iteration. If lingering questions remain, subsequent iterations can address any shortcomings the feature might have. Always consider that with a dedicated product designer, it‚Äôs much faster and cheaper to iterate on a design than to re-implement it. At the same time, not everything needs a design, and the design system is here to support your engineers and you in those cases. Iteration Strategies Iteration is a core value of GitLab, and product management has a central role to play in it. Iteration should be apparent as we deliver new features in MVCs, but it has implications for discovery too. As solution validation can move much faster than delivery, we should aim to validate features before building them. At this point, the feature validated is likely way bigger than an MVC if we would build it. We should pay special attention as product managers to still aim at iterative delivery after a bigger feature-set got validated, as delivered features provide the final validation. For example, once a direction is validated, we can start the delivery by documentation. As product managers we should aim to iterate as part of solution validation, and while delivering already validated solutions too. Here are several strategies for breaking features down into tiny changes that can be developed and released iteratively. This process will also help you critically evaluate if every facet of the design is actually necessary. Workflow steps As part of design and discovery, you likely created a minimal user journey that contains sequential steps a user is going to take to ‚Äúuse‚Äù the feature you are building. Each of these should be separated. You can further by asking yourself these questions: Can/is it desirable to perform this action via the UI or can we use a non-UI approach as a start (for example, CLI, API or .csv download of data)? This is a great starting point before adding UI components that achieve the same thing. Will there be different UI paths to perform the same task? Identify which are the most useful and which are the easiest to implement. Weight both factors when determining which to start with, and build from there. User operations View, Create, Update, Remove and Delete are actions users take while interacting with software. These actions naturally provide lines along which you can split functionality into smaller features. By doing this, you prioritize the most important actions first. For example, users will likely need to be able to visually consume information before they can create, update, remove, or delete. Functional criteria Often, the criteria for features are built on is implicit. It can help to use a test-driven development mindset where you write the tests and the outcomes you need from the software before building the software. Writing these tests can uncover the different criteria you need the development team to meet when building the new feature. Once you‚Äôve outlined these tests, you may be able to use them to continue to break down the feature into smaller parts for each test. Here are a few examples: What is the default behavior when there is no data (empty/null state)? Are there automatic actions or events that occur as part of your feature? Write them down, and identify those that can be done manually by the user before adding automation. Will users of different roles have unique experiences? Can you prioritize and build one of these experiences first? (for example: guest, user, developer, maintainer). Do users want to be able to customize their view of information? Define all of the customizations you want to offer, and build them one at a time (for example, toggle on/off, filter, sort, search). Exception & error cases Software often fails and can fail in different ways depending upon how it is architected. It is always best to provide the user with as much information as possible as to why something did not behave as expected. Creating and building different states to handle all possible errors and exceptions can easily be broken down into individual issues. Start by creating a generic error state to display when anything goes wrong, and then add on to handle different cases one by one. Remember to always make error messages useful , and add additional error messages as you identify new error states. Breaking down the UI Breaking down a design into pieces that can be released iteratively is going to depend on what you are building. Here are a few helpful questions to guide that process: What components already exist that you can reuse to go faster? What constitutes ‚Äúextra styling‚Äù? Is there a way to display the information you need to display plainly and then add details later? Do you have lots of interactions in the design that make the UX lovable? Can you pull those out into separate issues and add them iteratively? (e.g. hover states, drag & drop, toggles, options to show/hide info, collapse/expand, etc) Refactors Continuously improving the software we write is important. If we don‚Äôt proactively work through technical debt and Deferred UX as we progress, we will end up spending more time and moving slower in the long run. However, it is important to strike the right balance between technical debt, deferred UX, and iteratively developing features. Here are some questions to consider: What is the impact if we do not refactor this code right now? Can we refactor some of it? Is a full re-write necessary? Why do we need to use that new technology? (You may need to ask WHY multiple times to get to the root of the problem) Separate announcement from launch For large projects, consider separating the announcement from the actual feature launch. By doing so, it can create more freedom to iterate during the customer rollout. For example, you could announce in advance to give customers ample notice, and then roll it out to new customers first, then to existing Free customers, then to existing paid customers. Or you could do the opposite, and roll it out to customers first, before announcing broadly, to ensure the user experience is great before making a marketing splash. When considering dates for a product announcement or launch that may impact our Field team, consider the blockout restrictions recognized by the Field team to ensure there won‚Äôt be any major disruption to the business near quarter end. Four phase transition Sometimes the objective is to cut over from one experience, or one system, to another. When doing so, consider having four transition phases rather than a hard cut over. The phases are: 1) Old experience. 2) Run the old experience and new experience side-by-side, with the old experience the default, and the new experience is gradually rolled out to a subset of users. 3) Run them side-by-side, with the new experience the default for the majority, but the old experience is still available as a fallback in case of problems. 4) Deprecate the old experience and offer only the new experience. This strategy enables teams to have more flexibility and demonstrate more iteration in the rollout, with reduced risk. Iterate to go faster When something is important, it is natural to want to launch it all at once to get to the end game faster. However, big bang style launches tend to need everything perfect before they can happen, which takes longer. With iteration you get feedback about all the things that aren‚Äôt a problem and are done enough. It‚Äôs better to launch in small increments, with a tight feedback loop, so that the majority of users have a great experience. This tends to speed up the overall timeline, rather than slow it down. Remote Design Sprint A Design Sprint , is a 5-day process used to answer critical business questions through design, prototyping and testing ideas with customers. This method allows us to reduce cycle time when coming up with a solution. As an all-remote company we run Remote Design Sprints (RDS) . Check out our guidelines for running an RDS to determine if it‚Äôs the right approach for the problem at hand. Spikes If you‚Äôre faced with a very large or complex problem, and it‚Äôs not clear how to most efficiently iterate towards the desired outcome, consider working with your engineers to build an experimental spike solution . This process is also sometimes referred to as a ‚Äútechnical evaluation.‚Äù When conducting a spike, the goal is write as little code within the shortest possible time frame to provide the level of information necessary the team needs to determine how to best proceed. At the end of the spike, code is usually discarded as the original goal was to learn, not build production-ready solutions. This process is particularly useful for major refactors and creating architecture blueprints . Feedback issues When launching a feature that could be controversial or in which you want to get the audience‚Äôs feedback, it is recommended to create a feedback issue. Timeline: Create the issue and include in the release post. If announcing in Slack or doing dogfooding, include a link to the feedback issue Leave the issue open for at least 14 days after launch Respond and catalog the feedback into separate issues Close the issue once the time frame has passed and summarize the learnings from the feedback issue Here are some examples of feedback issues: WebIDE Fonts master -> main Feedback issue considerations Feedback issues are intended to collect feedback from the wider community and users. In some cases, internal user will be posting on behalf of users and customers. As a result we need to consider the following: Feedback issues that are public cannot contain SAFE information A linked confidential issue for Field feedback can be used, if needed, to support the exchange of customer details and feedback Leverage internal comments as needed if customer details are being shared Other best practice considerations Consider the following to improve iteration: Successfully iterating should mean you‚Äôre delivering value in the most efficient way possible. Sometimes, this can mean fixing an underlying technical issue prior to delivering a customer facing feature. Wherever possible, consider reuse of components that already exist in the product. A great example of this was our approach to creating our Jira importer, which reused the Jira service integration. Reuse also aligns well with our efficiency value. Avoid technical dependencies across teams, if possible. This will increase the coordination cost of shipping and lead to a slow down in iteration. Break down silos if you notice them and consider implementing whatever you need yourself. Consider a quick POC that can be enabled for small portion of our user base, especially on GitLab.com. An example of this was search, where it was originally enabled just for a few groups to start, then slowly rolled out. Great collaboration leads to great iteration. Amazing MVCs are rarely created simply by product managers, they often arise out of collaboration and discussion between product, engineering, design, quality, etc. Keep the initial problem statement front and center for the team. Tight problem statements enable the team to identify a tight, iterative solution. Bring data to the table early to help the team triangulate on the smallest iteration that will have the largest impact in solving the identified problem. If the project is multi-phase, consider iterative targets and guardrails to help the team focus on the next iterative milestone, rather than the final end state goal. If your team needs to do repetitive work on behalf of customers, partners, or other GitLab teams, consider using a framework approach so that dependent teams can self-serve. Community participation Engaging directly with the community of users is an important part of a PM‚Äôs job. We encourage participation and active response alongside GitLab‚Äôs Developer Relations team . Conferences A general list of conferences the company is participating in can be found on our corporate marketing project. There are a few notable conferences that we would typically always send PMs to: KubeCon Atlassian Summit GitHub Universe DevOps Enterprise Summit Google Next AWS Reinvent Velocity If you‚Äôre interested in attending, check out the issue in the corporate marketing site and volunteer there, or reach out to your manager if you don‚Äôt see it listed yet. Stakeholder Management What is a Stakeholder? A stakeholder, or stable counterpart, is someone that is outside of your direct team who meets one or more of the following: Is directly or indirectly impacted Has the ability to stop, delay, or cancel Examples of stakeholders include Leadership, Sales, Marketing, Customer Support, and Customer Success. You may have stakeholders in any area of GitLab depending on your focus area and the specific issue. Stakeholders are also present outside of GitLab, for example, when a feature is being developed for a specific customer or set of customers. If you‚Äôre not sure who the stakeholder is to collaborate with or keep informed, visit product sections, stages, groups, and categories . Updated SSOT for stakeholder collaboration Stakeholder collaboration and feedback is a critical competitive advantage here at GitLab. To ensure this is possible, and facilitate collaboration, you should maintain an updated single source of truth (SSOT) of your stage direction, category strategies, and plan, at all times. This equips anyone who wants to contribute to your stage‚Äôs product direction with the latest information in order to effectively collaborate. Some sections and teams use the scheduled Direction Update issue template to remind themselves of this task. Actively and regularly reach out to stakeholders. Encourage them to view and collaborate on these artifacts via these (non-exhaustive) opportunities: Engage with users in epics, issues, and merge requests on GitLab.com. Meet with customers directly. Participate in the CAB . Talk with GitLab team-members using GitLab. Talk with other PMs and Product leadership to align your stage‚Äôs product direction with the rest of GitLab. Here is some guidance for new PMs to ensure your stage direction, category strategies and plan are up-to-date and visible to critical stakeholders: Seek feedback from the CAB once every six months. Present your plan to your manager once a month. Present the plan and stage/category strategies to your stable counterparts Present your stage strategy and plan in a customer meeting once every two weeks. Present changes to your stage strategy, category strategies, and plan to your stage group weekly meeting once a month. Working with customers Customer meetings It‚Äôs important to get direct feedback from our customers on things we‚Äôve built, are building, or should be building. Some opportunities to do that will arise during sales support meetings . As a PM you should also have dedicated customer discovery meetings or continuous interviews with customers and prospects to better understand their pain points. As a PM you should facilitate opportunities for your engineering group to hear directly from customers too. Try to schedule customer meetings at times that are friendly to your group, invite them, and send them the recording and notes. If you‚Äôre looking for other ways to engage with customers here is a video on finding, preparing for, and navigating Customer Calls as a Product Manager at GitLab . Sales support meetings Before the meeting , ensure the Sales lead on the account has provided you with sufficient background documentation to ensure a customer doesn‚Äôt have to repeat information they‚Äôve already provided to GitLab. During the meeting , spend most of your time listening and obtaining information. It‚Äôs not your job to sell GitLab, but it should be obvious when it‚Äôs the time to give more information about our products. For message consistency purposes, utilize the Value Drivers framework when posing questions and soliciting information. After the meeting: Create an interview snapshot summarizing the meeting in the gitlab-com/user-interviews project. This project is private so that detailed and unredacted feedback can be shared internally. Link the Google Doc where detailed notes were taken. Create or update related issues to publicly document feedback. The synthesis of feedback from multiple meetings should happen publicly in an epic or issue. Customer discovery meetings Customer discovery meetings aren‚Äôt UX Research. Target them to broad-based needs and plan tradeoff discussions, not specific feature review. There are two primary techniques for targeting those topics: Top Competitors - Identify the top 3 competitors in your categories and talk to customers using those competitor asking: What is missing to have you switch from X to us? We‚Äôre not aiming for feature parity with competitors, and we‚Äôre not just looking at the features competitors talk about, but we‚Äôre talking with customers about what they actually use, and ultimately what they need . User Need - Identify GitLab users from key customers of your group‚Äôs categories and features. Solicit them for what they love about the features and ask about their current pain points with both the features as well as the surrounding workflows when using those components of GitLab? Follow the below guidance to prepare and conduct Customer Discovery Meetings: Set up a meeting: Identify what you‚Äôre interested in learning and prepare appropriately You can find information about how customers are using GitLab through Sales and version.gitlab.com. Sales and support should also be able to bring you into contact with customers There is no formal internal process to schedule a customer meeting, however you can check this template for gathering questions from interested parties and for capturing the notes during the customer discovery meetings. During the meeting: Spend most of your time listening and documenting information Listen for pain points, delightful moments and frustrations Read back and review what you‚Äôve written down with the customer to ensure you‚Äôve captured it correctly. After the meeting: Document your findings. Create a folder (sharable only within GitLab) in Google Drive with a structure as follows: Customer Meetings Customer Name A 2020-04-01 agenda (Google Doc) artifacts (folder for docs, images, etc.) 2020-10-03 Customer Name B Competitive Research Vendors Vendor A summary (Google Doc, optional) 2020-04-01 2020-10-03 Vendor B Projects product-10132-code-scan-results (reference GitLab issue number) ux-13840-selector-widget Share your findings with your fellow product managers and the sales and customer success account teams for the customer Make appropriate adjustments to category strategies, feature epics, and personas You can find some additional guidance on conducting Customer Discovery Meetings from these resources: How to Interview Your Customers Effective User Interviews Sourcing customers PMs should also feel free to collect and evaluate customer feedback independently. Looking at existing research can yield helpful themes as well as potential customers to contact. You can use the following techniques to source customers directly: GitLab Solution Architects know our customers the best, especially from a technical perspective. GitLab Issues customers will often comments on issues, especially when the problem described by the issue is a problem they are experiencing firsthand. The best strategy is to capture their feedback directly on the issue, however, there are times when this is not possible or simply doesn‚Äôt happen. You can find alternative contact info by clicking on the user‚Äôs handle to see their GitLab user page; this page often includes contact information such as Twitter or LinkedIn. Another option is to directly mention users in issues to engage async. In popular issues you can just leave a general comment that you‚Äôre looking for people to interview and many will often volunteer. Customer Issues Prioritization Dashboards: The customer issues prioritization framework aggregates customer data with the issues and epics that they have requested. When viewing the dashboard , double click on the issue or epic of interest within the ‚Äúpriority score by noteable‚Äù table then scroll down to ‚ÄúQA Table - User request weighting by customer‚Äù to see the specific customers that are interested in the issue or epic. GitLab.com Broadcast Messages Broadcast Messaging is a great tool for acquiring customer feedback from within the product. You can leverage this workflow to use broadcast messaging. GitLab Sales and Customer Success You can ask for help in Slack customer success channel or join the Field Sales Team Call and the All CS Team Call to present a specific request via the Zoom call. Customer Success Managers (CSM) If a customer has a dedicated CSM, they may also have a regular meeting with a CSM. These meetings are a great opportunity to spend 15 minutes getting high-level feedback on an idea or problem. In Salesforce, CSMs are listed in the Customer Success section in the customer‚Äôs account information. CSMs are also very familiar with the feature requests submitted by their customers and can help identify customers that may be interested in the feature you are working on. Zendesk is a great tool to find users who are actively making use of a feature and either came across a question or an issue. Users who‚Äôve had recent challenges using the product really appreciate PMs taking the time to learn from their experience. This establishes that we are willing to listen to users, even if they are not having a great experience. This is also a great opportunity to discuss the roadmap and provide context so that users understand what we are going to improve. The best way to request a chat is through the support ticket; however, you can also click on the user that initiated the interaction and their contact information will display on the left hand side panel. If you don‚Äôt have a Zendesk account, see how to request a light agent Zendesk account . You can use Zendesk‚Äôs trigger feature to receive email alerts when specific keywords relevant to your product area are mentioned in a support ticket. Additionally, it is possible to create a simple dashboard that lists all the currently active support tickets that match the trigger. Reach out in #support_escalations to receive some help in setting this up. Social Media can also be effective. If your personal account has a reasonable number of connections/followers, you can post your desire to connect with users on a specific question directly. When posting, remember to include the subject you want to discuss as well as how people can reach out. You can also reach out to the #social-media channel to have your tweet retweeted by the @gitlab account. If you want to reach a wider audience, consider asking a community advocate to re-post using the official GitLab account for the relevant platform. You can reach advocates on the #community-advocates Slack channel. You can also reach out to authors of articles related to tech your team is working on, via various publications such as Medium . A clear and brief email via the publication website or LinkedIn is a good way to engage. You‚Äôre able to request a LinkedIn Recruiter license . This Unfiltered video and slide deck provide an overview on how to use LinkedIn Recruiter to source participants for your study. If you‚Äôve tried these tactics and are still having challenges getting the customer feedback you need, connect with your manager for support and then consider leveraging the UX Research team . Additionally, you can connect with Product Operations directly or by attending Product Operations Office Hours for troubleshooting support. Non-users are often more important than GitLab users. They can provide the necessary critical view to come up with ideas that might turn them into GitLab users in the end. The best non-users are the ones who don‚Äôt even plan on switching to GitLab. You can reach these people at local meetups, conferences or online groups like, Hacker News. In every such case, you should not try to interview the user on spot, instead organize a separate meeting where nobody will be distracted, and both of you can arrive prepared. Customer Advisory Board meetings One specific, recurring opportunity to get direct feedback from highly engaged customers is the GitLab DevOps Customer Advisory Board . You may be asked by the CAB to present your stage at these meetings. Here are some guidelines when doing so: You may be asked by the CAB to present your stage or a specific product offering at these meetings. Here are some guidelines for presenting: Product Focused Highlights: All presentation materials should be focused on products we plan to launch or evaluating products we have available to customers. Emphasize Dialogue over Monologue: Structure your presentation to encourage meaningful two-ways discussions. Prepare Targeted Questions: Develop 2-3 specific, through provoking questions to engage members in conversation. These questions should be focused on presentation, strategic decisions GitLab is currently grappling in your stage that you would like to gather customer feedback on, or a question related directly to customer workflows. Connect to Previous Feedback: Reference previous feedback you have received from advisory meetings in the past. This will help illustrate to CAB members the value of their time and that GitLab takes their recommendations into consideration. Prompt Follow Through: Document key insights and actions items during your session. Be Prepared: Be sure to prepare for the meeting ahead of time independently. Please review GitLab Product Customer Advisory Board Page for more details. Working with (customer) feature proposals When someone requests a particular feature, it is the duty of the PM to investigate and understand the need for this change. This means you focus on what is the problem that the proposed solution tries to solve. Doing this often allows you to find that: An existing solution already exists within GitLab Or: a better or more elegant solution exists Do not take a feature request and just implement it. It is your job to find the underlying use case and address that in an elegant way that is orthogonal to existing functionality. This prevents us from building an overly complex application. Take this into consideration even when getting feedback or requests from colleagues. As a PM you are ultimately responsible for the quality of the solutions you ship, make sure they‚Äôre the (first iteration of the) best possible solution. Competition channel When someone posts information in the #competition channel that warrants creating an issue and/or a change in features.yml , follow this procedure: Create a thread on the item by posting I'm documenting this Either do the following yourself, or link to this paragraph for the person picking this up to follow If needed: create an issue Add the item to the features.yml If GitLab does not have this feature yet, link to the issue you created Finish the thread with a link to the commit and issue Reaching out to specific users or accounts based on GitLab usage You may want to interview a specific account because they are exhibiting atypical usage patterns or behaviors. In this case, request Support to contact GitLab.com user(s) on your behalf . If it is the weekend, and the contact request is urgent as a result of an action that might affect a users‚Äô usage of GitLab, page the CMOC Assessing opportunities Opportunity canvas One of the primary artifacts of the validation track is the Opportunity Canvas. The Opportunity Canvas introduces a lean product management philosophy to the validation track by quickly iterating on level of confidence, hypotheses, and lessons learned as the document evolves. At completion, it serves as a concise set of knowledge which can be transferred to the relevant issues and epics to aid in understanding user pain, business value, the constraints to a particular problem statement and rationale for prioritization. Just as valuable as a validated Opportunity Canvas is an invalidated one. The tool is also useful for quickly invalidating ideas. A quickly invalidated problem is often more valuable than a slowly validated one. Please note that an opportunity canvas is not required for product functionality or problems that already have well-defined jobs to be done (JTBD) . For situations where we already have a strong understanding of the problem and its solution, it is appropriate to skip the opportunity canvas and proceed directly to solution validation. It might be worth using the opportunity canvas template for existing features in the product to test assumptions and current thinking, although not required. Reviews Reviewing opportunity canvases with leadership provides you with an opportunity to get early feedback and alignment on your ideas. To schedule a review: Contact the CProdO EBA to schedule a 25 minute meeting. Let the EBA know if you are scheduling a comparative or singular Opportunity Review The VCProdO and VP of UX should be included as required attendees. The Product Section Leader, Direct Manager, UX counterpart and Product Operations should be included as optional attendees. Complete the Opportunity Canvas(es) at least one business day before the meeting to give attendees an opportunity to review content. The attendees will review the canvas(es) in advance and will add questions directly to the canvas document(s). When the Opportunity Canvas(es) is complete, inform the meeting participants by tagging them in a post in Slack #product. Include a direct link to the canvases. During the review, feel free to present anything you‚Äôd like. For comparative reviews it‚Äôs helpful to start with your proposal for which Opportunity to pursue first. For singular reviews it‚Äôs fine to go straight to Q&A since the attendees should have reviewed the canvas in advance. References : Opportunity Canvas Template Completed Opportunity Canvas Reviews Opportunity Canvas YouTube Playlist Example Opportunity Canvas - Fine Grained Access Control (GoogleDoc) Example Opportunity Canvas - Error Tracking (Mural) Opportunity canvas lite Opportunity Canvases are a great assessment for ill-defined or poorly understood problems our customers are experiencing that may result in net new features. As noted previously, opportunity canvases are helpful for existing features, except they are tailored for new feature development which is where the Product-Opportunity-Opportunity-Canvas-Lite issue template delivers. This template offers a lightweight approach to quickly identify the customer problem, business case, and feature plan in a convenient issue. The steps to use the template are outlined in the Instructions section and for clarity, one would create this issue template for an existing feature they are interested in expanding. For example, this template would be great to use if you are evaluating the opportunity to add a third or fourth iteration to an MVC. This issue should leverage already available resources and be used to collate details to then surface to leadership for review. Once you fill out the template, you will assign to the parties identified in the issue and you can always post in the #product channel for visibility. Analyst engagement Part of being a product manager at GitLab is maintaining engagement with analysts, culminating in various analyst reports that are applicable to your stage. In order to ensure that this is successful and our products are rated correctly in the analyst scorecards, we follow a few guidelines: Spend time checking in with the analysts for your area so they are familiar with our story and features earlier, and so we can get earlier feedback. This will ensure better alignment of the product and the way we talk about it will already be in place when review time comes. Remember, analysts maintain a deep understanding of the markets they cover, and your relationship will be better if it is bi-directional. Inquire with analysts when you have questions about market trends, growth rates, buyer behavior, competitors, or just want to bounce ideas off of an expert. Make paying attention to analyst requests a priority, bringing in whoever you need to ensure they are successful. If you have a clear benefit from having executives participate, ask. If you need more resources to ensure something is a success, get them. These reports are not a ‚Äúnice to have‚Äù, ad-hoc activity, but an important part of ensuring your product areas are successful. When responding to the analyst request, challenge yourself to find a way to honestly say ‚Äúyes‚Äù and paint the product in the best light possible. Often, at first glance if we think we don‚Äôt support a feature or capability, with a bit of reflection and thought you can adapt our existing features to solve the problem at hand. This goes much smoother if you follow the first point and spend ongoing time with your analyst partners. Perform retrospectives after the analyst report is finalized to ensure we‚Äôre learning from and sharing the results of how we can do better. It‚Äôs important to be closely connected with your product marketing partner, since they own the overall engagement. That said, product has a key role to play and should be in the driver‚Äôs seat for putting your stage‚Äôs best foot forward in the responses/discussions. Engage with internal customers Product managers should take advantage of the internal customers that their stage may have, and use them to better understand what they are really using, what they need and what they think is important to have in order to replace other products and use GitLab for all their flows. We want to meet with our internal customers on a regular basis, setting up recurring calls (e.g., every two weeks) and to invite them to share their feedback. This is a mutual collaboration, so we also want to keep them up to date with the new features that we release, and help them to adopt all our own features. USAT responder outreach Each quarter, we reach out to User Satisfaction (USAT) survey responders who opted-in to speak with us. This is a fantastic opportunity to build bridges with end users and for Product Managers and Product Designers to get direct feedback for their specific product area. If a user has taken the time to share a verbatim with us and offered to have a conversation, they deserve to be followed up with - especially if that user is dissatisfied with GitLab. When we speak to users directly during this workflow, we must be mindful of Product Legal guidance and the SAFE framework , just as we would be with any other documentation or communication within Product. Overall process UX Researcher DRI opens a Responder Outreach issue and notifies Product team members in the comments that the issue is ready. Product team members go through the list of USAT responders who have agreed to a follow up conversation. Those team members either sign up for outreach or tag in Product Managers or Product Designers where appropriate. Product team members then view the sheet and confirm who they want to talk with. Product team members reach out to users and schedule interviews. Product team members add notes and video recordings from the interviews to the USAT column in this Dovetail project . Product team members mark which users they interviewed, the link to the session recording, and include any additional notes about the session in the follow up users sheet. As Product team members create or continue to work on issues related to USAT follow up interviews, they should the following label ( USAT::Responder Outreach ) to help the UX Research team track the impact of those interviews. Note: GitLab Customer Success Managers can also follow the process above, so please be mindful to coordinate with them if they reach out or if they‚Äôve already signed up to speak with a user. Users should never be contacted by more than one GitLab team member. Users should never be contacted more than twice if they do not respond to an outreach email. Instructions for product leaders Look at the USAT Follow Up Users Google Sheet that will be shared with you in an issue. Identify any users you think a Product Manager or Product Designer from your group would be interested in speaking to. Assign the specific Product Manager or Product Designer to reach out to that user by putting their name in the appropriate column. This will also serve as a ‚Äúhold‚Äù on the user and if others are interested they will need to coordinate with that team member. If you think another Product Manager or Product Designer in your group or another group would be interested in speaking to the same user, consider notifying that team member for the sake of efficiency. If you‚Äôre interested in having one of your Product Managers or Product Designers speak with a user that has already been ‚Äúclaimed‚Äù by another GitLab team member, have your Product Manager or Product Designer reach out to that team member so they can coordinate a joint conversation. We need to be mindful of our users‚Äô time and should limit this outreach to a single conversation rather than successive conversations. Instructions for Product Managers and Product Designers Another GitLab team member may put your name next to users they felt were relevant for you to speak with. If you are unable or unwilling to speak with the user, please either remove your name or find a replacement. If you see other users that have not been assigned to another team member and you feel may be relevant to speak with, assign that user to yourself. If you see other users that have been assigned to another team member, reach out to that team member and coordinate a joint conversation. It is very important you do not reach out to users that have been assigned to other team member as we want to be mindful of our users time and not risk negative sentiment due to over-communication. We are limiting these conversations to one per user for these reasons. Process for reaching out to users Calendly is the best method for scheduling users. Set up your free Calendly account if you haven‚Äôt done so. Add details to the invite description describing yourself and the conversation purpose. Also add your personal Zoom link, either via connecting your Zoom account or pasting in your personal Zoom URL. You‚Äôll need to add three extra questions to the invite form in order to ask for consent to record, example below. Please use these questions as written in the example as they closely mirror the content that has been validated by the UX Research Team. Draft an email that you‚Äôll send to users. Example copy is below. You can re-phrase things as you wish but make sure you still cover the same points as the example. BE ON TIME TO YOUR CALL . Better yet, be 2 minutes early. Be ready to coach people through getting Zoom to work properly. Make sure everyone on the call introduces themselves. If people have agreed to recording, still ask them once again if it‚Äôs OK if you record before turning it on. Obviously, do not record people who did not give consent. See our training materials on facilitating user interviews . Example email copy : Hello, My name is X and I‚Äôm the Product Manager/Designer for X at GitLab. Thank you for giving us the opportunity to follow up on your response to our recent survey. I would be very interested in speaking further about some of the points you raised in your survey response. Would you be willing to do a 30 minute Zoom call to give us some more detailed feedback on your experience using GitLab? You‚Äôd be able to schedule the call at a time convenient to you. Schedule a time for the call using this link: https://calendly.com/yourname/30min Thank you for your feedback and let me know if you have any questions. Best, Your name Copy for three extra questions in Calendly invite : To make sure we correctly represent what you say in any followup issues or discussions, we would like to record this conversation. Please indicate if you give permission to record this conversation. Yes, you may record our conversation. No, you MAY NOT record our conversation. At GitLab, we value transparency. We would love to share the recording of conversation publicly on GitLab. Please indicate whether you give your permission for the recording to be shared on GitLab. Yes, you may share the recording publicly on GitLab. No, you MAY NOT share the recording publicly on GitLab. I agree that by participating in this, and any future, research activities with GitLab, GitLab B.V. will retain all intellectual property rights in any suggestions, ideas, enhancement requests, feedback, or other recommendations I provide which are hereby assigned to GitLab B.V. Yes No After the call If multiple GitLab employees are on the call, it can be beneficial to debrief immediately afterwards. Collect all notes that were taken and Zoom recording from the interview and add them to the USAT column in this Dovetail project . If you told the user you‚Äôd follow up on anything or promised to send them further information, make sure you do so, ideally within two business days. Go back to the spreadsheet and mark that you spoke to a user in the Status column and add a link to the recording in Dovetail. If you create any epics/issues to address feedback gathered in the calls, add the label USAT::Responder Outreach and link them to the corresponding USAT responder outreach issue from that quarter. Note: It‚Äôs important to tag your USAT related issues to help tracking/reporting such as the improvement slides in Product Key Reviews. Cost profile and user experience Every Product Manager is responsible for the user experience and cost profile of their product area regardless of how the application is hosted (self-managed or gitlab.com). If a feature is unsustainable from a cost standpoint, that can erode the margins of our SaaS business while driving up the total cost of ownership for self-managed customers. If a feature is slow, it can impact the satisfaction of our users and potentially others on the platform. There are a few questions a Product Manager should ask when thinking about their features: What are the costs associated with my product area? What is the impact on the margin for each tier of GitLab.com? Consider network, compute, and storage costs Are there tools in place to help GitLab, Inc and self-managed admins optimize the cost footprint for running GitLab (e.g. node rebalancing, transitioning objects to less costly storage classes, garbage collection capabilities) Are there features and default settings that help users stay within their CI and Storage limits ? Are there configurable application limits in place for admins to enhance the availability and performance of GitLab and reduce abuse vectors ? What is the experience of users when interacting with these features on GitLab.com? Is it fast and enjoyable? These items do not all need to be implemented in an MVC, though potential costs and application limits should be considered for deployment on GitLab.com. Product Managers should also regularly assess the performance and cost of features and experiences that they are incrementally improving. While the MVC of the feature may be efficient, a few iterations may increase the cost profile. Tools to understand operational costs There are a few different tools PM‚Äôs can utilize to understand the operational costs of their features. Some of these are maintained by Infrastructure, based on the operational data of GitLab.com. Others tools, like service ping, can be utilized to better understand the costs of our self-managed users. Ultimately, each product group is responsible for ensuring they have the data needed to understand and optimize costs. Useful Dashboards to Visualize Infrastructure Costs: Access to Billing Console ( Access Request required) Service ping Your Engineering Manager, #infrafin on Slack, and the broader GitLab team Links to learn more about infrastructure cost management initiatives Infrafin Board Workflow Infrafin Board by Group Infrafin Board by Savings Amount Infrafin Cost Management Handbook Page Tools to understand end user experience Snowplow data on GitLab.com Quarterly USAT and SUS surveys Page load performance Life Support PM Expectations When performing the role of Life Support PM only the following are expected: Management of next three milestones Attend group meetings or async discussion channels Provide prioritization for upcoming milestones MVC definition for upcoming milestones Increase fidelity of scheduled issues via group discussion Ensure features delivered by the group are represented in the release post Some discouraged responsibilities: Long-term MVC definition One year plan Category Strategy updates Direction page updates Analyst engagements CAB presentations Build vs ‚ÄúBuy‚Äù As a Product Manager you may need to make a decision on whether GitLab should engineer a solution to a particular problem, or use off the shelf software to address the need. First, consider whether our users share a similar need and if it‚Äôs part of GitLab‚Äôs scope. If so, strongly consider building as a feature in GitLab : Evaluate open source options to utilize. If time to market is an issue, a global optimization issue may also be opened to assist with prioritization. For a potential acquisition, follow the acquisition process . If the need is specific to GitLab, and will not be built into the product, consider a few guidelines: Necessity: Does this actually need to be solved now? If not, consider proceeding without and gathering data to make an informed decision later. Opportunity cost: Is the need core to GitLab‚Äôs business? Would work on other features return more value to the company and our users? Cost: How much are off the shelf solutions? How much is it to build, given the expertise in-house and opportunity cost? Time to market: Is there time to engineer the solution in-house? If after evaluating these considerations buying a commercial solution is the best path forward: Consider who owns the outcome , as the spend will be allocated to their department. Get their approval on the proposed plan. Have the owning party open a finance issue using the vendor_contracts template, ensure the justification above is included in the request. Evaluating Open Source Software When considering open source software in build vs. ‚Äúbuy‚Äù decisions we utilize the following general criteria to decide whether to integrate a piece of software: Compatibility - Does the software utilize a compatible open source license ? Viability - Is the software, in its current state, viable for the use case in question? Velocity - Is there a high rate of iteration with the software? Are new features or enhancements proposed and completed quickly? Are security patches applied regularly? Community - Is there a diverse community contributing to the software? Is the software governed by broader communities or by a singular corporate entity? Do maintainers regularly address feedback from the community? Analytics instrumentation guide Please see Analytics Instrumentation Guide Post Launch Instrumentation Guide Goal: Increase product instrumentation across our offerings to deliver greater product insights. There is a need to retroactively evaluate what features have been instrumented and need instrumentation from past feature launches. Post launch implementation will allow us to gather insights and allow better visibility into feature usage + adoption that may not currently be captured. Tasks: Issue Request PM: Following the Product Data Insights handbook , create an issue focused on instrumentation of products at a category level using the Post-Launch Instrumentation template . Assign the issue to your Product Data Insights counterpart. Carolyn Braza ( @cbraza ) will automatically be added for visibility. Alignment PM/PDI: Once all stakeholders have been added to the issue, Product Data Insights team will set time with the PM counterpart to align on: Goals Priorities Milestones TPgM may assist in implementation of planning documentation. Category Inventory & Instrumentation Mapping PM/PDI: Work together to outline a category inventory using this spreadsheet template . Category level implementation should be prioritized by most utilized features and the areas we believe have the largest impact on the business. From there, PM and Product Data Insights counterparts will utilize labels outlined here in step 3 for markers of implementation status. The PM will lead mapping of instrumentation at a category level, in close partnership with the Product Data Insights counterpart. For any metric or event that has been identified to contribute to a categories instrumentation the correct product_category should be set in the definition file. Audit & Review PM/PDI: will audit implementation/review implementation to quality check and ensure accuracy async. TPgM may assist in QA. Update Categories yaml file PM: Update the categories.yml file with the applicable implementation status (see below) Utilizing the categories.yml file, the Product Data Insights team will create a Tableau dashboard to track implementation at a category level over time. Complete - Instrumentation complete and satisfactory Incomplete - Some instrumentation, but not complete None - No instrumentation - instrumentation needed Not needed - Instrumentation not needed Analytics Instrumentation PM/PDI: Once category instrumentation audit has been completed. For categories marked as either red (needing implementation) or yellow (some instrumentation, not complete), PM/EM: will create an instrumentation issue with the label analytics instrumentation and utilizing the usage data instrumentation template . Page load performance metrics In order to better understand the perceived performance of GitLab, there is a synthetic page load performance testing framework available based on sitespeed.io . A Grafana dashboard is available for each stage, tracking the Largest Contentful Paint and first/last visual change times. These metrics together provide high-level insight into the experience our users have when interacting with these pages. Adding additional pages to performance testing The Grafana dashboards are managed using grafonnet , making it easy to add additional pages and charts. Testing a new set of pages requires just 2 steps: Add the desired URL‚Äôs to the sitespeed unauthenticated or authenticated testing list. Add a new line with the URL, then a space, and an alias of the form [Group]_[Feature]_[Detail] . The alias needs to be one word, an example MR is here . Note the authenticated user account does not have any special permissions, it is simply logged in. Open the relevant stage‚Äôs grafonnet dashboard file . Find the section corresponding to the desired group, and add an additional call to productCommon.pageDetail . The call arguments are Chart Title , Alias from above, and the tested URL . Ensure the JSON formatting is correct, the easiest way is to simply copy/paste from another line. A sample MR is available here . Assign both MR‚Äôs to a maintainer. After they are merged, the stage‚Äôs Grafana dashboard will be automatically updated. A video walkthrough is available as well. Analytics Instrumentation Guide Analytics Instrumentation Overview At GitLab, we collect product usage data for the purpose of ‚Ä¶ Continuous Interviews The purpose of continuous interviews and how to set them up Cross Functional Prioritization Overview The Cross-Functional Prioritization framework exists to give everyone a voice within the ‚Ä¶ Customer Issues Prioritization Framework Context The Customer Prioritization Framework was developed by the Issue Prioritization Framework ‚Ä¶ Dogfooding for R&D Dogfood everything The best way to understand how GitLab works is to use it for as much of your job ‚Ä¶ GitLab Early Access Program Direction Alignment & vision of the GitLab Early Access Program Making GIFs Animated GIFs are an awesome way of showing of features that need a little more than just an image, ‚Ä¶ New Product Introduction (NPI) Process How to launch a product or service at GitLab. Product Customer Advisory Board This is the process for quarterly customer advisory board meeting, specific to the Product / R&D Org. This process is revisited on an annual basis and aligns with the [broader company process focused on customer advocacy](/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/customer-advocacy/). Product Management Tips and Tricks Overview This section of the handbook is a collection of product management processes that can ‚Ä¶ Product Manager SAFE Guidance Overview This guide for GitLab Product Managers clarifies and expands on the Regulation FD Training. ‚Ä¶ Product Milestones When planning, Product Managers plan to GitLab milestones. Here is the process for creating and ‚Ä¶ Product Procedures Overview This section of the handbook is a collection of processes that a required to be followed ‚Ä¶ Product Team Board Meeting Prep This is the process for quarterly board meeting prep, specific to the Product / R&D Org. This process is revisited on a quarterly basis and aligns with the [broader company process](/handbook/board-meetings/#board-and-committee-composition). Feedback always welcome! Sensing Mechanisms What are sensing mechanisms? Our ability to iterate quickly is a measure of our efficiency, but our ‚Ä¶ Tiering Strategy & Guidance for Product Managers On this page Tiering strategy Free is targeted at individual contributor developers. It is a ‚Ä¶ Using GitLab to plan work We use GitLab to document product strategy and manage our backlog. A couple of concepts that are key ‚Ä¶ Last modified July 8, 2025: EUS - Access Requests Update ( b88590d3 ) View page source -  - please contribute .",
    "headings": [
      "Product Processes",
      "Our Product philosophy",
      "Product Development Flow",
      "The Importance of Direction",
      "Understanding Milestones and Releases",
      "Relevant links",
      "Communication",
      "Product Org Communication Touchpoints",
      "Other Communication Channels",
      "Communicating with the Entire Product Management Function At Once",
      "Internal and external evangelization",
      "Writing to inspire action",
      "Writing about features",
      "Recording videos to showcase features",
      "QA Release Candidates on staging and elsewhere",
      "Feature assurance",
      "Dealing with security issues",
      "Foundational Requirements",
      "Cross-stage features",
      "Stages, Groups, and Categories",
      "How to work as a PM",
      "Prioritization",
      "Engineering Allocation",
      "Feature Change Locks",
      "Using the RICE Framework",
      "Issues important to customers",
      "Community Considerations",
      "SaaS-First Framework",
      "Working with Your Group",
      "Global Prioritization",
      "Planning and Direction",
      "Iteration Strategies",
      "Community participation",
      "Stakeholder Management",
      "Working with customers",
      "Competition channel",
      "Assessing opportunities",
      "Analyst engagement",
      "Engage with internal customers",
      "USAT responder outreach",
      "Cost profile and user experience",
      "Life Support PM Expectations",
      "Build vs ‚ÄúBuy‚Äù",
      "Analytics instrumentation guide",
      "Post Launch Instrumentation Guide",
      "Page load performance metrics",
      "Adding additional pages to performance testing"
    ],
    "word_count": 20248,
    "extracted_at": "2025-07-21 20:14:52"
  },
  {
    "document_id": "gitlab-handbook-331769",
    "url": "https://handbook.gitlab.com/handbook/product/categories/",
    "title": "Product sections, stages, groups, and categories",
    "category": "Product",
    "content": "Product sections, stages, groups, and categories Principles - Processes - Categories - GitLab the Product - Being a PM - Leadership Interfaces We want intuitive interfaces both within the company and with the wider community. This makes it more efficient for everyone to contribute or to get a question answered. Therefore, the following interfaces are based on the product categories defined on this page: Home page Product page Product Features Pricing page DevOps Lifecycle DevOps Tools Product Direction Stage visions Documentation Engineering Engineering Manager/Developer/Designer titles, their expertise, and department, and team names. Product manager responsibilities which are detailed on this page Our pitch deck , the slides that we use to describe the company Strategic marketing specializations Hierarchy The categories form a hierarchy: Sections : Are a collection of stages. We attempt to align these logically along common workflows like Dev, Sec and Ops. Sections are maintained in data/sections.yml . Stages : are maintained in data/stages.yml . Each stage has a corresponding devops::<stage> label under the gitlab-org group. Group : A stage has one or more groups . Groups are maintained in data/stages.yml . Each group has a corresponding group::<group> label under the gitlab-org group. Categories : A group has one or more categories. Categories are high-level capabilities that may be a standalone product at another company. e.g. Portfolio Management. To the extent possible we should map categories to vendor categories defined by analysts . There are a maximum of 8 high-level categories per stage to ensure we can display this on our website and pitch deck. (Categories that do not show up on marketing pages show up here in italics and do not count toward this limit.) There may need to be fewer categories, or shorter category names, if the aggregate number of lines when rendered would exceed 13 lines, when accounting for category names to word-wrap, which occurs at approximately 15 characters. Categories are maintained in data/categories.yml . Each category has a corresponding Category:<Category> label under the gitlab-org group. Category maturity is managed in the product Category Maturity Change process Features : Small, discrete functionalities. e.g. Issue weights. Some common features are listed within parentheses to facilitate finding responsible PMs by keyword. Features are maintained in data/features.yml . It‚Äôs recommended to associate feature labels to a category or a group with feature_labels in data/categories.yml or data/stages.yml . Notes: Groups may have scope as large as all categories in a stage, or as small as a single category within a stage, but most will form part of a stage and have a few categories in them. Stage, group, category, and feature labels are used by the automated triage operation ‚ÄúStage and group labels inference from category labels‚Äù . We don‚Äôt move categories based on capacity. We put the categories in the stages where they logically fit, from a customer perspective. If something is important and the right group doesn‚Äôt have capacity for it, we adjust the hiring plan for that group, or do global optimizations to get there faster. We don‚Äôt have silos. If one group needs something in a category that is owned by another group, go ahead and contribute it. This hierarchy includes both paid and unpaid features. Naming Anytime one hierarchy level‚Äôs scope is the same as the one above or below it, they can share the same name. For groups that have two or more categories, but not all categories in a stage, the group name must be a unique word or a summation of the categories they cover. If you want to refer to a group in context of their stage you can write that as ‚ÄúStage:Group‚Äù. This can be useful in email signatures, job titles, and other communications. E.g. ‚ÄúMonitor:Health‚Äù rather than ‚ÄúMonitor Health‚Äù or ‚ÄúMonitor, Health.‚Äù When naming a new stage, group, or category, you should search the handbook and main marketing website to look for other naming conflicts which could confuse customers or employees. Uniqueness is preferred if possible to help drive clarity and reduce confusion. See additional product feature naming guidelines as well. More Details Every category listed on this page must have a link to a direction page. Categories may also have documentation and marketing page links. When linking to a category using the category name as the anchor text (e.g. from the chart on the homepage) you should use the URLs in the following hierarchy: Marketing product page > docs page > direction page E.g Link the marketing page. If there‚Äôs no marketing page, link to the docs. If there‚Äôs no docs, link to the direction page. Solutions Solutions can consist of multiple categories and are typically used to align to a customer challenge (e.g. the need to reduce security and compliance risk) or to market segments defined by analysts such as Software Composition Analysis (SCA). Solutions are also often used to align to challenges unique to an industry vertical (e.g. financial services), or to a sales segment (e.g. SMB vs Enterprise). Solutions typically represent a customer challenge, and we define how GitLab capabilities come together to meet that challenge, with business benefits of using our solution. Market segments defined by analysts don‚Äôt always align to GitLab stages and categories and often include multiple categories. Two most frequently encountered are: Software Composition Analysis (SCA) = Dependency Scanning + License Compliance + Container Scanning Enterprise Agile Planning (EAP) = Team Planning + Planning Analytics + Portfolio Management + Requirements Management We are intentional in not defining SCA as containing SAST and Code Quality despite some analysts using the term to also include those categories. Capabilities Capabilities can refer to stages, categories, or features, but not solutions. Layers Adding more layers to the hierarchy would give it more fidelity but would hurt usability in the following ways: Harder to keep the interfaces up to date. Harder to automatically update things. Harder to train and test people. Harder to display more levels. Harder to reason, falsify, and talk about it. Harder to define what level something should be in. Harder to keep this page up to date. We use this hierarchy to express our organizational structure within the Product and Engineering organizations. Doing so serves the goals of: Making our groups externally recognizable as part of the DevOps lifecycle so that stakeholders can easily understand what teams might perform certain work Ensuring that internally we keep groups to a reasonable number of stable counterparts As a result, it is considered an anti-pattern to how we‚Äôve organized for categories to move between groups out of concern for available capacity. When designing the hierarchy, the number of sections should be kept small and only grow as the company needs to re-organize for span-of-control reasons. i.e. each section corresponds to a Director of Engineering and a Director of Product, so it‚Äôs an expensive add. For stages, the DevOps loop stages should not be changed at all, as they‚Äôre determined from an external source. At some point we may change to a different established bucketing, or create our own, but that will involve a serious cross-functional conversation. While the additional value stages are our own construct, the loop and value stages combined are the primary stages we talk about in our marketing, sales, etc. and they shouldn‚Äôt be changed lightly. The other stages have more flexibility as they‚Äôre not currently marketed in any way, however we should still strive to keep them as minimal as possible. Proliferation of a large number of stages makes the product surface area harder to reason about and communicate if/when we decide to market that surface area. As such, they‚Äôre tied 1:1 with sections so they‚Äôre the minimal number of stages that fit within our organizational structure. e.g. Growth was a single group under Enablement until we decided to add a Director layer for Growth; then it was promoted to a section with specialized groups under it. The various buckets under each of the non-DevOps stages are captured as different groups. Groups are also a non-marketing construct, so we expand the number of groups as needed for organizational purposes. Each group usually corresponds to a backend engineering manager and a product manager, so it‚Äôs also an expensive add and we don‚Äôt create groups just for a cleaner hierarchy; it has to be justified from a span-of-control perspective or limits to what one product manager can handle. Category Statuses Categories can have varying level of investment and development work. There are four main investment statuses: Accelerated - Top category for product strategy that has received additional investment in the next year Sustained - Categories where new features will be added in the next year Reduced - Categories where scope and ambition is decreased although, new features will still be added in the next year Maintenance - Categories where no new features will added Typically, product direction pages will transparently state the investment status of the category for the fiscal year based on annual product themes and investment levels. Changes The impact of changes to sections, stages and groups is felt across the company . All new category creation needs to be specifically approved via our Opportunity Canvas review process. This is to avoid scope creep and breadth at the expense of depth and user experience. Merge requests with changes to sections, stages and groups and significant changes to categories need to be created, approved, and/or merged by each of the below: Chief Product Officer PLT Leader relevant to the affected Section(s) The Director of Product relevant to the affected Section(s) The Director of Engineering relevant to the affected Section(s) Director of Product Design _ Note: Chief Product Officer approval should be requested once all other approvals have been completed. To request approval, post the MR link in the #chief-product-officer channel tagging both the Chief Product Offcer and cc‚Äôing the EBA to the Chief Product Officer. The following people need to be on the merge request so they stay informed: Chief Technology Officer Development Leader relevant to the affected Section(s) VP of Infrastructure & Quality Engineering VP of UX Director, Technical Writing Engineering Productivity (by @ mentioning @gl-quality/eng-prod ) The Product Marketing Manager relevant to the stage group(s) After approval and prior to merging, ping the Engineering Manager for Quality Engineering in the MR, if there are changes that: Add a new category, group, stage or section Move an existing category to a new or existing group Move an existing group to a new or existing stage Move an existing stage to a new or existing section Rename a group, stage or section Delete a group, stage or section This is to ensure that GitLab Bot auto-labeling can be updated prior to the change, which can be disruptive if missed . Upon approval, tag the group Technical Writer in the merge request to ensure documentation metadata is updated after the category change is merged. Ensure that relevant slack channels are updated following our slack channel naming convention , open an access request to have slack channel names updated as they can no longer be updated by creators. Examples Because it helps to be specific about what is a significant change and what should trigger the above approval process, below are non-exhaustive lists of examples that would and would not, respectively, require full approvals as outlined above. Changes that require the above approvers include: Changes to a section, stage, group, or category name or marketing attribute Removal or addition of a section, stage, group, or category Changes that require approval only from the relevant Product Leadership Team member include: Changing name or removing a non-marketing category, per the marketing attribute. Changes that require approval only from the relevant Product Director include: Changing a category maturity date Changes to section or group member lists Changes to a category vision page Changing group name When changing the name of a group, create a merge request to change the group name in data/stages.yml using the Group-Stage-Category-Change template, and make sure to complete all the steps in the template. When changing the team tags, such as be_team_tag , ensure that each team member‚Äôs individual data/team_members/person/ YAML has the relevant departments entry updated. Alternatively, if the team tag is missing, add the tag under the list of departments as the second or lower entry. The first departments entry is controlled by the Workday sync and will be overwritten. When deciding on the naming, ensure that each team tag is unique. For example, sre_team_tag should have a different value compared to be_team_tag . If they are the same, then all team members with the tag with be displayed, duplicating the list for BE and SRE. Changing category name When changing an existing category name, there are some considerations to the order of events: First, create a MR to change the name in data/stages.yml and spec/homepage/category_spec.rb . Get sign off from all required stakeholders listed in the instructions above. Merge the name change MR. Tag the category‚Äôs technical writer so that they can update the documentation metadata Re-name the category direction page with a new MR. Search for the old category name on the category direction page to ensure the name has been updated in all places. Use the #it-help Slack channel to request an update to Slack channel name for the re-named category Changing category maturity We primarily use the Category Maturity Scorecard process to determine category maturity. Typically, category maturity moves up from planned to minimal to viable to complete to lovable. However, maturity can also be downgraded. For example, in cases where we discover a JTBD is not met (see example ), or when we change the definition of maturity , we may choose to move category maturity down. When downgrading product maturity, we adjust our customer‚Äôs current expectations about our product. This is particularly impactful to our go-to-market team members in customer success and product marketing. We need to do the following to enable alignment between all affected and interested parties: Raise an MR for the downgrade and clearly state the reasons for change in the description (see example ) Inform VP, Product Management by adding them as Reviewer on the MR Notify the product group counterparts in the MR; Product Marketing, Product Designer, Engineering Manager, and Technical Writer Post the MR in the #customer-success slack channel prior to merging, to allow the team to assess impact and adjust Post the MR in the #product slack channel for awareness DevOps Stages Analytics section Slack Channel #analytics-section Handbook Page Development Tim Zallmann UX Research Nick Hertz Legal & Corporate Affairs Eugene McCrann graph TD; analytics[Analytics section]-->s_monitor[Monitor stage]; s_monitor-->g_analytics_instrumentation[\"Analytics Instrumentation group\"]; click g_analytics_instrumentation \"/handbook/<no value>\"; s_monitor-->g_platform_insights[\"Platform Insights group\"]; click g_platform_insights \"/handbook/<no value>\"; Click on a group name to see more details. Monitor stage Slack Channel #analytics-section Handbook Page Development Development Tim Zallmann Software Engineer in Test Ievgen Chernikov UX Research Nick Hertz Analytics Instrumentation group Slack Channel #g_analyze_analytics_instrumentation Handbook Page Features in this Group Features Product Tanuja Jayarama Raju Backend Engineering Manager Ashwin Bilgi Backend Engineering Ankit Panchal Sebastian Rehm Jonas Larsen Micha≈Ç Wielich Niko Belokolodov Nwanna Isong Sarah Yasonik UX Research Nick Hertz Internal Customers Sales Department Marketing Department Product Department Customer Success Data Team Name Maturity Links Service Ping Viable Documentation Page Application Instrumentation Minimal Direction Page Platform Insights group Slack Channel #g_monitor_platform_insights Handbook Page Features in this Group Features Product Lindsy Farina Backend Engineering Manager Nicholas Klick Backend Engineering Ankit Bhatnagar Arun Sori Max Woolf Nnamdi Ogundu Frontend Engineering Daniele Rossetti Jiaan Louw Robert Hunt Product Marketing Aathira Nair Internal Customers Sales Department Marketing Department Product Department Customer Success Data Team Infrastructure Department Dave Smith Engineering Department Sam Goldstein Security Operations Department Sean Gillespie Name Maturity Links Custom Dashboards Foundation Minimal Documentation Page Direction Page Observability Planned 2024 Direction Page Product Analytics Minimal Documentation Page Direction Page Incident Management Communityled Documentation Page Direction Page On-call Schedule Management Communityled Documentation Page Direction Page CD section Slack Channel #cd-section Product Mike Flouton Development Sam Goldstein Product Design Marcel van Remmerden UX Research Will Leidheiser Legal & Corporate Affairs Tiffany Chen graph TD; cd[CD section]-->s_deploy[Deploy stage]; s_deploy-->g_environments[\"Environments group\"]; click g_environments \"/handbook/product/categories/#environments-group\"; Click on a group name to see more details. Deploy stage Slack Channel #s_deploy GitLab Group @gitlab-org/ci-cd/deploy-stage/environments-group Handbook Page Product Mike Flouton Development Anna Vovchenko Product Design Rayana Verissimo Environments group Slack Channel #g_environments Slack Alias Environments Group Handbook Page Focus TBD Features in this Group Features Development Anna Vovchenko Backend Engineering Staff Backend Engineer Taka Nishida Tiger Watson Timo Furrer Frontend Engineering Anna Vovchenko UX Research Will Leidheiser Support Lewis Brown Application Security Engineer Ameya Darshan Internal Customers Quality Department Delivery Team Reliability Engineering Devin Sylva Distribution Team AutoDevOps and Kubernetes Group Name Maturity Links Auto DevOps Viable Documentation Page Direction Page Continuous Delivery Competitive Marketing Page Documentation Page Direction Page Deployment Management Viable Marketing Page Documentation Page Direction Page Environment Management Viable Documentation Page Direction Page Feature Flags Viable Documentation Page Direction Page Infrastructure as Code Viable Documentation Page Direction Page Release Orchestration Viable Documentation Page Direction Page CI section Slack Channel #ci-section Handbook Page Product Darren Eastman Development Sam Goldstein Site Reliability Engineering Gerardo \"Gerir\" Lopez-Fernandez Product Design Rayana Verissimo UX Research Erika Feldman Legal & Corporate Affairs Tiffany Chen graph TD; ci[CI section]-->s_package[Package stage]; s_package-->g_container_registry[\"Container Registry group\"]; click g_container_registry \"/handbook/product/categories/#package-group\"; s_package-->g_package_registry[\"Package Registry group\"]; click g_package_registry \"/handbook/product/categories/#package-group\"; ci[CI section]-->s_verify[Verify stage]; s_verify-->g_ci_platform[\"CI Platform group\"]; click g_ci_platform \"/handbook/<no value>\"; s_verify-->g_hosted_runners[\"Hosted Runners group\"]; click g_hosted_runners \"/handbook/product/categories/#hosted-runners\"; s_verify-->g_mobile_devops[\"Mobile DevOps group\"]; click g_mobile_devops \"/handbook/<no value>\"; s_verify-->g_pipeline_authoring[\"Pipeline Authoring group\"]; click g_pipeline_authoring \"/handbook/product/categories/#pipeline-authoring-group\"; s_verify-->g_pipeline_execution[\"Pipeline Execution group\"]; click g_pipeline_execution \"/handbook/product/product-categories/#pipeline-execution-group\"; s_verify-->g_runner[\"Runner group\"]; click g_runner \"/handbook/product/categories/#runner-group\"; Click on a group name to see more details. Package stage Slack Channel #s_package Handbook Page Product Tim Rizzi Development Crystal Poole Product Design Rayana Verissimo Product Designer Bonnie Tsang Container Registry group Slack Channel #g_container-registry Slack Alias container-registry-group GitLab Group @gitlab-org/ci-cd/package-stage/container-registry-group Handbook Page Focus Container Registry GMAU Features in this Group Features Product Tim Rizzi Development Crystal Poole Backend Engineering Backend Engineer Hayley Swimelar Jaime Mart√≠nez Jo√£o Pereira Senior Backend Engineer Senior Backend Engineer Frontend Engineering Rahul Chanila UX Research Erika Feldman Support Kate Grechishkina Technical Writing Zach Painter Internal Customers Distribution Team Infrastructure Department Product Security Department Name Maturity Links Container Registry Viable Documentation Page Direction Page Virtual Registry Viable Documentation Page Direction Page Dependency Firewall Planned 2025 Direction Page Package Registry group Slack Channel #g_package-registry Slack Alias package-registry-group GitLab Group @gitlab-org/ci-cd/package-stage/package-registry-group Handbook Page Focus Package Registry GMAU Features in this Group Features Product Tim Rizzi Development Crystal Poole Backend Engineering David Fernandez Dzmitry Meshcharakou Moaz Khalifa Rad Batnag Frontend Engineering Rahul Chanila UX Research Erika Feldman Support Kate Grechishkina Technical Writing Zach Painter Internal Customers Distribution Team Infrastructure Department Name Maturity Links Package Registry Viable Documentation Page Direction Page Helm Chart Registry Viable Documentation Page Direction Page Verify stage Slack Channel #s_verify Product Darren Eastman Development Cheryl Li Software Engineer in Test Tiffany Rea Product Design Rayana Verissimo CI Platform group Slack Channel #g_ci-platform Features in this Group Features Product Darren Eastman Development Cheryl Li Backend Engineering Senior Backend Engineer Leaminn Ma Marius Bobin Madhusudan Vaishnao Tianwen Chen Support Mark Nagle Hosted Runners group Slack Channel #g_runners_platform Focus Verify & Hosted runners SMAU Features in this Group Features Product Gabriel Engel Development Kam Kyrala Support Michael Trainor Justin Farmiloe Technical Writing Roshni Sarangadharan Application Security Engineer Costel Maxim Infrastructure Security Engineer Paulo Martins Customer Success Rachel Fuerst Vladimir Dzalbo Internal Customers Infrastructure Department Engineering Department Security Division Name Maturity Links GitLab Hosted Runners Viable Documentation Page Direction Page Mobile DevOps group Slack Channel #mobile-devops Features in this Group Features Product Darren Eastman Name Maturity Links Mobile DevOps Direction Page Pipeline Authoring group Slack Channel #g_pipeline-authoring Focus Verify & Runner SMAU Features in this Group Features Product Dov Hershkovitch Development Manuel Grabowski Backend Engineering Avielle Wolfe Furkan Ayhan Kasia Misirli Laura Montemayor Rajendra Kadam Software Engineer in Test Tiffany Rea UX Research Erika Feldman Product Designer Sunjung Park Support Luminus Alabi Segolene Bouly Technical Writing Marcel Amirault Application Security Engineer Rohit Shambhuni Customer Success Rachel Fuerst Vladimir Dzalbo Internal Customers Quality Department UX Department Infrastructure Department Engineering Department AutoDevOps and Kubernetes Group Security Division Name Maturity Links Pipeline Composition Viable Marketing Page Documentation Page Direction Page Variables Complete Documentation Page Direction Page Component Catalog Minimal Marketing Page Documentation Page Direction Page Pipeline Execution group Slack Channel #g_pipeline-execution Focus Verify & Runner SMAU Features in this Group Features Product Rutvik Shah Development Senior Backend Engineer Backend Engineering Allison Browne Daniel Prause Hordur Freyr Yngvason Max Fan Panos Kanellidis Vlad Wolanyk Frontend Engineering Jose Ivan Vargas Payton Burdette Software Engineer in Test Tiffany Rea UX Research Erika Feldman Product Designer Veethika M Support Paul Murray Charl Marais Technical Writing Lysanne Pinto Application Security Engineer Rohit Shambhuni Customer Success Rachel Fuerst Vladimir Dzalbo Internal Customers Quality Department UX Department Infrastructure Department Engineering Department AutoDevOps and Kubernetes Group Security Division Name Maturity Links Continuous Integration (CI) Competitive Marketing Page Documentation Page Direction Page Merge Trains Viable Documentation Page Direction Page Code Testing and Coverage Viable Documentation Page Direction Page Review Apps Competitive Documentation Page Direction Page Job Artifacts Minimal Documentation Page Direction Page Runner group Slack Channel #g_runner Focus Verify & Runner SMAU Features in this Group Features Product Darren Eastman Development Nicole Williams Backend Engineering Arran Walker Axel von Bertoldi Cam Swords Georgi Georgiev Hannes H√∂rl Joe Burnett Love Bhardwaj Narendran Kannan Pedro Pombeiro Romuald Atchad√© Frontend Engineering Miguel Rincon UX Research Erika Feldman Support Michael Trainor Justin Farmiloe Technical Writing Roshni Sarangadharan Application Security Engineer Costel Maxim Infrastructure Security Engineer Paulo Martins Customer Success Rachel Fuerst Vladimir Dzalbo Internal Customers Infrastructure Department Engineering Department Name Maturity Links GitLab Runner Core Viable Documentation Page Direction Page Fleet Visibility Viable Documentation Page Direction Page Core Platform section Product Mike Flouton Development Marin Jankovski Product Design Taurie Davis UX Research Thaina Tavares Infrastructure Manager Dave Smith Legal & Corporate Affairs Iris Gorman graph TD; core_platform[Core Platform section]-->s_foundations[Foundations stage]; s_foundations-->g_design_system[\"Design System group\"]; click g_design_system \"/handbook/product/categories/#design_system-group\"; s_foundations-->g_personal_productivity[\"Personal Productivity group\"]; click g_personal_productivity \"/handbook/product/categories/#personal_productivity-group\"; s_foundations-->g_ux_paper_cuts[\"UX Paper Cuts group\"]; click g_ux_paper_cuts \"/handbook/product/categories/#ux_paper_cuts-group\"; Click on a group name to see more details. Foundations stage Slack Channel #s_manage Development Michelle Gill Product Design Chris Micek Design System group Slack Channel #g_pajamas-design-system GitLab Group @gitlab-org/manage Focus Driving Pajamas adoption Features in this Group Features Product Jeff Tucker Frontend Engineering Mark Florian Scott de Jonge Product Design Chris Micek Product Designer Dan Mizzi-Harris Jeremy Elder Internal Customers Alliances Department Customer Success Quality Department Infrastructure Department Engineering Department Name Maturity Links Pajamas Design System Documentation Page Direction Page Personal Productivity group Slack Channel #g_personal_productivity GitLab Group @gitlab-org/foundations/personal-productivity Focus Driving Pajamas adoption Features in this Group Features Product Jeff Tucker Development Abhinaba Ghosh Frontend Engineering Paul Gascou-Vaillancourt Thomas Hutterer Product Design Jacki Bauer UX Research Thaina Tavares Product Designer Amelia Bauerly Austin Regnery Technical Writing Kati Paizee Internal Customers Alliances Department Customer Success Quality Department Infrastructure Department Engineering Department Name Maturity Links Navigation Direction Page Settings Direction Page Notifications Documentation Page Direction Page UX Paper Cuts group Slack Channel #g_ux_paper_cuts GitLab Group @gitlab-org/foundations/ux-paper-cuts Handbook Page Focus The UX Paper Cuts team is responsible for identifying and fixing small, impactful usability issues in the GitLab product. Features in this Group Features Development Manager, Product Design Product Designer Chad Lavimoniere Julia Miocene Sascha Eggenberger Annabel Dunstone Gray Data Science section Development Tim Zallmann Product Design Valerie Karnes UX Research Nick Hertz Legal & Corporate Affairs Tiffany Chen graph TD; data-science[Data Science section]-->s_ai-powered[AI-powered stage]; s_ai-powered-->g_ai_framework[\"AI Framework group\"]; click g_ai_framework \"/handbook/product/categories/#ai-framework-group\"; s_ai-powered-->g_code_creation[\"Code Creation group\"]; click g_code_creation \"/handbook/product/categories/#code-suggestions\"; s_ai-powered-->g_custom_models[\"Custom Models group\"]; click g_custom_models \"/handbook/product/categories/#custom-models-group\"; s_ai-powered-->g_duo_chat[\"Duo Chat group\"]; click g_duo_chat \"/handbook/product/categories/#duo-chat-group\"; s_ai-powered-->g_duo_workflow[\"Duo Workflow group\"]; click g_duo_workflow \"/handbook/product/categories/#duo-workflow\"; s_ai-powered-->g_editor_extensions[\"Editor Extensions group\"]; click g_editor_extensions \"/handbook/product/categories/#editor-extensions\"; s_ai-powered-->g_global_search[\"Global Search group\"]; click g_global_search \"/handbook/product/categories/#global-search-group\"; s_ai-powered-->g_workflow_catalog[\"Workflow Catalog group\"]; click g_workflow_catalog \"/handbook/<no value>\"; data-science[Data Science section]-->s_modelops[ModelOps stage]; s_modelops-->g_dataops[\"DataOps group\"]; click g_dataops \"/handbook/product/categories/#dataops-group\"; s_modelops-->g_mlops[\"MLOps group\"]; click g_mlops \"/handbook/product/categories/#mlops-group\"; Click on a group name to see more details. AI-powered stage Slack Channel #s_ai-powered Handbook Page Development Tim Zallmann Product Design Jacki Bauer AI Framework group Slack Channel #g_ai_framework Handbook Page Features in this Group Features Product Ben Venker Development Martin Wortschack Backend Engineering Alexander Chueshev Alejandro Rodr√≠guez Halil Coban Hongtao Yang Backend Engineer Joey Khabie Ma≈Çgorzata Ksionek Mark Lapierre Michael Thomas Nathan Weinshenker Surabhi Suman Tan Le Frontend Engineering Andrew Fontaine UX Research Nick Hertz Erika Feldman Product Designer Jacki Bauer Support ≈Åukasz Korbasiewicz Technical Writing Suzanne Selhorn Infrastructure Security Engineer Paulo Martins Name Maturity Links AI Abstraction Layer Viable Documentation Page Direction Page AI Evaluation Minimal Documentation Page Direction Page AI Research Minimal Documentation Page Direction Page Code Creation group Slack Channel #g_code_creation Handbook Page Code Creation Group Features in this Group Features Product Jordan Janes Backend Engineering Manager Matt Nohr Backend Engineering Allen Cook James Fargher Jan Provaznik Kinshuk Singh Missy Davies Omar Qunsul Pam Artiaga Shola Quadri Tian Gao Vitali Tatarintev Technical Writing Steve Cawood Name Maturity Links Code Suggestions Viable Marketing Page Documentation Page Direction Page Custom Models group Slack Channel #g_custom_models Handbook Page Features in this Group Features Product Susie Bitters Backend Engineering Bruno Cardoso Cindy Halim Eduardo Bonet Igor Drozdov Patrick Cyiza Manoj Memana Jayakumar Mohamed Hamda Frontend Engineering Julie Huang Support Vidhya Hariharan Technical Writing Jon Glassman Infrastructure Security Engineer Paulo Martins Name Maturity Links Model Personalization Minimal Direction Page Self-Hosted Models Minimal Documentation Page Direction Page GitLab Duo Settings Minimal Direction Page Duo Chat group Slack Channel #g_duo_chat Handbook Page Features in this Group Features Product Torsten Linz Development Juan Silva Backend Engineering Dillon Wheeler Eva Kadlecov√° Mark Chao Shinya Maeda Tetiana Chupryna Frontend Engineering Jannik Lehmann UX Research Erika Feldman Nick Hertz Product Designer Sam Reiss Andrew Bacon Emily Bauman Pedro Moreira da Silva Support ≈Åukasz Korbasiewicz Duncan Harris Technical Writing Jon Glassman Infrastructure Security Engineer Paulo Martins Name Maturity Links Duo Chat Minimal Documentation Page Direction Page Duo Workflow group Slack Channel #g_duo_workflow Handbook Page Features in this Group Features Development Sebastian Rehm UX Research Erika Feldman Nick Hertz Product Designer Taylor Vanderhelm Sam Reiss Andrew Bacon Emily Bauman Pedro Moreira da Silva Support ≈Åukasz Korbasiewicz Technical Writing Suzanne Selhorn Infrastructure Security Engineer Paulo Martins Name Maturity Links Duo Workflow Minimal Documentation Page Direction Page Editor Extensions group Slack Channel #g_editor-extensions Handbook Page Create:Editor Extensions Group Features in this Group Features Product Dasha Adushkina Development Kisha Mavryck Richardson Backend Engineering Anna Springfield Dylan Bernardi Erran Carey John Slaughter Karl Jamoralin Laura Ionel Frontend Engineering Andrei Zubov Elwyn Benson Olena HK. Tomas Vik Tristan Read UX Research Ben Leduc-Mills Support ≈Åukasz Korbasiewicz Technical Writing Steve Cawood Name Maturity Links Editor Extensions Minimal Documentation Page Direction Page Global Search group Slack Channel #g_global_search GitLab Group @gitlab-org/search-team Handbook Page Focus Paid GMAU Features in this Group Features Product Ben Venker Development Changzheng Liu Backend Engineering Arturo Herrero Changzheng Liu Dmitry Gruzd John Mason Madelein van Niekerk Ravi Kumar Siddharth Dungarwal Terri Chu Frontend Engineering Tom√°≈° Bulva UX Research Will Leidheiser Support Aysegul Acar Brenda Nyaringita Cleveland Bledsoe Jr Technical Writing Ashraf Khamis Internal Customers Engineering Department Customer Success Infrastructure Department Product Security Department Name Maturity Links Global Search Viable Documentation Page Direction Page Code Search Minimal Documentation Page Direction Page Workflow Catalog group Slack Channel #g_workflow_catalog GitLab Group @gitlab-org/ai-powered/workflow-catalog Handbook Page Features in this Group Features Development Sam Beckham Backend Engineering Jaydip pansuriya Keeyan Nejad Luke Duncalfe Frontend Engineering Florie Guibert James Rushford Justin Ho Vanessa Otto Product Designer Taylor Vanderhelm ModelOps stage Slack Channel #s_modelops Handbook Page Product Taylor McCaslin DataOps group Slack Channel #s_modelops Features in this Group Features Product Taylor McCaslin Name Maturity Links DataOps Planned 2025 Direction Page MLOps group Slack Channel #g_mlops Features in this Group Features Product Taylor McCaslin Backend Engineering Alper Akgun Andras Herczeg Roman Eisner Name Maturity Links MLOps Minimal Documentation Page Direction Page AI Agents Planned 2024 Documentation Page Direction Page Dev section Development Tim Zallmann Product Design Marcel van Remmerden UX Research Ben Leduc-Mills Danika Teverovsky Product Marketing Aathira Nair Legal & Corporate Affairs Iris Gorman graph TD; dev[Dev section]-->s_create[Create stage]; s_create-->g_code_review[\"Code Review group\"]; click g_code_review \"/handbook/product/categories/#code-review-group\"; s_create-->g_import[\"Import group\"]; click g_import \"/handbook/product/categories/#import-group\"; s_create-->g_remote_development[\"Remote Development group\"]; click g_remote_development \"/handbook/product/categories/#remote-development-group\"; s_create-->g_source_code[\"Source Code group\"]; click g_source_code \"/handbook/product/categories/#source-code-group\"; dev[Dev section]-->s_plan[Plan stage]; s_plan-->g_knowledge[\"Knowledge group\"]; click g_knowledge \"/handbook/product/product-categories/#knowledge-group\"; s_plan-->g_optimize[\"Optimize group\"]; click g_optimize \"/handbook/product/categories/#value-stream-management-group\"; s_plan-->g_product_planning[\"Product Planning group\"]; click g_product_planning \"/handbook/product/categories/#product_planning\"; s_plan-->g_project_management[\"Project Management group\"]; click g_project_management \"/handbook/product/categories/#project-management-group\"; Click on a group name to see more details. Create stage Slack Channel #s_create Product Derek Ferguson Development Darva Satcher Code Review group Slack Channel #g_create_code-review Handbook Page Focus Create Code Review GMAU Features in this Group Features Product Kai Armstrong Backend Engineering Manager Fran√ßois Ros√© Backend Engineering Sincheol (David) Kim Gary Holtz Marc Shaw Patrick Bajao Frontend Engineering Manager Andr√© Lu√≠s Frontend Engineering Andr√© Lu√≠s Phil Hughes Stanislav Lashmanov Thomas Randolph UX Research Ben Leduc-Mills Product Designer Michael Le Product Marketing Aathira Nair Support Ben King Technical Writing Amy Qualls Internal Customers Engineering Department Marketing Department Product Department Product Security Department Ameya Darshan Name Maturity Links Code Review Workflow Complete Documentation Page Direction Page GitLab CLI Viable Documentation Page Direction Page Import group Slack Channel #g_import GitLab Group @gitlab-org/foundations/import-and-integrate Focus Importers Features in this Group Features Development Adebayo Adesanya Backend Engineering Carla Drago George Koltsov James Nutt Reza Marandi Rodrigo Tomonari Sam Word Frontend Engineering Oiza Baiye Technical Writing Ashraf Khamis Application Security Engineer Ameya Darshan Internal Customers Alliances Department Customer Success Quality Department Infrastructure Department Engineering Department Name Maturity Links Importers Documentation Page Direction Page Remote Development group Slack Channel #g_create_remote_development Handbook Page Focus Create Remote Development GMAU Features in this Group Features Product Michelle Chen Development Adebayo Adesanya Backend Engineering Ashvin Sharma Chad Woolley Vishal Tak Frontend Engineering Enrique Alc√°ntara UX Research Ben Leduc-Mills Product Designer Mark Unthank Product Marketing Aathira Nair Support Chris Stone Technical Writing Brendan Lynch Internal Customers Marketing Department Engineering Department Finance Department People Operations Product Department Product Security Department Name Maturity Links Web IDE Competitive Documentation Page Direction Page Workspaces Minimal Documentation Page Direction Page Source Code group Slack Channel #g_create_source-code Handbook Page Focus Create Source Code GMAU Features in this Group Features Product Kai Armstrong Backend Engineering Manager Andr√© Lu√≠s Backend Engineering Emma Park Fred Reinink Gavin Hinfey Hunter Stewart Jerry Seto Javiera Tapia Joe Woodward Kerri Miller Olaoluwa Oluro Vasilii Iakliushin Frontend Engineering Manager Andr√© Lu√≠s Frontend Engineering Andr√© Lu√≠s Jacques Erasmus Joseph Fletcher Chaoyue Zhao Paulina Sedlak-Jakubowska UX Research Ben Leduc-Mills Product Designer Alyssa Trinh Product Marketing Aathira Nair Technical Writing Brendan Lynch Application Security Engineer Costel Maxim Customer Success Conley Rogers Simon Mansfield Internal Customers Engineering Department Marketing Department Aathira Nair Product Department Security Division Name Maturity Links Source Code Management Complete Marketing Page Documentation Page Direction Page Plan stage Slack Channel #s_plan Product Gabe Weaver Development John Hope Knowledge group Slack Channel #g_knowledge Handbook Page Focus Plan Knowledge Paid GMAU Features in this Group Features Product Matthew Macfarlane Development Alexandru Croitor Backend Engineering Brett Walker Janis Altherr Naman Jagdish Gala Piotr Skorupa Frontend Engineering Himanshu Kapoor UX Research Danika Teverovsky Product Designer Alex Fracazo Product Marketing Aathira Nair Technical Writing Marcin Sƒôd≈Çak-Jakubowski Application Security Engineer Costel Maxim Customer Success Simon Mansfield Internal Customers Technical Writing Name Maturity Links Wiki Viable Documentation Page Direction Page Pages Competitive Documentation Page Direction Page Text Editors Competitive Documentation Page Direction Page Markdown Complete Documentation Page Direction Page Optimize group Slack Channel #g_plan_optimize Focus Plan Optimize GMAU Features in this Group Features Development Brandon Labuschagne Backend Engineering Amr Taha Felipe Artur Pavel Shutsin Frontend Engineering Alex Pennells Ezekiel Kigbo Rudy Crespo Product Design Justin Mandell UX Research Danika Teverovsky Product Designer Libor Vanc Product Marketing Aathira Nair Support Gabriel Yoachum Technical Writing Lorena Ciutacu Application Security Engineer Costel Maxim Internal Customers Engineering Department Product Department Quality Department Development Department Name Maturity Links Value Stream Management Viable Marketing Page Documentation Page Direction Page DORA Metrics Viable Marketing Page Documentation Page Direction Page DevOps Reports Minimal Documentation Page Direction Page Product Planning group Slack Channel #g_product-planning Focus Plan Product Planning Paid GMAU Features in this Group Features Product Amanda Rueda Development Vladimir Shushlin Backend Engineering Eugenia Grieff Kassio Borges Matt D'Angelo Nicolas Dular Backend Engineer Vedant Jain Vladimir Shushlin Frontend Engineering Anastasia Khomchenko Jack Chapman Rajan Mistry Vedant Jain Vladimir Shushlin UX Research Danika Teverovsky Product Designer Nick Brandt Product Marketing Aathira Nair Technical Writing Marcin Sƒôd≈Çak-Jakubowski Internal Customers Engineering Department Product Department Security Division Name Maturity Links Portfolio Management Viable Marketing Page Documentation Page Direction Page OKR Management Minimal Documentation Page Direction Page Design Management Viable Documentation Page Direction Page Requirements Management Minimal Documentation Page Direction Page Quality Management Minimal Documentation Page Direction Page Project Management group Slack Channel #g_project-management Handbook Page Plan:Project Management Focus Plan Project Management Paid GMAU Features in this Group Features Product Gabe Weaver Development Donald Cook Backend Engineering Alexandru Croitor Agnes Slota Heinrich Lee Yu Mario Celi Marc Saleiko Stefanos Xanthopoulos Frontend Engineering Senior Frontend Engineer Deepika Guliani Fernanda Toledo Marc Saleiko Natalia Tepluhina UX Research Danika Teverovsky Product Designer Nick Leonard Product Marketing Aathira Nair Technical Writing Marcin Sƒôd≈Çak-Jakubowski Application Security Engineer Costel Maxim Internal Customers Engineering Department Product Department Security Division Name Maturity Links Team Planning Viable Documentation Page Direction Page Service Desk Viable Documentation Page Direction Page Fulfillment section Product Courtney Meddaugh Development Jerome Ng Product Design Taurie Davis UX Research Anne Lasch Nick Hertz Infrastructure Manager Dave Smith Legal & Corporate Affairs Iris Gorman graph TD; fulfillment[Fulfillment section]-->s_fulfillment[Fulfillment stage]; s_fulfillment-->g_fulfillment_platform[\"Fulfillment Platform group\"]; click g_fulfillment_platform \"/handbook/product/categories/#fulfillment-platform-group\"; s_fulfillment-->g_provision[\"Provision group\"]; click g_provision \"/handbook/product/categories/#provision-group\"; s_fulfillment-->g_seat_management[\"Seat Management group\"]; click g_seat_management \"/handbook/product/categories/#seat-management-group\"; s_fulfillment-->g_subscription_management[\"Subscription Management group\"]; click g_subscription_management \"/handbook/product/categories/#subscription-management-group\"; s_fulfillment-->g_utilization[\"Utilization group\"]; click g_utilization \"/handbook/product/categories/#utilization-group\"; Click on a group name to see more details. Fulfillment stage Slack Channel #s_fulfillment Product Courtney Meddaugh Development Jerome Ng Product Design Emily Sybrant UX Research Anne Lasch Nick Hertz Fulfillment Platform group Slack Channel #g_fulfillment_platform Features in this Group Features Development James Lopez Backend Engineering Aishwarya Subramanian Etienne Baqu√© Shreyas Agarwal Tarun Vellishetty Tyler Amos Vladlena Shumilo Frontend Engineering Tarun Vellishetty Product Designer Lina Fowler Timothy Noah Support Tom McAtee Name Maturity Links Fulfillment Infradev Viable Direction Page CustomersDot and quote to cash integrations Viable Direction Page Provision group Slack Channel #g_provision Features in this Group Features Product Priyanka Palanikumar Development Ragnar Hardarson Backend Engineering Bishwa Hang Rai Corinna Gogolok Paulo Barros Qingyu Zhao Product Designer Lina Fowler Timothy Noah Support Keven Hughes Technical Writing Lorena Ciutacu Application Security Engineer Rohit Shambhuni Name Maturity Links Plan Provisioning Viable Direction Page Add-on Provisioning Viable Direction Page Seat Management group Slack Channel #g_seat_management Features in this Group Features Product Magdalena Frankiewicz Development Ragnar Hardarson UX Research Anne Lasch Product Designer Lina Fowler Timothy Noah Technical Writing Lorena Ciutacu Name Maturity Links Seat Cost Management Viable Direction Page User Management Viable Documentation Page Direction Page Subscription Management group Slack Channel #g_subscription_management Features in this Group Features Product Tatyana Golubeva Development Diana Zubova Backend Engineering Aman Luthra Josianne Hyson Ryan Cobb Frontend Engineering Michael Lun√∏e Sharmad Nachnolkar Vamsi Vempati UX Research Nick Hertz Product Designer Lina Fowler Timothy Noah Support Firdaws Farukh Technical Writing Lorena Ciutacu Name Maturity Links Subscription Management Viable Direction Page Utilization group Slack Channel #g_utilization Features in this Group Features Product Courtney Meddaugh Development Ksenia Kolpakova Backend Engineering Jason Goodman Suraj Tripathi Vijay Hawoldar Frontend Engineering Ammar Alakkad Angelo Gulina Kos Palchyk Sheldon Led UX Research Nick Hertz Product Designer Lina Fowler Timothy Noah Support Shem Gyll Technical Writing Lorena Ciutacu Application Security Engineer Nikhil George Name Maturity Links Consumables Cost Management Viable Direction Page Growth section Product Paige Cordero Gayle Doud Development Kamil Niechajewicz Jerome Ng Product Design Taurie Davis Infrastructure Manager Dave Smith Legal & Corporate Affairs Tiffany Chen graph TD; growth[Growth section]-->s_growth[Growth stage]; s_growth-->g_acquisition[\"Acquisition group\"]; click g_acquisition \"/handbook/<no value>\"; s_growth-->g_activation[\"Activation group\"]; click g_activation \"/handbook/<no value>\"; Click on a group name to see more details. Growth stage Slack Channel #s_growth GitLab Group @gitlab-org/growth Handbook Page Development Kamil Niechajewicz Product Design Emily Sybrant Internal Customers Sales Department Marketing Department Product Department Finance Department Acquisition group Slack Channel #g_acquisition Handbook Page Features in this Group Features Product Gayle Doud Development Kamil Niechajewicz Backend Engineering Buck O'Leary David Hamp-Gonsalves Doug Stull Jay Montal Roy Liu Serhii Yarynovskyi Product Designer Jesse Young Application Security Engineer Nikhil George Name Maturity Links Acquisition Direction Page Onboarding Direction Page Activation group Slack Channel #g_activation Handbook Page Features in this Group Features Product Paige Cordero Development Kamil Niechajewicz Product Designer Katie Macoy Application Security Engineer Nikhil George Name Maturity Links Activation Direction Page Infrastructure Platforms section Product Fabian Zimmer Development Marin Jankovski Product Design Taurie Davis UX Research Will Leidheiser Infrastructure Manager Dave Smith Legal & Corporate Affairs Iris Gorman graph TD; infrastructure_platforms[Infrastructure Platforms section]-->s_data_access[Data Access stage]; s_data_access-->g_database_frameworks[\"Database Frameworks group\"]; click g_database_frameworks \"/handbook/product/categories/#database-group\"; s_data_access-->g_database_operations[\"Database Operations group\"]; click g_database_operations \"/handbook/product/categories/#database-group\"; s_data_access-->g_durability[\"Durability group\"]; click g_durability \"/handbook/<no value>\"; s_data_access-->g_git[\"Git group\"]; click g_git \"/handbook/product/categories/#git-group\"; s_data_access-->g_gitaly[\"Gitaly group\"]; click g_gitaly \"/handbook/product/categories/#gitalycluster-group\"; infrastructure_platforms[Infrastructure Platforms section]-->s_developer_experience[Developer Experience stage]; s_developer_experience-->g_api[\"API group\"]; click g_api \"/handbook/<no value>\"; s_developer_experience-->g_developer_tooling[\"Developer Tooling group\"]; click g_developer_tooling \"/handbook/<no value>\"; s_developer_experience-->g_development_analytics[\"Development Analytics group\"]; click g_development_analytics \"/handbook/<no value>\"; s_developer_experience-->g_engineering_productivity[\"Engineering Productivity group\"]; click g_engineering_productivity \"/handbook/<no value>\"; s_developer_experience-->g_feature_readiness[\"Feature Readiness group\"]; click g_feature_readiness \"/handbook/<no value>\"; s_developer_experience-->g_performance_enablement[\"Performance Enablement group\"]; click g_performance_enablement \"/handbook/<no value>\"; s_developer_experience-->g_test_governance[\"Test Governance group\"]; click g_test_governance \"/handbook/<no value>\"; infrastructure_platforms[Infrastructure Platforms section]-->s_gitlab_dedicated[GitLab Dedicated stage]; s_gitlab_dedicated-->g_environment_automation[\"Environment Automation group\"]; click g_environment_automation \"/handbook/product/categories/#gitlab-dedicated-group\"; s_gitlab_dedicated-->g_pubsec_services[\"US PubSec group\"]; click g_pubsec_services \"/handbook/product/categories/#us-public-sector-services-group\"; s_gitlab_dedicated-->g_switchboard[\"Switchboard group\"]; click g_switchboard \"/handbook/product/categories/#switchboard\"; infrastructure_platforms[Infrastructure Platforms section]-->s_gitlab_delivery[GitLab Delivery stage]; s_gitlab_delivery-->g_build[\"GitLab Build group\"]; click g_build \"/handbook/product/categories/#distribution-group\"; s_gitlab_delivery-->g_deploy[\"GitLab Deploy group\"]; click g_deploy \"/handbook/<no value>\"; s_gitlab_delivery-->g_framework[\"Framework group\"]; click g_framework \"/handbook/<no value>\"; s_gitlab_delivery-->g_release[\"GitLab Release group\"]; click g_release \"/handbook/<no value>\"; s_gitlab_delivery-->g_self_managed[\"Self Managed group\"]; click g_self_managed \"/handbook/product/categories/features/#self-managed-group\"; infrastructure_platforms[Infrastructure Platforms section]-->s_production_engineering[Production Engineering stage]; s_production_engineering-->g_cloud_connector[\"Cloud Connector group\"]; click g_cloud_connector \"/handbook/product/categories/#cloud-connector-group\"; s_production_engineering-->g_foundations[\"Foundations group\"]; click g_foundations \"/handbook/product/categories/\"; s_production_engineering-->g_observability[\"Observability group\"]; click g_observability \"/handbook/product/categories/\"; s_production_engineering-->g_ops[\"Ops group\"]; click g_ops \"/handbook/product/categories/\"; s_production_engineering-->g_runners_platform[\"Runners Platform group\"]; click g_runners_platform \"/handbook/product/categories/#production-engineering-stage\"; s_production_engineering-->g_runway[\"Runway group\"]; click g_runway \"/handbook/product/categories/\"; infrastructure_platforms[Infrastructure Platforms section]-->s_tenant_scale[Tenant Scale stage]; s_tenant_scale-->g_cells_infrastructure[\"Cells Infrastructure group\"]; click g_cells_infrastructure \"/handbook/<no value>\"; s_tenant_scale-->g_geo[\"Geo group\"]; click g_geo \"/handbook/product/categories/#geo-group\"; s_tenant_scale-->g_organizations[\"Organizations group\"]; click g_organizations \"/handbook/product/categories/#tenant-scale-stage\"; Click on a group name to see more details. Data Access stage Slack Channel #s_data_access Product Mark Wood Development Andras Horvath Software Engineer in Test John McDonnell Product Design Chris Micek Database Frameworks group Slack Channel #g_database_frameworks GitLab Group @gitlab-org/database-team Handbook Page Focus Database PPI Features in this Group Features Backend Engineering Manager Alex Ives Backend Engineering Alex Ives Backend Engineer Jon Jenkins Krasimir Angelov Leonardo da Rosa Matt Kasa Maxime Orefice Prabakaran Murugesan Simon Tomlinson UX Research Will Leidheiser Support Ryan Castro Chris Nightingale Mark Nagle Internal Customers Quality Department Infrastructure Department Name Maturity Links Database Direction Page Database Operations group Slack Channel #g_database_operations GitLab Group @gitlab-org/database-team Handbook Page Database Operations Team (formerly known as the Database Reliablity Engineering (DBRE) team) Features in this Group Features Backend Engineering Manager Rick Mar Site Reliability Engineering Alexander Sosna Ben Prescott Biren Shah Jon Sisson Rafael Henchen UX Research Will Leidheiser Internal Customers Quality Department Infrastructure Department Durability group Slack Channel #g_durability Handbook Page Data Access Durability Team Features in this Group Features Backend Engineering Manager John 'Jarv' Jarvis Backend Engineering Gabriel Mazetto Ian Baum Kyle Yetter Gregorius Marco Site Reliability Engineering Ahmad Sherif Furhan Shabir Matt Smiley Pravar Gauba Raynard Omongbale UX Research Will Leidheiser Technical Writing Achilleas Pipinellis Internal Customers Infrastructure Department Name Maturity Links Backup/Restore of GitLab instances Minimal Documentation Page Direction Page Redis Direction Page Git group Slack Channel #g_git Handbook Page Git Team Focus Driving Git adoption Features in this Group Features Backend Engineering Manager Patrick Steinhardt Backend Engineering Christian Couder Justin Tobler Karthik Nayak Patrick Steinhardt Toon Claes Support Len MacRae Gerardo Gutierrez Technical Writing Evan Read Application Security Engineer Ameya Darshan Internal Customers Quality Department Infrastructure Department Name Maturity Links Git Documentation Page Direction Page Gitaly group Slack Channel #g_gitaly Handbook Page Gitaly Team Focus Gitaly GMAU Features in this Group Features Backend Engineering Manager John Cai Backend Engineering Divya Rani Emily Chui Eric Ju James Liu John Cai Mustafa Bayar Olivier Campeau Quang-Minh Nguyen Sami Hiltunen Software Engineer in Test John McDonnell Support David Wainaina John Gaughan Technical Writing Evan Read Application Security Engineer Ameya Darshan Customer Success Conley Rogers Simon Mansfield Internal Customers Quality Department Infrastructure Department Name Maturity Links Gitaly Documentation Page Direction Page Developer Experience stage Slack Channel #s_developer_experience GitLab Group @gitlab-com/gl-infra/platform Handbook Page Developer Experience Development Amy Phillips API group Slack Channel #g_developer-experience-api Focus TBD Features in this Group Features Development Amy Phillips Name Maturity Links MCP Server Planned 2025 Direction Page Developer Tooling group Slack Channel #g_developer_tooling Handbook Page Developer Tooling team Focus TBD Features in this Group Features Development Mohga Gamea Backend Engineering Backend Engineer Manuel Sch√∂nlaub Nao Hashizume Peter Leitzen Frontend Engineering Kev Kloss Development Analytics group Slack Channel #g_development_analytics Handbook Page Development Analytics Group Focus TBD Features in this Group Features Development Paul John Phillips Backend Engineering Lohit Peesapati Software Engineer in Test Andrejs Cunskis Ievgen Chernikov Engineering Productivity group Slack Channel #g_engineering_productivity Handbook Page Engineering Productivity team Features in this Group Features Feature Readiness group Slack Channel #g_feature_readiness Handbook Page Developer Experience Focus TBD Features in this Group Features Software Engineer in Test Richard Chong Sanad Liaquat Sofia Vistas Performance Enablement group Slack Channel #g_performance_enablement Handbook Page Performance Enablement Focus TBD Features in this Group Features Software Engineer in Test Andy Hohenner Brittany Wilkerson John McDonnell Nivetha Prabakaran Vishal Patel Test Governance group Slack Channel #g_test_governance Handbook Page Test Governance Group Focus TBD Features in this Group Features Backend Engineering Manager Ksenia Kolpakova Software Engineer in Test Chloe Liu D√©sir√©e Chevalier Harsha Muralidhar Jay McCure Joy Roodnick Tiffany Rea Tim Beauchamp Will Meek GitLab Dedicated stage Slack Channel #f_gitlab_dedicated GitLab Group @gitlab-com/gl-infra/platform Handbook Page Development Product Chris Balane Software Engineer in Test Brittany Wilkerson Product Design Rayana Verissimo Environment Automation group Slack Channel #f_gitlab_dedicated GitLab Group @TBD Handbook Page GitLab Dedicated Group Focus GMAU Features in this Group Features Product Chris Balane Backend Engineering Manager Oriol Lluch Site Reliability Engineering Andy Knight Andrew Newdigate Brendan McKitrick Corey Cross Craig Miskell Dave Dittman Stephen Denham Dylan Lau Harpratap Singh Konst Tchernov Muhamed Huseinba≈°iƒá Oriol Lluch Riccardo Trivellato Ryan Pham Samir Hafez Stephan Breitrainer Nick Skoretz Tania Roblot Veronica Mondo Product Design Rayana Verissimo UX Research Will Leidheiser Support Wei-Meng Lee Wade Jenkins Daphne Kua Brie Carranza Armin Hergenhan Infrastructure Security Engineer Dhruv Jain Customer Success Zane J Chua Name Maturity Links GitLab Dedicated Documentation Page Direction Page US PubSec group Slack Channel #g_dedicated-us-pubsec GitLab Group @TBD Handbook Page US Public Sector Services team Focus GMAU Features in this Group Features Development Matt Kirkevold Site Reliability Engineering Senior Site Reliability Engineer Casey Clark Emma Kelly Joseph Burnitz John Edge Julie Brady Matt Kirkevold Support Wade Jenkins Name Maturity Links US Public Sector Services Documentation Page Direction Page Switchboard group Slack Channel #g_dedicated_switchboard GitLab Group @TBD Handbook Page Switchboard team Focus GMAU Features in this Group Features Product Loryn Bortins Backend Engineering Manager Amy Shiel Backend Engineering Andrey Ruzmanov Sean Arnold Frontend Engineering Grace Lin Marina Mosti Site Reliability Engineering Graeme Gillies Product Design Rayana Verissimo UX Research Will Leidheiser Product Designer Jesse Hoek Support Armin Hergenhan Technical Writing Lysanne Pinto Customer Success Zane J Chua Name Maturity Links Switchboard Documentation Page Direction Page GitLab Delivery stage Slack Channel #s_gitlab_delivery Handbook Page GitLab Delivery Product Martin Br√ºmmer Development Michele Bursi Software Engineer in Test John McDonnell Product Design Chris Micek GitLab Build group Slack Channel #g_distribution Slack Alias gitlab-build GitLab Group @gitlab-org/distribution Handbook Page Focus Distribution PPI Features in this Group Features Product Martin Br√ºmmer Backend Engineering Manager Denis Afonso Backend Engineering Balasankar 'Balu' C Dmitry Makovey Robert Marshall UX Research Will Leidheiser Technical Writing Evan Read Achilleas Pipinellis Internal Customers Quality Department Infrastructure Department Customer Success Product Security Department Name Maturity Links Build Viable Documentation Page Direction Page GitLab Deploy group Slack Channel #g_delivery GitLab Group @gitlab-org/delivery Handbook Page Features in this Group Features Product Martin Br√ºmmer Development Dave Smith Backend Engineering Alessio Caiazza Reuben Pereira Site Reliability Engineering Anthony Maina Ng'ang'a John T Skarbek Site Reliability Engineer UX Research Will Leidheiser Name Maturity Links Delivery Documentation Page Direction Page Framework group Slack Channel #g_software_delivery-framework Features in this Group Features Product Martin Br√ºmmer Development Lekan Sogunle Backend Engineering Alec Xu Pratik Singh Software Engineer in Test Grant Young Nailia Iskhakova Nick Westbury UX Research Will Leidheiser Name Maturity Links Delivery Documentation Page Direction Page GitLab Release group Slack Channel #g_delivery GitLab Group @gitlab-org/delivery Handbook Page Features in this Group Features Product Martin Br√ºmmer Development Michele Bursi Backend Engineering Akinyele Cafe-Febrissy Mayra Cabrera Site Reliability Engineering Dat Tang Jenny Kim Mawreen Dela Cruz UX Research Will Leidheiser Application Security Engineer Ameya Darshan Name Maturity Links Delivery Documentation Page Direction Page Self Managed group Slack Channel #g_self_managed Slack Alias distributionteam GitLab Group @gitlab-org/software-delivery/self-managed Handbook Page GitLab Delivery: Self Managed Features in this Group Features Product Martin Br√ºmmer Backend Engineering Manager Peter Lu Backend Engineering Clemens Beck Hossein Pursultani Jason Plum Jo√£o Alexandre Prado Tavares Cunha Jon Doveston Lucas Li UX Research Will Leidheiser Technical Writing Evan Read Achilleas Pipinellis Internal Customers Quality Department Infrastructure Department Customer Success Name Maturity Links Omnibus Package Complete Documentation Page Direction Page Cloud Native Installation Competitive Documentation Page Direction Page Production Engineering stage Slack Channel #s_production_engineering Handbook Page Production Engineering Product Sam Wiskow Development Rachel Nienaber Software Engineer in Test John McDonnell Product Design Chris Micek Cloud Connector group Slack Channel #g_cloud_connector GitLab Group @gitlab-org/cloud-connector-team Handbook Page Focus Cloud Connector PPI Features in this Group Features Backend Engineering Manager Paul John Phillips Backend Engineering Nikola Milojevic Roy Zwambag UX Research Will Leidheiser Support Gabriel Yoachum Technical Writing Jon Glassman Internal Customers Quality Department Infrastructure Department Name Maturity Links Cloud Connector Direction Page Foundations group Slack Channel #g_foundations Handbook Page Focus TBD Features in this Group Features Product Sam Wiskow Development Steve Abrams Site Reliability Engineering Adeline Yeung Donna Alexandra Jack Stephenson Pierre Guinoiseau Sarah Walker Internal Customers Infrastructure Platforms Department Name Maturity Links Rate Limiting Framework Direction Page Observability group Slack Channel #g_observability Handbook Page Focus TBD Features in this Group Features Product Sam Wiskow Development Liam McAndrew Backend Engineering Andreas Brandl Bob Van Landuyt Site Reliability Engineering Hercules Lemke Merscher Itay Rotman Calliope Gardner Nick Duff Stephanie Jackson Taliesin Millhouse Tony Ganga Internal Customers Infrastructure Platforms Department Name Maturity Links Error Budgets Documentation Page Direction Page Capacity Planning Documentation Page Direction Page Ops group Slack Channel #g_production-engineering_ops Handbook Page Focus TBD Features in this Group Features Product Sam Wiskow Development Kam Kyrala Site Reliability Engineering Alex Hanselka Cameron S McFarland Ermia Qasemi Igor Wiedler Kam Kyrala Silvester Wainaina Shreya Shah Internal Customers Infrastructure Platforms Department Runners Platform group Slack Channel #g_runners_platform GitLab Group @gitlab-org/production-engineering/runners-platform Handbook Page Production Engineering Runners Platform Team Focus Runners Platform Features in this Group Features Product Sam Wiskow Development Kam Kyrala Backend Engineering Davis Bickford Joe Shaw Tomasz Maczukin Site Reliability Engineering Anton Starovoytov Kam Kyrala Rehab Hassanein Zoe Braddock Internal Customers Runner Department Gabriel Engel GitLab Dedicated Cells Infrastructure Name Maturity Links GitLab Hosted Runners Viable Documentation Page Direction Page Runway group Slack Channel #g_runway Handbook Page Focus Service enabblement Features in this Group Features Product Sam Wiskow Development JP Toto Site Reliability Engineering Chance Feick Senior Site Reliability Engineer Florian Forster Gonzalo Servat Internal Customers Quality Department Infrastructure Department Tenant Scale stage Slack Channel #s_tenant_scale Handbook Page Tenant Scale Group Product Mark Wood Development Nick Nguyen Software Engineer in Test Andy Hohenner Product Design Chris Micek Cells Infrastructure group Slack Channel #g_cells_infrastructure Focus Cells Features in this Group Features Backend Engineering Manager Manager, Engineering Backend Engineering Bojan Marjanoviƒá Kamil Trzci≈Ñski Jen-Shin Lin R√©my Coutable Sangwoo Han Thong Kuah Site Reliability Engineering Aaron Richter David Leach Tarun Khandelwal Vladimir Glafirov Application Security Engineer Rohit Shambhuni Infrastructure Security Engineer Uday Govindia Name Maturity Links Cell Direction Page Geo group Slack Channel #g_geo GitLab Group @gitlab-org/geo-team Handbook Page Focus Geo Paid GMAU Features in this Group Features Development Lucie Zhao Backend Engineering Aakriti Gupta Chlo√© Fons Douglas Barbosa Alexandre Kamil Trzci≈Ñski Michael Kozono Natanael Silva R√©my Coutable Scott Murray Thong Kuah Frontend Engineering Zack Cuddy UX Research Will Leidheiser Support Mario Mora Daniel Diniz de Noronha Bo Carbonell Technical Writing Achilleas Pipinellis Application Security Engineer Ameya Darshan Internal Customers Infrastructure Department Name Maturity Links Geo Replication Viable Marketing Page Documentation Page Direction Page Disaster Recovery Competitive Documentation Page Direction Page Organizations group Slack Channel #g_organizations GitLab Group @gitlab-org/tenant-scale-group Handbook Page Organizations Team Focus Database PPI Features in this Group Features Backend Engineering Manager Matt Andrews Backend Engineering Abdul Wadood Alex Pooley Backend Engineer Drew Blessing Kamil Trzci≈Ñski R√©my Coutable Rutger Wessels Shubham Kumar Shane Maglangit Thong Kuah Tim McCarthy Frontend Engineering Peter Hegman UX Research Will Leidheiser Product Designer Jason Hung Support Bruno Freitas Asmaa Hassan Ahmed Ali Technical Writing Phillip Wells Application Security Engineer Rohit Shambhuni Infrastructure Security Engineer Uday Govindia Internal Customers Quality Department Infrastructure Department Name Maturity Links Groups & Projects Competitive Documentation Page Direction Page Organization Minimal Documentation Page Direction Page Sec section Product Design Valerie Karnes Legal & Corporate Affairs Iris Gorman graph TD; sec[Sec section]-->s_application_security_testing[Application Security Testing stage]; s_application_security_testing-->g_composition_analysis[\"Composition Analysis group\"]; click g_composition_analysis \"/handbook/product/categories/#composition-analysis-group\"; s_application_security_testing-->g_dynamic_analysis[\"Dynamic Analysis group\"]; click g_dynamic_analysis \"/handbook/product/categories/#dynamic-analysis-group\"; s_application_security_testing-->g_secret_detection[\"Secret Detection group\"]; click g_secret_detection \"/handbook/product/categories/#secret-detection-group\"; s_application_security_testing-->g_static_analysis[\"Static Analysis group\"]; click g_static_analysis \"/handbook/product/categories/#static-analysis-group\"; s_application_security_testing-->g_vulnerability_research[\"Vulnerability Research group\"]; click g_vulnerability_research \"/handbook/product/categories/#vulnerability-research-group\"; sec[Sec section]-->s_security_risk_management[Security Risk Management stage]; s_security_risk_management-->g_security_infrastructure[\"Security Infrastructure group\"]; click g_security_infrastructure \"/handbook/product/categories/#security-infrastructure-group\"; s_security_risk_management-->g_security_insights[\"Security Insights group\"]; click g_security_insights \"/handbook/product/categories/#security-insights-group\"; s_security_risk_management-->g_security_platform_management[\"Security Platform Management group\"]; click g_security_platform_management \"/handbook/product/categories/#security-platform-management-group\"; s_security_risk_management-->g_security_policies[\"Security Policies group\"]; click g_security_policies \"/handbook/product/categories/#security-policies-group\"; sec[Sec section]-->s_software_supply_chain_security[Software Supply Chain Security stage]; s_software_supply_chain_security-->g_authentication[\"Authentication group\"]; click g_authentication \"/handbook/product/product-categories#authentation-group\"; s_software_supply_chain_security-->g_authorization[\"Authorization group\"]; click g_authorization \"/handbook/<no value>\"; s_software_supply_chain_security-->g_compliance[\"Compliance group\"]; click g_compliance \"/handbook/product/product-categories#compliance-group\"; s_software_supply_chain_security-->g_pipeline_security[\"Pipeline Security group\"]; click g_pipeline_security \"/handbook/product/categories/#pipeline-security-group\"; Click on a group name to see more details. Application Security Testing stage Slack Channel #s_application-security-testing GitLab Group @gitlab-org/secure Handbook Page Application Security Testing Sub-Department Product Sarah Waldner Development Thomas Woodham Product Design Justin Mandell Composition Analysis group Slack Channel #g_ast-composition-analysis Slack Alias secure_composition_analysis_dev GitLab Group @gitlab-org/secure/composition-analysis-dev Focus Composition Analysis Paid GMAU Features in this Group Features Product John Crowley Development Nick Ilieskou Backend Engineering Oscar Tovar Igor Frenkel Nick Ilieskou Olivier Gonzalez Orin Naaman Yasha Rise Zamir Martins Filho Product Marketing Salman Ladha Support Danny Bailey Technical Writing Russell Dickenson Application Security Engineer Nikhil George Customer Success Bryan Miller Brian Wald Internal Customers Product Security Department Nikhil George Engineering Department Name Maturity Links Software Composition Analysis Viable Documentation Page Direction Page Container Scanning Viable Documentation Page Direction Page Dynamic Analysis group Slack Channel #g_ast-dynamic-analysis Slack Alias secure_dynamic_analysis_be GitLab Group @gitlab-org/secure/dynamic-analysis-be Focus Dynamic Analysis Paid GMAU Features in this Group Features Product John Crowley Development Thomas Woodham Backend Engineering Arpit Gogia David Nelson Hannah Baker Mike Eddington Product Marketing Salman Ladha Support Kate Grechishkina Technical Writing Phillip Wells Application Security Engineer Nikhil George Customer Success Bryan Miller Brian Wald Internal Customers Product Security Department Nikhil George Engineering Department Name Maturity Links DAST Viable Documentation Page Direction Page Fuzz Testing Viable Documentation Page Direction Page API Security Viable Documentation Page Direction Page Attack Emulation Secret Detection group Slack Channel #g_ast-secret-detection Slack Alias ast_secret_detection_team GitLab Group @gitlab-org/secure/secret-detection Focus Secret Detection Paid GMAU Features in this Group Features Product Alana Bellucci Backend Engineering Manager Amar Patel Backend Engineering Ahmed Hemdan Aditya Tiwari Craig Smith Radu Birsan Serena Fang Vishwa Bhat Frontend Engineering Radu Birsan Product Marketing Salman Ladha Technical Writing Phillip Wells Application Security Engineer Nikhil George Customer Success Bryan Miller Brian Wald Internal Customers Product Security Department Nikhil George Engineering Department Name Maturity Links Secret Detection Viable Documentation Page Direction Page Static Analysis group Slack Channel #g_ast-static-analysis Slack Alias secure_static_analysis_team GitLab Group @gitlab-org/secure/static-analysis Focus SAST Paid GMAU Features in this Group Features Product Connor Gilbert Backend Engineering Manager Thiago Figueir√≥ Backend Engineering Adam Cohen Hua Yan Jason Leasure Julian Thome Mher Tolpin Philip Cunningham Shao Ming Tan Thiago Figueir√≥ Product Marketing Salman Ladha Support Christopher Chewa Mutua Technical Writing Russell Dickenson Application Security Engineer Nikhil George Customer Success Bryan Miller Brian Wald Internal Customers Product Security Department Nikhil George Engineering Department Name Maturity Links SAST Viable Documentation Page Direction Page Code Quality Minimal Documentation Page Direction Page Vulnerability Research group Slack Channel #g_ast-vulnerability-research Focus Paid GMAU Features in this Group Features Product Sarah Waldner Backend Engineering Manager Daniel Abeles Backend Engineering Abisheik Magesh Adarsh Dinesh Alexander Dietrich Bhavya Kaushal Daniel Abeles Dinesh Bolkensteyn Isaac Dawson Michael Henriksen Product Marketing Salman Ladha Support Mario Mora Application Security Engineer Nikhil George Internal Customers Product Security Department Dennis Appelt Engineering Department Name Maturity Links GitLab Advisory Database Direction Page Security Risk Management stage Slack Channel #s_srm Product Dean Agron Product Design Justin Mandell Security Infrastructure group Slack Channel #g_srm_security_infrastructure Focus Threat Insights Paid GMAU Features in this Group Features Backend Engineering Manager Ryan Wells Backend Engineering Adrien Narinesingh Bala Kumar Subramani Gregory Havenga Mehmet Emin Inac Micha≈Ç ZajƒÖc Ryan Wells Schmil Monderer Rushik Subba Name Maturity Links Vulnerability Management Viable Documentation Page Direction Page Dependency Management Viable Documentation Page Direction Page Security Insights group Slack Channel #g_srm_security_insights Focus Threat Insights Paid GMAU Features in this Group Features Product Mike Clausen Backend Engineering Brian Williams Charlie Kroon Subashis Chakraborty Ugo Nnanna Okeadu Frontend Engineering Charlie Kroon Dave Pisek Lorenz van Herwaarden Samantha Ming Savas Vedova Product Designer Becka Lippert Product Marketing Salman Ladha Support Gerardo Gutierrez Technical Writing Ryan Lehmann Customer Success Mirko Brandner Yu-Chen Hsueh Internal Customers Product Security Department Greg Myers Name Maturity Links Vulnerability Management Viable Documentation Page Direction Page Dependency Management Viable Documentation Page Direction Page Security Platform Management group Slack Channel #g_srm_security_platform_management Focus Sec section GMAU Features in this Group Features Product Sara Meadzinger Backend Engineering Gal Katz Miki Amos Ross Fuhrman Senior Backend Engineer Frontend Engineering Chen Charnolevsky Dheeraj Joshi Miranda Fluharty Fullstack Engineering Manager Or Gal Product Designer Michael Fangman Product Marketing Salman Ladha Support Gerardo Gutierrez Technical Writing Ryan Lehmann Customer Success Mirko Brandner Yu-Chen Hsueh Internal Customers Product Security Department Greg Myers Name Maturity Links Security Testing Configuration Planned 2024 Direction Page Security Asset Inventories Planned 2024 Direction Page Security Testing Integrations Planned 2024 Direction Page Security Policies group Slack Channel #g_srm_security_policies Focus Security Policies Paid GMAU Features in this Group Features Product Grant Hickman Development Alan (Maciej) Paruszewski Backend Engineering Andy Schoenen Dominic Bauer Md Imam Hossain Marcos Rocha Martin Cavoj Sashi Kumar Kumaresan Frontend Engineering Alexander Turinske Artur Fedorov Martin Cavoj Product Designer Torian Parker Product Marketing Salman Ladha Support Danny Bailey Ulises Fierro Technical Writing Ryan Lehmann Customer Success Mirko Brandner Yu-Chen Hsueh Internal Customers Product Security Department Dominic Couture Security Assurance Department Byron Boots Infrastructure Department Name Maturity Links Security Policy Management Minimal Documentation Page Direction Page Software Supply Chain Security stage Slack Channel #s_govern GitLab Group @gitlab-org/govern Handbook Page Development Thomas Woodham Jerome Ng Product Design Justin Mandell Authentication group Total Engineers Backend 2 2 Slack Channel #g_sscs_authentication Focus Software Supply Chain Security Authentication Paid GMAU Features in this Group Features Product Joe Randazzo Development Adil Farrukh Backend Engineering Aleksei Lipniagov Andrew Evans Bogdan Denkovych Daniele Bracciani Imre Farkas Matthias K√§ppler Shilpa Kundapur Smriti Garg Aboobacker MK Frontend Engineering Eduardo Sanz-Garcia Fernando Cardenas Product Marketing Salman Ladha Support Asmaa Hassan Ahmed Ali Jio Castillo Alvin Gounder Technical Writing Isaac Durham Application Security Engineer Rohit Shambhuni Internal Customers Customer Support Department Product Security Department Rohit Shambhuni Corporate Security Department Infrastructure Department Name Maturity Links System Access Viable Documentation Page Direction Page User Profile Documentation Page Direction Page Authorization group Slack Channel #g_sscs_authorization Focus Software Supply Chain Security Authorization Paid GMAU Features in this Group Features Product Joe Randazzo Development Jay Swain Backend Engineering Ayush Billore Alex Buijs Diane Russel Eugie Limpin Hinam Mehra Ian Anderson Jarka Ko≈°anov√° Matthew MacRae-Bovell Mo Khan Frontend Engineering Daniel Tian Product Designer Ilonah Pelaez Product Marketing Salman Ladha Technical Writing Isaac Durham Application Security Engineer Rohit Shambhuni Internal Customers Product Security Department Rohit Shambhuni Corporate Security Department Security Operations Department Shawn Sichak Name Maturity Links Permissions Viable Documentation Page Direction Page Instance Resiliency Minimal Documentation Page Direction Page Insider Threat Minimal Direction Page Compliance group Slack Channel #g_sscs_compliance Focus Software Supply Chain Security Compliance Paid GMAU Features in this Group Features Product Ian Khor Development Nathan Rosandich Backend Engineering Andrew Jung Harsimar Sandhu Hitesh Raghuvanshi Huzaifa Iftikhar Jean van der Walt Sam Figueroa Frontend Engineering Illya Klymov Sam Figueroa Scott Hampton Product Designer Camellia X. Yang Product Marketing Salman Ladha Technical Writing Evan Read Internal Customers Customer Support Department Product Security Department Dominic Couture Security Assurance Department Byron Boots Infrastructure Department Name Maturity Links Audit Events Viable Documentation Page Direction Page Compliance Management Viable Documentation Page Direction Page Release Evidence Minimal Documentation Page Direction Page Pipeline Security group Slack Channel #g_sscs_pipeline-security Focus Pipeline Security Sum of AMAUs Features in this Group Features Product Jocelyn Eillis Development Fabien Catteau Backend Engineering Alex Scheel Dmytro Biryukov Erick Bajao Fabien Catteau Jayakrishnan Mallissery Shabini Rajadas Sam Joan Roque-Worcel Frontend Engineering Mireya Andres Support Nilanka De Silva Paul Murray Technical Writing Marcel Amirault Internal Customers Quality Department UX Department Infrastructure Department AutoDevOps and Kubernetes Group Product Security Department Name Maturity Links Artifact Security Minimal Documentation Page Direction Page Secrets Management Minimal Documentation Page Direction Page Possible future Stages We have boundless ambition , and we expect GitLab to continue to add new stages to the DevOps lifecycle. Below is a list of future stages we are considering: Data, maybe leveraging Meltano product Networking, maybe leveraging some of the open source standards for networking and/or Terraform networking providers Design, we already have design management today Stages are different from the application types you can service with GitLab. Maturity Not all categories are at the same level of maturity. Some are just minimal and some are lovable. See the category maturity page to see where each category stands. Other functionality This list of other functionality so you can easily find the team that owns it. Maybe we should make our features easier to search to replace the section below. Other functionality in Plan stage Plan stage Project Management group Project Management group assignees milestones due dates labels issue weights quick actions email notifications to-do list Real-time features Knowledge group Knowledge group markdown functionality rich text editor Other functionality in Create stage Create stage Code Review group Code Review group Merge Requests GitLab CLI Remote Development group Remote Development group GitLab Workflow extension for Visual Studio Code Other functionality in Verify CI Group CI Group CI Abuse Response Pipeline Authoring Group Pipeline Authoring Group CI/CD Template Management and Contributions Other functionality in Monitor stage Monitor stage Other functionality in Engineering Productivity Engineering Productivity GDK Other functionality in Developer Experience Developer Experience Reference Architectures GitLab Environment Toolkit (GET) GitLab Performance Tool (GPT) Performance Test Data Zero Downtime Testing Tool Internal Customers: Gitaly , SaaS Platforms section , Infrastructure Department , Support Department , Customer Success Other functionality in Analytics Analytics Product Analytics group Product Analytics group Analytics Dashboards - used by many groups to add visualizations or provide pre-configured dashboards to users Facilitated functionality Some product areas are have a broad impact across multiple stages. Examples of this include, among others: Shared project views, like the project overview and settings page. Functionality specific to the admin area and not tied to a feature belonging to a particular stage. UI components available through our design system, Pajamas . Dashboards for displaying analytics, such as Product Analytics, Value Stream Analytics, and others. While the mental models for these areas are maintained by specific stage groups, everyone is encouraged to contribute within the guidelines that those teams establish. For example, anyone can contribute a new setting following the established guidelines for Settings. When a contribution is submitted that does not conform to those guidelines, we merge it and ‚Äúfix forward‚Äù to encourage innovation. If you encounter an issue falling into a facilitated area: For issues that relate to updating the guidelines, apply the group::category label for the facilitating group. For issues that relate to adding content related to a facilitated area, apply the group::category label for the most closely related group. For example, when adding a new setting related to Merge Requests, apply the group::source code label. Shared responsibility functionality There are certain product capabilities that are foundational in nature and affect or refer to horizontal components of the architecture that have an impact across functional groups and stages. These capabilities may refer to ‚ÄúFacilitated Functionality‚Äù (see section above) where the mental models are owned by a particular group, while anyone can contribute. However, there may be others that will not have a clear owner because they don‚Äôt fall squarely into any particular group‚Äôs purview of product categories. Prime examples of this are issues related to the improvement or evolution of foundational components, frameworks and libraries that are used by several or all groups across the organization. Another example could be components created by special task groups in the past that have been since dissolved and that have not required continued development to justify the funding of a dedicated permanent group to maintain them. Whatever the source of the functionality, rather than thinking of these components as ‚Äúnot having an owner‚Äù, it is important to think of them as being owned by everyone through the lens of shared responsibility. ‚ÄúShared responsibility‚Äù means that every group should be committed and responsible to contribute to their continued maintenance, improvement and innovation. Contribution , in this context, may manifest in different ways: Triage by coordinating conversations with stakeholders from different functions and at different levels to find the right owner and/or set the right level of priority. Product feature scoping and UX design by fleshing out the details of implementation in requirements documents and/or mockups. Technical scoping and feasibility analysis for possible technical and architectural approaches to implementation Actual implementation and release activities It does not mean, however, that a single group should necessarily be solely responsible for all of these activities. Multiple groups could end up collaborating in execution. This coordination however requires a careful triage of the shared responsibility issues in the issue tracker where a single DRI coordinates these activities. For more information please review this section in the quality department handbook to learn more about a decentralized approach to triaging these types of issues. Categories A-Z Category Group Acquisition acquisition Acquisition Activation activation Activation Add-on Provisioning add-on_provisioning Provision GitLab Advisory Database advisory_database Vulnerability Research AI Abstraction Layer ai_abstraction_layer AI Framework AI Agents ai_agents MLOps AI Evaluation ai_evaluation AI Framework AI Research ai_research AI Framework API Security api_security Dynamic Analysis Application Instrumentation application_instrumentation Analytics Instrumentation Artifact Security artifact_security Pipeline Security Attack Emulation attack_emulation Dynamic Analysis Audit Events audit_events Compliance Auto DevOps auto_devops Environments Backup/Restore of GitLab instances backup_restore Durability Build build GitLab Build Capacity Planning capacity_planning Observability Cell cell Cells Infrastructure Variables ci_variables Pipeline Authoring Cloud Connector cloud_connector Cloud Connector Cloud Native Installation cloud_native_installation Self Managed Code Quality code_quality Static Analysis Code Review Workflow code_review_workflow Code Review Code Search code_search Global Search Code Suggestions code_suggestions Code Creation Code Testing and Coverage code_testing Pipeline Execution Compliance Management compliance_management Compliance Component Catalog component_catalog Pipeline Authoring Consumables Cost Management consumables_cost_management Utilization Container Registry container_registry Container Registry Container Scanning container_scanning Composition Analysis Continuous Delivery continuous_delivery Environments Continuous Integration (CI) continuous_integration Pipeline Execution Custom Dashboards Foundation custom_dashboards_foundation Platform Insights CustomersDot and quote to cash integrations customersdot_and_quote_to_cash_integrations Fulfillment Platform Database database Database Frameworks DataOps dataops DataOps GitLab Dedicated dedicated Environment Automation Delivery delivery GitLab Deploy Framework GitLab Release Dependency Firewall dependency_firewall Container Registry Dependency Management dependency_management Security Infrastructure Security Insights Deployment Management deployment_management Environments Design Management design_management Product Planning Pajamas Design System design_system Design System DevOps Reports devops_reports Optimize Disaster Recovery disaster_recovery Geo DORA Metrics dora_metrics Optimize Duo Chat duo_chat Duo Chat GitLab Duo Settings duo_setting Custom Models Duo Workflow duo_workflow Duo Workflow DAST dynamic_application_security_testing Dynamic Analysis Editor Extensions editor_extensions Editor Extensions Environment Management environment_management Environments Error Budgets error_budgets Observability Feature Flags feature_flags Environments Fleet Visibility fleet_visibility Runner Fulfillment Infradev fulfillment_infradev Fulfillment Platform Fuzz Testing fuzz_testing Dynamic Analysis Geo Replication geo_replication Geo Git git Git Gitaly gitaly Gitaly GitLab CLI gitlab_cli Code Review GitLab Documentation Site gitlab_docs Global Search global_search Global Search Groups & Projects groups_and_projects Organizations Helm Chart Registry helm_chart_registry Package Registry GitLab Hosted Runners hosted_runners Runners Platform Hosted Runners Importers importers Import Incident Management incident_management Platform Insights Infrastructure as Code infrastructure_as_code Environments Insider Threat insider_threat Authorization Instance Resiliency instance_resiliency Authorization Job Artifacts job_artifacts Pipeline Execution Markdown markdown Knowledge MCP Server mcp_server API Merge Trains merge_trains Pipeline Execution MLOps mlops MLOps Mobile DevOps mobile_devops Mobile DevOps Model Personalization model_personalization Custom Models Navigation navigation Personal Productivity Notifications notifications Personal Productivity Observability observability Platform Insights OKR Management okr_management Product Planning Omnibus Package omnibus_package Self Managed On-call Schedule Management on_call_schedule_management Platform Insights Onboarding onboarding Acquisition Organization organization Organizations Package Registry package_registry Package Registry Pages pages Knowledge Permissions permissions Authorization Pipeline Composition pipeline_composition Pipeline Authoring Plan Provisioning plan_provisioning Provision Portfolio Management portfolio_management Product Planning Product Analytics product_analytics Platform Insights US Public Sector Services pubsec_services US PubSec Quality Management quality_management Product Planning Rate Limiting Framework rate_limiting Foundations Redis redis Durability Release Evidence release_evidence Compliance Release Orchestration release_orchestration Environments Requirements Management requirements_management Product Planning Review Apps review_apps Pipeline Execution GitLab Runner Core runner Runner Seat Cost Management seat_cost_management Seat Management Secret Detection secret_detection Secret Detection Secrets Management secrets_management Pipeline Security Security Asset Inventories security_asset_inventories Security Platform Management Security Policy Management security_policy_management Security Policies Security Testing Configuration security_testing_configuration Security Platform Management Security Testing Integrations security_testing_integrations Security Platform Management Self-Hosted Models self-hosted_models Custom Models Service Desk service_desk Project Management Service Ping service_ping Analytics Instrumentation Settings settings Personal Productivity Software Composition Analysis software_composition_analysis Composition Analysis Source Code Management source_code_management Source Code Software Supply Chain Security sscs SAST static_application_security_testing Static Analysis Subscription Management subscription_management Subscription Management Switchboard switchboard Switchboard System Access system_access Authentication Team Planning team_planning Project Management Text Editors text_editors Knowledge User Management user_management Seat Management User Profile user_profile Authentication Value Stream Management value_stream_management Optimize Virtual Registry virtual_registry Container Registry Vulnerability Management vulnerability_management Security Infrastructure Security Insights Web IDE web_ide Remote Development Wiki wiki Knowledge Workspaces workspaces Remote Development Features by Group List of features by product group Features Category Quick Lookup Lookup table of groups and slack channels by feature category GitLab the Product About GitLab the product Last modified July 8, 2025: EUS - Access Requests Update ( b88590d3 ) View page source -  - please contribute .",
    "headings": [
      "Product sections, stages, groups, and categories",
      "Interfaces",
      "Hierarchy",
      "Naming",
      "More Details",
      "Solutions",
      "Capabilities",
      "Layers",
      "Category Statuses",
      "Changes",
      "Examples",
      "Changing group name",
      "Changing category name",
      "Changing category maturity",
      "DevOps Stages",
      "Analytics section",
      "CD section",
      "CI section",
      "Core Platform section",
      "Data Science section",
      "Dev section",
      "Fulfillment section",
      "Growth section",
      "Infrastructure Platforms section",
      "Sec section",
      "Possible future Stages",
      "Maturity",
      "Other functionality",
      "Other functionality in Plan stage",
      "Other functionality in Create stage",
      "Other functionality in Verify",
      "Other functionality in Monitor stage",
      "Other functionality in Engineering Productivity",
      "Other functionality in Developer Experience",
      "Other functionality in Analytics",
      "Facilitated functionality",
      "Shared responsibility functionality",
      "Categories A-Z"
    ],
    "word_count": 10973,
    "extracted_at": "2025-07-21 20:14:54"
  },
  {
    "document_id": "gitlab-handbook-670645",
    "url": "https://handbook.gitlab.com/handbook/engineering/workflow/",
    "title": "Product Development Timeline",
    "category": "Product",
    "content": "Engineering Workflow This document explains the workflow for anyone working with issues in GitLab Inc. This document explains the workflow for anyone working with issues in GitLab Inc. For the workflow that applies to the wider community see the contributing guide . GitLab Flow Products at GitLab are built using the GitLab Flow . We have specific rules around code review . Reverting a merge request In line with our values of short toes , making two-way-door decisions and bias for action , anyone can propose to revert a merge request. When deciding whether an MR should be reverted, the following should be true: Something broke and there is no acceptable work around. Examples of this include: A feature broke and is categorized as ~severity::1 or ~severity::2 . See severity labels Master broken There are failing migrations There are no dependencies on the change. For example, a database migration has not been run on production. Reverting merge requests that add non-functional changes and don‚Äôt remove any existing capabilities should be avoided in order to prevent designing by committee. The intent of a revert is never to place blame on the original author. Additionally, it is helpful to inform the original author so they can participate as a DRI on any necessary follow up actions. The pipeline::expedited label, and master:broken or master:foss-broken label must be set on merge requests that fix master to skip some non-essential jobs in order to speed up the MR pipelines. Broken master If you notice that pipelines for the master branch of GitLab or GitLab FOSS are failing, returning the build to a passing state takes priority over everything else development related, since everything we do while tests are broken may: break existing functionality introduce new bugs and security issues impede productivity for all of engineering and our release processes What is a broken master ? A broken master is an event where a pipeline in master is failing. The cost to fix test failures increases exponentially as time passes due to merged results pipelines used. Auto-deploys, as well as monthly releases and security releases, depend on gitlab-org/gitlab master being green for tagging and merging of backports . Our aim should be to keep master free from failures, not to fix master only after it breaks. Any question or suggestion is welcome in the #g_development_analytics channel who owns the broken master automation proceess. Broken master service level objectives There are two phases for fixing a broken master incident which have a target SLO to clarify the urgency. The resolution phase is dependent on the completion of the triage phase. Phase Service level objective DRI Triage 4 hours from the 2nd occurrence of a broken master incident creation until assignment group labeled on the incident Resolution 4 hours from assignment to DRI until incident is resolved Merge request author or team of merge request author or dev on-call engineer Note: Recurring incidents are negatively impacting master pipeline stability and development velocity. Any untriaged, recurring incident will be automatically escalated to #dev-escalation following this timeline: timeline title Pipeline incident escalation section Pipeline failure incident #1 not recurring in 24 hours and no human activity : Auto closed any human update on incident #1 : labels incident #1 with escalation skipped : does not trigger any group ping or escalation same job failures recurring in incident #2 : closes incident #2 as duplicate of incident #1 : labels incident #1 with escalation needed : pings attributed group channel after 10 minutes of inactivity : 2nd ping to group channel after 30 minutes of inactivity : pings stage channel in after 3 hours 40 minutes of inactivity : escalates to dev-escalation after 4 hours of inactivity : labels incident #1 is escalated If an incident becomes a blocker for MRs and deployments before being auto-escalated, the team member being impacted should refer to the broken master escalation steps to request help from the current engineer on-call as early as needed. Additional details about the phases are listed below. Broken master escalation Recurring broken master incidents are automatically escalated to #dev-escalation unless it is triaged within 4 hours. If a broken master is blocking your team before auto-escalation (such as creating a security release) then you should: See if there is a non-resolved broken master incident with a DRI assigned and check discussions there. Check discussions on the failure notification in the triage DRI‚Äôs group Slack channel to see if anyone is investigating the incident you are looking at. See Triage broken master for information on who the triage DRI is. If there is not a clear DRI or action to resolve, use the dev escalation process to solicit help in the broken master incident. Escalation on weekends and holidays Master broken incidents must be manually escalated to #dev-escalation on weekends and holidays if necessary. Without a manual escalation, the service level objective can extend to the next working day; that is, triage DRI is expected to triage the incident on the next working day. Regardless of when the label was applied, we always consider an incident to be in an escalated state as long as it has the ~‚Äúescalation::escalated‚Äù label, until the incident is resolved. Triage broken master Definitions Flaky test: A test that fails, then succeeds when the CI job running the test is retried. Broken master: A test that fails even when the CI job running the test is retried. A failing test that can be reproduced locally on the master branch. Attribution If a failed test can be traced to a group through its feature_category metadata, the broken master incident associated with that test will be automatically labeled with this group as the triage DRI through this line of code . In addition, Slack notifications will be posted to the group‚Äôs Slack channel to notify them about ongoing incidents. The triage DRI is responsible for monitoring, identifying, and communicating the incident. A notification will be sent to the attributed group‚Äôs Slack channel and #master-broken . Triage DRI Responsibilities Monitor Pipeline failures are sent to the triage DRI‚Äôs group channel, if one is identified, and will be reviewed by its group members. The failures will also be sent to #master-broken for extra communication. If an incident is announced in a DRI group‚Äôs Slack channel, the channel member should acknowledge it and assume the triage DRI responsibilities. If the incident is a duplicate of an existing incident, use the following quick actions to close the duplicate incident: /assign me /duplicate #<original_issue_id> /copy_metadata #<original_issue_id> If the incident is not a duplicate, and needs some investigation: Assign the incident to yourself: /assign me Change the incident status to Acknowledged (in the right-side menu). In Slack, the :ack: emoji reaction should be applied by the triage DRI to signal the linked incident status has been changed to Acknowledged and the incident is actively being triaged. Identification Review non-resolved broken master incidents for the same failure. If the broken master is related to a test failure, search the spec file in the issue search to see if there‚Äôs a known failure::flaky-test issue. If this incident is due to non-flaky reasons , communicate in #development , #backend , and #frontend using the Slack Workflow. Announce that master is fixed by enter /broadcast master fixed in the chat bar of the #master-broken channel to invoke this workflow, and then click Continue the broadcast . Create a revert MR directly to save some time in case we need to revert down the line. If you are reverting an MR that performs a database migration, you need to follow the Deployment blockers process to prevent the migration from proceeding to deploy and running on staging and production. If the migration is executed in any environments, communicate to the release managers in #releases channel and discuss whether it‚Äôs appropriate to create another migration to roll back the first migration or turn the migration into a no-op by following Disabling a data migration steps . If you identified that master fails for a flaky reason , and it cannot be reliably reproduced (i.e. running the failing spec locally or retrying the failing job): Quarantine the failing test to restore pipeline stability within 30 minutes if the flakiness is continuously causing master pipeline incidents. Alternatively, if the failure does not seem disruptive, and you have a fix that you are confident with, submit the fix MR with the ~‚Äúmaster:broken‚Äù label to ensure your pipeline is expedited. If a flaky test issue already exists, add a comment in it with a link to the failed broken master incident and/or failed job. We have automation in place to create test failure issues automatically. The issue is named after the spec path, which can be a search keyword. If a flaky test issue doesn‚Äôt exist, create an issue from the New issue button in top-right of the failing job page (that will automatically add a link to the job in the issue), and apply the Broken Master - Flaky description template. Add the appropriate labels to the main incident: # Add those labels /label ~ \"master-broken::flaky-test\" /label ~ \"failure::flaky-test\" # Pick one of those labels /label ~ \"flaky-test::dataset-specific\" /label ~ \"flaky-test::datetime-sensitive\" /label ~ \"flaky-test::state leak\" /label ~ \"flaky-test::random input\" /label ~ \"flaky-test::transient bug\" /label ~ \"flaky-test::unreliable dom selector\" /label ~ \"flaky-test::unstable infrastructure\" /label ~ \"flaky-test::too-many-sql-queries\" Close the incident Add the stacktrace of the error to the incident (if it is not already posted by gitlab-bot), as well as Capybara screenshots if available in the job artifacts. To find the screenshot: download the job artifact, and copy the screenshot in artifacts/tmp/capybara to the incident if one is available. Identify the merge request that introduced the failures. There are a few possible approaches to try: Check the commit in the failed job, and find the associated MR, if any (it‚Äôs not as simple most of the times though). Look at the project activity , and search for keywords in the recent merged events. Look at the recent commits on master and search for keywords you might see in the failing job/specs (e.g. if you see a geo spec file is failing, specifically the shard spec, search for those keywords in the commit history). You can filter with the Merge branch text to only see merge commits. Look at the spec file history or blame views, by clicking respectively the History or Blame button at the top of a file in the file explorer, e.g. at https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/backup.rb . If you identified a merge request, assign the incident to its author if they are available at the moment. If they are not available, assign to the maintainer that approved/merged the MR. If none are available, mention the team Engineering Manager and seek assistance in the #development Slack channel. You can find the team somebody is in and who‚Äôs the manager for that team by searching in https://handbook.gitlab.com/handbook/product/categories/ . If no merge request was identified, ask for assistance in the #development Slack channel. Please set the appropriate ~master-broken:* label from the list below: /label ~ \"master-broken::caching\" /label ~ \"master-broken::ci-config\" /label ~ \"master-broken::dependency-upgrade\" /label ~ \"master-broken::external-dependency-unavailable\" /label ~ \"master-broken::flaky-test\" /label ~ \"master-broken::fork-repo-test-gap\" /label ~ \"master-broken::pipeline-skipped-before-merge\" /label ~ \"master-broken::test-selection-gap\" /label ~ \"master-broken::need-merge-train\" /label ~ \"master-broken::gitaly\" /label ~ \"master-broken::state leak\" /label ~ \"master-broken::infrastructure\" /label ~ \"master-broken::infrastructure::failed-to-pull-image\" /label ~ \"master-broken::infrastructure::frunner-disk-full\" /label ~ \"master-broken::infrastructure::gitlab-com-overloaded\" /label ~ \"master-broken::job-timeout\" /label ~ \"master-broken::multi-version-db-upgrade\" /label ~ \"master-broken::missing-test-coverage\" /label ~ \"master-broken::undetermined\" (Optional) Pre-resolution If the triage DRI believes that there‚Äôs an easy resolution by either: Reverting a particular merge request. Making a quick fix (for example, one line or a few similar simple changes in a few lines). The triage DRI can create a merge request, assign to any available maintainer, and ping the resolution DRI with a @username FYI message. Additionally, a message can be posted in #backend_maintainers or #frontend_maintainers to get a maintainer take a look at the fix ASAP. If the failures occur only in test-on-gdk jobs, it‚Äôs possible to stop those jobs from being added to new pipelines while the cause is being fixed. See the runbook for details. Pro-tips for Triage DRI For an initial assessment of what might have contributed to the failure, we can try the experimental AI-assisted root cause analysis feature following this documentation . To confirm flakiness, you can use the @gitlab-bot retry_job <job_id> or the @gitlab-bot retry_pipeline <pipeline_id> command to retry the failed job(s), even if you are not a project maintainer. Note , The retry_job command can fail for the following reasons: Retrying the same job twice with the retry_job command will result in a failure message because each failed job can only be retried once. If there is no response to either of the retry commands, you are likely invoking them in non-supported projects. If you‚Äôd like to request for the commands to be added to your project, please make an issue and inform #g_development_anallytics . You are encouraged to self-serve the MR following this example and submit it for review for maximum efficiency. Resolution of broken master The merge request author of the change that broke master is the resolution DRI. In the event the merge request author is not available, the team of the merge request author will assume the resolution DRI responsibilities. If a DRI has not acknowledged or signaled working on a fix, any developer can take assume the resolution DRI responsibilities by assigning themselves to the incident. Responsibilities of the resolution DRI Prioritize resolving recurring broken master incidents over new bug/feature work. Resolution options include: Default : Revert the merge request which caused the broken master . If a revert is performed, create an issue to reinstate the merge request and assign it to the author of the reverted merge request. Reverts can go straight to maintainer review and require 1 maintainer approval. The maintainer can request additional review/approvals if the revert is not trivial. The pipeline::expedited label, and master:broken or master:foss-broken label must be set on merge requests that fix master to skip some non-essential jobs in order to speed up the MR pipelines. Quarantine the failing test if you can confirm that it is flaky (e.g. it wasn‚Äôt touched recently and passed after retrying the failed job). Add the quarantined test label to the failure::flaky-test issue you previously created during the identification phase. Create a new merge request to fix the failure if revert is not possible or would introduce additional risk. This should be treated as a priority::1 severity::1 issue. To ensure efficient review of the fix, the merge request should only contain the minimum change needed to fix the failure. Additional refactor or improvement to the code should be done as a follow-up. The resolution DRI must address all failures in the pipeline. Be mindful that the initial opened issue for the incident will only announce the jobs that failed so far. But after you fix those jobs, other subsequent jobs could fail on the same pipeline that you‚Äôre triaging. The triage DRI is responsible for this whole pipeline, and not only for the initial failed jobs. Apply the Pick into auto-deploy label (along with the needed severity::1 and priority::1 ) to make sure deployments are unblocked. If the broken master incident affects any stable branches (e.g. https://gitlab.com/gitlab-org/gitlab/-/merge_requests/25274 ) or is caused by a flaky failure, open new merge requests directly against the active stable branches and ping the current release manager in the merge requests to avoid delays in releases / security releases. See How to fix a broken stable branch guide for more details. Communicate in #master-broken when the fix was merged Once the incident is resolved, select the Broadcast Master Fixed workflow in the #master-broken channel, and click Continue the broadcast to communicate it. When master build was failing and the underlying problem was quarantined / reverted / temporary workaround created but the root cause still needs to be discovered, the investigation should continue directly in the incident. Create an issue for the Development Analytics group describing how the broken master incident could have been prevented in the Merge Request pipeline. When resolution steps are completed and all of the required fixes are merged, close the incident. Responsibilities of authors and maintainers Once the resolution DRI announces that master is fixed: Maintainers should start a new merged results pipeline (for canonical MRs) and enable ‚ÄúAuto-merge‚Äù. There‚Äôs no need to rebase once master has been fixed since we use merged results pipelines . (For forks only) Authors should rebase their open merge requests (since merged results pipelines isn‚Äôt supported in these cases). Merging during broken master Merge requests can not be merged to master until the incident status is changed to Resolved . This is because we need to try hard to avoid introducing new failures, since it‚Äôs easy to lose confidence if it stays red for a long time. In the rare case where a merge request is urgent and must be merged immediately , team members can follow the process below to have a merge request merged during a broken master . Criteria for merging during broken master Merging while master is broken can only be done for: Merge requests that need to be deployed to GitLab.com to alleviate an ongoing production incident. Merge requests that fix broken master issues (we can have multiple broken master issues ongoing). How to request a merge during a broken master First, ensure the latest pipeline has completed less than 2 hours ago (although it is likely to have failed due to gitlab-org/gitlab using merged results pipelines ). Next, make a request on Slack: Post to either the #frontend_maintainers or #backend_maintainers Slack channels (whichever one is more relevant). In your post outline why the merge request is urgent . Make it clear that this would be a merge during a broken master , optionally add a link to this page in your request. Instructions for the maintainer A maintainer who sees a request to merge during a broken master must follow this process. Note, if any part of the process below disqualifies a merge request from being merged during a broken master then the maintainer must inform the requestor as to why in the merge request (and optionally in the Slack thread of the request). First, assess the request: Add the :eyes: emoji to the Slack post so other maintainers know it is being assessed. We do not want multiple maintainers to work on fulfilling the request. Assess whether the merge request is urgent or not . If in doubt, ask the requestor for more details in the merge request about why it is urgent. Next, ensure that all the following conditions are met: The latest pipeline has completed less than 2 hours ago (although it is likely to have failed due to gitlab-org/gitlab using merged results pipelines ). All of the latest pipeline failures also happen on master . There is a corresponding non-resolved broken master incidents . See the ‚ÄúTriage DRI Responsibilities‚Äù steps above for more details. Next, add a comment to the merge request mentioning that the merge request will be merged during a broken master , and link to the broken master incident. For example: Merge request will be merged while `master` is broken. Failure in < JOB_URL > happens in `master` and is being worked on in < INCIDENT_URL > . Next, merge the merge request: If the ‚ÄúMerge‚Äù button is enabled (this is unlikely), then click it. Otherwise, you must: Unset the ‚ÄúPipelines must succeed‚Äù setting for the gitlab-org/gitlab project . Click the ‚ÄúMerge‚Äù button. If the merge train is enabled, a warning will be displayed stating the code changes won‚Äôt be validated by the merge train. Considering the criticality of the merge request it is acceptable to dismiss the warning. Set the ‚ÄúPipelines must succeed‚Äù setting to be on again. Broken master mirrors #master-broken-mirrors was created to remove duplicative notifications from the #master-broken channel which provides a space for Release Managers and the Developer Experience teams to monitor failures for the following projects: https://gitlab.com/gitlab-org/security/gitlab https://dev.gitlab.org/gitlab/gitlab-ee The #master-broken-mirrors channel is to be used to identify unique failures for those projects and flaky failures are not expected to be retried/reacted to in the same way as #master-broken . Broken JiHu validation pipelines We run JiHu validation pipelines in some of the merge requests, and it can be broken at times. When this happens, check What to do when the validation pipeline failed for more details. Security Issues Security issues are managed and prioritized by the security team. If you are assigned to work on a security issue in a milestone, you need to follow the Security Release process . If you find a security issue in GitLab, create a confidential issue mentioning the relevant security and engineering managers, and post about it in #security . If you accidentally push security commits to gitlab-org/gitlab , we recommend that you: Delete the relevant branch ASAP Inform a release manager in #releases . It may be possible to execute a garbage collection (via the Housekeeping task in the repository settings) to remove the commits. For more information on how the entire process works for security releases, see the documentation on security releases . Regressions A ~regression implies that a previously verified working functionality no longer works. Regressions are a subset of bugs. The ~regression label is used to imply that the defect caused the functionality to regress. The label tells us that something worked before and it needs extra attention from Engineering and Product Managers to schedule/reschedule. The regression label does not apply to bugs for new features for which functionality was never verified as working . These, by definition, are not regressions. A regression should always have the ~regression:xx.x label on it to designate when it was introduced. If it‚Äôs unclear when it was introduced, the latest released version should be added. Regressions should be considered high priority issues that should be solved as soon as possible, especially if they have severe impact on users. When identified in time, for example in a SaaS deployment, fixing them within the same milestone avoids their being included with that release. Use of the ~regression label on MRs For better efficiency, it‚Äôs common for a regression to be fixed in an MR without an issue being created, either through reversion of the original MR or a code change. Regardless of whether there is an issue or not, the MR should also have the ~regression and ~regression:xx.x labels. This allows for trends to be accurately measured. Basics Start working on an issue you‚Äôre assigned to. If you‚Äôre not assigned to any issue, find the issue with the highest priority and relevant label you can work on, and assign it to yourself. You can use this query, which sorts by priority for the started milestones , and filter by the label for your team. If you need to schedule something or prioritize it, apply the appropriate labels (see Scheduling issues ). If you are working on an issue that touches on areas outside of your expertise, be sure to mention someone in the other group(s) as soon as you start working on it. This allows others to give you early feedback, which should save you time in the long run. If you are working on an issue that requires access to specific features, systems, or groups, open an access request to obtain access on staging and production for testing your changes after they are merged. When you start working on an issue: Add the workflow::in dev label to the issue. Create a merge request (MR) by clicking on the Create merge request button in the issue. This creates a MR with the labels, milestone and title of the issue. It also relates the just created MR to the issue. Assign the MR to yourself. Work on the MR until it is ready, it meets GitLab‚Äôs definition of done , and the pipeline succeeds. Edit the description and click on the Remove the Draft: prefix from the title button. Assign it to the suggested reviewer(s) from Reviewer Roulette . If there are reviewers for multiple categories, for example: frontend, backend and database, assign all of them. Alternatively, assign someone who specifically needs to review. When assigning, also @mention them in the comments, requesting a review. (Optionally) Unassign yourself from the MR. Some may find leaving the MR assigned to themselves easier to track the MRs they are responsible for by using the built in MR button/notification icon in the GitLab navigation bar. Change the workflow label of the issue to workflow::in review . If multiple people are working on the issue or multiple workflow labels might apply, consider breaking the issue up. Otherwise, default to the workflow label farthest away from completion. Potentially, a reviewer offers feedback and assigns back to the author. The author addresses the feedback and this goes back and forth until all reviewers approve the MR. After approving, the reviewer in each category unassigns themselves and assigns the suggested maintainer in their category. Maintainer reviews take place with any back and forth as necessary and attempts to resolve any open threads. The last maintainer to approve the MR, follows the Merging a merge request guidelines. (Optionally) Change the workflow label of the issue to workflow::verification , to indicate all the development work for the issue has been done and it is waiting to be deployed and verified. We will use this label in cases where the work was requested to be verified by product OR we determined we need to perform this verification in production. When the change has been verified, change the workflow label to workflow::complete and close the issue. You are responsible for the issues assigned to you. This means it has to ship with the milestone it‚Äôs associated with. If you are not able to do this, you have to communicate it early to your manager and other stakeholders (e.g. the product manager, other engineers working on dependent issues). In teams, the team is responsible for this (see Working in Teams ). If you are uncertain, err on the side of overcommunication. It‚Äôs always better to communicate doubts than to wait. You (and your team, if applicable) are responsible for: Ensuring that your changes apply cleanly to GitLab Enterprise Edition . The testing of a new feature or fix, especially right after it has been merged and packaged. Creating any relevant feature or API documentation Shipping secure code, (see Security is everyone‚Äôs responsibility ). Once a release candidate has been deployed to the staging environment, please verify that your changes work as intended. We have seen issues where bugs did not appear in development but showed in production (e.g. due to CE-EE merge issues). Be sure to read general guidelines about issues and merge requests . Updating Workflow Labels Throughout Development Team members use labels to track issues throughout development. This gives visibility to other developers, product managers, and designers, so that they can adjust their plans during a monthly iteration. An issue should follow these stages: workflow::in dev : A developer indicates they are developing an issue by applying the in dev label. workflow::in review : A developer indicates the issue is in code review and UX review by replacing the in dev label with the in review label. workflow::verification : A developer indicates that all the development work for the issue has been done and is waiting to be deployed, then verified. workflow::complete : A developer indicates the issue has been verified and everything is working by adding the workflow::complete label and closing the issue. Workflow labels are described in our Development Documentation and Product Development Flow . Working in Teams For larger issues or issues that contain many different moving parts, you‚Äôll be likely working in a team. This team will typically consist of a backend engineer , a frontend engineer , a Product Designer and a product manager . Teams have a shared responsibility to ship the issue in the planned release. If the team suspects that they might not be able to ship something in time, the team should escalate / inform others as soon as possible. A good start is informing your manager. It‚Äôs generally preferable to ship a smaller iteration of an issue, than ship something a release later. Consider starting a Slack channel for a new team, but remember to write all relevant information in the related issue(s). You don‚Äôt want to have to read up on two threads, rather than only one, and Slack channels are not open to the greater GitLab community. If an issue entails frontend and backend work, consider separating the frontend and backend code into separate MRs and merge them independently under feature flags . This will ensure frontend/backend engineers can work and deliver independently. It‚Äôs important to note that even though the code is merged behind a feature flag, it should still be production ready and continue to hold our definition of done . A separate MR containing the integration, documentation (if applicable) and removal of the feature flags should be completed in parallel with the backend and frontend MRs, but should only be merged when both the frontend and backend MRs are on the master branch. In the spirit of collaboration and efficiency , members of teams should feel free to discuss issues directly with one another while being respectful of others‚Äô time . Convention over Configuration Avoid adding configuration values in the application settings or in gitlab.yml . Only add configuration if it is absolutely necessary. If you find yourself adding parameters to tune specific features, stop and consider how this can be avoided. Are the values really necessary? Could constants be used that work across the board? Could values be determined automatically? See Convention over Configuration for more discussion. Choosing Something to Work On Start working on things with the highest priority in the current milestone. The priority of items are defined under labels in the repository, but you are able to sort by priority. After sorting by priority, choose something that you‚Äôre able to tackle and falls under your responsibility. That means that if you‚Äôre a frontend developer, you work on something with the label frontend . To filter very precisely, you could filter all issues for: Milestone: Started Assignee: None (issue is unassigned) Label: Your label of choice. For instance CI/CD , Discussion , Quality , frontend , or Platform Sort by priority Use this link to quickly set the above parameters . You‚Äôll still need to filter by the label for your own team. If you‚Äôre in doubt about what to work on, ask your lead. They will be able to tell you. Triaging and Reviewing Code from the rest of the Community It‚Äôs every developers‚Äô responsibilities to triage and review code contributed by the rest of the community, and work with them to get it ready for production. Merge requests from the rest of the community should be labeled with the Community contribution label. When evaluating a merge request from the community, please ensure that a relevant PM is aware of the pending MR by mentioning them. This should be to be part of your daily routine. For instance, every morning you could triage new merge requests from the rest of the community that are not yet labeled Community contribution and either review them or ask a relevant person to review it. Make sure to follow our Code Review Guidelines . Working with GitLab.com GitLab.com is a very large instance of GitLab Enterprise Edition. It runs release candidates for new releases, and sees a lot of issues because of the amount of traffic it gets. There are several internal tools available for developers at GitLab to get data about what‚Äôs happening in the production system: Performance Data There is extensive monitoring publicly available for GitLab.com. For more on this and related tools, see the monitoring handbook . Error Reporting Sentry is our error reporting tool log.gprd.gitlab.net has production logs prometheus.gitlab.com has alerts for the production team Scheduling Issues GitLab Inc has to be selective in working on particular issues. We have a limited capacity to work on new things. Therefore, we have to schedule issues carefully. Product Managers are responsible for scheduling all issues in their respective product areas , including features, bugs, and tech debt. Product managers alone determine the prioritization , but others are encouraged to influence the PMs decisions. The UX Lead and Engineering Leads are responsible for allocating people making sure things are done on time. Product Managers are not responsible for these activities, they are not project managers. Direction issues are the big, prioritized new features for each release. They are limited to a small number per release so that we have plenty of capacity to work on other important issues, bug fixes, etc. If you want to schedule an issue with the Seeking community contributions label, please remove the label first. Any scheduled issue should have a team label assigned, and at least one type label. Requesting Something to be Scheduled To request scheduling an issue, ask the responsible product manager We have many more requests for great features than we have capacity to work on. There is a good chance we‚Äôll not be able to work on something. Make sure the appropriate labels (such as customer ) are applied so every issue is given the priority it deserves. Product Development Timeline Teams (Product, UX, Development, Quality) continually work on issues according to their respective workflows. There is no specified process whereby a particular person should be working on a set of issues in a given time period. However, there are specific deadlines that should inform team workflows and prioritization. With the monthly release date being the third Thursday of the release month, the code cut-off is the Friday prior. The next milestone begins the Saturday after code cut-off. All other important dates for a milestone are relative to the release date: Monday, 19 days before the milestone begins : Draft of the issues that will be included in the next release (released next month). Start capacity and technical discussions with engineering/UX. Assess error budgets to determine feature/reliability balance. Development engineering manager provides product manager with prioritization input for ~type::maintenance issues per cross-functional prioritization Quality provides product manager with prioritization input for ~type::bug issues per cross-functional prioritization Monday, 12 days before the milestone begins : Product manager, taking into consideration prioritization input from development EM, Quality, and UX to create a plan of issues for the upcoming milestone. Release scope is finalized. In-scope issues marked with milestone %x.y ; label ~deliverable applied. Kickoff document is updated with relevant items to be included. Monday, 5 days before the milestone begins : Release scope is finalized. In-scope issues marked with milestone %x.y ; label ~deliverable applied. Kickoff document is updated with relevant items to be included. Monday immediately after the milestone begins : Kick off! üì£ Company Kickoff call live streamed. Development on milestone begins. Monday, 9 days after the milestone begins : The development lead for each stage/section coordinates a stage/section level review with the quad cross-functional dashboard review process . After the stages/section level reviews are complete, the VP of Development coordinates a summary review with the CTO, VP of Product, VP of UX, and VP of Quality. Wednesday, 11 days after the milestone begins : GitLab Bot opens Group Retrospective issue for the current milestone. Friday, the day the milestone ends : Issues for milestone completed, with docs, and have been merged into master. Feature flags should be flipped from default off to default on after verification to be in the release. See feature flags . Merging by the milestone code cut-off (Friday) does not guarantee that the feature will be in the release. See release timelines . Individual release post entries merged for all relevant issues. By end of the day, milestone %x.y is expired. On or around Wednesday, the day before the release date : Group Retrospective issues are updated with shipped and missed deliverables and team-members are tagged in the discussion. Wednesday, the day before the release date : Milestone Cleanup runs on the schedule at Milestone cleanup schedule . Third Thursday of the release month : Release Day! üöÄ Release shipped to production. Release post published. Friday immediately after release day : The patch release process for the milestone starts. This includes regular and security patch releases. All of the milestone‚Äôs unfinished issues and merge requests are automatically moved to the next milestone, with the exception of ~security issues. On or around the Wednesday immediately following the release day : Product plans are updated to reflect previous and current releases, including category epics and direction pages. On or around the second Monday following the release day : Non-critical security patches are released . Refer to release post content reviews for additional deadlines. Note that deployments to GitLab.com are more frequent than monthly major/minor releases. See auto deploy transition guidance for details. Kickoff At the beginning of each release, we have a kickoff meeting, publicly livestreamed to YouTube. In the call, the Product Development team (PMs, Product Designers, and Engineers) communicate with the rest of the organization which issues are in scope for the upcoming release. The call is structured by product area with each PM leading their part of the call. The Product Kickoff page is updated each month, which follows the content on the livestream. Milestone Cleanup Engineering Managers are responsible for capacity planning and scheduling for their respective teams with guidance from their counterpart Product Managers. To ensure hygiene across Engineering, we run scheduled pipelines to move unfinished work (open issues and merge requests) with the expired milestone to the next milestone, and label ~\"missed:x.y\" for the expired milestone. Additionally, label ~\"missed-deliverable\" whenever ~\"Deliverable\" is presented. This is currently implemented as part of our automated triage operations . Additionally, issues with the ~Deliverable label which have a milestone beyond current +1, will have the ~Deliverable label removed. We keep the milestone open for 3 months after it‚Äôs expired, based on the release and maintenance policy . The milestone cleanup is currently applied to the following groups and projects : GitLab , schedule GitLab Runner , schedule GitLab Gitaly , schedule GitLab charts , schedule GitLab QA , schedule Omnibus GitLab , schedule (only moving milestone for now, not labelling) Milestones closure is in the remit of the Delivery team . At any point in time a release might need to be created for an active milestone,and once that is no longer the case, the Delivery team closes the milestone. Milestone cleanup schedule The milestone cleanup will happen on the milestone due date. These actions will be applied to open issues: Open issues and merge requests will be moved to the next milestone, and labeled with ~\"missed:x.y\" . ~\"missed-deliverable\" will also be added whenever ~\"Deliverable\" is presented. Milestones are closed when the Delivery team no longer needs to create a backport release for a specific milestone. Use Group Labels and Group Milestones When working in GitLab (and in particular, the GitLab.org group), use group labels and group milestones as much as you can. It is easier to plan issues and merge requests at the group level, and exposes ideas across projects more naturally. If you have a project label, you can promote it to a group milestone. This will merge all project labels with the same name into the one group label. The same is true for promoting group milestones. Technical debt We definitely don‚Äôt want our technical debt to grow faster than our code base. To prevent this from happening we should consider not only the impact of the technical debt but also consider the impacts spreading like a contagion. How big and how fast is this problem going to be over time? Is it likely a bad piece of code will be copy-pasted for a future feature? In the end, the amount of resources available is always less than amount of technical debt to address. To help with prioritization and decision-making process here, we recommend thinking about contagion as an interest rate of the technical debt. There is a great comment from the internet about it: You wouldn‚Äôt pay off your $50k student loan before first paying off your $5k credit card and it‚Äôs because of the high interest rate. The best debt to pay off first is one that has the highest loan payment to recurring payment reduction ratio, i.e. the one that reduces your overall debt payments the most, and that is usually the loan with the highest interest rate. Technical debt is prioritized like other technical decisions in product groups by product management . For technical debt which might span, or fall in gaps between groups they should be brought up for a globally optimized prioritization in retrospectives or directly with the appropriate member of the Product Leadership team . Additional avenues for addressing technical debt outside of product groups are Rapid Action issues and working groups . Deferred UX Sometimes there is an intentional decision to deviate from the agreed-upon MVC , which sacrifices the user experience. When this occurs, the Product Designer creates a follow-up issue and labels it Deferred UX to address the UX gap in subsequent releases. For the same reasons as technical debt, we don‚Äôt want Deferred UX to grow faster than our code base. These issues are prioritized like other technical decisions in product groups by product management . As with technical debt , Deferred UX should be brought up for globally optimized prioritization in retrospectives or directly with the appropriate member of the Product Leadership team . UI polish UI polish issues are visual improvements to the existing user interface, touching mainly aesthetic aspects of the UI that are guided by Pajamas foundations. UI polish issues generally capture improvements related to color, typography, iconography, and spacing. We apply the UI polish label to these issues. UI polish issues don‚Äôt introduce functionality or behavior changes to a feature. Examples of UI polish Aesthetic improvements ( example ): removing unnecessary borders from a UI, updating the background color of an element, fixing the font size of a heading element. Misalignment of text, buttons, etc ( example ): although because many times something isn‚Äôt broken, these improvements are considered UI polish. These could also be considered a bug. Incorrect spacing between UI elements ( example ): when two interface elements are using inconsistent spacing values, such as 10px instead of 8px. It could also be considered technical debt. Note that if two interface elements have zero space between them, its an obvious bug. Visual inconsistencies across different product areas ( example ): visual inconsistencies could occur when we have a series of buttons on a particular view. For example, when 3/4 of them have been migrated to use the Pajamas component, and 1/4 of them are still using a deprecated button, resulting in a visual inconsistency. This is considered a UI polish. What is not UI polish Functional inconsistency related to the experience : for example, using a manual action to add an assignee automatically shows the assignee in the sidebar but using a manual action to add a weight to an issue does not automatically show the weight in the sidebar. This is not currently considered UI polish. It would be considered a UX issue. Improving visibility of system status : status indicator improvements are experience improvements and are not classified as UI polish. Even when updating something that is purely visual, such as a status icon, to improve the meaning the user has of what they are viewing, we are trying to improve the experience of that user. Monitor Merge Request Trends Open merge requests sometimes become idle (not updated by a human in more than a month). Once a month, engineering managers will receive an Merge requests requiring attention triage issue that includes all (non-WIP/Draft) MRs for their group and use it to determine if any action should be taken (such as nudging the author/reviewer/maintainer). This assists in getting merge requests merged in a reasonable amount of time which we track with the Open MR Review Time (OMRT) and Open MR Age (OMA) performance indicators. Open merge requests may also have other properties that indicate that the engineering manager should research them and potentially take action to improve efficiency. One key property is the number of threads, which, when high, may indicate a need to update the plan for the MR or that a synchronous discussion should be considered. Another property is the number of pipelines, which, when high, may indicate a need to revisit the plan for the MR. These metrics are not yet included in an automatically created a triage issue. Security is everyone‚Äôs responsibility Security is our top priority. Our Security Team is raising the bar on security every day to protect users‚Äô data and make GitLab a safe place for everyone to contribute. There are many lines of code, and Security Teams need to scale. That means shifting security left in the Software Development LifeCycle (SDLC) . Each team has an Application Security Stable Counterpart who can help you, and you can find more secure development help in the #sec-appsec Slack channel. Being able to start the security review process earlier in the software development lifecycle means we will catch vulnerabilities earlier, and mitigate identified vulnerabilities before the code is merged. You should know when and how to proactively seek an Application Security Review . You should also be familiar with our Secure Coding Guidelines . We are fixing the obvious security issues before every merge, and therefore, scaling the security review process. Our workflow includes a check and validation by the reviewers of every merge request, thereby enabling developers to act on identified vulnerabilities before merging. As part of that process, developers are also encouraged to reach out to the Security Team to discuss the issue at that stage, rather than later on, when mitigating vulnerabilities becomes more expensive. After all, security is everyone‚Äôs job. See also our Security Paradigm . Rapid Engineering Response From time to time, there are occasions that engineering team must act quickly in response to urgent issues. This section describes how the engineering team handles certain kinds of such issues. Scope Not everything is urgent. See below for a non-exclusive list of things that are in-scope and not in-scope. As always, use your experience and judgment, and communicate with others. In Scope Last-minute release blocking bug or security patch before an imminent release. High severity (severity::1/priority::1) security issues. Refer to security severity and priority . Highest priority and severity customer issues based on the priority and severity definitions . Not In Scope An operational issue of GitLab.com or a self managed customer environment. This falls under the on-call process. Self developed and maintained tools that are not officially supported products by GitLab. Feature request by a specific customer. Process Person requesting Rapid Engineering Response creates an issue supplying all known information and applies priority and severity (or security severity and priority ) to the best of their ability. Person requesting Rapid Engineering Response raises the issue to their own manager and the subject matter domain engineering manager (or the delegation if OOO). In case a specific group cannot be determined, raise the issue to the Director of Engineering (or the delegation if OOO) of the section . In case a specific section cannot be determined, raise the issue to the Sr. Director of Development (or the delegation if OOO). The engineering sponsor (subject matter Manager, Director, and/or Sr. Director) invokes all stakeholders of the subject matter as a rapid response task force to determine the best route of resolution: Engineering manager(s) Product Management QE UX Docs Security Support Distribution engineering manager Delivery engineering manager (Release Management) Adjust priority and severity or security severity and priority if necessary, and work collaboratively on the determined resolution. Performance Refinement A bi-weekly performance refinement session is held by the Development and QE teams jointly to raise awareness and foster wider collaboration about high-impact performance issues. A high impact issue has a direct measurable impact on GitLab.com service levels or error budgets . Scope The Performance Refinement issue board is reviewed in this refinement exercise. Process To participate in the bi-weekly refinement, ask your engineering director to forward the invite of the Performance Refinement meeting which is at 15:00 UTC every other Thursday. Here is the meeting agenda . To nominate issues to the board: Assign a performance severity on the issue to help asses the priority assignment for the refinement session. Ensure that the issue clearly explains the problem, the (potential) impact on GitLab.com‚Äôs availability, and ideally, clearly defines a proposed solution to the problem. Use the label bug::performance . For the issues under the Open column: An engineering manager will be assigned if either the Milestone or the label workflow::ready for development is missing. Engineering manager brings assigned issue(s) to the Product Manager for prioritization and planning. Engineering manager unassigns themselves once the issue is planned for an iteration, i.e. associated with a Milestone and the label workflow::ready for development . To highlight high-impact issues which need additional discussion, please add an agenda item. If a guest attendee would be helpful for collaboration, please forward the invite. For example, a CSM or Support Engineer may have information that would be helpful for an upcoming topic. Infradev The infradev process is established to identify issues requiring priority attention in support of SaaS availability and reliability. These escalations are intended to primarily be asyncronous as timely triage and attention is required. In addition to primary management through the Issues, any gaps, concerns, or critical triage is handled in the SaaS Availability weekly standup . Scope The infradev issue board is the primary focus of this process. Roles and Responsibilities Infrastructure Nominate issues by adding Infradev label. Assess Severity and Priority and apply the corresponding label as appropriate. Provide as much information as possible to assist development engineering troubleshooting. Development Development directors are responsible for triaging Infradev issues regularly by following the triage process below. Development managers are encouraged to triage issues regularly as well. Development managers collaborate with their counterpart Product Managers to refine, schedule, and resolve Infradev issues. Usually, issues are nominated as Infradev issues by SREs or Managers in the Infrastructure Department. Development engineers/managers are not expected to nominate Infradev issues. However, when it‚Äôs necessary to spin off new issues from an existing Infradev issue, development engineers and managers may also apply Infradev label to the new issues. When development engineers and managers split off new Infradev issues, they must have a Severity and Priority labels to the new issues. The labels should correspond to the importance of the follow-on work. Product Management Product Managers perform holistic prioritization of both product roadmap and Infradev issues as one unified backlog. Product Managers collaborate with their counterpart Development Managers to refine, schedule, and resolve Infradev issues. Triage Process (To be completed primarily by Development Engineering Management) Issues are nominated to the board through the inclusion of the label infradev and will appear on the infradev board . Review issues in the Open column. Look for issues within your Stage/Group/Category, but also for those which lack a clear assignment or where the assignment may need correction. Review the severity on the issue to validate appropriate prioritization. Ensure that the issue clearly explains the problem, the (potential) impact on GitLab.com‚Äôs availability, and ideally, clearly defines a proposed solution to the problem. Assign a Development Manager and a Product Manager to any issue where the Milestone or the label workflow::ready for development is missing. Development Manager and Product Manager collaborate on the assigned issue(s) for prioritization and planning. Development Manager and Product Manager unassign themselves once the issue is planned for an iteration, i.e. associated with a Milestone and the label workflow::ready for development . All Issues should be prioritized into the appropriate workflow stage. It is the intent to maintain no Open (un-triaged) items. Issues with ~infradev ~severity::1 ~priority::1 ~production request labels applied require immediate resolution. ~infradev issues requiring a ~‚Äúbreaking change‚Äù should not exist. If a current ~infradev issue requires a breaking change then it should split into two issues. The first issue should be the immediate ~infradev work that can be done under current SLOs. The second issue should be ~‚Äúbreaking change‚Äù work that needs to be completed at the next major release in accordance with deprecation guidance . Agreement from development DRI as well as the infrastructure DRI should be documented on the issue. Infradev issues are also shown in the monthly Error Budget Report . A Guide to Creating Effective Infradev Issues Triage of infradev Issues is desired to occur asynchronously. These points below with endure that your infradev issues gain maximum traction. Use the InfraDev issue template to create the issue on the gitlab-org/gitlab issue tracker. Clearly state the scope of the problem, and how it affects GitLab SaaS Platforms . Examples could include: Reliability issues: the problem could cause a widespread outage or degradation on GitLab.com. example Saturation issues: the problem could leave to increased saturation, latency issues due to resource over-utilization. example Service-level degradation: the problem is causing our service-level monitoring to degrade, impacting the overall SLA of GitLab.com and potentially leaving to SLA violations. example Unnecessary alerts: the problem does not have a major impact on users, but is leading to extraneous alerts, impacting the ability of SREs to effectively triage incidents due to alerting noise. example Problems which extend the time to diagnosis of incidents: for example, issues which degrade the observability of GitLab.com, swallow user-impacting errors or logs, etc. These could lead to incidents taking much longer to clear, and impacting availability. example Deficiencies in our public APIs which lead to customers compensating by generating substantially more traffic to get the required results. example Quantify the effect of the problem to help ensure that correct prioritization occurs. Include costs to availability. The Incident Budget Explorer dashboard can help here. Include the number of times alerts have fired owing to the problem, how much time was spent dealing with the problem, and how many people were involved. Include screenshots of visualization from Grafana or Kibana. Always include a permalink to the source of the screenshot so that others can investigate further . Provide a clear, unambiguous, self-contained solution to the problem . Do not add the infradev label to architectural problems, vague solutions, or requests to investigate an unknown root-cause. Ensure scope is limited . Each issue should be able to be owned by a single stage group team and should not need to be broken down further. Single task solutions are best. Ensure a realistic severity is applied : review the availability severity label guidelines and ensure that applied severity matches. Always ensure all issues have a severity, even if you are unsure. If possible, include ownership labels for more effective triage. The product categories can help determine the appropriate stage group to assign the issue to. Cross-reference links to Production Incidents, PagerDuty Alerts, Slack Alerts and Slack Discussions . To help ensure that the team performing the triage have all the available data. By adding ‚ÄúRelated‚Äù links on the infradev issue, the Infradev Status Report will display a count of the number of production incidents related to each infradev issue, for easier and clearer prioritization. Ensure that the issue title is accurate, brief and clear . Change the title over time if you need to keep it accurate. By adding an infradev label to an issue, you are assuming responsibility and becoming the sponsor/champion of the issue . Provide a method for validating that the original issue still exists Sometimes infradev issues will resolve on their own, or are resolved as a side-effect of an unrelated change. In the infradev issue description, provide a clear way of checking whether the problem still exists. Having a way of checking validity can save on a great deal of back-and-forth discussion between Infradev Triage participants including Engineering Managers, Directors and Product Managers and make space for other non-resolved issues to get scheduled sooner. Ideally, provide a link to a Grafana query or an ELK query and clear instructions on how to interpret the results to determine whether the problem is still occurring. Check the ‚ÄúVerfication‚Äù section in this issue as an example of this . Alternatively, provide clear instructions on how to recreate or validate the problem. If an issue has been resolved, use the following process: Reassign the issue back to the author, or an appropriate owner, requesting that they confirm the resolution, and close the issue if they concur. If not, they should follow up with a note and unassign themselves. Code Review Guidelines Code reviews are mandatory for every merge request, you should get familiar with and follow our Code Review Guidelines. Code Review Values GitLab team members' code review values Iteration In order to provide changes in an iterative and incremental manner, we should always seek to create ‚Ä¶ Related Engineering Workflows At GitLab we have a number of engineering processes that we use on a daily basis. Release/Feature Determination Workflow This document explains the workflow for determining if a feature will be included in a milestone ‚Ä¶ Last modified July 7, 2025: Expand infradev process to reference all SaaS platforms rather than just GitLab.com ( 09694d48 ) View page source -  - please contribute .",
    "headings": [
      "Engineering Workflow",
      "GitLab Flow",
      "Reverting a merge request",
      "Brokenmaster",
      "What is a brokenmaster?",
      "Brokenmasterservice level objectives",
      "Brokenmasterescalation",
      "Triage broken master",
      "Resolution of broken master",
      "Merging during broken master",
      "Brokenmastermirrors",
      "Broken JiHu validation pipelines",
      "Security Issues",
      "Regressions",
      "Use of the ~regression label on MRs",
      "Basics",
      "Updating Workflow Labels Throughout Development",
      "Working in Teams",
      "Convention over Configuration",
      "Choosing Something to Work On",
      "Triaging and Reviewing Code from the rest of the Community",
      "Working with GitLab.com",
      "Performance Data",
      "Error Reporting",
      "Scheduling Issues",
      "Requesting Something to be Scheduled",
      "Product Development Timeline",
      "Kickoff",
      "Milestone Cleanup",
      "Milestone cleanup schedule",
      "Use Group Labels and Group Milestones",
      "Technical debt",
      "Deferred UX",
      "UI polish",
      "Examples of UI polish",
      "What is not UI polish",
      "Monitor Merge Request Trends",
      "Security is everyone‚Äôs responsibility",
      "Rapid Engineering Response",
      "Scope",
      "Process",
      "Performance Refinement",
      "Scope",
      "Process",
      "Infradev",
      "Scope",
      "Roles and Responsibilities",
      "Triage Process",
      "A Guide to Creating Effective Infradev Issues"
    ],
    "word_count": 9563,
    "extracted_at": "2025-07-21 20:14:59"
  },
  {
    "document_id": "gitlab-handbook-964793",
    "url": "https://handbook.gitlab.com/handbook/company/pricing/",
    "title": "Product Pricing Model",
    "category": "Product",
    "content": "Pricing model Most GitLab functionality is and will be available for free in our Free tier. Paid tiers include features targeted for managers, directors, and executives. GitLab‚Äôs pricing strategy is set by the CEO. Everyone can contribute, and the best way to communicate is on the #pricing Slack channel. Contributions are part of the day-to-day jobs of the following people: Principal Pricing Manager (Sean Hall) Senior Pricing Manager (Sarah DeVries) VP, Product Management (Justin Farris) Pricing Strategy Most of GitLab functionality is and will be available for free in our Free tier. Our paid tiers include features that are more relevant for managers, directors, and executives . We promise all major features in our scope are available in Free too. Instead of charging for specific parts of our scope (CI, Monitoring, etc.) we charge for smaller features that you are more likely to need if you use GitLab with a lot of users. There are a couple of reasons for this: We want to be a good steward of our open source product . Giving a great free product is part of our go to market, it helps create new users and customers. Having our scope available to all users increases adoption of our scope and helps people see the benefit of a single application . Including all major features in Free helps reduce merge conflicts between CE and EE Because we have a great free product we can‚Äôt have one price. Setting it high would make the difference from the free version too high. Setting it low would make it hard to run a sustainable business. There is no middle ground that would work out with one price. That is why we have Premium and Ultimate tiers . The price difference between them is half an order of magnitude (5x). We will charge per user, per application, or per instance. We do include free minutes with our subscriptions and trials to make it easier for users to get started. As we look towards more deployment-related functionality on SaaS it‚Äôs tempting to offer compute and charge a percent on top of, for example, Google Cloud Platform (GCP). We don‚Äôt want to charge an ambiguous margin on top of another provider since this limits user choice and is not transparent. So we will always let you BYOK (bring your own Kubernetes) and never lock you into our infrastructure to charge you an opaque premium on those costs. The Value of Free users As a commercial organization, we always want to grow the number of paying customers, therefore we are focused on increasing the free to paid conversion rate. However, GitLab offers a free product, and our free users bring tremendous value to the company beyond just the likelihood of converting to a paid customer one day. Awareness/Mindshare: A large free user base helps GitLab become known to the developer community and stay top of mind. Product Familiarity/Training: Offering a free product invites anyone to try out GitLab without any barrier so many developers become familiar with GitLab. Through using the free product, many users are trained on how to use GitLab functionality which makes them more effective when using GitLab for their job. Advocacy/Internal Champion: Happy loyal free users become advocates of GitLab, which brings more users and strengthens our brand. We often see users of GitLab for personal projects then become an internal champions to advocate their employers to buy GitLab. This personal use -> organizational use cross over and bottoms-up growth can‚Äôt happen without our free product. Contributions/Community: Many free users are also active contributors to the product so they make GitLab better. They also help grow our community which becomes an even more valuable asset to all free and paid customers. Third party support/Platform: Free users increase our total user base, and a large user base makes 3rd party tools/APIs/integrations more likely to support GitLab, growing our ecosystem and enhancing our platform status. Enable product-led growth & Reduce Customer Acquisition Cost: our free product enables GitLab to acquire more users at a lower customer acquisition cost, as some of them will purchase via self-service funnel since they are already familiar with GitLab and won‚Äôt require a full sales cycle to be convinced to buy. User habit/Retention lever: offering a free product allows users to develop a habit before they pay, therefore the paid customers are more likely to see higher ROI of GitLab. Additionally, even if the customer stays on the free plan, we are not losing the customer to a competitor. Pricing Philosophy Our pricing philosophy is aligned with our GitLab Values . Collaboration : We want to keep the trust of our customers through a pricing approach that supports long-lasting customer relationships. Results : We aim to get a great ROI for our customers while maximizing IACV for GitLab over the long-term. Efficiency : Our pricing approach should be easy to understand, plan, and order. Diversity, Inclusion and Belonging : We build GitLab to be the best option for a wide variety of organizations, including educational institutions and organizations in different geographic regions. Iteration : We want to encourage the full scope of GitLab to be adopted over time. Transparency : We are public and explicit about what our pricing is based on. Pricing Methodology We take a value-based pricing approach at GitLab. The core of the value-based pricing is to understand the value proposition that our innovations provide to our current and future customers for that offering. We aim to price our offerings to achieve continued growth and financial success for both the customer and GitLab. 1. Value Proposition To understand the value that we deliver to our customers, we focus on the benefits that our customers can receive to achieve their business goals. The value to our customers can include: Development cost reduction Revenue gain due to decreased time to market Improved reliability and security Greater and more effective collaboration Emotional contribution of having delighted users 2. Customer Collaboration Defining and quantifying the value being delivered does not happen in isolation. We regularly engage with customers to understand how our solutions help them. These engagements are important as they will provide insights on how our innovations are valued by the customers and how it impacts our customers‚Äô willingness to pay. Willingness to pay is a crucial element when we decide on how to price and packaging our offerings. 3. Competitive Landscape We understand that customers have choices when they decide to make a purchase. Hence, understanding the competitive landscape of our products is very critical. With respect to competition, we focus on the key differences between our value proposition and the competition‚Äôs value proposition. Our pricing aims to reflect the differential value that we provide. We aim to design the pricing structure that works best for our customers compared to our competitors inclusive of pricing metric. 4. Mutual Success To following our pricing philosophy, we aim to support long-lasting customer relationships. When we develop our pricing, the target is that both our customers and GitLab become successful together. For long term success, where we can run a sustainable business and meet our company‚Äôs financial goals, we do also consider cost to serve and margins as factors when pricing is determined. It is important to note that while costs and margins are factors in pricing, value provided to our customers is the foundational element. Departments and Decision Making Pricing affects Product, Marketing, and Sales. Therefore, general pricing decisions are made by the CEO. Product makes most decisions on a day-to-day basis about what feature should go in what plan based on the paid tiers . The following table describes how large cross-functional pricing decisions should be made. This decision making method differs from our normal RADCIE method due to the extremely cross-functional nature and business risk of large pricing decisions. Responsibility Role Description Responsible Group Manager, Pricing Responsible for analysis and recommendation Agree VP Monetization, Chief Product Officer, CRO Should ideally agree with the recommendation Perform Pricing, Fulfillment, Sales Ops, Product Marketing, and Website teams Executes the recommendation Input CMO, CFO Should be consulted and allowed to provide input prior to decision Decide CEO Final decision maker To ensure alignment across stakeholders, a monthly Pricing Steering Committee is held to align on upcoming monetization decisions, discuss historical insights/trends, and prioritize areas of opportunity. Three Tiers We have three pricing tiers. How we make decisions on a day-to-day basis is specified on our stewardship page . Self-Managed/SaaS tier Free Premium Ultimate Per user per month $0 $29 $99 Who cares most about the feature Individual Contributors Directors Executives Main competitor GitHub Team GitHub Enterprise Veracode, Checkmarx Type of sell No sell Benefit/solution Transformation Buyer Based Tiering Clarification When considering buyers as part of product tiering decisions we use the following guidance: Free is for a single developer, with the purchasing decision led by that same person Premium is for team(s) usage, with the purchasing decision led by one or more Directors Ultimate is for strategic organizational usage, with the purchasing decision led by one or more Execs When the tiering of a feature is being evaluated, the stewardship promise will override this guidance. Examples Understanding the distinction of our buyer-based model can be difficult. In it we focus not on the user of the feature, but on the buyer and in what cases a feature would be useful to that buyer even in cases where the buyer is not the user. When making these decisions we ask questions like: Who would drive the demand for this feature? At what level of an organization does this feature add value? Below we list product categories and the current and proposed features which reside in a given tier to highlight how the buyer-based model works in practice. Feature - Kanban Boards Project and Group Boards (Free) : The primary user and buyer for Issue Boards in general is Individual Contributors. While group boards likely span teams, there are also valid use cases for an individual to organize code in several projects and manage issues across those projects at the group level. The key differentiation is that an Individual Contributor will likely only ever need a single group level Issue Board; whereas Managers need several group level Issue Boards to facilitate their team‚Äôs workflows. ( Documentation ) Issue Weight on Boards (Premium) : The users assigning issue weights are individual contributors but the value of that weight is for Directors of teams to ensure proper milestone planning. (Documentation with respect to boards ) Multiple Group Issue Boards (Premium) : Issue boards which span groups are valuable to and also utilized by groups of groups which aligns to Director level likely buyer. ( Related documentation ) Issue Board Epic Swimlanes (Ultimate) : Everyday users of swimlanes might be individual contributors but their value is in the visualization of activity for company wide portfolio management by Executives. ( Related issue ) Feature - Merge Requests Merge conflict resolution (Free) : Resolving merge conflicts is part of the daily workflow and valuable to Individual Contributors. ( Documentation ) Merge approvals (Premium) : Requiring approvals on merge requests is only useful when there is a team working on a project and their Director (who isn‚Äôt likely to be the user of approvals) requires specific individuals to provide their approval. ( Documentation ) Merge request reviews (Premium) : Merge request reviews enables the expedient review by multiple team members on merge requests. Typically large enough teams to value the reduced chatter accompanying MR reviews reside under Directors. ( Documentation ) Feature - Pipelines Built in CI Pipelines (Free) : CI Pipelines are integral to GitLab and used primarily by Individual Contributors. ( Documentation ) Show pipeline code coverage rate (Premium) : The ability to determine code coverage rate is particularly valuable to Directors. ( Documentation ) Pipeline dashboards (Premium) : Dashboards of pipelines across groups and projects are primarily used and valued by Directors. ( Documentation ) Downloadable all pipeline logs (Ultimate) : Pipeline logs would be generated and even downloaded by individual contributors, but the value of collating these logs is provided to Executives responsible for ensuring compliance. Usage can be more important than buyer-based tiering While our tiers are based on who leads the purchasing decision there are occasions where driving increased usage takes precedence over the natural buyer-based tiering, always in favor of moving features to lower tiers. Here‚Äôs why: As GitLab develops new categories that are likely to be in paid tiers, it is still reasonable (and in many cases advisable) to get the early MVC versions to land in the free or lower paid-tier to spur adoption, encourage contributions and gain feedback from the wider user base. Over time, the team can then add more features on top of the MVC functionality that will be placed in the paid-tiers. However, Product Managers should not move features down in violation of the buyer-based model unless there is a concrete high confidence plan to follow up with meaningful additions to the base feature that can be added to and monetized with the right paid tier Our dual flywheels work because of increased users. Having capabilities in open-source - even for those oriented towards teams encourages more usage - increased users. Those users are essential to creating contributors, an improved product and future tiered features. When considering tiering, if the feature is geared to be used (not purchased) by individuals and the answer to the question of who cares most about this feature? is today - very few people we should consider open-sourcing it to get more usage and contributors. Regardless of the reasoning behind the down-tiering of a feature, the process should still be followed. Prevent the ability to circumvent tiering If a feature in the free tier (typically useful to ICs, but also to others) will open up the possibility to circumvent or abuse our tiering policy, we should exercise extreme caution and err on the side of maintaining the feature in a paid tier. An example of this is repo pull mirroring that is useful for ICs and can also be great for adoption (i.e. trying out GitLab.). However, it may also lead to larger instances in Free tier mirroring to smaller instances in paid tiers to make use of paid-tiered features. This goes against our pricing terms & conditions and therefore we chose to keep the feature in a paid tier instead of Free tier. Partner integration considerations When building integrations to partners it is possible to make exceptions to our buyer-based model when our tiers don‚Äôt align well with those of the partner, but only in favor of lower tiers. As an example - a partner who provides a team collaboration tool with a free tier might desire any GitLab integration to be present in our free tier despite it clearly being appropriate for single team usage. The go-to-market benefits of this partnership can outweigh the divergence from our buyer-based model. Themes We‚Äôve found that bundling our features within tiers into themes resulted in improved conversion performance on our pricing page . While it is how we present the value of our tiers, this themes-based representation serves as an additive filter for, and is not a replace of, our Buyer Based Tiering decision. Themes are then bundled into customer value drivers . graph TD; Features-->Categories; Categories-->Groups; Groups-->Stages; Stages-->Sections; Features-->Themes; Themes-->ValueDrivers(Value Drivers); Current Theme List The following are our current set of capabilities: Premium Faster code reviews Advanced CI/CD Enterprise agile planning Release controls Self-managed reliability 10,000 compute minutes per month Support Ultimate Advanced security testing Security risk mitigation Compliance Portfolio management Value stream management Free guest users 50,000 compute minutes per month Support What happens when themes don‚Äôt match our Buyer Based Tiering Decisions? Because themes are filters for our Buyer Based tiers, there can occasionally be instances where a feature‚Äôs tier and its natural theme don‚Äôt match. In that case we should either: Adjust the feature‚Äôs tier to match Adjust the feature to a different theme to match Adjust the naming of the theme to better capture the distinction between tiers Note - it is OK for the features of a theme to be in the listed tier and any lower tier. Lower tiers have more relative value Our lower tiers have: A lower price. A lower discount we give (price after discount is closer to list price both absolute and as a percentage). The price charged for value generated is lower. More value per dollar as a percentage (in absolute numbers higher tiers generate more net value) Our higher tier is still the best option for our customers: Higher tier adds much more absolute value. For example our top tier can add 2000% more value than our lower tier while still adding less relative value. The Return On Investment (ROI) for higher tiers tends to be better than our lower tiers due to costs outside of the subscription. For example, when you switch to GitLab you will have a fixed cost in implementation and training. And if you use a lower tier you need to find a workaround for features you are missing out on, increasing cost and decreasing efficiency. There are multiple reasons why our lower tiers have more relative value: The lower tiers are older so they had more time to accumulate features. Any pricing model will have to be compatible with our open source tier. The open source tier should be the top alternative to our priced tiers. That tier has zero cost, zero discounting, a zero price charged for value generated, and infinite value per dollar. Our lowest tier should be the tier that is closest to that to make it possible for people to go from free to paid. As soon as they are paid we can help them to generate more value with GitLab, for example by using more stages. If they realize more value we can move them up in tiers. The lower tiers (including open source) are a pipeline of future customers for the higher tiers. We can easily increase revenue in the next 3 years by raising prices and/or making lower tiers less attractive (of course never by moving features up ). But we are optimizing the Net Present Value ( NPV ) of the company with a 10% a year discount rate. This means we have to look beyond 3 years. Raising prices on our lower tiers might cause more revenue in the short term, both directly and by compelling most organizations to move to higher tiers. But the minority of organizations that switch to a competition will cause them to be much harder for us to reach in the future and will allow competitors a flywheel effect of their own. This tradeoff has to be calculated explicitly when raising prices. That our lower tiers are popular is not a pricing problem but a communication problem. Higher priced tiers have less value per dollar as a percentage but generate more net value in absolute terms. It is up to us to explain that value in the product, with marketing, and in our sales interactions. Open core projects capture (ratio of value created vs. captured) less value than proprietary projects. Because the pricing tiers are low relative to the value created the difference between the tiers can be much higher than with proprietary software. If you capture 1% you can easily introduce a new tier at 5x, if you capture 50% even doubling your price will take away all benefit for the customer. We see customers on Premium but not users on Free. If we focus only on the visible customers that are on Premium we miss the largest opportunity. Premium is priced too if the conversion from Premium to Ultimate is lower than organizations becoming customers after using free. Currently this is not the case because it is much harder reaching out to free users since they aren‚Äôt customers and we don‚Äôt have a point of contact to discuss the value of higher tiers. Arguments in favor of raising the price of the lower tier (which we won‚Äôt necessarily do) are: Our sales effort don‚Äôt change much with the plan, making lower tiers relatively much more expensive to sell. Over time we keep adding features to the lower tiers due to our Buyer Based Open Core model so you would expect prices to rise. While the absolute value of higher tiers is better and that seems the most rational measure people also do look at relative value and we should make sure that the price to go to a higher tiers is perceived well. Many successful open source companies charge a relatively high price for their most affordable plan. The future growth of GitLab is much more influenced by how many people are using the open source version than our lower tier, so having fewer paid users is a relatively small impact. The future competition for GitLab is much more likely to come from an open source project than a proprietary only product competing only with our lowest tier. We can reduce the relative attractiveness of the lowest tier by open sourcing features, although this too makes it harder to raise the price of that tier. Lots of companies don‚Äôt want to forgo support, especially in their first year, and there is little price elasticity there. Please note that all the above is not a plea to add more or fewer features to lower tiers, we should just follow our Buyer Based Open Core model . Consistent names We use the same names for SaaS and Self-Managed tiers because: The feature set for our SaaS and Self-Managed offerings is largely consistent and we want SaaS and Self-Managed tiers to be as similar as possible. Consistent naming is easy to understand and use for our customers. Type of sell A feature sell means that people want to buy the extra features. This can be done self-serve. A benefit sell means that people buy the business outcomes that come with fully utilizing GitLab. You need case studies, metrics like DevOps Score , and a quarterly check-in with a Customer Success Manager from Customer Success to review the status of the adoption plan. A competitive process can include a bake-off to show people are 10x faster in starting new projects with GitLab. A transformation sell means that people want to transform as an organization. They want to reduce cycle time by 10x and want us to help them. We do workshops with transformation consultants and define a complete, shared project. Hybrid sales model There is a big price difference between the different tiers (0$, $29, $99 per user per month, a price difference of infinite, 5x). For GitLab Inc., the majority of revenue comes from large enterprises buying the top two tiers. Most companies in a similar situation would focus only on the highest tiers. But we want to make a our hybrid model work for the following reasons: We want to keep being a good steward of the open source project . The free tier is a scalable way to create future customers. A 5x higher price doesn‚Äôt mean there is 5x more value, just like the Premium tier doesn‚Äôt provide infinitely more value than the gratis Free tier. When deciding between tiers, organizations should look at the ratio between how much extra value they get divided by how much extra they pay. If this ratio is comfortably above 1, it makes sense to move to a higher tier. The value is in making people more effective, saving time on integrating tools, driving faster time to value, and retiring other tools. This should more than pay for the increased price of a tier. An analogy would be Apple‚Äôs iPhone: it is twice as expensive as an average Android phone, and while it doesn‚Äôt deliver twice as much value, the extra value is worth the extra cost. As Stripe documented : hybrid is hard, because ‚ÄúThe most common result of attempting both models simultaneously is that only one of the models receives any traction, and (because these models weave themselves into all operations of the company) it typically strangles the other.‚Äù This hybrid models is how we bridge the chasm between self-service and enterprise. Combining features in plans We tried selling one feature at a time, but this was not feasible. An improved version of that would be selling 7 main features, instead of 3 plans. Examples of main features would be: High Availability, Security, Service Desk, etc. The advantages are: Gradual upgrading to more expensive features. Pay only for the features you use. Add-ons are a common way of selling this. The disadvantages are: It is suboptimal for both the buyer and GitLab Inc. . It is hard for the buyer to estimate how much of each feature they will need. The complexity can lengthen the sales process when buyers have to make separate tiering decisions for each group. For users, it is unclear what features they can use. It is not common in the industry, buyers don‚Äôt expect it, and it isn‚Äôt a boring solution (an operating principle under our efficiency value ). The true-up process becomes more complex. The customer has to administer a process for how users can get more features. Features get less usage, and therefore the improvements are slower. It is hard to do with a hybrid sales model, where there is a 25x difference between the lowest and highest paid plans. We currently think the disadvantages outweigh the advantages. Single plan for one customer The advantages are: Users can use more features from more stages uniformly. Taking advantage of the power the one DevOps application results in better ROI for the customer. Buyers do not have to estimate how much of each tier they will need. There will not be confusion on what users can or can‚Äôt use. Simple pricing and true-up process. There‚Äôs no increased product complexity to turn features on/off on a per user basis. Simpler administration: the customer will not have to administer a process to move users between tiers. The disadvantages are: Customers may be paying for feature they feel not enough users are using. May lead to multiple instances with separate licenses for different groups. More negotiation up front. Increased renewal risks. We believe having a single plan for one customer works because the advantages outweigh the disadvantages. For the GitLab sales team and for GitLab customers, we suggest handling the objection by focusing on the value and business outcomes Reporter User Permission Pricing As our customers adopt GitLab as the single application for their entire DevOps lifecycle, we are hearing more and more non-developer use cases using GitLab for Agile project management. The main functionality that some non-developer roles need aligns fairly well with our reporter permission access, including Managing Labels, Assigning Issues, and Creating and Editing Epics, etc. Those users don‚Äôt really need to use much other developer functionality. Currently, we do not offer a different list price for users who only need the reporter permission because: This pricing approach aligns with our Buyer Based Open Core model . The list prices of our plans are blended prices with consideration for both developer and non-developer use cases. We are selling a suite and taking care of specific non-developer use cases by making a discount conditional on not using part of the product. A simplified pricing and packaging (PnP) strategy serves customers in the optimal way per the industry best practice. More SKUs lead to a more complex PnP model as a company scales, which eventually causes huge confusion to customers. We do not limit a license to the reporter permission in GitLab. Any reporter user can be updated to a regular developer user by using the same license. We understand that our customers have non-developer use cases. Please contact our sales team or connect with us via this issue to discuss your specific use cases. True-up pricing With true-up pricing, the license/sale is never blocking user growth. We currently charge 100% for users added during the year, because some organizations gave an intentionally too-low estimate when we charged 50%. If we technically can count ‚Äúuser days,‚Äù we can make it fair for everyone. A pre-requisite of this would be customer adoption of Cloud Licensing . For customers on Cloud Licensing, we offer Quarterly Subscription Reconciliation . Consumption pricing principles These are some principles we think are useful. These are not a promise not an entitlement. Our pricing page contains our current pricing which might deviate from the principles below. Our price is 5x the on-demand cost of the clouds, so we have 80% margin. This seems to be what‚Äôs common in our market (for example: GitHub and CircleCI ), but we‚Äôre open to other companies fact checking us with list prices. Here‚Äôs our long-term cost model which shows how this enables us to get a 20% profit margin. The user has the flexibility to bring their own resources whenever practical (for example, runners and clusters). This can be their on-premise equipment or from their own cloud contract. We don‚Äôt want to compete with the major clouds because they are our partners. The only reasons we‚Äôd offer our own are because it needs to be in our infrastructure (repository storage) and it‚Äôs convenient for the end user (runners). We reap the benefits of scale and sustained-use discounts. We use that to sponsor the resource use that isn‚Äôt priced. For example: Coordinating the runners, logging in, showing the interface, and sending emails. As costs become more significant, we might start charging for it (E.g. bandwidth costs). We can offer new services that make it easier to use GitLab, like for clusters that run Static Application Security Testing (SAST), Dynamic Application Security Testing (DAST), and other Auto DevOps features. The consumption differences between the tiers should be proportional to the price difference between the tiers for the paid plans. The free tier should have an equal difference. Currently it is 5x between all the tiers. We anticipate that not all of the consumption that is included in the accounts is used. We simplify the pricing model for our customers whenever we can. For example, our pricing is one fee for storage, while the underlying repository might be on a Solid State Drive (SSD) or Hard Disk Drive (HDD). In the future we can offer extra credits if users do something that generates value to the company. Similar to the Dropbox ‚Äúget GBs for inviting a friend‚Äù offering. Examples: Using new stages, linking to a partner (AWS/GCP), and inviting new users. Prepay vs. postpay: We select prepayment since it solves non-payment problems like bitcoin miners. It‚Äôs also more predictable for users with fewer unexpected bills, so it makes budgeting easier. Postpay reduces the risk of infrastructure going down due to the lack of funds. In GitLab, most of the consumption is driven by people in the organization instead of their customers. This makes it more likely that we can get them to pay quickly when that is needed. We should think about emergency processes for enterprise customers that have long ordering cycles. Manual vs. automatic ordering: We need both. We‚Äôll start with manual ordering since that is simpler to make, we need it anyway, and it leads to fewer unexpected bills for customers. Automatic ordering will help customers prevent their developers being ineffective because they don‚Äôt have minutes. At some point, we might change the default from manual to automatic. If we do, we should communicate this well and always give customers the option to keep it manual. Recurring vs. non-recurring: We will make it recurring for anything that was manually ordered and non-recurring for anything that was automatically ordered. Recurring reduces work on the side of the customers. Non-recurring reduces the chance of customers paying for consumption they don‚Äôt use. Refundable vs. non-refundable: We‚Äôll make it non-refundable for now, since refundable is complex to implement, has legal constraints, and makes revenue recognition harder. Refundable would be better for customers that have more consumption purchased than they need. Split vs. combined pricing: Do you charge separately for storage and minutes, or do you buy a bunch of credits you can use for both? We select split pricing, because it makes it simpler to understand. The hyperclouds are also going this way with reserved instances and free tiers are also for specific products. Dollars vs. credits vs. native: Do we add x dollars to an account, add credits, or add compute minutes and storage GBs. We choose native since it is simplest to understand if you do split pricing. Not all minutes are the same (sizes, operating system) but we can use a multiplication factor for that. More than 95% of the minutes are of the 1x type, so native instead of credits makes it easier in most situations. Partial vs. full refill: We do a full refill since it is simpler to communicate, understand, bill, and administer. CircleCI does a partial refill for 25% of your normal credits. How much free? We should probably do 5x less than the lowest tier since we have 5x between the paid tiers. GitHub followed our pricing so that isn‚Äôt a good source of comparison. CircleCI does 250 minutes on the free plan. Accumulative vs. non-cumulative: We currently think the pros with the non-cumulative approach outweigh the pros with the cumulative approach. It seems that per namespace is easier to communicate. Customers don‚Äôt need to do calculations on the total minutes and storage they are getting when signing on contracts, renewals, adding users, etc. as long as they stay under the total it is a predictable bill. It is simpler to implement, and we already have it. The allotment with the plan is to get people started, not for serious consumption, that you can buy separately. It looks like a bigger number of minutes and storage. This gives the most to free users, for whom purchasing consumption is a big hurdle to try GitLab. We need to make sure that a paid tier doesn‚Äôt benefit from free users quota. Some other vendors‚Äô pricing metrics are like this as well. It makes more logical sense. It is more fair as customers will have more minutes and storage as they sign up more users. It is aligned with our tier pricing metric. It incentivizes more users per namespace of which we know it drives conversion. It drives free users to more quickly buy consumption and convert them into customers. Per user vs. per namespace: Are the consumption limits provisioned per user or per namespace? In the case of per namespace, the user gets more minutes and storage when they create another namespace. In the case of per user, the user receives fixed minutes and storage across all their contributions. We currently provision consumption limits per namespace. A user namespace also receives the group namespace‚Äôs quota. Does storage pricing include other storage types: attachments, containers, etc.? The single storage pricing covers registry (containers are part of it), repository, artifacts, and attachments, etc. Pricing is not a substitute for scalability. For example, putting something in a higher tier if we are worried about its scalability is not what we do. We should rather start with Beta, limited access, or mailing lists etc. Price difference between self-managed and SaaS Arguments to charge more for SaaS: The costs of SaaS are higher for GitLab. It is more logical in revenue recognition. Arguments to at least make them equal: Self-managed pricing tends to be higher, in general. There is more market demand for self-managed. No incentive for sales to sell SaaS over self-managed. We want to incentivize customers to move to SaaS with us because we have more data (better customer success outcomes) and we don‚Äôt have to rewin their business when they do move from self-managed to SaaS Not sure what is normal in the market. Adobe did a good job, but they moved from perpetual licensing to subscriptions, where it is hard to compare the two prices . When is a dollar not a dollar? This is the title of a great article of which we‚Äôll apply the 8 points to GitLab below: Cost vs. revenue: we can help both to reduce costs and increase revenue, make sure you align to what the priorities of the prospect are. Principle agent problem: for a VP of Engineering, you probably want to highlight our features that provide more visibility over features that save developers time. Existing expense vs. new expense: we can make use of existing budgets, be aware that multiple can apply (dev tools, security, operations, DevOps transformation). Above vs. below discretionary spending limits: one more reason to have multiple pricing tiers. Selling services vs. customized products vs. off-the-shelf products: we‚Äôre selling a high-margin product and augment with services when needed to make the customer more successful. Selling to many stakeholders vs. one stakeholder: this is another reason for our multiple tiers‚ÄîPremium is sold to the single stakeholder of development teams, Ultimate is sold to multiple stakeholders and will need the CIO to enforce the transformation. Monthly vs. upfront payments: that is why we prioritize yearly upfront, sometimes even multi-year upfront. Also, yearly is the standard for enterprises (Salesforce sells it like this) and helps reduce support costs that are an order of magnitude greater for SaaS (most likely to be monthly) vs. self-managed. Selling vs. upselling: this is why we have multiple tiers. Annual pricing is prioritized over monthly pricing Annual, up-front pricing is currently our only offering. All internal systems should show only annual pricing to keep comparisons simple. We do show monthly pricing externally. Arguments supporting annual up-front pricing: On slide 7 of the 2020 Go To Market (GTM) Survey of Redpoint it showed that Annual pricing was the majority from $5k up. It helps to recover the costs of acquiring, onboarding, and supporting a customer. It enables reinvestment to speed delivery of new product capabilities for customers. It aids customer self-selection and commitment to drive to successful deployment and enough time to see successful outcomes with the product. It can be offered at a discount relative to monthly pricing. We offer a wide range of product tiers, including a free tier to appeal to many customer types and free trials of any tier. Costs are lower for sales, billing, and customer support. Better customer experience due to ongoing product availability and less frequent administration and billing contact. It is much easier to enforce license entitlement only once per year and yields lower product development cost. It enables a more predictable business and more up-front investment in customer success to ensure great outcomes from use of the product. Annual pricing lends to a more simple revenue recognition model where consumption is not relevant since revenue is recognized evenly over the course of the term. To get the equivalent with monthly pricing you need a ‚Äòuse it or lose it‚Äô condition per month, while the industry standard is to allow carry-over into the next month. It helps to reduce churn with SMB customers, as that has been a problem in the industry. Arguments supporting also offering monthly pricing: Monthly billing gives customers another way to buy and thus reduces barriers to adoption of the product. Monthly pricing can align with billing of combined or dependent products/services that are already billed monthly. (ex: if bundled with another monthly service) Why show monthly pricing on the website Almost all SaaS products show monthly pricing on their pricing pages. GitLab shows monthly pricing on our website and notes clearly that it is billed annually. This is also a standard practice followed by companies like Salesforce . We previously have tried showing annual pricing on the website, but repeatedly heard from customers that they were confused by it. They often thought our product was priced significantly higher than it actually was because they expected the pricing to be displayed in monthly units and read the annual price as though it were per month. Only sell a suite Most companies evolve in the following way: Sell one product Sell multiple products Sell multiple products and a suite of them Only sell a suite An example is Microsoft Office, where it is costly to buy components of Office365 separately, although higher tiers include more products. At GitLab, we decided to skip the intermediate steps and immediately only offer a suite that includes all our products. Having our complete scope included in our open source version is even part of our stewardship promises . Selling only a suite has risks, after the => is how we mitigate those at GitLab: Leave money on the table, if people want all products. => Offer an Ultimate tier that is great value, if you adopt everything of GitLab. Discount because people don‚Äôt want all the products. => Make a discount conditional on not using part of the product. Tiers are harder to define than if you would have separate products. => Hard to mitigate, we have to work extra hard on communicating the differences. No revenue feedback from customer about what products they value more. => The product function focuses on usage data as our best proxy for value. Companies evolve to selling only a suite for the following reasons, after the => is how this applies to GitLab: Makes it easier for organizations to adopt the other products. => This is essential; organizations have official solutions and GitLab grows with organic adoption from developers. Show customers the benefit of a single application . => This is essential, since people are skeptical (showing beats telling). More usage of all the products. => This is essential for us, due to our seed then nurture product strategy. Harder to displace the suite, once it is in place. => This will help if competitors offer a service based on our open source code. We‚Äôre going even further than selling a suite by integrating everything in a single application. We do that because of the advantages mentioned on our handbook page about us being single application . A secondary effect is that the user doesn‚Äôt have to make a buying, or even an adoption, decision. Charging one price that incorporate all our stages is the perfect bundle . Value creation There are two factors that determine how much value GitLab creates for an organization, in order of importance: Scope: how many parts of GitLab you use, indicated by the DevOps score, how many components of GitLab are in use. Size: how many people work in an organization and use GitLab. When an organization is larger, the benefits of GitLab are larger because: Coordination takes up a greater amount of the work. 80% is coordination costs; it is much more valuable to reduce that than when it is 20%. Harder and more expensive to train people and enforce best practices. More silos that benefit from innersourcing. More cancellations, longer cycles, more time to win. Higher requirements for governance. Value capture Since GitLab is an open core project, we‚Äôll always create much more value then we (are able to) capture. Based on the value created, the straightforward way to capture value would be to: Scope: charge a higher price per user the more of GitLab you use. Size: Charge a higher price per seat the more users you have. These straightforward ways are not possible for the following reasons: Scope: charging more for adoption would hurt the adoption of GitLab for the whole lifecycle. In January 2018, version control is 10 times more popular than the next feature (CI). We need the features to spread organically, so people can create more value with GitLab. People are much more willing to pay when they are already using a part of the lifecycle. Size: many other software companies limit the maximum amount of users in certain tiers . For GitLab, we can‚Äôt do this because we promise the open source version won‚Äôt contain artificial restrictions . We can do it in our proprietary tiers, but this doesn‚Äôt seem symmetrical. It also feels unfair, if you have to pay more simply by being a bit larger than the limit. So we‚Äôre left with charging for features. We can‚Äôt charge for each feature separately, since that is unwieldy for the customer. So we charge for tiers that contain a bundle of features. We select features in the (more expensive) paid tiers that: Scope: become more useful and valuable as your DevOps score increases Size: become more useful and valuable as your organizational size increases Adding features to a (more expensive) paid tier is not the only thing stopping users from adopting them, but it is a very important factor. To simplify the above, we base our feature groupings on champion position (see below). Buyer-Based-Open-Core We make feature tiering decisions based on: ‚ÄúWho cares most about the feature‚Äù . Our three tiers are differentiated based on the buyer persona or IC who buys GitLab, from individual contributor, to manager/director, to executive. Every person in the company is on the same tier , even if they don‚Äôt use all the features. The feature is put in the plan based on what champion is most likely to care about it. Buyers make sense, since a higher-cost plan needs a higher-placed buyer. Alternatives that don‚Äôt work: Pricing based on company size doesn‚Äôt work; some small companies need the features of the most expensive plan. Scope and size don‚Äôt work. Pricing based on maturity is strange, because organizations at the beginning of their journey should pay the most, since in a greenfield you benefit the most quickly and extensively from GitLab. More detail about this in Sid‚Äôs presentations about Buyer-Based-Open-Core at the Open Source Leadership Summit in 2019 and at Heavybit . Also, see fork and commoditize (internal) in our list of concerns. Example template for customer response A customer asked why merge request approvals were not included in free: Thanks for asking. We think that managers are more likely to care about merge requests approvals than individual contributors. That doesn‚Äôt mean that individual contributors don‚Äôt care about them. And it doesn‚Äôt mean that in all cases managers care more, just in most cases. For more information please see our Buyer Based Open Core model: #buyer-based-open-core . Below is a video of the CEO talking about monetizing open source with co-founders from Infracost.io If a feature can be moved down do it quickly We should not hesitate to open source features. When we put a feature into too high of a tier we should move it quickly because not having it in all tiers limits who can use the feature and this hurts: Getting more users: having the product sell itself makes us much more efficient, for it to sell itself it has to get used, more open source features can increase the popularity of GitLab compared to rival offerings. Getting more stages per user (internal): if an open-source feature gets a user to adopt a new stage, the value one user gets from GitLab increases greatly because the single application benefits grow exponentially when you adopt more stages. Getting more open source contributions to improve the feature: since the number of contributions grows with the number of users. Increase demand for paid features on top of what you open source: When you move a feature down this increases the usage of the specific feature, for example our service desk functionality. When a feature is popular this creates more demand for paid features that we can add later like custom templates for service desks. In most cases the following guidelines apply: Prioritize feature adoption in free prior to attempting to monetize it. If other paid features will be within reach of more users by using this features we should probably open source it. An example is the support for multiple Kubernetes clusters that can drive adoption of adding Kubernetes clusters which allows people to use the paid feature of browser performance testing. If no buyer cares about the feature, that means it isn‚Äôt the focus of any buyer, and we should open source it. We should make sure that the basic features of a comparable offerings are open source. We should charge for the features that the comparable offerings charge extra for. We do need features to be open source to drive initial adoption. Below is a video with the CEO discussing the philosophy of this with a Product Manager: Default to move features down When in doubt, we will default to moving features to a lower tier, moving it down quickly if data shows that this is more appropriate. Not all tier changes will involve moving things to lower-priced plans and paid features may move into the higher tier, but open source features should never move to paid tiers . Occasionally, a feature may unintentionally become available at a lower-tier due to a bug. This can include the free (open source) tier. When we fix the bug and return the feature to the correct tier, this is not the same as moving an open source feature to a paid tier. The definitive source for a given feature‚Äôs tier is our documentation . We should focus on building new features that buyers want and making sure that the initial assessment of new features is never too low. While we reserve the ability to move features up in tier, proving the necessity has a much higher bar since we are constraining the existing reach of a feature rather than expanding it. Please also note that the CEO is in charge of pricing and tiers; this is delegated to product for the day-to-day work. While other parts of the GitLab organization are consulted, the CEO is the directly responsible individual . Changing tiers and pricing changes To propose a change that impacts pricing or changes a feature‚Äôs tier (e.g. moving a feature from Premium to Free), please follow the process outlined in the Feature Tier or Pricing Change issue template . DevOps score is not maturity What is interesting is that GitLab creates more value as you adopt more of it. This shouldn‚Äôt be confused with DevOps maturity. DevOps maturity is how advanced your practices are and how fast your DevOps lifecycle is, shown in cycle analytics . With the best practices embedded in GitLab, you will mature faster than without it. GitLab enables a 200% faster DevOps lifecycle. But DevOps maturity is mostly about organizational change. GitLab the product is just an enabler of it. Even if an organization uses everything of GitLab (high DevOps score), they can still have a slow process (slow lifecycle). We know there is a correlation between a higher DevOps score and a faster lifecycle; but especially in organizations new to DevOps, it is a trend, not an absolute. Linking our tiers to maturity would mean we don‚Äôt ask any money from the large organizations that currently have a slow lifecycle but that are making it faster by adopting all of GitLab. These large organizations with a slow lifecycle benefit the most from GitLab, since they can adopt it completely, because they are not held back by an existing toolchain. Location based pricing As suggested by a user on X (X login required). This is a good suggestion to consider given the GitLab approach to adapting to local markets throughout the business. GitLab will assess viability of the idea in our overall pricing strategy planning. It is difficult to do and our assessment of this will consider: This is a complex issue and requires that all parties are better off if a change is made to account for geography. We fully admit that this would be hard to pull off successfully. If there is a way this could be good for customers and for GitLab, we will not treat this separately. We will treat it as part of a unified pricing strategy In a global and digital marketplace it is difficult to positively identify where a customer is geographically located either because we rely on that customer to self-identify or because it is a large organization with users in several geographical locations. We may be able to solve with a simpler discounting policy Any overall reduction in cost per license must be more than made up by increased volume at the new pricing Last modified July 17, 2025: Removes outdated strategy page ( 387298cd ) View page source -  - please contribute .",
    "headings": [
      "Pricing model",
      "Pricing Strategy",
      "The Value of Free users",
      "Pricing Philosophy",
      "Pricing Methodology",
      "1. Value Proposition",
      "2. Customer Collaboration",
      "3. Competitive Landscape",
      "4. Mutual Success",
      "Departments and Decision Making",
      "Three Tiers",
      "Buyer Based Tiering Clarification",
      "Examples",
      "Usage can be more important than buyer-based tiering",
      "Prevent the ability to circumvent tiering",
      "Partner integration considerations",
      "Themes",
      "Lower tiers have more relative value",
      "Consistent names",
      "Type of sell",
      "Hybrid sales model",
      "Combining features in plans",
      "Single plan for one customer",
      "Reporter User Permission Pricing",
      "True-up pricing",
      "Consumption pricing principles",
      "Price difference between self-managed and SaaS",
      "When is a dollar not a dollar?",
      "Annual pricing is prioritized over monthly pricing",
      "Why show monthly pricing on the website",
      "Only sell a suite",
      "Value creation",
      "Value capture",
      "Buyer-Based-Open-Core",
      "Example template for customer response",
      "Below is a video of the CEO talking about monetizing open source with co-founders from Infracost.io",
      "If a feature can be moved down do it quickly",
      "Default to move features down",
      "Changing tiers and pricing changes",
      "DevOps score is not maturity",
      "Location based pricing"
    ],
    "word_count": 8745,
    "extracted_at": "2025-07-21 20:15:03"
  },
  {
    "document_id": "gitlab-handbook-385505",
    "url": "https://handbook.gitlab.com/handbook/acquisitions/",
    "title": "Corporate Development / Acquisitions",
    "category": "Product",
    "content": "Acquisitions Handbook GitLab‚Äôs key goal in pursuing acquisitions is to accelerate our roadmap and offer better tools to customers more quickly. Acquisition strategy GitLab‚Äôs key goal in pursuing acquisitions is to accelerate our roadmap and offer better tools to customers more quickly. We are seeking to introduce new product categories and mature early categories faster than by building everything internally. We want to acquire strong teams that have already built great tools and products relevant for GitLab customers and have them integrate their tech into GitLab. Additional benefits to GitLab: Strengthen value prop in product categories with high growth and expected future profits Improve market perception and create a PR opportunity Acquisition approach We are looking for companies interested in helping deliver on our vision to create a single application for the entire DevOps lifecycle. We value strong teams and technology and are looking for a combination of both that will help us accelerate our roadmap. We‚Äôre looking for acquisitions which can either present a strategic value-add or create potential for significant revenue upside. Acquisition target profile Below is a set of general, yet not strict, characteristics of companies that are a potential fit for our acquisition process: Have built features or functionalities which are aligned with GitLab‚Äôs long term strategy Engineers that meet our standard hiring guidelines Ideally bring a solution which accelerates our maturity in a product category or fits into the new categories on our roadmap. R&D team size under 30 people Willing to reimplement products into GitLab in Ruby and Go Willing to sunset old customers within 90 days or less, with an option to transition to GitLab. GitLab follows an open-core model Aligned to ship on the first month and iterate quickly Strong founders looking to join GitLab Considering joining forces with GitLab Please review our handbook ; it is the central repository for how we run the company. Spend time understanding if a remote culture is right for you and your team. Why join GitLab? Leverage the unique data and user-experience GitLab has as complete DevOps platform to act as a force-multiplier in helping you build the vision for your product area Focus on building great technology at scale to reach millions of users and some of the largest enterprise companies. We can ensure what you made will be used by more than 100,000 organizations and millions of users. Quick transaction - We move fast and aim to close the deal in 2-4 months, if you are able to drive a fast process with us Upside - Financial outcome if GitLab is successful (GitLab stock) Your team is in good company - GitLab is a unique place to work at with a leading product and a fascinating culture What we offer Acquisitions receive a compensation offer specific to that engagement, which will be evaluated as part of our acquisition process as we learn more about your company and your technology. What happens to your current company? Our goal is to integrate the acquired technology into GitLab‚Äôs platform with the team behind it, keeping the team as whole as possible. We want to focus on integrating the value quickly, thus we don‚Äôt want to maintain existing services/products outside of GitLab‚Äôs platform as doing that will hinder the speed of integration. Hear from the founders of our previous acquisitions Andrew Newdigate , ‚ÄúThroughout Gitter‚Äôs acquisition process, GitLab was an excellent partner. We started the process in mid-December, and by mid-January, the team were onboard and had joined GitLab‚Äôs summit in Canc√∫n, Mexico. Compared to previous acquisition attempts that we had been through with other companies, the professionalism and focus of the GitLab team was refreshing. It quickly became apparent to me that Sid, Paul and the team at GitLab were interested in striking a fair deal, and were as concerned about the outcome for the Gitter team as my co-founder and I were. In the year-and-half since, GitLab has continued to be a great home for Gitter and I‚Äôm incredibly proud to be part of the team.‚Äù Philippe Lafoucri√®re , ‚ÄúWhen GitHub announced they would provide a Security graph and alerts, we knew we would not be able to compete with them. That meant the end of the story for us and our product. It was time to find a new home for the team. We started discussions with GitLab in November 2017 and officially joined the company in mid-January 2018. The whole process was seamless, with a particular care for the team. Expectations from both sides were discussed, with mutual respect and understanding. The founders made themselves available for us at anytime, and we had regular meetings for several months until we all estimated the situation stable enough. Onboarding a whole team at once is a challenge: the peopleops team did everything they could to help and to make them feel comfortable with their new positions. They were happy to continue on the foundations we‚Äôve built over the years while being able to contribute to a greater goal. We managed to identify with the management where we could have the best impact, and provide results as soon as possible. I don‚Äôt see anything GitLab could have done differently to make this acquisition smoother. The most important value to follow in this kind of event is Trust (because you can only lose it once). GitLab, and especially its CEO, was incredibly clear and respectful during all the process and beyond.‚Äù Gemnasium: Our GitLab journey Keys to successful acquisitions Managing people‚Äôs expectations and concerns Successful integration execution Maintain a non-biased view on target companies‚Äô value Starting an acquisition discussion with GitLab If you are interested in starting acquisition discussions with GitLab, please send an email to Corporate Development to connect and start the process. Acquisition process Learn more about our internal acquisition process and how you can prepare for an efficient process. Performance indicators See our performance indicators . Contact us For additional information contact Corporate Development . Acquisition Process This is a detailed view of our acquisition process. For more information about our acquisitions ‚Ä¶ Last modified September 23, 2024: Fix broken links ( d748cf8c ) View page source -  - please contribute .",
    "headings": [
      "Acquisitions Handbook",
      "Acquisition strategy",
      "Acquisition approach",
      "Acquisition target profile",
      "Considering joining forces with GitLab",
      "Why join GitLab?",
      "What we offer",
      "What happens to your current company?",
      "Hear from the founders of our previous acquisitions",
      "Keys to successful acquisitions",
      "Starting an acquisition discussion with GitLab",
      "Acquisition process",
      "Performance indicators",
      "Contact us"
    ],
    "word_count": 1028,
    "extracted_at": "2025-07-21 20:15:05"
  },
  {
    "document_id": "gitlab-handbook-358244",
    "url": "https://handbook.gitlab.com/handbook/product/ux/",
    "title": "UX Department",
    "category": "Product",
    "content": "UX Department The GitLab UX department comprises four areas to support designing the GitLab product: UX Research, Product Design, Technical Writing, and Foundations Hello We‚Äôre the GitLab User Experience (UX) department. We comprise four areas to support designing and building the GitLab product. UX Research Technical Writing Product Design Foundations - Pajamas Our goal is to make our product easy to use, supportive of contributions from the wider GitLab community, and built for a diverse global community. We want GitLab to be the easiest and most delightful product in its class. How we work We support all users from beginners to experts. We believe that GitLab software should be unintimidating and accessible for a beginner, without oversimplifying important features for advanced users. We stay with users every step of the way to help them learn fast as a beginner and then become an expert over time. We‚Äôre building one product, together. We‚Äôre highly focused on ensuring that no matter how big our product gets, the entire experience stays cohesive, consistent, and interconnected. We‚Äôre humble facilitators of user experience design. Everyone is a designer; everyone can contribute . We are not egotistical, moody experts who alone hold the keys to user delight. We encourage Product Managers, Engineers, and the wider GitLab community to contribute to creating an exceptional user experience. We look for small changes and big impacts. Sometimes the simplest, most boring solution is what is needed to make users successful. We want our UI to stay out of the user‚Äôs way. We work iteratively to make modest but valuable changes that make users more productive, faster, and better at accomplishing their tasks. We‚Äôre informed by empathy. We‚Äôre human, and we design for humans, so we strive for understanding, self-awareness, and connection. We are quirky, and we introduce our quirks into designs when appropriate. When we find problems that are simple to fix, we are empowered to make those changes ourselves. If a change will take you less than 15 minutes to make (for example, a minor change to our website or microcopy in the product), then start with an MR instead of an issue. By making the change yourself, you are taking immediate action to improve our product, and you might learn a new skill, too! If it seems simple, but you have questions, remember that there are people who can help you with code changes both in the UX department and across the company. We work closely with the community, and our stable counterparts Product Managers (PM), Frontend engineers (FE), Backend engineers (BE), Quality engineers, and the Brand team. We follow GitLab‚Äôs shared process referred to as the Product Development Flow and R&D Interlock . PMs define the ‚Äúwhat‚Äù and ‚Äúwhy‚Äù to lead the product direction. These are the benefits we provide to users. It‚Äôs informed by gathering customer and user feedback in partnership with UX Research. Product Designers define ‚Äúhow‚Äù the direction is experienced. It‚Äôs how users interact with the product to gain the benefits. Engineers define ‚Äúhow‚Äù the product is built to meet the product and experience direction from PM and Product Design. Workflows UX Researcher Technical Writing Product Designer Product Design Manager Cross-functional Prioritization Headcount planning Every Product Designer is aligned with a PM and is responsible for the same customer benefits the PM oversees. Technical Writers each support multiple stage groups. UX Researchers support multiple groups within a section. In the spirit of having stable counterparts, we plan headcount as follows: One Product Designer for every stage group. 1:1 ratio of Product Designers to PM (excludes stage groups with no user-facing impact or, in some cases, stage groups with low usage). 1 Product Designer for 1-3 Frontend engineers; 2 Product Designers for 4-5 Frontend engineers. One Technical Writer for up to three stage groups. 1:3 ratio of Technical Writers to stage groups. Approximately a 1:21 ratio of Technical Writers to Engineers. One UX Researcher for up to 5 stage groups. 1:5 ratio of UX Researchers to Product Managers. Approximately a 1:35 ratio of UX Researchers to Engineers. Manager support that‚Äôs appropriate for the function. Approximately a 1:5 ratio of Managers to direct reports for UX Research and Product Design. Approximately a 1:7 ratio of Managers to direct reports for Technical Writing. UX labels GitLab uses labels to categorize, prioritize, and track work. The following is a breakdown of the labels most directly related to the UX workflow. An overview of all the label types and uses can be found in the contributing doc . UX label : Indicates that UX work is required on this issue. These issues can be new features, ideas for improvement or anything else where UX should contribute their expertise. Inclusion label : A change to GitLab that promotes inclusion as it relates to our diversity value. Inclusive design label : Considering, exploring, and evaluating the different ways someone would access, interact with, or contribute to content that results in a more accessible experience. Accessibility and scoped accessibility labels are used to identify issues with accessibility impact. The scoped labels should be added after an accessibility audit has validated the impact and used in combination with priority and severity labels to triage an issue. Accessibility label : Issues that contain actionable items that help create an accessible product experience. Accessibility-audit label : Issues related to auditing exisiting experiences in order to understand possible accessibility-related improvements. Accessibility-ops label : Issues related to building accessibility into our internal workflows. accessibility::critical : Prevents some or all users from performing critical tasks with no possible workaround. accessibility::high : Prevents some users from performing critical tasks. A workaround may exist, but not without creating frustration and inefficiency. accessibility::medium : Prevents some users from performing non-critical tasks, or where the user experience is seriously degraded for users with certain assistive technologies. accessibility::low : The user experience is degraded for users with certain disabilities or using certain assistive technologies, but users can still accomplish tasks. learnability label : Issues that address learnability problems by helping users quickly become familiar with GitLab features. Scoped workflow labels from the Product Development Flow should be used to indicate where an issue is in the development lifecycle. Issues can move between workflow labels as many times as necessary, and not all labels will be applicable to every issue. Issues that require UX would use one of these labels as defined in the Product Development Flow: workflow::validation backlog workflow::problem validation workflow::design workflow::solution validation Pajamas component lifecycle labels are scoped labels used for creating and updating Pajamas components. Label usage guidelines can be found in the Pajamas component lifecycle documentation . UX problem validation label : Indicates that the issue requires UX work to validate that the problem is relevant to users. We use this label in addition to the Product Development Flow scoped labels, so that we can track validation efforts over time in our UX Performance Indicators . UX solution validation label : Indicates that the issue requires tasks to validate that the proposed solution is technically feasible and meets user needs. We use this label in addition to the Product Development Flow scoped labels, so that we can track validation efforts over time in our UX Performance Indicators . UI polish label : Indicates the issue covers only visual improvement(s) to the existing user interface. Deferred UX label : Deferred UX results from the intentional decision to deviate from the UX vision or MVC, which sacrifices the user experience. Deferred UX labeled issues are to be included in subsequent releases. Use this label to indicate that the UX released does not meet: UX and Pajamas specifications Usability standards Feature viability standards This label is applied to any follow-up issues that address a UX gap. It does not apply to the issue or merge request that created the Deferred UX. For example, if the agreed MVC design solution is not fully realized due to release pressures or implementation oversight, that‚Äôs considered Deferred UX. If the design is implemented correctly but unforeseen UX issues are identified, it is not considered Deferred UX. If in doubt about when to apply this label, use the following rule: If you can say ‚ÄúThis UX problem did not originate from an issue or merge request,‚Äù then it‚Äôs just UX, not Deferred UX. In case your team makes the decision ship an MVC that contains Deferred UX, it is recommended to create an issue to track it as soon as the change has been released. Learn more about Deferred UX as a UX Department Performance Indicator . UX Paper Cuts label : Used to prioritize and track work from the UX Paper Cuts team. Seeking community contributions System Usability Scale (SUS) labels : Indicates that the issue is related to usability problems surfaced in one of our SUS research efforts. More specifically, issues related to SUS that are prioritized can be labeled with the corresponding Fiscal Year and Quarter. For example: SUS::FY22 Q2 - Incomplete . Learn more about SUS score as a UX Department Performance Indicator Regression label : Indicates a bug introduced in the latest release that broke correct behavior (see the contribution guidelines for more info). UX scorecard label : Indicates the primary issue or epic for the UX Scorecard . We use this label to help us easily find current work and track efforts over time. UX scorecard-rec label : Indicates this issue is a recommendation that was a result of a UX scorecard review. It‚Äôs OK if the issue was created prior to the scorecard being done; it can still be pulled into the set of recommendations. CM scorecard label : Indicates the primary issue or epic for the CM Scorecard . It is used to easily find current work and track efforts. cm-scorecard-rec label : Indicates this issue is a recommendation that was a result of a CM Scorecard. Actionable Insights document learnings from research that need to be acted on. Actionable Insight::Exploration needed : A research insight derived from a UX research study that requires further exploration. Actionable Insight::Product change : A research insight derived from a UX research study and requires a change to the product experience. Type labels : Used to track feature, maintenance, and bug issues and MRs. UX Leadership are active participants in influencing the prioritization of all three work types. See also who are the DRIs for prioritization . Theme labels can be created to group issues that solve a similar user experience problem but don‚Äôt have a category. This can be especially useful for a user experience that spans the product. These issues still require a UX label. UX: Feature Discovery Improvement : Indicates issue may improve feature discoverability. UX: Onboarding Improvement : Indicates issue is a potential onboarding improvement. UX Calendar The UX Calendar ( internal only ) is the SSOT for our team meetings. You can find the details for UX calls, UX Forum, and other team meetings here. These meetings are open to everyone in GitLab. Anyone in the UX department can add events to the Google Calendar. Managers and above can make changes and manage sharing, while ICs can make changes to events. Please reach out in the #ux_leadership Slack channel with any questions or requests. UX All Hands The UX All Hands meeting takes place every six weeks, with two sessions to accommodate both EMEA/AMER and APAC/AMER-friendly time zones. The purpose is to share company updates, stay connected, and receive feedback. The entire UX department is invited, though anyone at GitLab is welcome to attend and contribute to the All Hands agenda (internal). As with all general meetings at GitLab, attendance is optional though encouraged, and will be recorded. Retrospectives To understand the specific challenges faced by the UX Department, we hold an async UX retrospective after every milestone. This retro is carried out through a new Issue created for the recent release in the ux-retrospectives project. The goal is to evaluate what went well, what didn‚Äôt go well, and how we can improve. UX Forum The UX Forum is a recurring meeting for UX team members to share and discuss their work. This includes past, current, or future work, and covers Product Design, UX Research, and Technical Writing. All meetings are recorded and made available on Unfiltered for Product, UX, Engineering, and Leadership to watch at their convenience. UX Week in Review The UX Week in Review is an asynchronous document that includes important updates for everyone in the UX department. This doc is editable by anyone at GitLab and everyone can contribute. Reminders are sent out weekly in the #ux Slack channel to add and read updates. UX Managers will receive a monthly reminder in the #ux_leadership Slack channel to add project updates from across their team. UX Talent Assessment In UX, we utilize performance factor worksheets ( üîí internal only ) as a way to facilitate talent assessment and growth conversations between manager and their direct reports. These worksheets are available in Google Sheets format and the spreadsheets include tabs for a mid-year and year-end review, as well as a tab to list Achievement, Strengths, and Opportunities throughout the year. It is strongly encouraged for each team member to have their own worksheet created at the start of the fiscal year so that it can be used as a tool throughout the entire year. Performance factor worksheets can be utilized to help efficiently complete the year-end company talent assessment program within Workday . Meet some of our team members Valerie Karnes - Director of Product Design Jacki Bauer - Product Design Manager Justin Mandell - Product Design Manager Taurie Davis - Senior Product Design Manager Rayana Verissimo - Product Design Manager Jeremy Elder - Staff Product Designer, Foundations Austin Regnery - Senior Product Designer Anne Lasch - Senior UX Researcher Emily Bauman - Senior Product Designer Will Leidheiser - Staff UX Researcher Assessing Category Maturity We assess the maturity of our product categories based on market evaluations and user testing Competitor Evaluations Competitor evaluations help us understand how a competing product addresses the Jobs-To-Be-Done that our product also tries to address. Design collaborator's playbook This page acts as a quick reference of mental models for sync and async collaboration. Documenting research insights in Dovetail The GitLab UX Research team's guide to documenting insights in Dovetail GitLab Navigation The group::personal productivity team owns the navigation structures of the GitLab product. Please review this information if you plan to propose changes to GitLab navigation. How to create a user persona This page goes into detail around the steps needed to create a user persona with a high degree of confidence. How we work Guidance on how the UX Department at GitLab works. Jobs to be Done at GitLab Jobs to be Done (JTBD) is a framework for viewing products and solutions from the user's perspective, focusing on the problems they want to solve rather than specific solutions. It helps GitLab team members uncover user needs, identify strategic opportunities, validate plans, and drive innovation. Pajamas Design System The goal of Pajamas is to be the single source of truth for the robust library of UI components that we use to build the GitLab product Product Design At GitLab, our Product Design team drives the business forward by becoming experts in their specific stage groups staying informed about the entire product, and aligning with user and business goals. We partner closely with our stable counterparts in Product Management and Development to deliver exceptional user experiences. Product Designer Workflow Here are some guidelines to help Product Designers manage their work at GitLab Remote Design Sprint The purpose of a Remote Design Sprint is to create a shared understanding and a solution to a problem following a specific process over a set timeframe. Remote Design Sprint process is based on [Google's Design Sprint methodology](https://designsprintkit.withgoogle.com/methodology/overview), and adjusted using [AJ&Smart's Remote Design Sprint 2.0](https://drive.google.com/file/d/16bwrAqHVf8qxovd87Q7LdzqwAgy7a6Rx/view). Technical Writing The GitLab Technical Writing team collaborates with developers, product managers, and the community ‚Ä¶ Think Big & Think Small Meetings The purpose of think big & think small meetings is to develop a shared understanding of goals by discussing vision, roadmap, research, design, and delivery of upcoming features. User journeys User journeys help GitLab teams understand and optimize the complete experience of customers as they discover, adopt, and integrate our DevSecOps platform to drive both user success and business value. UX Department Learning and Development This page contains links to internal and external resources that members of the UX Department at GitLab can use to build their skills. UX Department Performance Indicators Performance indicators for the UX department at GitLab UX Forum The UX Forum is a recurring meeting for UX team members to share and discuss their work. UX Heuristics Heuristics used by the UX team to evaluate our product. UX Research at GitLab The UX Research team delivers key and timely insights to drive user-centric innovation, support and influence decisions from design tactics to product strategy. UX Research Operations (ReOps) at GitLab We empower UX Research DRIs with the resources needed for efficient and high-quality research, enabling team members to focus on generating insights that drive exceptional user experiences and product innovation. UX Resources This page includes information about UX Resources to help you do your job as a product desginer at GitLab. UX Scorecards The UX Scorecard is a process similar to a heuristic evaluation that helps identify usability issues and score a given experience. Last modified July 2, 2025: Add product dev folder and move relevant pages ( 83bfc789 ) View page source -  - please contribute .",
    "headings": [
      "UX Department",
      "Hello",
      "How we work",
      "Workflows",
      "Headcount planning",
      "UX labels",
      "UX Calendar",
      "UX All Hands",
      "Retrospectives",
      "UX Forum",
      "UX Week in Review",
      "UX Talent Assessment",
      "Meet some of our team members"
    ],
    "word_count": 2924,
    "extracted_at": "2025-07-21 20:15:07"
  },
  {
    "document_id": "gitlab-handbook-693421",
    "url": "https://handbook.gitlab.com/handbook/legal/",
    "title": "Legal Overview",
    "category": "Legal",
    "content": "Legal & Corporate Affairs (\"LACA\") Our Mission We leverage our versatile skill sets to drive positive outcomes for GitLab and our customers. Approachable and collaborative, LACA team members are trusted thought partners to our colleagues across GitLab, and facilitate efficient and informed decision making in all areas of the business. In short: LACA ‚Äì We‚Äôre your one phone call. Legal & Corporate Affairs Functional Groups Commercial The GitLab Legal Commercial team is responsible for all contracting matters at GitLab, including procurement, revenue, channel, technical, and alliances, while partnering with sales, technical, and business stakeholders to ensure alignment with GitLab contracting standards and efficient execution timelines. The team supports GitLab‚Äôs go-to-market and procurement functions, providing knowledge and creativity in advising on contractual and regulatory matters to facilitate customer-centric results in accordance with the Company‚Äôs values. Helpful links: Sales Guide | Collaborating with GitLab Legal Commercial Legal Internal Handbook Highspot - GitLab Legal Hub Corporate & Compliance The Corporate & Compliance group drives strategic results for GitLab via cross-functional relationships to support a climate of principled corporate governance and the company‚Äôs culture of compliance. Corporate Development The Corporate Development group conducts diligent and thorough analysis to strategically identify, evaluate and execute potential acquisitions to accelerate the product roadmap and advance the company‚Äôs competitive position in the market. Employment The Legal Employment team serves as a strategic partner across the organization, providing expert guidance and proactive legal solutions throughout the entire team member lifecycle. Environment, Social, and Governance (ESG) The ESG group works cross-functionally to integrate ESG considerations, ESG regulatory compliance, and responsible business practices as part of GitLab‚Äôs overarching mission to make our customers successful. Privacy, Product, and Intellectual Property The Privacy and Product and Intellectual Property group enables fast-paced product development within applicable regulatory confines; privacy solutions so customers can confidently co-create in those products; and robust protection of Company IP. Risk Management and Dispute Resolution The Risk Management and Dispute Resolution group directs GitLab‚Äôs unified, transparent and ethical approach to defending company interests while resolving disputes should they arise. Strategy and Legal Operations The Strategy and Legal Operations group promotes continued process improvement such that LACA may be efficient and effective in its performance, including procurement of the most suitable tools and technology. How to Reach Us For quick questions that do not require legal advice, deliverables, or any discussion of confidential information, you can reach out to LACA in Slack at #legal . We find this channel best for questions about process, who handles what, or how to find certain things if the handbook has not yielded the right result for you after searching. #legal is not a private channel, so your inquiry will be visible to the entire company. One of our team members will do their best to answer your question in a timely fashion. Most questions regarding specific customers require a legal case in Salesforce. Follow the process here to open one. For other questions related to deliverables and non-sensitive information, create an issue in the Legal and Compliance project . Be sure to use the template most suited to your request to engage the right team members. For sensitive, private, or confidential matters, email legal_internal@gitlab.com . Anonymous Internal Ethics and Compliance Reporting We take employee concerns very seriously and encourage all GitLab team members to report any ethics and/or compliance violations by using EthicsPoint . Further details can be found in the People Group Handbook under How to Report Violations and in our Code of Business Conduct and Ethics . GitLab Policies See GitLab‚Äôs Ethics and Compliance Program for a list of policies, compliance standards, guidelines, and other resources. Authorization Matrix The Authorization Matrix designates who is authorized to sign legal documents. Only GitLab team members with signature authority can execute agreements on behalf of GitLab. Non-Disclosure Agreements Follow the non-disclosure agreement process to learn how to send an NDA (note there‚Äôs a separate process for non-standard NDAs ). NAVEX Compliance Courses For information about compliance training, including new hire requirements, and tips for using the NAVEXEngage platform, see here . Freedom of Information Act (FOIA) Requests What is a Freedom of Information Act (FOIA) request? The Freedom of Information Act (FOIA) provides public access to all United States federal agency records except for those records (or portions of those records) that are protected from disclosure by any of nine exemptions or three exclusions (reasons for which an agency may withhold records from a requester). Occasionally the records of a federal agency under a FOIA request may include GitLab records in the possession of the agency (i.e., when the agency is a customer of GitLab). In such an event, the federal agency will notify GitLab of the FOIA request and provide GitLab with the documents that the federal agency intends to release in response to the FOIA request. A GitLab legal team member will review the list and content of the documents identified by the federal agency pursuant to the FOIA request and will provide the appropriate response and/or make redactions to those documents, as necessary, prior to their release. In the event you receive a notification from a US federal agency pursuant to a FOIA request, indicating that GitLab documents or information have been identified for release by an agency, please immediately forward the request to FOIA@gitlab.com . Agile Planning Terms (Additional Terms) These Agile Planning Terms (‚ÄúTerms‚Äô‚Äô) are between GitLab Inc. with offices at 268 ‚Ä¶ Agile Planning Terms V1 Deprecated 2024-08-29 (Additional Terms) These Agile Planning Terms (‚ÄúTerms‚Äô‚Äô) are ‚Ä¶ AI Functionality Terms (Additional Terms) These AI Functionality Terms (‚ÄúTerms‚Äô‚Äô) are between GitLab Inc. with offices at ‚Ä¶ AI Functionality Terms V1 (Additional Terms) deprecated 2023-10-31 These AI Functionality Terms (‚ÄúTerms‚Äô‚Äô) ‚Ä¶ AI Functionality Terms V2 Deprecated 2024-08-29 (Additional Terms) These AI Functionality Terms (‚ÄúTerms‚Äô‚Äô) ‚Ä¶ AI Functionality Terms V3 deprecated 2025-03-31 (Additional Terms) These AI Functionality Terms (‚ÄúTerms‚Äô‚Äô) are between GitLab ‚Ä¶ Anti-Corruption Policy Overview of Anti-Corruption Policy Anti-Fraud Policy GitLab's Anti-Fraud Policy Anti-Retaliation Policy GitLab's Anti-Retaliation Policy to establish guidance for reporting ethics or compliance concerns or other inappropriate behavior while providing protection against retaliation for reporting in good faith. Code of Business Conduct & Ethics Overview of the Code of Conduct and Ethics at GitLab. Commercial Legal Landing page for Commercial Legal handbook information Content Removal Guidelines DMCA (Digital Millennium Copyright Act) takedown request requirements We take the intellectual ‚Ä¶ Contract Management and Storage These instructions provide a step-by-step guide for GitLab Team Members on properly filing fully executed contracts and vendor-related documents in our designated storage systems. Corporate & Compliance Legal This page offers a single source related to corporate legal information. Corporate Communications Policy Overview of the Corporate Communication Policy at GitLab. DORA (Digital Operational Resilience Act) Mapping How GitLab addresses the key contractual requirements of the Digital Operational Resilience Act ‚Ä¶ EU Illegal Content Report Form Use this form to report content that you believe is illegal in the European Union. This form is intended for individuals claiming legal rights in the EU, as well as individuals or entities designated as trusted flaggers pursuant to the EU Digital Services Act (DSA) External Materials Compliance Tips Compliance tips for developing materials for external use Fulfillment Reseller Flow-Through Terms These Fulfillment Reseller Flow-Through Terms (the ‚ÄúAgreement‚Äù) are made as of the date ‚Ä¶ GitLab Acceptable Use Policy This policy helps us identify unacceptable use of our services, and applies to all users of all ‚Ä¶ GitLab API Terms of Use Understand your rights and obligations when using GitLab's publicly-available APIs GitLab Data Processing Addendum and Standard Contractual Clauses GitLab Data Processing Addendum GitLab for Education Program Agreement Education Program Agreement Date of last revision: 2022/11/16 This Education Program Agreement ‚Ä¶ GitLab for Open Source Program Agreement Open Source Program Agreement Date of last revision: 2022/08/19 This Open Source Program Agreement ‚Ä¶ GitLab Inc. Philanthropy Policy View GitLab's Philanthropy Policy GitLab Legal Team READMEs Get to know the Legal Team in our individual README pages GitLab Privacy This page helps GitLab Team Members understand the privacy practices at GitLab and to facilitate a culture that respects and prioritizes the privacy of our Team Members and users GitLab Professional Services Terms (Additional Terms) These Professional Services Terms (\"Terms\") are between GitLab Inc. ‚Ä¶ GitLab Related Party Transactions Policy Overview of the Related Party Transactions Policy at GitLab. GitLab SAFE Framework Overview of the SAFE Framework at GitLab. GitLab Subscription Agreement Subscription Agreement This Subscription Agreement (‚ÄúAgreement‚Äù) is between GitLab Inc. with offices ‚Ä¶ GitLab Testing Agreement (Additional Terms) This Testing Agreement (‚ÄúAgreement‚Äù) is between GitLab Inc. with ‚Ä¶ GitLab Testing Agreement v1 Deprecated: 2023-05-18 This Testing Agreement (‚ÄúAgreement‚Äù) is between GitLab Inc. with ‚Ä¶ GitLab Testing Agreement v2 Deprecated: 2023-06-29 This Testing Agreement (‚ÄúAgreement‚Äù) is between GitLab Inc. with ‚Ä¶ GitLab Testing Agreement V3 Deprecated 2024-08-29 This Testing Agreement (‚ÄúAgreement‚Äù) is between GitLab Inc. with ‚Ä¶ GitLab Testing Agreement v4 Deprecated 2025-02-28 (Additional Terms) This Testing Agreement (‚ÄúAgreement‚Äù) is between GitLab ‚Ä¶ GitLab's Ethics and Compliance Program Mission GitLab Inc. (collectively with its subsidiaries,‚ÄúGitLab‚Äù, ‚Äúwe‚Äù, ‚Ä¶ GitLab's Modern Slavery Act Transparency Statement This is the current Modern Slavery Act Transparency Statement Guidelines for Use of Third-party IP in External Materials Guidelines for the use of third-party content in external materials Guidelines on public discussion of competitor product features These guidelines govern how to discuss and reference competitor product features and screenshots in public issues, GitLab [documentation](http://docs.gitlab.com), and other public-facing media. Legacy Terms and Agreements Legal, Employment at GitLab: A Strategic Partnership Employment law governs the relationship between employers and employees. At GitLab, the Legal ‚Ä¶ Marketing Guide: Collaborating with GitLab Legal This page provides educational resources and process guides to GitLab Marketing for recurring Legal requests Materials Legal Review Process Follow this process to obtain legal review of materials for internal and external use Non-Disclosure Agreement Process How to send or request an NDA Partner Code of Ethics GitLab Partner Code of Ethics and Due Diligence Patents Learn about Patents and GitLab's Patent Program Policies Process for UX Research Prize Draws Process for UX Research Prize Draws Procurement Guide: Collaborating with GitLab Legal Thank you for visiting! The purpose of this resource is to provide GitLab team members with ‚Ä¶ Product and Intellectual Property Legal Product and IP team page Publicity Waiver and Release Guidelines and Process Guidelines and process for use of Publicity Waiver and Release agreements Record Retention Policy This Records Retention Policy promotes and assists with the implementation of procedures, best practices, and tools to promote consistent life cycle management of GitLab records Reseller Agreement Before submitting a Deal Registration, please review the Master Partner Agreement. PLEASE READ THIS ‚Ä¶ Risk Management and Dispute Resolution RMDR processes, policies, and resources Sales Guide | Collaborating with GitLab Legal This resource provides assistance to the GitLab Sales Team on operational and educational elements of working with GitLab Legal for Customer negotiations Stategy & Legal Operations The Strategy & Legal Ops team promotes and institutes streamlined processes, efficient tools, ‚Ä¶ Sustainability Information and processes related to Sustainability and ESG Technology Partner Agreement PLEASE READ THIS AGREEMENT CAREFULLY BEFORE USING ACCESSING OR CONSUMING THE SOFTWARE OR SERVICES ‚Ä¶ Trade Compliance What are trade control laws? Trade control laws, which often consist of sanctions, export controls, ‚Ä¶ Trademarks at GitLab Trademark information for GitLab team members UX Research Team Promotional Rules Standard Official Rules Vendor Data Processing Addendum Vendor Data Processing Addendum Whistleblowing at GitLab GitLab's Whistleblowing Handbook page, with links to whistleblowing policies. Last modified April 30, 2025: Update 'employment' wording on LACA HB page as part of LACA HB audit MRs ( 6223eef2 ) View page source -  - please contribute .",
    "headings": [
      "Legal & Corporate Affairs (\"LACA\")",
      "Our Mission",
      "Legal & Corporate Affairs Functional Groups",
      "Commercial",
      "Corporate & Compliance",
      "Corporate Development",
      "Employment",
      "Environment, Social, and Governance (ESG)",
      "Privacy, Product, and Intellectual Property",
      "Risk Management and Dispute Resolution",
      "Strategy and Legal Operations",
      "How to Reach Us",
      "Anonymous Internal Ethics and Compliance Reporting",
      "GitLab Policies",
      "Authorization Matrix",
      "Non-Disclosure Agreements",
      "NAVEX Compliance Courses",
      "Freedom of Information Act (FOIA) Requests"
    ],
    "word_count": 1942,
    "extracted_at": "2025-07-21 20:15:09"
  },
  {
    "document_id": "gitlab-handbook-298218",
    "url": "https://handbook.gitlab.com/handbook/legal/commercial/",
    "title": "Commercial",
    "category": "Legal",
    "content": "Commercial Legal Landing page for Commercial Legal handbook information The GitLab Legal Commercial team is responsible for all contracting matters at GitLab. This includes, procurement, revenue, channel, technical and alliances. The Commercial Team partners with sales, technical, and business stakeholders to ensure the alignment with GitLab contracting standards, as well as the most efficient timeline to reach execution. How to work with GitLab Legal Commercial Sales Guide Procurement Guide NDA Process GitLab Legal Commercial Processes and Resources Agreement Style Guide When drafting and/or updating templates be sure to use the GitLab Legal Agreement Style Guide NOTE: This resource is only shared with GitLab Legal Team Members Last modified January 23, 2025: Move images to static folder and update lint checker ( 9d8a33dc ) View page source -  - please contribute .",
    "headings": [
      "Commercial Legal",
      "How to work with GitLab Legal Commercial",
      "GitLab Legal Commercial Processes and Resources",
      "Agreement Style Guide"
    ],
    "word_count": 131,
    "extracted_at": "2025-07-21 20:15:10"
  },
  {
    "document_id": "gitlab-handbook-637856",
    "url": "https://handbook.gitlab.com/handbook/legal/employment-law/",
    "title": "Employment",
    "category": "Legal",
    "content": "Legal, Employment at GitLab: A Strategic Partnership Employment law governs the relationship between employers and employees. At GitLab, the Legal Employment team serves as a strategic partner across the organization, providing expert guidance and proactive legal solutions throughout the entire team member lifecycle. What does this partnership entail? We * collaborate strategically with Sales, Go-to-Market, Finance and People teams to develop scalable, compliant employment solutions as GitLab expands globally and responsibly, implementing a comprehensive process for gathering, assessing, and acting on country-specific information. We empower the Talent Acquisition department to achieve its critical goals while ensuring compliance with local laws and regulations during sourcing, recruitment, and hiring processes. We enable the People Connect team to effectively onboard and support team members with location- and role-specific legal support, setting team members up for success from day one. We partner with the Total Rewards team, People Operations team and People Business Partners to develop forward-thinking policies that balance GitLab‚Äôs business objectives, team members‚Äô needs, and global legal requirements. We provide strategic counsel to our Team Member Relations team, People Business Partners, and Total Rewards as they navigate complex team member matters, including reasonable accommodation requests, performance management, career progression, and other relationship dynamics. We champion our Diversity, Inclusion, and Belonging initiatives by aligning all employment decisions with our mission statement and applicable laws. We safeguard GitLab‚Äôs interests while also providing fair treatment during employment transitions, including offboarding processes and post-employment matters. How to work with the Legal Employment team Connect - Collaborate - Consult (and Consider any additional guidelines) To work with the Legal Employment team, reach out early in your process, provide complete information about your needs and any time constraints you have. Being specific about what you‚Äôre requesting and any deadlines you face will enable the Legal Employment team to best triage requests and support you. Connect To connect with Legal Employment, especially on sensitive matters, you can use the ‚Äô legal-employment@gitlab.com ‚Äô email address, or for non-sensitive queries, you can reach out in the #legal slack channel. Note that GitLab team members with individual employment queries should reach out to Team Member Relations team on ‚Äô teammemberrelations@gitlab.com ‚Äô or to their aligned People Business Partner for support. Collaborate For cross-functional projects that do not involve individual team members but do require the Legal Employment team‚Äôs attention, please (i) open an Issue in the Legal and Compliance Project ; (ii) select the appropriate Issue Template; (iii) apply the label legal-employment :: to-do and (iv) if you know which Legal team member you will be working with, include them as an Assignee. This will update the Legal Employment Issue Board for the Employment team‚Äôs benefit, and allow the team to pick up and/or assign appropriately. legal-employment:in progress means the Legal Employment team is actively working on the issue. legal-employment:pending requester means the Legal Employment team has a requirement or task that must be met by the requester before the issue progresses. legal-employment:done means the Legal Employment team has finished their portion of the issue. Consult A table showing coverage for queries by subject matter is available for internal use and can be accessed here . You are welcome to consult any member of the Legal Employment team. Consider these additional guidelines It is worth considering the privilege guidelines when communicating with GitLab‚Äôs Legal and Corporate Affairs team (aka the LACA team), including the Legal Employment team. Note that, if a communication is privileged, it can be protected from disclosure in litigation or other disputes. If in doubt, there‚Äôs an internal, GitLab University micro course on ‚ÄòPrivileged communication‚Äô , which is relevant to any team member who communicates with the LACA team, seeking legal advice on behalf of GitLab. The training explains the legal protection which may be applied to certain communications between team members and LACA and how best to communicate in order to be protected. It is also important to note that, if you receive any formal documents that appear to be legal notices, demands, subpoenas, court papers, or other potential litigation materials, you should please forward these by email to the legal team immediately (to the ‚Äô legal@gitlab.com ‚Äô email address) without responding yourself. Please add a brief note explaining when and how you received the document. These materials often have strict response deadlines, and your prompt sharing allows the legal team to review and address them properly to protect both you and GitLab. Last modified May 1, 2025: Update file employment-law.md ( 28f76b4e ) View page source -  - please contribute .",
    "headings": [
      "Legal, Employment at GitLab: A Strategic Partnership",
      "How to work with the Legal Employment team",
      "Connect - Collaborate - Consult (and Consider any additional guidelines)",
      "Connect",
      "Collaborate",
      "Consult",
      "Consider these additional guidelines"
    ],
    "word_count": 754,
    "extracted_at": "2025-07-21 20:15:16"
  },
  {
    "document_id": "gitlab-handbook-809052",
    "url": "https://handbook.gitlab.com/handbook/legal/privacy/",
    "title": "Privacy",
    "category": "Legal",
    "content": "GitLab Privacy This page helps GitLab Team Members understand the privacy practices at GitLab and to facilitate a culture that respects and prioritizes the privacy of our Team Members and users The Privacy Team is part of the Legal and Corporate Affairs Team. We provide support and guidance to uphold consistent business processes around the protection of personal data as it relates to GitLab customers, users, Team Members, and other natural persons. We collaborate cross-functionally and serve as advocates to ensure that the data privacy practices of GitLab meet the needs of our cross-functional partners and are continually balanced with an ever-changing global data privacy and protection landscape. Quick Links What is data privacy Privacy Terms Vendor Privacy Review Process Internal Product Feature/Release Privacy Review Guidelines for Law Enforcement Requests Customer Product Usage Information and Usage Events FAQs Privacy Statement Links GitLab Privacy Statement GitLab Cookie Policy GitLab Team Member Privacy Notice Contact the Team Slack channel - #legal is the best place for questions relating to our team that do not require legal advice, deliverables, or any discussion of confidential information. For issues that require action from the Privacy Team, apply the label Privacy::Intake . This will update the Privacy Legal Issue Board and allow the team to triage the issue appropriately. We also use the following labels: Privacy::In Process - when the Privacy Team is actively working on the issue Privacy::Pending Requestor - when the Privacy Team has a requirement or task that must be met by the business owner before the issue progresses Privacy::Done - when the Privacy Team has finished their portion of the issue Privacy::Attention for awareness only, no action needed. For sensitive, private, or confidential requests email legal_internal@gitlab.com . Please do not send emails to this address for engineering, marketing, sales or procurement requests. These should be directed to #legal or an issue should be created in the Legal and Compliance project. What Data Privacy Means Tell people what you are doing with personal data and why you are doing it so that the person can make an informed decision about whether they want to allow it to happen. Do not be creepy about what personal data is collected or how it is used and do not change the way personal data is used without first giving people notice and an opportunity to object, or, where required, obtaining prior consent. Make it easy for people to tell us their privacy preferences and honor those preferences even if they change over time. Build a product or service that has privacy-focused settings turned on by default and let the consumer decide if and when they want to change that. Transparency is a core value and every team member is responsible for the proper collection and use of personal data consistent with our Privacy Statement . Privacy Terms Privacy Term Definitions Anonymization The process of permanently and irreversibly altering personal data in a way that it is no longer capable of being related back to a specific individual. Consent A freely given, specific, informed and unambiguous indication of an individual‚Äôs wishes. Consent is captured by an un-ticked checkbox or other unequivocal statement which signifies agreement to the processing of personal data before or at the time of collection. Data Classification A method of determining types of data associated by risk. See GitLab Security Data Classification Standards for more information. Data Controller A natural or legal person, agency, or other entity which alone, or jointly with others, determines the purpose and means of processing personal data. For example, GitLab is a Data Controller is in the areas of marketing and sales where the personal data of prospects and leads is managed solely at our discretion. GitLab also serves as a Data Controller for all personal data collected from Team Members for employment purposes and any administration of benefits. Data Processor A natural or legal person, agency, or other entity which processes personal data on behalf of a Data Controller. GitLab acts as a Data Processor when we manage personal data native to a Customer‚Äôs instance or namespace. GitLab acts as a Processor in these situations because the Customer is the ultimate owner of the data it submits to the service offerings, and our contracts service as Customer‚Äôs instructions to GitLab regarding the processing of their data. Data Subject An identified or identifiable natural person. Data Subject Rights Rights granted to individuals in relation to personal data or information processed about them. Because Data Subjct Rights are instrumental to the privacy and protection of data subjects, many of these rights are codified under global privacy legislation, such as the GDPR, CCPA, and LGDP. If a business processes personal data pursuant to certain bases such as consent or legitimate interest, then a data subject may assert one of its fundamental rights and a business is obligated to respond under law. The rights granted vary slightly by country, region, province or state. GitLab treats all users and Team Members the same and will respond to a data subject request from any individual user or team member even if they live in a country, region, or state/province without specific data protection laws. Expand the following section for more information about the data subject rights available. Data Subject Rights Right of Access A request seeking access to the specific pieces of personal data that have been collected and used by a Data Controller. Right to Correct A request asking for inaccurate or incomplete personal data to be corrected. Right to Delete A request which seeks the erasure of personal data relating to the data subject. Deletion requests must meet certain conditions and businesses are not required to delete any personal data that is processed to meet legal obligations, including that data which may be processed in pursuit or in defense of claims. Right to Portability A request where the data subject wants to transfer their data to another Data Controller; typically seen when the individual changes service providers that share a compatible electronic filing system. Right to Restrict Processing This is a request for the Data Controller to stop processing personal data under certain circumstances. This may also include a request to limit the use and disclosure of Sensitive Personal Data. Right to Object A request to opt-out of all data processing or specific processing of personal data based on consent or legitimate interest. Generally this is a request to opt-out of processing for targeted advertising, which includes the sale or sharing of personal data for profiling or cross-context behavioral advertising. Right Not to be Subject to Fully Automated Decisions This is a request that the data subject not be subjected to a decision based solely on automated processing, including profiling, which would have a significant legal impact. An example might be an algorithm that excludes someone of a certain race from obtaining a credit card. DPIA A Data Protection Impact Assessment is a method to review and document identified privacy compliance risks, as well as evalute higher risks to the rights and freedoms of individuals, including any that pose potential for significant harm. Learn more about GitLab‚Äôs process for completing DPIAs here . Personal Data Any data, individually or when combined with other data, that identifies, relates to, describes or is reasonably capable of being associated with or linked to an identifiable natural person (a ‚Äòdata subject‚Äô), whether directly or indirectly. See also, Sensitive Personal Data. Privacy by Default A concept that should be implemented at the product development stage and uses appropriate measures to ensure that, by default, the only personal data processed is what is truly necessary. In practice, this means a user‚Äôs privacy settings prioritize privacy in their default state. Privacy by Design A concept which focuses on intentionally designing a product that incorporates foundational privacy principles and ensures that Controllers and Processors are able to fulfill data protection obligations. This may include appropriate technical and organizational measures such as pseudonymisation and encryption. Pseudonymization The process of altering personal data so that it can no longer be attributed to a specific individual without the use of additional re-identifying information. In order to practice successful Pseudonymization, the re-identifying information should be kept separate from the pseudonymized data. Publicly Available Personal Data Refers to personal data that is publicly available from federal, state, or local government records or made manifestly public by the data subject. Under limited data privacy laws this may also include personal data made public through widely distributed media. Sensitive Personal Data Data that is particularly personal and intimately tied to the core identity of a person. This type of data generally includes racial or ethnic origin, political opinions, religious or philosophical beliefs, trade union membership, genetic data, biometric data, data related to health, data related to sex life or sexual orientation, criminal offenses, and citizenship/immigraion status. In some jurisdictions, Sensitive Personal Data includes government identifiers and financial data. Privacy Review Process Every vendor that handles personal data is required to go through a Privacy Review prior to being onboarded, which includes completion and approval of the privacy due diligence questionnaires detailed in the Procurement process . Certain vendors who are classified as handling red or orange data under our Data Classification Standards are reviewed annually. Additionally, when new product features are designed, there are times when a formal privacy review is required. This section outlines the process for these reviews. Vendor Privacy Review graph TD A[Evaluating Potential<br> New Vendor] --> Did1[(Is there a Zip Request?)] B[Pilot with<br> New Vendor] --> Did1[(Is there a Zip Request?)] C[Renewing<br> Vendor] --> Did1[(Is there a Zip Request?)] Did1 --> E1[Yes] Did1 --> E2[No] E1 --> F[Privacy Review runs<br> concurrently with <br> Security and Legal in Zip] E2 --> G[Is there an existing Issue?] G --> H1[Yes] G --> H2[No] H1 --> I[Add Privacy::Intake<br> label to the Issue] H2 --> J[Create New Issue] F --> K[Privacy Review SLA<br> is 2 weeks] I --> K J --> K K --> L[If DPIA required<br> SLA for DPIA<br> is 4 weeks] L --> M[Approved?] M --> N1[Yes] M --> N2[No] N1 --> O[Process Complete<br> Approved] N2 --> P[Third-Party Risk<br> Acceptance Required] click Did1 \"https://handbook.gitlab.com/handbook/business-technology/enterprise-applications/guides/zip-guide/\" click J \"https://gitlab.com/gitlab-com/legal-and-compliance/-/blob/master/.gitlab/issue_templates/Vendor-Procurement-Privacy-Review.md\" _blank click P \"https://gitlab.com/gitlab-com/legal-and-compliance/-/blob/master/.gitlab/issue_templates/Third-Party-Risk-Acceptance.md\" _blank style A fill:#E6E6FA style B fill:#E6E6FA style C fill:#E6E6FA style Did1 fill:#FF8C00 style E1 fill:#C0C0C0 style E2 fill:#C0C0C0 style F fill:#FF8C00 style G fill:#FF8C00 style H1 fill:#C0C0C0 style H2 fill:#C0C0C0 style I fill:#98FB98 style J fill:#98FB98 style K fill:#ADD8E6 style L fill:#ADD8E6 style M fill:#FF8C00 style N1 fill:#C0C0C0 style N2 fill:#C0C0C0 style O fill:#2E8B57 style P fill:#DC143C For Third-Party Risk Acceptance, any Moderate/High risk requires VP and/or above approval Internal Privacy Review Internal Product Feature/Release Privacy Review Process Anytime a new feature or a change to an existing feature is planned, Product Managers and Engineering Managers should evaluate if the planned development presents a legal risk where personal data is involved. If Personal Data is implicated, utilize the Legal Risk Checklist and Workflow ( internal only ) Privacy Training GitLab Team Members are required to complete annual training which covers general privacy practices worldwide. The goal of annual training is to ensure that Team Members understand what personal data is and how to handle it to ensure that GitLab maintains the trust our customers have placed in us as well as to ensure that GitLab remains compliant with frequently changing legal and regulatory obligations. Customer Product Usage Information GitLab's Product Usage Data policies Data Protection Impact Assessment (DPIA) This page furthers the understanding of GitLab Team Members on the purpose of Data Protection Impact Assessments and when they are required Employee Privacy Policy This Employee Privacy Policy explains what types of personal data we may collect about our employees and how it may be used FAQ - Customer Product Usage Events Answers to common questions about product usage event data Guidelines for Law Enforcement Requests This page details GitLab Guidelines for receiving and processing of law enforcement requests for user data Personal Data Requests Under various global data privacy laws, GitLab users have the right to request that GitLab provides ‚Ä¶ Transparency Reports This page contains information and links to GitLab's transparency reports Last modified May 16, 2025: Move existing security standards to new section, which includes an index ( 840eb803 ) View page source -  - please contribute .",
    "headings": [
      "GitLab Privacy",
      "Quick Links",
      "Privacy Statement Links",
      "Contact the Team",
      "What Data Privacy Means",
      "Privacy Terms",
      "Privacy Review Process",
      "Vendor Privacy Review",
      "Internal Privacy Review",
      "Privacy Training"
    ],
    "word_count": 2047,
    "extracted_at": "2025-07-21 20:15:20"
  },
  {
    "document_id": "gitlab-handbook-178826",
    "url": "https://handbook.gitlab.com/handbook/legal/trade-compliance/",
    "title": "Trade Compliance",
    "category": "Legal",
    "content": "Trade Compliance What are trade control laws? Trade control laws, which often consist of sanctions, export controls, and import laws, govern how and under what circumstances technology, software, and technical assistance may be exported. Trade control laws vary from country to country but usually exist to protect national security and further foreign policy and economic interests. Under United States law, exports, re-exports, and transfers, can take many forms, including oral, written, and visual disclosure, physical shipment, and electronic transfer or transmission. An export can also occur when technology, software, or technical assistance is transmitted to U.S. nationals abroad, or to non-U.S. nationals located within the United States. The export of certain software, technology, or technical assistance to certain countries, certain end users, or for certain end uses, may require authorization from the United States government prior to export, re-export, or transfer. How do trade control laws apply to GitLab Software? GitLab Enterprise Edition, related technology, and services (collectively, ‚ÄúGitLab Software‚Äù), are subject to the Export Administration Regulations (‚ÄúEAR‚Äù), administered by the U.S. Department of Commerce, Bureau of Industry and Security (‚ÄúBIS‚Äù), and various sanctions programs administered by the U.S Treasury Department‚Äôs Office of Foreign Assets Control (‚ÄúOFAC‚Äù). The GitLab Community Edition is freely available to the public and is not subject to the EAR. GitLab continuosly monitors developments to these regulations to maintain compliance and to leverage any opportunity to broaden access to GitLab in a compliant manner that allows everyone to contribute. The GitLab Software has been classified via CCATS G178430 as a 5D992.c mass market encryption product with eligibility for export to most destinations under 15 CFR 740.17(b)(1) of license exception ENC. GitLab users may not export, re-export, or transfer GitLab Software, without first obtaining authorization from the U.S. government, to (a) any U.S. embargoed country including but not limited to Cuba, Iran, North Korea, Syria, Russia, Belarus, and the Crimea, Donetsk, and Luhansk regions of Ukraine, (b) any party identified on OFAC‚Äôs Specially Designated Nationals and Blocked Person list or the Department of Commerce Denied Persons, Entity, or Unverified lists, or (c) for end use involving sensitive nuclear, rocket systems, unmanned aerial vehicles, missiles, chemical or biological weapons, or for any other end use prohibited by 15 CFR 744. GitLab provides this information, which is subject to change without notice, to facilitate GitLab users‚Äô compliance with applicable trade control law. GitLab users remain solely responsible for exporting, re-exporting, and transferring GitLab Software and any user-developed content in accordance with those regulations and should seek legal counsel as necessary. Resources OFAC Sanctions Programs and Country Information Commerce Control List 15 CFR 740.17 Encryption Commodities, Software, and Technology ‚ÄúENC‚Äù Last modified June 27, 2024: Fix various vale errors ( 46417d02 ) View page source -  - please contribute .",
    "headings": [
      "Trade Compliance",
      "What are trade control laws?",
      "How do trade control laws apply to GitLab Software?",
      "Resources"
    ],
    "word_count": 460,
    "extracted_at": "2025-07-21 20:15:24"
  },
  {
    "document_id": "gitlab-handbook-645589",
    "url": "https://about.gitlab.com/direction/",
    "title": "GitLab Direction",
    "category": "Direction",
    "content": "GitLab Direction Maintained by : David DeSanto @david Contribute to this page  You are here: GitLab Direction The following page may contain information related to upcoming products, features and functionality. It is important to note that the information presented is for informational purposes only, so please do not rely on the information for purchasing or planning purposes. Just like with all projects, the items mentioned on the page are subject to change or delay, and the development, release, and timing of any products, features or functionality remain at the sole discretion of GitLab Inc. On this page 3-year strategy Situation Strategic challenges Product Strategy Fiscal year product investment themes FY26 Key Principles Driving Themes R&D Investment Themes Win with DevSecOps platform completeness Differentiate with AI across the SDLC Lead with SDLC insights and reporting Elevate customer-centricity to customer obsession FY25 Key Principles Driving Themes R&D Investment Themes Enable AI/ML Efficiencies Across DevSecOps Drive Use Case Adoption to Fully Realize Value Differentiate on DevSecOps Platform Strengthen Our SaaS Deployments & Capabilities DevSecOps stages Your contributions Personas Mitigating low-end disruption Maturity Scope Quarterly Objectives and Key Results (OKRs) How we plan releases Previous releases Upcoming releases ML/AI at GitLab Cross-Stage efforts Footnotes 3-year strategy Situation GitLab competes in a large market space, with a CSM estimated at ~$18B in 2024. GitLab has recently surpassed the $150M ARR milestone, with unusually high revenue growth and retention rates. GitLab is uniquely positioned in the market with a vision to offer a single application for the entire DevSecOps lifecycle. GitLab competes across numerous market segments and aims to deliver value in 80+ market categories . GitLab‚Äôs product vision is uniquely ambitious, as we were the first DevSecOps player to take a single application approach . From idea to production, GitLab helps teams improve cycle time from weeks to minutes, reduce development process costs, and enable a faster time to market while increasing developer productivity. With software ‚Äúeating the world,‚Äù this is widely viewed as a mission-critical value proposition for customers. We also have a number of tailwinds in the form of cloud adoption, Kubernetes adoption, and DevSecOps tool consolidation, which are helping fuel our rapid growth. Finally, GitLab has an open source community and distribution model, which has exposed the value of GitLab to millions of developers and has sped up the maturation of our product through more than 200 monthly improvements to the GitLab codebase from our users. Strategic challenges Tension between Breadth and Depth: Our ambitious single-application product vision means we need to build out feature function value across a very large surface area. With so much to deliver in a single application, it is a big UX challenge to keep the experience simple, consistent, and seamless between DevSecOps phases. Our challenge is to drive the right balance between breadth and depth by retaining a seed then nurture approach in new product areas while simultaneously improving existing product areas that generate usage and revenue. Shifting more focus to product depth will allow us to win and retain sophisticated enterprise customers. GitLab.com and Self-Managed: Another challenge we face is the balance between our self-managed and GitLab.com offerings. GitLab's early paying customers were more interested in self-managed, and the majority of our customers use this offering today. As a result, we focused heavily on delivering a great self-managed customer experience. However, as the market shifts toward cloud adoption, we are seeing an increasing demand for our GitLab.com offering. We now need to rapidly meet the same enterprise-grade security, reliability, and performance expectations our paying customers have come to expect from self-managed in our SaaS (.com offering). Wide Customer Profile: We also serve a wide range of customers, from individual contributor developers to large enterprises, across all vertical markets. This range of deployment options and customer sizes makes our business complex and makes it hard to optimize the customer experience for all customer sizes. Over the past few years, we have prioritized enabling our direct sales channel, but in the process have not focused enough on great customer experiences around self-service purchase workflows, onboarding, and cross-stage adoption. Competition: Finally, we have formidable competition from much larger companies, including Microsoft, Atlassian, and Synopsys to name a few. Microsoft is starting to mimic our single application positioning, and while behind us in the journey, have substantial resources to dedicate to competing with GitLab. Product Strategy Focus on increasing Stages per Organization (SpO) : There is a strong correlation between the number of stages customers use and their propensity to upgrade to a paid package. In fact, adding a stage triples conversion! Each product group should be laser-focused on driving adoption and regular usage of their respective stages, as it should lead to higher Net ARR , reduced churn, and higher customer satisfaction. As outlined in this user journey , the most important additional stages for customers to adopt are Create to Verify and Verify to Release, as each of these adoption steps open up three additional stages to users. Harness the unique power of a single application: GitLab‚Äôs primary point of differentiation is our single application approach. As we continue to drive value in any given stage or category, our first instinct should be to connect that feature or product experience to other parts of the GitLab product. These cross-stage connections will drive differentiated customer value and will be impossible for point product competitors to imitate. Recognizing this opportunity, we have grown our R&D organization significantly over the past two years, and plan to invest an outsized amount on R&D for the next 2-3 years to extend our lead in executing against the single application product vision. Increase wider-community contributions: To achieve this ambitious vision more quickly, we will leverage our powerful open source community. Each stage should have a clear strategy for tiering the value of the stage. When stages are early in maturity, we will bias toward including as much functionality in our Core open source version as possible, to drive more rapid adoption and greater community contributions, which will help us mature new stages faster. Once stage adoption is achieved, we can then layer on additional value in paid tiers to encourage upgrades. Make our core journey categories complete: We want to ensure the core product usage experience is great, which will lead to more paying customers and improved customer retention. We intend to maintain our market-leading depth in stages with complete categories, which currently are Verify (Continuous Integration) and Create (Source Code Management and Code Review). Beyond that, we will endeavor to rapidly mature our offering to complete in Plan (3rd most used stage), Release (4th most used stage), and Secure (important element of our Ultimate tier). GitLab-hosted first: Most customers don't want to run GitLab themselves (self-managed), so we should build out the offerings where we do it for them (GitLab-hosted). GitLab-hosted includes our SaaS (GitLab.com), any single-tenant offerings, and other GitLab hosted services that self-managed installations can use. Our customer and revenue growth rate for our SaaS offering is faster than our self-managed offering. To meet growing customer demand, our SaaS offering needs to have enterprise-grade security, availability, and performance. We must also ensure feature parity between self-managed and SaaS and that customers have an easy migration path from self-managed to SaaS. Going forward, all new features should be available on SaaS when they are available on self-managed, if not before. We will also begin offering GitLab-hosted services to self-managed customers to provide additional value that may not be feasible to deliver in a self-managed environment, e.g. automated cloud backups. Finally, we expect to offer different GitLab-hosted deployment options for single tenant customers and specific geographic regions to meet the regulatory, security, and data residency requirements of various customer segments. Fiscal year product investment themes Every year at GitLab, we choose some specific areas of emphasis to help guide the teams on the areas of our product that we want to accentuate. This section is used to highlight that emphasis. It is not a comprehensive list of everything we plan to do this year. Direction for each stage and category can be found at the respective direction pages . We are not asking the teams to deviate from their core mission. Many teams will see themselves contributing to these areas of emphasis directly. The other teams will continue to execute on their mission - that is also important. The themes are to help facilitate cross-team collaboration when invariably teams working on the 1-year themes may need to collaborate with others. Our guidance is: if any team approaches you to prioritize something that is thematic for this year, consider that as a higher priority than you would normally - as it is in service of the broader product-wide goal that we, as a company, have deemed important to accomplish this year. See Product Investment ( internal handbook page ) for how we allocate our R&D investment across our product hierarchy . FY26 Key Principles Driving Themes Usability: Users are telling us that we need to better meet their expectations and make the experience more intuitive. Depth: We need to stop doing some of the things we are doing today. Customers are asking us to improve core functionality through usability improvements and remove half-completed features. Data Quality: Without more visibility, we cannot make as many data-driven decisions. And neither can our customers. We need to complete our data unification effort to make this easier. Deployment Parity: All three deployments (GitLab.com, GitLab Dedicated, Self-Managed) will have feature parity (with the exception of ‚Äúadmin area‚Äù topics on .com and Dedicated). R&D Investment Themes For FY26, the four key R&D investment themes we are focused on are: Win with DevSecOps platform completeness Differentiate with AI across the Software Development Life Cycle (SDLC) Lead with SDLC insights and reporting Elevate customer-centricity to customer obsession Win with DevSecOps platform completeness We will focus primarily on core DevSecOps platform capabilities across SCM, CI, CD, security, compliance, and enterprise agile planning with the goal to achieve a leadership position or extend our existing leadership position. We will drive Premium and Ultimate value by helping propel free-to-paid conversion through product-led growth / feature discovery moments. Differentiate with AI across the SDLC We will introduce new as well as improve existing GitLab Duo AI capabilities within our core DevSecOps platform capabilities. We will also bring ModelOps features to general availability, including a focus on enabling customers to work with native data science workloads within GitLab. Lead with SDLC insights and reporting We will focus on deepening the types, and quality of metrics, as well as pulling metrics from third party integrations, with the goal of making GitLab the central component to understanding SDLC insights. We will also provide reporting of feature usage enabling customers to understand what features and capabilities are being used by their teams as well as what usage is connected to Premium and Ultimate tiers, or are features and capabilities included in add-ons. Elevate customer-centricity to customer obsession We will focus on addressing use case adoption issues as well as improving user experience within onboarding to improve our customer's time-to-value for core DevSecOps platform capabilities. We will improve customer experience improve ease-of-use for SMB/commercial customers with license management and self-service workflows. Based upon and informed by the pricing research completed in FY25, we will also implement an updated pricing strategy. FY25 Key Principles Driving Themes Depth over Breadth: For the past several years we have focused on breadth over depth. This has allowed us to show our direction as a company and define the DevOps Platform market. In FY24, we pivoted to depth over breadth as product depth allows us to win and retain sophisticated enterprise customers. We will continue our focus on depth throughout FY25. Drive Adoption of Ultimate: Due to the increasing demands for security and compliance in software development, GitLab Ultimate continues to gain popularity with our customers. We will focus on increasing the value of Ultimate by not only improving security and compliance functionality but also adding value from other key areas within our platform like Plan, Verify, and Data Science. Differentiate: Our primary point of differentiation is our single application approach: all aspects of our DevSecOps platform work seamlessly together, right out of the box, and can be tailored to the specific needs of each organization. R&D Investment Themes For FY25, the four key R&D investment themes we are focused on are: Enable AI/ML Efficiencies Across DevSecOps Drive Use Case Adoption to Fully Realize Value Differentiate on DevSecOps Platform Strengthen Our SaaS Deployments & Capabilities Enable AI/ML Efficiencies Across DevSecOps AI as part of software development has continued to mature and has become the number one topic in our customer discussions. To meet our customers‚Äô needs and the evolving market landscape, we will take a three pronged approach to AI (GitLab Duo, ModelOps, AI agents) as part of our DevSecOps platform providing us differentiation in the market. Drive Use Case Adoption to Fully Realize Value CI and CD are critical to the success of Premium, while security and governance drives value in Ultimate. We will increase our focus on adoption of these areas - ensuring that customers realize the value of the capabilities they have paid for. This will continue to reduce churn, drive free-to-paid conversion, and increase up-tiering from Premium to Ultimate. Differentiate on DevSecOps Platform Toolchain consolidation continues to come up with customers as well as in our annual DevSecOps survey. We will capitalize on our position as the enterprise DevSecOps platform by continuing to expand our planning capabilities, continuing to mature our metrics and reporting, and bring new SCM capabilities to general availability. Strengthen Our SaaS Deployments & Capabilities GitLab.com and GitLab Dedicated continue to grow in popularity as more organizations need to undergo digital transformations however do not want the overhead of self-hosting their DevSecOps platform. We expect this trend to continue in FY25 and will invest in our SaaS deployments to ensure they meet our customers‚Äô expectations. DevSecOps stages DevSecOps Plan Code Build Test Release Deploy Operate Monitor Security Compliance DevSecOps is a broad space with a lot of complexity. To manage this within GitLab, we break down the DevSecOps lifecycle into a few different sections , each with its own direction page you can review. Dev Section Direction - Includes the Plan and Create stages CI Section Direction - Includes the Verify and Package stages CD Section Direction - Includes the Deploy stage, which includes the Environments group Sec Section Direction - Includes the Software Supply Chain Security Direction and the Application Security Testing , Software Supply Chain Security , and Security Risk Management stages Data Science Section Direction - Includes the ModelOps and AI-powered stages Analytics Section Direction - Includes the Monitor stage, which includes the Analytics Instrumentation and Platform Insights groups Growth Section Direction - Includes the Growth stage, which includes the Acquisition and Activation groups Fulfillment Section Direction - Includes the Fulfillment stage, which includes the Provision , Utilization , Fulfillment Platform , Subscription Management , and Seat Management groups Core Platform Section Direction - Includes the Foundations stage, which includes the Personal Productivity , Design System , and UX Paper Cuts groups Infrastructure Platforms Section Direction - Includes the GitLab Delivery , Production Engineering , Data Access , Tenant Scale , GitLab Dedicated , and Developer Experience stages Your contributions In addition to addressing the DevSecOps lifecycle internally through the above sections, contributions from the community also help increase our rate of innovation, which helps mature the stages of our DevSecOps platform . These community contributions are an important part our company mission and strategy . Our issue tracker contains requests made for features and changes to GitLab. Contributing is the best way to get a feature you want included as we continually merge code to be released in the next version. Please see our Contribute to GitLab page for more details such as guides to get started contributing, areas looking for contributions, and contribution acceptance criteria. Personas Personas are the people we design for. Developers, security professionals, and operations professionals are currently the primary personas we focus on, and we tailor our user experience to their needs. We want GitLab to be the main interface for people in these roles, so they can show up at work, start their day, and load up GitLab. And that‚Äôs already happening. But there are a lot of other roles involved with the development and delivery of software. That is the ultimate GitLab goal - where everyone involved with software development and delivery uses a single application so they are on the same page with the rest of their team. We are rapidly expanding our user experience for Designers , Compliance Managers , Product Managers , and Release Managers . We‚Äôll also be expanding to the business side, with Executive visibility and reporting. While we‚Äôre still calling it DevSecOps, we‚Äôre really expanding the definition of DevSecOps and delivering it all as a single application. Mitigating low-end disruption GitLab is not immune to disruption. In some ways, it is a sign of success that GitLab is now at a scale where we have to think about low-end disruption. Arguably, a few years ago, GitLab was a low-end disruptor. Clayton Christensen defines low-end-disruption as follows: Low-end disruption refers to businesses that come in at the bottom of the market and serve customers in a way that is \"good enough.\" These are generally the lower profit markets for the incumbent and thus, when these new businesses enter, the incumbents move further \"upstream.\" In other words, they put their focus on where the greater profit margins are. Our perspective is that low-end disruption is an additional and critical sensing mechanism. This is especially true for the DevSecOps market. We look at the following attributes to figure out if a low-end disruption has anything close to potential product-market resonance. This list is an adaptation of the Product Zeitgeist Fit . Builder Enthusiasm : Are the most talented, hardest working, or most-in-demand people - the engineers, the developers - so intrigued by the approach that they are working on it, excited by it, and trying to make it a thing? If that is the case, then there is a good chance that they will eventually make it happen, moving beyond the fringes to the mainstream. Number of stars, forks, and contributions in the repo are some metrics to look for here. Despite Test : When people are using a product despite the fact that it‚Äôs not the best thing out there, or, in some cases, that it‚Äôs straight-up terrible, it‚Äôs a great sign. It shows that the product has a line into something emotional, not solely functional. Wanted, not just needed. In the early days, these products can often feel misunderstood or controversial. At first blush, the conceit may even raise a few eyebrows. But to the people who have been working on those products, they‚Äôre so clearly elegant, if temporarily imperfect, solutions to big and important problems that they seem almost obvious once they recognize it. Google Trends and posts on Hacker News are some things to monitor here. T-shirt Test : If people with no connection to the company are wearing their t-shirts or putting their stickers on their laptops or wearing their socks, that desire to associate with the idea indicates as much a movement as a product. A reason low-end disruptors are able to enter the market is that the feature-absorption by users is lower than the feature-velocity of the established vendor. To address this we are focused on a working-by-default configuration principle . Maturity As we add new categories and stages to GitLab, some areas of the product will be deeper and more mature than others. We publish a list of the categories, what we think their maturity levels are, and our plans to improve on our categories page . We strive to be the best product in the market and to be complete. As the market, customer needs, competitive landscape, and technology change, we should expect our maturities to also change, including changing to a lower maturity rating. By embracing a focus on improvement and low level of shame , we encourage moving a maturity down. This is a strong indicator that we are realists about our product with an eye on achieving the best results for our customers. Scope We try to prevent maintaining functionality that is language or platform specific, because they slow down our ability to get results. Examples of how we handle it instead are: We don't make native mobile clients. Instead, we make sure our mobile web pages are great. We don't make native clients for desktop operating systems. We make our web application great‚Äîfor example, GitLab was the first to have merge conflict resolution in our web application. People can also use Tower or other clients. For language translations, we rely on the wider community . For code navigation, we're hesitant to introduce navigation improvements that only work for a subset of languages. For building and testing with Auto DevOps , we use Heroku Buildpacks. Outside our scope are Kubernetes and everything it depends on: Network (fabric) Flannel , Openflow, VMware NSX, Cisco ACI Proxy (layer 7) Envoy , nginx , HAProxy , traefik Ingress (north/south) Contour , Ambassador , Service mesh (east/west) Istio , Linkerd Container Scheduler we mainly focus on Kubernetes, other container schedulers are: CloudFoundry, OpenStack, OpenShift, Mesos DCOS, Docker Swarm, Atlas/Terraform, Nomad , Deis , Convox , Flynn , Tutum , GiantSwarm , Rancher Package manager Helm , ksonnet Operating System Ubuntu, CentOS, RHEL , CoreOS , Alpine Linux During a presentation of Kubernetes, Brendan Burns talks about the four Ops layers at the 2:00 mark : Application Ops Cluster Ops Kernel/OS Ops Hardware Ops GitLab helps you mainly with application ops. And where needed, we also allow you to monitor clusters and link them to application environments. But we intend to use vanilla Kubernetes, instead of something specific to GitLab. Also outside our scope are products that are not specific to developing, securing, or operating applications and digital products. Identity management: Okta and Duo, you use this mainly with SaaS applications you don't develop, secure, or operate. SaaS integration: Zapier and IFTTT Ecommerce: Shopify In scope are things that are not mainly for SaaS applications: Network security, since it overlaps with application security to some extent. Security information and event management (SIEM), since that measures applications and network. Office productivity applications, since \"We believe that all digital products should be open to contributions, from legal documents to movie scripts and from websites to chip designs\" We expect GitLab to continue to grow, and we have several ideas for possible future stages Quarterly Objectives and Key Results (OKRs) To make sure our goals are clearly defined and aligned throughout the organization, we make use of OKRs (Objectives and Key Results). Our quarterly Objectives and Key Results are publicly viewable. How we plan releases At GitLab, we strive to be ambitious , maintain a strong sense of urgency, and set aspirational targets with every release. The direction items we highlight in our kickoff are a reflection of this ambitious planning. When it comes to execution, we aim for velocity over predictability . This way, we optimize our planning time to focus on the top of the queue and deliver things fast. We schedule 100% of what we can accomplish based on past Development Department merge request rate and availability factors (vacation, contribute, etc.). See our product handbook on how we prioritize . Previous releases On our releases page , you can find an overview of the most important features of recent releases and links to the blog posts for each release. Upcoming releases GitLab releases a new version every single month . You can find the major planned features for upcoming releases on our upcoming releases page or see the upcoming features for paid tiers . Note that we often move things around, do things that are not listed, and cancel things that are listed. ML/AI at GitLab With Gitlab 15.4, Suggested Reviewers was released as our first customer-facing ML/AI technology in production features. We have additional ambitions in the near future for several types of problems. This is the focus of our new ModelOps stage . Cross-Stage efforts GitLab consistently strives to deliver a cohesive experience that enables workflows that span the DevSecOps loop. We have a number of existing capabilities and planned improvements that do just that: TBA Footnotes IDC, Worldwide DevOps Software Tools Forecast, 2020‚Äì2024, Doc # US45188520, July 2020  View source",
    "headings": [
      "GitLab Direction",
      "On this page",
      "3-year strategy",
      "Situation",
      "Strategic challenges",
      "Product Strategy",
      "Fiscal year product investment themes",
      "FY26",
      "Key Principles Driving Themes",
      "R&D Investment Themes",
      "FY25",
      "Key Principles Driving Themes",
      "R&D Investment Themes",
      "DevSecOps stages",
      "Your contributions",
      "Personas",
      "Mitigating low-end disruption",
      "Maturity",
      "Scope",
      "Quarterly Objectives and Key Results (OKRs)",
      "How we plan releases",
      "Previous releases",
      "Upcoming releases",
      "ML/AI at GitLab",
      "Cross-Stage efforts"
    ],
    "word_count": 4096,
    "extracted_at": "2025-07-21 20:15:26"
  }
]